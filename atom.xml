<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coolqi`s Blog</title>
  
  <subtitle>Every day is always sleepy.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coolqi.top/"/>
  <updated>2019-07-05T21:48:34.437Z</updated>
  <id>https://coolqi.top/</id>
  
  <author>
    <name>Coolqi.Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JsBridge 第三篇 - Native 调用 H5 代码</title>
    <link href="https://coolqi.top/2019/05/23/JsBridge3-Native--%3EH5Codes/"/>
    <id>https://coolqi.top/2019/05/23/JsBridge3-Native--&gt;H5Codes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-05T21:48:34.437Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 android 中，我们通过如下方式，使用 jsBridge 框架来和 H5 通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>这里涉及到 2 个交互接口：</p><ul><li>webView.callHandler：有回调；</li><li>webView.send：没有回调；</li></ul><p>下面我会来分析下这两个方法的调用链，这会涉及到 jsBridge 中其他的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|____Message.java</span><br><span class="line">|____WebViewJavascriptBridge.java</span><br><span class="line">|____DefaultHandler.java</span><br><span class="line">|____BridgeWebView.java</span><br><span class="line">|____BridgeWebViewClient.java</span><br><span class="line">|____CallBackFunction.java</span><br><span class="line">|____BridgeHandler.java</span><br><span class="line">|____BridgeUtil.java</span><br></pre></td></tr></table></figure><p>在分析交互流程的时候，我们会详细分析每个类的内部逻辑！</p><h1 id="2-BridgeWebView"><a href="#2-BridgeWebView" class="headerlink" title="2 BridgeWebView"></a>2 BridgeWebView</h1><p>我们从 BridgeWebView 开始，先看看内部的一些重要成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】native 的回调函数 map，key 是 id，value 是具体的回调对象；</span></span><br><span class="line">Map&lt;String, CallBackFunction&gt; responseCallbacks = <span class="keyword">new</span> HashMap&lt;String, CallBackFunction&gt;();</span><br><span class="line"><span class="comment">//【2】native 处理 js 消息的 handler map，key 是 handler name，value 是具体的 handler</span></span><br><span class="line">Map&lt;String, BridgeHandler&gt; messageHandlers = <span class="keyword">new</span> HashMap&lt;String, BridgeHandler&gt;();</span><br><span class="line"><span class="comment">//【3】默认的 handler，默认是它处理 js 的消息；</span></span><br><span class="line">BridgeHandler defaultHandler = <span class="keyword">new</span> DefaultHandler();</span><br><span class="line"><span class="comment">//【4】native 发送给 js 的 message 列表；</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Message&gt; startupMessage = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br></pre></td></tr></table></figure></p><p>不多说了。</p><h2 id="2-1-callHandler"><a href="#2-1-callHandler" class="headerlink" title="2.1 callHandler"></a>2.1 callHandler</h2><p>我们先分析有回调的接口的交互流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callHandler 方法指定了 js 使用哪个 Handler 处理 native 的消息！</p><p>这里指定了 js 用于处理的 handler name 是 “functionInJs”！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callHandler</span><span class="params">(String handlerName, String data, CallBackFunction callBack)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2】调用另外一个方法：</span></span><br><span class="line">    doSend(handlerName, data, callBack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去看看 doSend 方法：</p><h2 id="2-2-doSend"><a href="#2-2-doSend" class="headerlink" title="2.2 doSend"></a>2.2 doSend</h2><p>继续分析 doSend 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String handlerName, String data, CallBackFunction responseCallback)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//【1】创建一个消息；</span></span><br><span class="line">Message m = <span class="keyword">new</span> Message();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(data)) &#123;</span><br><span class="line">    <span class="comment">//【2】设置 data 数据；</span></span><br><span class="line">m.setData(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【3】如果需要回调，那么会创建回调 id（String）</span></span><br><span class="line"><span class="keyword">if</span> (responseCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT, ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));</span><br><span class="line">responseCallbacks.put(callbackStr, responseCallback);</span><br><span class="line">m.setCallbackId(callbackStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4】如果指定了 handler，那么设置 handlerName；</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(handlerName)) &#123;</span><br><span class="line">m.setHandlerName(handlerName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【*2.3】将消息送入队列；</span></span><br><span class="line">queueMessage(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，会创建一个 Message 对象，封装要发给 js 的消息；</p><p>同时注意到，native 的回调并没有传递给 js，而是保存在了内部的一个 responseCallbacks 哈希表中；</p><p>实际传递给 js 的是 callbackId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.data  <span class="comment">// native 发送的数据</span></span><br><span class="line">Message.callbackId  <span class="comment">// native 回调函数的 id</span></span><br><span class="line">Message.handlerName <span class="comment">// js 处理数据的 handlerName；</span></span><br></pre></td></tr></table></figure><p>最后就是把 message 放入到 message list；</p><h2 id="2-3-queueMessage"><a href="#2-3-queueMessage" class="headerlink" title="2.3 queueMessage"></a>2.3 queueMessage</h2><p>将 message 放入到 message list；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【1】将消息加入到 message list 中；</span></span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【*2.4】特殊情况，直接发送 message！</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里默认是会将 message 添加到 startupMessage 消息列表中，然后 webview 会处理 message list！</p><p>那么在哪里会处理呢？</p><p>前面我们分析过，在网页加载好后，会出发 BridgeWebViewClient.onPageFinished 方法，就会启动 native 的消息处理循环！</p><p><strong>见 【3.1】 节</strong>；</p><h2 id="2-4-dispatchMessage"><a href="#2-4-dispatchMessage" class="headerlink" title="2.4 dispatchMessage"></a>2.4 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*4.2】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【1】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【2】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【3】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【*<span class="number">5.1</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_HANDLE_MESSAGE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._handleMessageFromNative('%s');"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，执行的 js 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</span><br></pre></td></tr></table></figure><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p><h2 id="2-5-handlerReturnData"><a href="#2-5-handlerReturnData" class="headerlink" title="2.5 handlerReturnData"></a>2.5 handlerReturnData</h2><p>拦截 url 并处理信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">f.onCallBack(data);</span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebViewClient"><a href="#3-BridgeWebViewClient" class="headerlink" title="3 BridgeWebViewClient"></a>3 BridgeWebViewClient</h1><p>WebViewClient 是用于处理各种事件的回调。</p><h2 id="3-1-onPageFinished"><a href="#3-1-onPageFinished" class="headerlink" title="3.1 onPageFinished"></a>3.1 onPageFinished</h2><p>当 H5 页面加载完成后，会 WebViewClient 方法会处罚；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    <span class="comment">//【1】动态注入 js 协议脚本，这个我们之前有讲过；</span></span><br><span class="line">    <span class="keyword">if</span> (BridgeWebView.toLoadJs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*2.5】这里会遍历 BridgeWebView.startupMessage 分发 native 消息；</span></span><br><span class="line">    <span class="keyword">if</span> (webView.getStartupMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Message m : webView.getStartupMessage()) &#123;</span><br><span class="line">            <span class="comment">//【*2.5】分发 native 消息；</span></span><br><span class="line">            webView.dispatchMessage(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*2.3】注意：这里将 BridgeWebView.startupMessage 设置为 null 了</span></span><br><span class="line">        <span class="comment">// 那么下次就不用将消息加入 list 了，而是直接 dispatch 了！</span></span><br><span class="line">        webView.setStartupMessage(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】调用其他函数处理 url！</span></span><br><span class="line">    onCustomPageFinishd(view,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来最终调用了 webView.dispatchMessage 方法！</p><h2 id="3-2-shouldOverrideUrlLoading"><a href="#3-2-shouldOverrideUrlLoading" class="headerlink" title="3.2 shouldOverrideUrlLoading"></a>3.2 shouldOverrideUrlLoading</h2><p>我们来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得动态创建的 url</span></span><br><span class="line">        url = URLDecoder.decode(url, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.2】此时是返回数据，url 携带数据；</span></span><br><span class="line">    <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_RETURN_DATA)) &#123;</span><br><span class="line">        <span class="comment">//【*3.5】native 解析 js 返回的数据；</span></span><br><span class="line">        webView.handlerReturnData(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.1】此时是提醒 native，js 有数据返回；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_OVERRIDE_SCHEMA)) &#123; </span><br><span class="line">        <span class="comment">//【*3.3】native 再次和 js 通信，获取数据；</span></span><br><span class="line">        webView.flushMessageQueue();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 定义了如下的 url 前缀规则：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_OVERRIDE_SCHEMA = <span class="string">"yy://"</span>;</span><br><span class="line"><span class="comment">//【1】表示 js 有数据返回，提醒 native 去读取数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_RETURN_DATA = YY_OVERRIDE_SCHEMA + <span class="string">"return/"</span>;</span><br><span class="line"><span class="comment">//【2】该 url 会携带 js 返回的数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_FETCH_QUEUE = YY_RETURN_DATA + <span class="string">"_fetchQueue/"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-flushMessageQueue"><a href="#3-3-flushMessageQueue" class="headerlink" title="3.3 flushMessageQueue"></a>3.3 flushMessageQueue</h2><p>核心方法，从 js 的队列里获取要发送给 native 的 message：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.4】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//【*3.3.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    <span class="comment">//【3.1】获得 native 在 callHandler 是设定的回调函数！</span></span><br><span class="line">CallBackFunction function = responseCallbacks.get(responseId);</span><br><span class="line"><span class="comment">//【3.2】获得回调数据；</span></span><br><span class="line">String responseData = m.getResponseData();</span><br><span class="line"><span class="comment">//【--&gt;*2.1】native 处理数据，这里又回到了 callHandler 哪里！</span></span><br><span class="line">function.onCallBack(responseData);</span><br><span class="line"><span class="comment">//【3.3】移除 native 注册的回调函数！</span></span><br><span class="line">responseCallbacks.remove(responseId);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这种情况是属于，js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"><span class="comment">//【--&gt;*2.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面部分的代码（【4】)），是和 H5 调用 Native 代码相关的，我们不过多关注！</p><p>BridgeUtil 定义了指定 js 协议的 _fetchQueue 方法的命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_FETCH_QUEUE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._fetchQueue();"</span>;</span><br></pre></td></tr></table></figure></p><p>下面去看一下 loadUrl：</p><h2 id="3-4-loadUrl"><a href="#3-4-loadUrl" class="headerlink" title="3.4 loadUrl"></a>3.4 loadUrl</h2><p>参数 jsUrl 是 <strong>javascript:WebViewJavascriptBridge._fetchQueue();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.1】BridgeUtil.parseFunctionName 对 jsUrl 做了处理，以结果作为 key！</p><p>处理入下：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>这样是有好处了，因为 returnCallback 根据协议是可以复用的，所以这里也保存在了 responseCallbacks 中！！</p><p><br></p><p>responseCallbacks 之前我们有分析过！<strong>此时 responseCallbacks 放入了 2 个 native 的回调！</strong></p><h2 id="3-5-handlerReturnData"><a href="#3-5-handlerReturnData" class="headerlink" title="3.5 handlerReturnData"></a>3.5 handlerReturnData</h2><p>改方法用于处理 js 返回给 native 的回调数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【*7.3」获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.2】BridgeUtil.getFunctionFromReturnUrl 对 url 再次做了处理，前面在 【3.3】 flushMessageQueue，我们将另一个解析回调以 _fetchQueue 为 key，保存到了 responseCallbacks 中，这里是触发他的时候了！</p><h1 id="4-Message"><a href="#4-Message" class="headerlink" title="4 Message"></a>4 Message</h1><p>该对象用于封装 native 和 js 交互的信息：</p><h2 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1 属性"></a>4.1 属性</h2><p>我们来看看他的基本属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// native --&gt; js: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line">   <span class="comment">// js --&gt; native: js 回调的 id，用于处理 native 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String callbackId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// js --&gt; native: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String responseId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js --&gt; native: js 发送给 native 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String responseData; <span class="comment">// js 的回调信息，json string；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: native 发送给 js 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String data; </span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: 处理 native 信息的 js handler name；</span></span><br><span class="line"><span class="keyword">private</span> String handlerName;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="4-2-toJson"><a href="#4-2-toJson" class="headerlink" title="4.2 toJson"></a>4.2 toJson</h2><p>将 Message 转为 json string！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JSONObject jsonObject= <span class="keyword">new</span> JSONObject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jsonObject.put(CALLBACK_ID_STR, getCallbackId()); <span class="comment">// callbackId</span></span><br><span class="line">        jsonObject.put(DATA_STR, getData()); <span class="comment">// data</span></span><br><span class="line">        jsonObject.put(HANDLER_NAME_STR, getHandlerName()); <span class="comment">// handlerName</span></span><br><span class="line">        String data = getResponseData();</span><br><span class="line">        <span class="comment">//【3】这个地方我有些疑问，不知道作者为啥这样写</span></span><br><span class="line">        <span class="comment">// 值永远会被第三个覆盖掉；</span></span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(data)) &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, <span class="keyword">new</span> JSONTokener(data).nextValue());</span><br><span class="line">        &#125;</span><br><span class="line">        jsonObject.put(RESPONSE_DATA_STR, getResponseData()); <span class="comment">// responseData</span></span><br><span class="line">        jsonObject.put(RESPONSE_ID_STR, getResponseId()); <span class="comment">// responseId</span></span><br><span class="line">        <span class="keyword">return</span> jsonObject.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的参数我就不说了，很简单！</p><h1 id="5-WebViewJavascriptBridge"><a href="#5-WebViewJavascriptBridge" class="headerlink" title="5 WebViewJavascriptBridge"></a>5 WebViewJavascriptBridge</h1><p>最后进入了通信协议 js 脚本：</p><h2 id="5-1-handleMessageFromNative"><a href="#5-1-handleMessageFromNative" class="headerlink" title="5.1 _handleMessageFromNative"></a>5.1 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_handleMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*5.2】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="5-2-dispatchMessageFromNative"><a href="#5-2-dispatchMessageFromNative" class="headerlink" title="5.2 _dispatchMessageFromNative"></a>5.2 _dispatchMessageFromNative</h2><p>js 处理 native 层的消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_dispatchMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【1】获得 message json 对象；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这个地方是 js 回调的地方，我们先不看；</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】很显然，此时会进入这里，因为我们设置了 callbackId！</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【3】获得 callbackId！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                <span class="comment">//【*5.2.1】创建 js 回调函数，当回调触发后，会执行 doSend 方法！</span></span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*5.3】将结果以回调形式发送给 native！</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        <span class="comment">//【4】注意这里，Message.callbackId 的值赋给了 Message.responseId</span></span><br><span class="line">                        <span class="comment">// Message.responseData 用于保存回调数据；</span></span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】选择合适的 handler 去处理 native message。</span></span><br><span class="line">            <span class="comment">// 没有指定 handler，就用默认的！</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.1】handler 其实就是一个函数，这个在通信协议 js 有分析过！</span></span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后会选择合适的 handler，将 native message 和 js 回调函数交给 handler 处理！</p><h2 id="5-3-doSend"><a href="#5-3-doSend" class="headerlink" title="5.3 _doSend"></a>5.3 _doSend</h2><p>将结果以回调形式发送给 native！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】responseCallback 不为 null，说明 native 需要回调通知，这里将 responseCallback</span></span><br><span class="line">    <span class="comment">// 保存到 responseCallbacks 的意义是：可以建立双向通信！</span></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【2】为该 responseCallback 创建 id，并将 id：responseCallback 的映射关系</span></span><br><span class="line">        <span class="comment">// 保存到 responseCallbacks 数组中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】将 id 保存到 message.callbackId 中；！</span></span><br><span class="line">        <span class="comment">// 因为此时 message 用于保存 js 发给 native 的数据，所以 message.callbackId 保存了 js 的回调函数，</span></span><br><span class="line">        <span class="comment">// 这样 native 就可以和 js 双向通信了！</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】将消息保存到 sendMessageQueue 中，然后创建 url，</span></span><br><span class="line">    <span class="comment">//【*3.2】这样 BridgeWebViewClient.shouldOverrideUrlLoading 就能拦截这个 url 了；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>responseCallback 实际上是 js 处理 native 消息的回调函数，这里给 responseCallback 也分配了一个 id，并保存到 responseCallbacks 中！</p><p>目的很明显，是为了建立双向通信！</p><p><br></p><p>到这里 Message 中的数据发生了变化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.responseId  <span class="comment">// native 的回调函数 id</span></span><br><span class="line">Message.callbackId  <span class="comment">// js 的回调函数 id</span></span><br><span class="line">Message.responseData <span class="comment">// js 发送的回调数据；</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>这里创建了一个 url：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//__QUEUE_MESSAGE__/</span></span><br></pre></td></tr></table></figure><p>这个方法会导致 BridgeWebViewClient.shouldOverrideUrlLoading 触发！</p><h2 id="5-4-fetchQueue"><a href="#5-4-fetchQueue" class="headerlink" title="5.4 _fetchQueue"></a>5.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_fetchQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.2.2】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里生成了一个新的 url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//://return/_fetchQueue/[&#123;"responseId":"xxxxxxx","responseData":"xxxxxxxxxx"&#125;]</span></span><br></pre></td></tr></table></figure><p>再次回到了 shouldOverrideUrlLoading：</p><h1 id="6-H5-页面初始化-js-脚本"><a href="#6-H5-页面初始化-js-脚本" class="headerlink" title="6 H5 页面初始化 js 脚本"></a>6 H5 页面初始化 js 脚本</h1><p>在 jsBridge 框架中，当 js 协议脚本被动态注入到 H5 中时，会触发 H5 页面中的初始化 js 脚本，该脚本会初始化 js 的 handler：</p><h2 id="6-1-connectWebViewJavascriptBridge"><a href="#6-1-connectWebViewJavascriptBridge" class="headerlink" title="6.1 connectWebViewJavascriptBridge"></a>6.1 connectWebViewJavascriptBridge</h2><p>可以看到，H5 页面注册的 js handler 的名字就是 “functionInJs” 这个和前面 callHandler 相符合了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="comment">//【1】后面的 function 就是我们的 handler。</span></span><br><span class="line">    bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">        <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">            <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">            <span class="comment">//【*5.2.1】js 处理完 message 后，回调 responseCallback 接口！</span></span><br><span class="line">            <span class="comment">// 其实就是【*5.2】创建的回调，会触发 _doSend 方法！</span></span><br><span class="line">            responseCallback(responseData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个在前面的 js 通信协议中有分析过，不多说了！</p><h1 id="7-BridgeUtil"><a href="#7-BridgeUtil" class="headerlink" title="7 BridgeUtil"></a>7 BridgeUtil</h1><p>工具类，包含一些解析方法和协议头常量：</p><h2 id="7-1-parseFunctionName"><a href="#7-1-parseFunctionName" class="headerlink" title="7.1 parseFunctionName"></a>7.1 parseFunctionName</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url 的一个例子：javascript:WebViewJavascriptBridge._fetchQueue();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseFunctionName</span><span class="params">(String jsUrl)</span></span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回_fetchQueue</span></span><br><span class="line"><span class="keyword">return</span> jsUrl.replace(<span class="string">"javascript:WebViewJavascriptBridge."</span>, <span class="string">""</span>).replaceAll(<span class="string">"\\(.*\\);"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 js 创建 url，通知 native 有回调消息后调用的！</p><h2 id="7-2-getFunctionFromReturnUrl"><a href="#7-2-getFunctionFromReturnUrl" class="headerlink" title="7.2 getFunctionFromReturnUrl"></a>7.2 getFunctionFromReturnUrl</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFunctionFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】去掉 "yy://return/";</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line"><span class="comment">//【2】去掉 "/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]"</span></span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//【3】我们得到了 key，也就是 functionName；</span></span><br><span class="line"><span class="keyword">return</span> functionAndData[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的！</p><h2 id="7-3-getDataFromReturnUrl"><a href="#7-3-getDataFromReturnUrl" class="headerlink" title="7.3 getDataFromReturnUrl"></a>7.3 getDataFromReturnUrl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(url.startsWith(YY_FETCH_QUEUE)) &#123;</span><br><span class="line"><span class="comment">//【1】返回了 [&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="keyword">return</span> url.replace(YY_FETCH_QUEUE, EMPTY_STR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// temp = _fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"Javascript Says Right back aka!"&#125;]</span></span><br><span class="line"><span class="comment">//【2】对另外一种情况的处理</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; functionAndData.length; i++) &#123;</span><br><span class="line">sb.append(functionAndData[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//【3】返回结果是一样的！</span></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的，并且在【7.2】调用以后才调用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第四篇 - H5 调用 Native 代码</title>
    <link href="https://coolqi.top/2019/05/23/JsBridge4-H5--%3ENativeCodes/"/>
    <id>https://coolqi.top/2019/05/23/JsBridge4-H5--&gt;NativeCodes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-07T00:42:28.696Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 js 中，我们通过如下方式，使用 jsBridge 框架来和 Native 通信：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line"><span class="comment">//【1】通过 js 通信协议 send 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">    data</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】通过 js 通信协议 callHandler 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">    <span class="string">'submitFromWeb'</span></span><br><span class="line">    , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>send 方法</strong>；用客户端默认的 handler 处理；</li><li><strong>callHandler 方法</strong>：用指定的 handler 处理；</li></ul><p>下面我们来分析下 callHandler 和 send 方法！</p><h1 id="2-WebViewJavascriptBridge"><a href="#2-WebViewJavascriptBridge" class="headerlink" title="2 WebViewJavascriptBridge"></a>2 WebViewJavascriptBridge</h1><p>接下来进入了 js 通信协议文件中：</p><h2 id="2-1-send"><a href="#2-1-send" class="headerlink" title="2.1 send"></a>2.1 send</h2><p>用客户端默认的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-callHandler"><a href="#2-2-callHandler" class="headerlink" title="2.2 callHandler"></a>2.2 callHandler</h2><p>用指定的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-doSend"><a href="#2-3-doSend" class="headerlink" title="2.3 _doSend"></a>2.3 _doSend</h2><p>最后都调用了 _doSend 的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sendMessage add message, 触发native处理 sendMessage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;  </span><br><span class="line">        <span class="comment">//【1】创建了一个 calbackId，并将 id 和 callback 的映射关系保存到 responseCallbacks 中；</span></span><br><span class="line">        <span class="comment">// 将 callbackId 保存到 message 中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】将消息保存到 sendMessageQueue 中，创建动态 url，通知 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【3】yy://__QUEUE_MESSAGE__，最终会触发如下方法</span></span><br><span class="line">    <span class="comment">//【--&gt;*3.1】BridgeWebView.flushMessageQueue</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在前面分析过了，和前面的类似。</p><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.flushMessageQueue</span><br></pre></td></tr></table></figure><h2 id="2-4-fetchQueue"><a href="#2-4-fetchQueue" class="headerlink" title="2.4 _fetchQueue"></a>2.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_fetchQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;*3.3】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里生成了一个新的 url：</p><blockquote><p>yy://://return/_fetchQueue/[{“responseId”:”xxxxxxx”,”responseData”:”xxxxxxxxxx”}]</p></blockquote><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.handlerReturnData</span><br></pre></td></tr></table></figure><h2 id="2-5-handleMessageFromNative"><a href="#2-5-handleMessageFromNative" class="headerlink" title="2.5 _handleMessageFromNative"></a>2.5 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_handleMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;*2.6】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="2-6-dispatchMessageFromNative"><a href="#2-6-dispatchMessageFromNative" class="headerlink" title="2.6 _dispatchMessageFromNative"></a>2.6 _dispatchMessageFromNative</h2><p>js 处理 native 层的回调消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_dispatchMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【1】这里 js 处理消息回调，不多说了！</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这里是处理 java 回调的，之前分析过；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebView"><a href="#3-BridgeWebView" class="headerlink" title="3 BridgeWebView"></a>3 BridgeWebView</h1><h2 id="3-1-flushMessageQueue"><a href="#3-1-flushMessageQueue" class="headerlink" title="3.1 flushMessageQueue"></a>3.1 flushMessageQueue</h2><p>native 读取 js 的命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.2】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*3.1.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。</span></span><br><span class="line"><span class="comment">// 此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    ... ... ... ...<span class="comment">// 这里前面有分析过；</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这里是我们要关注的地方：</span></span><br><span class="line">    <span class="comment">// 这种情况是属于 js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;*3.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的 message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看大了，给 js 反馈回调的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br></pre></td></tr></table></figure><p>js 传入的 callbackId 被设置到了 responseId 上了；</p><h2 id="3-2-loadUrl"><a href="#3-2-loadUrl" class="headerlink" title="3.2 loadUrl"></a>3.2 loadUrl</h2><p>参数 jsUrl 是 javascript:WebViewJavascriptBridge._fetchQueue();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有分析过，对 js 命令做了处理，生成了 key：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>用于保存回调；</p><h2 id="3-3-handlerReturnData"><a href="#3-3-handlerReturnData" class="headerlink" title="3.3 handlerReturnData"></a>3.3 handlerReturnData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【--&gt;3*7.2】获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.1.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发前面的 _fetchQueue 对应的回调；</p><h2 id="3-4-queueMessage"><a href="#3-4-queueMessage" class="headerlink" title="3.4 queueMessage"></a>3.4 queueMessage</h2><p>加入 message list：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.5】分发 message 给 js；</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-dispatchMessage"><a href="#3-5-dispatchMessage" class="headerlink" title="3.5 dispatchMessage"></a>3.5 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【2】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【3】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【4】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【--&gt;*<span class="number">2.5</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><blockquote><p>final static String JS_HANDLE_MESSAGE_FROM_JAVA =<br>“javascript:WebViewJavascriptBridge._handleMessageFromNative(‘%s’);”;</p></blockquote><p>可以看到，执行的 js 代码如下：</p><blockquote><p>javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</p></blockquote><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第二篇 - js 通信协议分析</title>
    <link href="https://coolqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/"/>
    <id>https://coolqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/</id>
    <published>2019-05-21T12:46:25.000Z</published>
    <updated>2019-07-03T22:46:15.585Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-初步分析"><a href="#1-初步分析" class="headerlink" title="1 初步分析"></a>1 初步分析</h1><p>下面分析下 jsBridge 框架的通信协议，他是实际上是一个 js 文件，位于 assets 目录下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>这个 js 文件作为协议，决定了 H5 和 Native 代码通信方式和通信数据！</p><p><br> </p><p>这里就有一个问题了，他是如何被加载并生效的呢，有两种方式：</p><ul><li>第一种方式：通过 H5 直接加载；</li><li>第二种方式：通过动态注入的方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br></pre></td></tr></table></figure><p>我们的 jsBridge 框架也是用的第二种方式，具体的逻辑我们后面再分析；</p><h1 id="2-协议代码分析"><a href="#2-协议代码分析" class="headerlink" title="2 协议代码分析"></a>2 协议代码分析</h1><p>下面我们分析下 js 协议代码的逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断变量 WebViewJavascriptBridge 是否初始化过了；</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这里来看的话，其实他是一个 js function，当我们将 js 动态注入到 H5 中时，这么这个 function 就会执行；</p><h2 id="2-1-内部关键变量"><a href="#2-1-内部关键变量" class="headerlink" title="2.1 内部关键变量"></a>2.1 内部关键变量</h2><p>js 文件中定义了一些关键的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> messagingIframe; <span class="comment">// 这两个变量用与 android 获取 js 的数据；</span></span><br><span class="line"><span class="keyword">var</span> bizMessagingIframe;</span><br><span class="line"><span class="keyword">var</span> sendMessageQueue = [];  <span class="comment">// 发送的消息队列，H5 传递给 Native</span></span><br><span class="line"><span class="keyword">var</span> receiveMessageQueue = []; <span class="comment">// 接受的消息队列，Native 传递给 H5</span></span><br><span class="line"><span class="keyword">var</span> messageHandlers = &#123;&#125;; <span class="comment">// js 处理 native 消息的 handler 数组！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CUSTOM_PROTOCOL_SCHEME = <span class="string">'yy'</span>; <span class="comment">// 消息的 scheme，类似与 file，content；</span></span><br><span class="line"><span class="keyword">var</span> QUEUE_HAS_MESSAGE = <span class="string">'__QUEUE_MESSAGE__/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> responseCallbacks = &#123;&#125;; <span class="comment">// js 端的回调数组；</span></span><br><span class="line"><span class="keyword">var</span> uniqueId = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个很重要，window.WebViewJavascriptBridge 是 H5 和 Native 通信的</span></span><br><span class="line"><span class="comment">// 关键点！</span></span><br><span class="line"><span class="keyword">var</span> WebViewJavascriptBridge = <span class="built_in">window</span>.WebViewJavascriptBridge = &#123;</span><br><span class="line">    init: init,</span><br><span class="line">    send: send,</span><br><span class="line">    registerHandler: registerHandler,</span><br><span class="line">    callHandler: callHandler,</span><br><span class="line">    _fetchQueue: _fetchQueue,</span><br><span class="line">    _handleMessageFromNative: _handleMessageFromNative</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面最关键的一个对象就是 WebViewJavascriptBridge，H5 和 Native 都会通过它。</p><p>这个 window.WebViewJavascriptBridge 内部包含了一些函数对象，这些 function 都定义在 js 内部！</p><h2 id="2-2-动态注入初始化"><a href="#2-2-动态注入初始化" class="headerlink" title="2.2 动态注入初始化"></a>2.2 动态注入初始化</h2><p>这里是很关键的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">//【1】创建消息队列，一个是 index，一个是消息体；</span></span><br><span class="line">_createQueueReadyIframe(doc);</span><br><span class="line">_createQueueReadyIframe4biz(doc);</span><br><span class="line"><span class="comment">//【2】创建一个 event，类型为 'WebViewJavascriptBridgeReady'</span></span><br><span class="line"><span class="comment">// 然后分发 event；</span></span><br><span class="line"><span class="keyword">var</span> readyEvent = doc.createEvent(<span class="string">'Events'</span>);</span><br><span class="line">readyEvent.initEvent(<span class="string">'WebViewJavascriptBridgeReady'</span>);</span><br><span class="line">readyEvent.bridge = WebViewJavascriptBridge;</span><br><span class="line">doc.dispatchEvent(readyEvent); <span class="comment">//【*2.2.1】关键点！！</span></span><br></pre></td></tr></table></figure><p>在动态注入的时候，会执行初始化的操作：</p><ul><li>创建了一个 event；</li><li>初始化 event，事件类型为 ‘WebViewJavascriptBridgeReady’；</li><li>readyEvent.bridge 设置为我们上面创建的 ‘WebViewJavascriptBridgeReady’ 对象；</li><li>doc.dispatchEvent 分发 event；</li></ul><p><br></p><p><strong>这个 event 是在哪里做响应</strong>的呢？</p><p>是在 H5 里面，这个 H5 在加载时候，会执行内部 js 脚本，并通过 document.addEventListener 方法设置该 event 的监听器；</p><h3 id="2-2-1-H5-加载启动-event-监听"><a href="#2-2-1-H5-加载启动-event-监听" class="headerlink" title="2.2.1 H5 加载启动 event 监听"></a>2.2.1 H5 加载启动 event 监听</h3><p>H5 的页面里面，是有下面的一段 js 脚本，在 webview.loadUrl 后会直接加载该 js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">... ... ...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectWebViewJavascriptBridge</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="comment">//【2】如果 window.WebViewJavascriptBridge 已经存在</span></span><br><span class="line">        <span class="comment">// 直接执行函数闭包；</span></span><br><span class="line">        callback(WebViewJavascriptBridge)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】否则我们就注册一个 EventListener，监听 WebViewJavascriptBridgeReady 事件；</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(</span><br><span class="line">            <span class="string">'WebViewJavascriptBridgeReady'</span></span><br><span class="line">            , <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 事件出发后，执行函数闭包；</span></span><br><span class="line">                callback(WebViewJavascriptBridge)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】执行 connectWebViewJavascriptBridge 方法，传入了一个 js 闭包;</span></span><br><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//【*2.2.2】下一步初始化！</span></span><br><span class="line">     ... ... ... ...</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，window.WebViewJavascriptBridge 不存在，那么会注册一个 EventListener！</p><p>等待 event 触发后，执行 callback！</p><h3 id="2-2-2-event-出发点后下一步初始化"><a href="#2-2-2-event-出发点后下一步初始化" class="headerlink" title="2.2.2 event 出发点后下一步初始化"></a>2.2.2 event 出发点后下一步初始化</h3><p>callback 实际上就是闭包，参数 bridge 就是 js 协议中创建的 var WebViewJavascriptBridge：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 init 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'JS got a message'</span>, message);</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        <span class="string">'Javascript Responds'</span>: <span class="string">'测试中文!'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'JS responding with'</span>, data);</span><br><span class="line">        <span class="comment">//【1】函数闭包出发后，会回调 responseCallback</span></span><br><span class="line">        responseCallback(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 registerHandler 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">        <span class="comment">//【2】函数闭包出发后，会回调 responseCallback，通知 native；</span></span><br><span class="line">        responseCallback(responseData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于 init 和 registerHandler 我们会在下面分析：</p><h2 id="2-3-核心函数"><a href="#2-3-核心函数" class="headerlink" title="2.3 核心函数"></a>2.3 核心函数</h2><p>下面来分析下关键的协议函数：</p><h3 id="2-3-1-init"><a href="#2-3-1-init" class="headerlink" title="2.3.1 init"></a>2.3.1 init</h3><p>init 方法用于设置 <strong>js 处理 native 消息的默认 handler</strong>：</p><p>同时也会<strong>分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">messageHandler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (WebViewJavascriptBridge._messageHandler) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'WebViewJavascriptBridge.init called twice'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】设置 js 用于处理 native 消息的 handler</span></span><br><span class="line">    <span class="comment">// 实际上就是【*2.2.2】中的函数闭包；</span></span><br><span class="line">    WebViewJavascriptBridge._messageHandler = messageHandler;</span><br><span class="line">    <span class="comment">//【2】分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</span></span><br><span class="line">    <span class="keyword">var</span> receivedMessages = receiveMessageQueue;</span><br><span class="line">    receiveMessageQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; receivedMessages.length; i++) &#123;</span><br><span class="line">        <span class="comment">//【*2.3.3】分发来自 native 的消息；</span></span><br><span class="line">        _dispatchMessageFromNative(receivedMessages[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 messageHandler 就是【*2.2.2】中的函数闭包；</p><h3 id="2-3-2-registerHandler"><a href="#2-3-2-registerHandler" class="headerlink" title="2.3.2 registerHandler"></a>2.3.2 registerHandler</h3><p><strong>注册特定的消息处理 handler</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerHandler</span>(<span class="params">handlerName, handler</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】实际上就是向数组中放值；</span></span><br><span class="line">    messageHandlers[handlerName] = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>messageHandlers 之前有说过，是 js 处理 native 消息的 handler 数组！</p><ul><li>index 是 handler 的名称，根据前面代码，名称是 “functionInJs”；</li><li>value 是一个函数闭包；</li></ul><h3 id="2-3-3-dispatchMessageFromNative"><a href="#2-3-3-dispatchMessageFromNative" class="headerlink" title="2.3.3 _dispatchMessageFromNative"></a>2.3.3 _dispatchMessageFromNative</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>分发来自 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_dispatchMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【2】JSON 字符串转化 JSON 对象 message；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【2】这里我们知道 native 发送消息完成，接下来 js 会处理消息，并将结果</span></span><br><span class="line">        <span class="comment">// 通过 callback 传递给 native 层；</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            <span class="comment">//【2.1】如果 native 指定了消息的 responseId，这种情况对应的情况是：</span></span><br><span class="line">            <span class="comment">// js 发送消息给 native，此时 native 发送回调消息给 js；</span></span><br><span class="line">            <span class="comment">// 那么我们就要在 responseCallback 数组中找到对应的 responseCallback</span></span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.2】然后执行 js 的 callback；</span></span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="comment">//【2.3】删掉该 callback</span></span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2.4】没有指定 responseId，但是指定了 callbackId，这种情况对应的是：</span></span><br><span class="line">            <span class="comment">// native 发送消息给 js，此时 js 发送回调消息给 native；</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【2.4.1】获得 callbackId，并创建一个 responseCallback</span></span><br><span class="line">                <span class="comment">// 实际上就是一个函数闭包，该闭包会执行 _doSend 方法！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*2.3.4】发送回调给 native，但是此时是不触发的，出发的点在下面；</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.5】找到处理 native 消息的 handler，如果没有指定 handlerName</span></span><br><span class="line">            <span class="comment">// 那么就是 init 方法注册的默认 handler；否则就是特定的 handler</span></span><br><span class="line">            <span class="comment">// 其实就是前面 "functionInJs" 对应的 handler；</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.6】这个 handler 其实就是一个函数闭包，见【*2.2.2】，最后会回调</span></span><br><span class="line">            <span class="comment">// responseCallback 接口，就是上面的 function；</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里看起来，似乎很清晰呢；</p><h3 id="2-3-4-doSend"><a href="#2-3-4-doSend" class="headerlink" title="2.3.4 _doSend"></a>2.3.4 _doSend</h3><p>这个方法是 <strong>js 层</strong>调用，用于<strong>发送消息给 native 端</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【1】计算回调 id；</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="comment">//【2】以 index 为回调 id，value 为具体的回调接口的形式，保存到 responseCallbacks 数组重；</span></span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】message.callbackId 为计算出的回调 id；</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】将该 message 加入到 sendMessageQueue 队列中，要发送给 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【6】这个地方会通过 messagingIframe.src 生成一个 Url，这会被 Webview.shouldOverrideUrlLoading 拦截到；</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意第二个参数 responseCallback：</p><ul><li>如果 responseCallback 不为 null，说明本次消息需要回调通知；</li><li>如果 responseCallback 为 null，说明不需要回调通知；</li></ul><p>该方法创建了一个动态的 url，这会被 Webview.shouldOverrideUrlLoading 拦截到，这是该库 android 获得 js 数据的方式；</p><p>但是这里并不是真正获取数据的地方，该 url 会触发一次 Webview.shouldOverrideUrlLoading；</p><p>然后 android 又会调用 js 的 _fetchQueue 方法，这时，又会生成一个 url，这个 url 才会保存了要传递给 android 的消息；</p><p>具体可以看 2.3.8 的 _fetchQueue 方法；</p><h3 id="2-3-5-callHandler"><a href="#2-3-5-callHandler" class="headerlink" title="2.3.5 callHandler"></a>2.3.5 callHandler</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><ul><li><strong>handlerName</strong>：js 处理消息的 handler 名称，这个 handler 是 <strong>native 层注册到 js 的</strong>；</li><li><strong>data</strong>：native 层传递的数据；</li><li><strong>responseCallback</strong>：接受回调的接口，native 层处理完数据会回调；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.3.4】调用 _doSend 方法发送消息给 js，注意这里第二个参数</span></span><br><span class="line">    <span class="comment">// 不为 null，因为 js 短需要收到回调；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里第二个参数不为 null，因为 js 短需要收到回调；</p><p>该方法设置 handlerName，所以 native 会使用指定 handlerName 的 handler 去处理；</p><h3 id="2-3-6-send"><a href="#2-3-6-send" class="headerlink" title="2.3.6 send"></a>2.3.6 send</h3><p>这个方法也是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，他并没有设置 handlerName，所以 native 会使用默认的 handler 去处理；</p><h3 id="2-3-7-handleMessageFromNative"><a href="#2-3-7-handleMessageFromNative" class="headerlink" title="2.3.7 _handleMessageFromNative"></a>2.3.7 _handleMessageFromNative</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>以 json string 的形式发送数据给 js</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_handleMessageFromNative</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那就直接添加到 receiveMessageQueue 队列中去；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3.3】处理 native 传递的数据；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很简单，就不多说了；</p><h3 id="2-3-8-fetchQueue"><a href="#2-3-8-fetchQueue" class="headerlink" title="2.3.8 _fetchQueue"></a>2.3.8 _fetchQueue</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>用于获取 sendMessageQueue 队列中的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_fetchQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后通过 shouldOverrideUrlLoading 方法拦截，捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，不多说了，关于 H5 和 Native 通信的流程，后续再分析！</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>关于 js 通信协议的相关分析到这里就结束了。</p><p>这里我自己也有点疑惑，对于 android 获取 js 数据的方式，该库并没有使用 @JavascriptInterface 注解，通过如下方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebView.addJavascriptInterface(<span class="keyword">new</span> WebData(), <span class="string">"webdata"</span>);</span><br></pre></td></tr></table></figure><p>通过查阅相关资料，可能有如下的原因：</p><ul><li><strong>安全隐患</strong>：这是因为同源规则 (SOP) 不适用与该方法，加上第三方 JavaScript 库或来自一个陌生域名的 iframe 可能在 Java 层访问这些被暴露的方法。因此，攻击者可通过一个 XSS 漏洞执行原生代码或者注入病毒代码到应用程序中。</li><li><strong>兼容性</strong>：JavaScript 层中暴露的 Java 对象的所有公有方法在 Android 版本低于 JerryBean MRI(API Level 17) 以下时可访问。而在 Google API 17 （4.２）以上，暴露的函数必须通过 @JavaScriptInterface 注释来防止方法的暴露</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-初步分析&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第一篇 - 框架整体结构和基本使用</title>
    <link href="https://coolqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/"/>
    <id>https://coolqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/</id>
    <published>2019-05-20T12:46:25.000Z</published>
    <updated>2019-07-03T22:41:04.612Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1 工程结构"></a>1 工程结构</h1><p>我们先来看看 lib 的主要文件结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|____src</span><br><span class="line">| |____main</span><br><span class="line">| | |____java</span><br><span class="line">| | | |____com</span><br><span class="line">| | | | |____github</span><br><span class="line">| | | | | |____lzyzsd</span><br><span class="line">| | | | | | |____jsbridge</span><br><span class="line">| | | | | | | |____Message.java</span><br><span class="line">| | | | | | | |____WebViewJavascriptBridge.java</span><br><span class="line">| | | | | | | |____DefaultHandler.java</span><br><span class="line">| | | | | | | |____BridgeWebView.java</span><br><span class="line">| | | | | | | |____BridgeWebViewClient.java</span><br><span class="line">| | | | | | | |____CallBackFunction.java</span><br><span class="line">| | | | | | | |____BridgeHandler.java</span><br><span class="line">| | | | | | | |____BridgeUtil.java</span><br><span class="line">| | |____assets</span><br><span class="line">| | | |____WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>可以看到，核心的代码在 asserts 和 jsbridge 目录下。</p><ul><li>js 文件是是通信的协议，H5 会出发 js 脚本中的语句，然后把通信的数据传递给 WebView；</li><li>jsbridge 目录下的 .java 文件则是和 Native 层的逻辑相关；</li></ul><p>这里先不详细分析每个文件的具体逻辑，我们后面分析交互流程的时候会讲；</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h1><p>具体的使用主要分为如下几个部分，我会将 Demo 中的一些重点代码块，用注视标注出来：</p><h2 id="2-1-初始化-BridgeWebView："><a href="#2-1-初始化-BridgeWebView：" class="headerlink" title="2.1 初始化 BridgeWebView："></a>2.1 初始化 BridgeWebView：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webView = (BridgeWebView) findViewById(R.id.webView);</span><br><span class="line">button = (Button) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】设置默认的消息处理回调；</span></span><br><span class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</span><br><span class="line"><span class="comment">//【2】设置 WebChromeClient 对象，无关不分析；</span></span><br><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，这里的 WebChromeClient 其实没有太大的用处，而真正有用的是其内部的：WebViewClient 对象，这个我们后面单独去分析 BridgeWebView 的时候，就知道 WebViewClient 的具体逻辑了；</p><h2 id="2-2-注册回调-Handler-到-webview-中："><a href="#2-2-注册回调-Handler-到-webview-中：" class="headerlink" title="2.2 注册回调 Handler 到 webview 中："></a>2.2 注册回调 Handler 到 webview 中：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】加载 H5 页面；</span></span><br><span class="line">webView.loadUrl(<span class="string">"file:///android_asset/demo.html"</span>);</span><br><span class="line"><span class="comment">//【2】注册了一个 BridgeHandler 回调对象，用于处理 js 的消息并回调通知；</span></span><br><span class="line">webView.registerHandler(<span class="string">"submitFromWeb"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</span><br><span class="line">Log.i(TAG, <span class="string">"handler = submitFromWeb, data from web = "</span> + data);</span><br><span class="line">        function.onCallBack(<span class="string">"submitFromWeb exe, response data 中文 from Java"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>BridgeHandler 是一个接口，面向接口编程，前面的 DefaultHandler 实现了这个接口！</p><p>可以看到 BridgeHandler 是用于处理 H5 发送给 Native 的消息的；</p><p>而 CallBackFunction 则是用于回调结果给 H5；</p><h2 id="2-3-Native-向-H5-发送消息，并接受回调"><a href="#2-3-Native-向-H5-发送消息，并接受回调" class="headerlink" title="2.3 Native 向 H5 发送消息，并接受回调"></a>2.3 Native 向 H5 发送消息，并接受回调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>可以看到，上面给出了有回调和没有回调的两种通信方式；</p><p>具体的调用逻辑，我们后面再分析！</p><h2 id="2-4-H5-向-Native-发送消息，并接受回调"><a href="#2-4-H5-向-Native-发送消息，并接受回调" class="headerlink" title="2.4 H5 向 Native 发送消息，并接受回调"></a>2.4 H5 向 Native 发送消息，并接受回调</h2><p>这个地方就比较复杂了，我们要从 H5 中看起；</p><ul><li>H5 触发 js 的函数，指定具体的 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，特定 handler 处理！</span></span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">        <span class="string">'submitFromWeb'</span></span><br><span class="line">        , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到了 ‘submitFromWeb’，这和前面的 registerHandler 相呼应了！</p><ul><li>H5 触发 js 的函数，默认 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，默认 handler 处理！</span></span><br><span class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">        data</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和前面的 DefaultHandler 相呼应了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-工程结构&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第七篇 - 路由跳转/数据传递 (arouter-api)</title>
    <link href="https://coolqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/"/>
    <id>https://coolqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/</id>
    <published>2019-05-09T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:26.563Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的路由跳转的过程，以及变量/数据的传递，这篇文章将是本系列的最后一篇（后续会抽时间写其他的）！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-路由跳转"><a href="#1-路由跳转" class="headerlink" title="1 路由跳转"></a>1 路由跳转</h1><p>我们来看看</p><h2 id="1-1-跳转方式"><a href="#1-1-跳转方式" class="headerlink" title="1.1 跳转方式"></a>1.1 跳转方式</h2><p>ARouter 支持两种方式来跳转：</p><ul><li>path 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>)  <span class="comment">// 指定 path</span></span><br><span class="line">            .navigation();</span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(); <span class="comment">// 显示指定分组</span></span><br></pre></td></tr></table></figure><ul><li>uri 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uri uri;</span><br><span class="line">ARouter.getInstance().build(uri).navigation(); <span class="comment">// 指定 uri</span></span><br></pre></td></tr></table></figure><ul><li>我们可以设置跳转请求码和跳转回调</li></ul><p>这种调用方式相当于原生的 startActivityForResult：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(<span class="keyword">this</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>同时我们也可以指定跳转回调：<strong>NavigationCallback</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>处理跳转的结果；</p><ul><li>我们也可以设置跳过所有的拦截器</li></ul><p>我们知道 actiivty 的跳转是收到拦截器的限制的，但是 PostCard 提供了接口，能够跳过所有的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用绿色通道(跳过所有的拦截器)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>).greenChannel().navigation();</span><br></pre></td></tr></table></figure><p>这里的 greenChannel 方法我们前面有分析过，不多说了！</p><h3 id="1-1-1-Uri-跳转的特殊性"><a href="#1-1-1-Uri-跳转的特殊性" class="headerlink" title="1.1.1 Uri 跳转的特殊性"></a>1.1.1 Uri 跳转的特殊性</h3><p>这里要单独讲下 uri 跳转的特殊性，ARouter 通过新建一个没有 UI 的界面作为跳板来统一处理，scheme 是 arouter 的跳转请求！</p><ul><li>需要新建一个 activity 来接收 uri，没有 ui 界面，这是关键点！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AndroidManifest.xml 中要指定该 activity 监听的 schame 事件是：<strong>arouter://m.aliyun.com</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- App Links --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:autoVerify</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"http"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"https"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于这个 activity 作为外界的统一入口，H5 或者 native 通过 intent 匹配，将数据传递给这个 activity，然后这个 activity 解析数据，将 uri 叫给 ARouter 最终实现跳转！</p><p>详细分析：Uri 的组成为：<strong>scheme://host:port/path?query</strong>，我们通过中转 activity 匹配 <strong>scheme://host:port</strong> 部分，截获 Uri，然后通过 getPath 就可以回去到 Path，这个 Path 需要和 @Route 的 path 匹配，这样就可以实现跳转了！</p><p>可以看出这个过程就是 <strong>intent 的匹配！</strong></p><h2 id="1-2-数据传递"><a href="#1-2-数据传递" class="headerlink" title="1.2 数据传递"></a>1.2 数据传递</h2><p>以上的两种跳转方式，都可以传递数据，我们来看下数据传递的方式：</p><ul><li>直接传递 Bundle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bundle params = <span class="keyword">new</span> Bundle();</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .with(params)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>注意：这个方法会覆盖掉 PostCast 内部默认创建的 Bundle；</p><ul><li>指定启动 Flag</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .withFlags();</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><ul><li>支持传递各种基本类型数据、对象、数组、List、可序列化数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>).withAction(..)</span><br><span class="line">    .withBoolean(String key, <span class="keyword">boolean</span> value)</span><br><span class="line">    .withBundle(String key, Bundle value)</span><br><span class="line">    .withByte(String key, <span class="keyword">byte</span> value)</span><br><span class="line">    .withCharSequenceArrayList(String key, ArrayList&lt;CharSequence&gt; value)</span><br><span class="line">    .withParcelable(String key, Parcelable value)</span><br><span class="line">    .withSerializable(String key, Serializable value)</span><br><span class="line">    .withStringArrayList(String key, ArrayList&lt;String&gt; value)</span><br><span class="line">    .withObject(<span class="meta">@Nullable</span> String key, <span class="meta">@Nullable</span> Object value)</span><br><span class="line">    ... ... ... <span class="comment">// 接口太多了，省略下，其实这些接口对应的是 Bundle 中的方法！</span></span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>这些数据都会被加入到 PostCard 内部的默认创建的 Bundle 中，其实这些方法对应的就是 Bundle 中的方法！</p><ul><li>支持设置转场动画</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转场动画(常规方式)</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)</span><br><span class="line">    .navigation(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转场动画(API16+)</span></span><br><span class="line">ActivityOptionsCompat compat = ActivityOptionsCompat.</span><br><span class="line">    makeScaleUpAnimation(v, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withOptionsCompat(compat)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><h3 id="1-2-1-对象传递的特殊"><a href="#1-2-1-对象传递的特殊" class="headerlink" title="1.2.1 对象传递的特殊"></a>1.2.1 对象传递的特殊</h3><p>对于自定义的对象，不能确保它可序列化，所以这里通过 SerializationService 将其转为了 jsonstring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">withObject</span><span class="params">(@Nullable String key, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    mBundle.putString(key, serializationService.object2Json(value));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-跳转流程"><a href="#2-跳转流程" class="headerlink" title="2 跳转流程"></a>2 跳转流程</h1><p>下面，我们重点分析路由跳转的流程，和数据传递的流程，忽略掉一些之前已经见过的流程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(...); --&gt; _ARouter.getInstance().build(...);</span><br></pre></td></tr></table></figure><p>无论是 path 跳转，还是 uri 跳转，ARouter 都会调用 _ARouter 的方法！</p><h2 id="2-1-ARouter-build"><a href="#2-1-ARouter-build" class="headerlink" title="2.1 _ARouter.build"></a>2.1 _ARouter.build</h2><p>无论是 build(path)，还是  build(uri)，最终创建的 PostCard 都是一样的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));  <span class="comment">// 通过 path 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == uri || TextUtils.isEmpty(uri.toString())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            uri = pService.forUri(uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(uri.getPath(), extractGroup(uri.getPath()), uri, <span class="keyword">null</span>); <span class="comment">// 通过 uri 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Postcard"><a href="#2-2-Postcard" class="headerlink" title="2.2 Postcard"></a>2.2 Postcard</h2><h3 id="2-2-1-new-Postcard"><a href="#2-2-1-new-Postcard" class="headerlink" title="2.2.1 new Postcard"></a>2.2.1 new Postcard</h3><p>创建一个新的 Postcard：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path);</span><br><span class="line">    setGroup(group);</span><br><span class="line">    setUri(uri);</span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过 Uri 创建的话，会多设置一个 Uri 的属性；</p><h3 id="2-2-2-navigation"><a href="#2-2-2-navigation" class="headerlink" title="2.2.2 navigation"></a>2.2.2 navigation</h3><p>最核心的就后面的两个方法，支持传入 requestCode 和 NavigationCallback 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    navigation(mContext, requestCode, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ARouter.getInstance().navigation(mContext, <span class="keyword">this</span>, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ARouter.getInstance().navigation，我们知道最后会调用 _ARouter.getInstance().navigation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(...) --&gt; _ARouter.getInstance().navigation(...);</span><br></pre></td></tr></table></figure><h2 id="2-3-ARouter-navigation"><a href="#2-3-ARouter-navigation" class="headerlink" title="2.3 _ARouter.navigation"></a>2.3 _ARouter.navigation</h2><p>这里我们可以看到回调的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1】完善跳转信息；</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service/Fragment 是会跳过拦截器的，对于 activity 默认是不会跳过的，当然了可动态设置；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-LogisticsCenter-completion"><a href="#2-3-1-LogisticsCenter-completion" class="headerlink" title="2.3.1 LogisticsCenter.completion"></a>2.3.1 LogisticsCenter.completion</h3><p>完善登陆信息，这里前面有说过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">//【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>,</span><br><span class="line">                                                    postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.3.1】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1.1】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的，主要是 IProvider 类型；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是</p><h4 id="2-3-1-1-数据传递-important"><a href="#2-3-1-1-数据传递-important" class="headerlink" title="2.3.1.1  数据传递 - important"></a>2.3.1.1  数据传递 - important</h4><p>这里我们要重点看下 PostCard 中的数据是如何处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">postcard.setType(routeMeta.getType()); </span><br><span class="line">postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">postcard.setExtra(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】注意这里是处理 uri 的数据</span></span><br><span class="line">Uri rawUri = postcard.getUri();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">  <span class="comment">//【--&gt;2.3.1.2】获得 uri 的数据；</span></span><br><span class="line">  Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">  <span class="comment">//【2】RouteMeta 的 paramsType 保存了被 @AutoWired 注解的参数和类型的枚举序号的映射关系；</span></span><br><span class="line">  Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">  <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">      <span class="comment">//【--&gt;2.3.1.3】将传递的数据设置到 Postcard 中，调用 Postcard.withXXX 方法；</span></span><br><span class="line">      setValue(postcard,</span><br><span class="line">               params.getValue(), <span class="comment">// 变量类型的枚举序号；</span></span><br><span class="line">               params.getKey(), <span class="comment">// 变量名/注解name值</span></span><br><span class="line">               resultMap.get(params.getKey())); <span class="comment">// uri 写到的变量的值；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】将被 @AutoWired 注解的变量的变量名/注解name值以 String[] 形式保存到 PostCard.Bundle 中；</span></span><br><span class="line">    postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//【4】将 uri 保存到 PostCard.Bundle 中，</span></span><br><span class="line">  postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个常量的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-TextUtils-splitQueryParameters"><a href="#2-3-1-2-TextUtils-splitQueryParameters" class="headerlink" title="2.3.1.2 TextUtils.splitQueryParameters"></a>2.3.1.2 TextUtils.splitQueryParameters</h4><p>将 uri 后缀保存的 key-value 的键值对转为 Map&lt;String, String&gt;：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">splitQueryParameters</span><span class="params">(Uri rawUri)</span> </span>&#123;</span><br><span class="line">    String query = rawUri.getEncodedQuery();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (query == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> next = query.indexOf(<span class="string">'&amp;'</span>, start);</span><br><span class="line">        <span class="keyword">int</span> end = (next == -<span class="number">1</span>) ? query.length() : next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> separator = query.indexOf(<span class="string">'='</span>, start);</span><br><span class="line">        <span class="keyword">if</span> (separator &gt; end || separator == -<span class="number">1</span>) &#123;</span><br><span class="line">            separator = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = query.substring(start, separator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(name)) &#123;</span><br><span class="line">            String value = (separator == end ? <span class="string">""</span> : query.substring(separator + <span class="number">1</span>, end));</span><br><span class="line">            paramMap.put(Uri.decode(name), Uri.decode(value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move start to end of name.</span></span><br><span class="line">        start = end + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (start &lt; query.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(paramMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-LogisticsCenter-setValue"><a href="#2-3-1-3-LogisticsCenter-setValue" class="headerlink" title="2.3.1.3 LogisticsCenter.setValue"></a>2.3.1.3 LogisticsCenter.setValue</h4><p>将传递的数据设置进入 Postcard 中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Postcard postcard, Integer typeDef, String key, String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != typeDef) &#123;</span><br><span class="line">            <span class="comment">//【1】根据类型的枚举序号，匹配对应的 withXXX 方法，将值设置到内部的 Bundle 中！</span></span><br><span class="line">            <span class="keyword">if</span> (typeDef == TypeKind.BOOLEAN.ordinal()) &#123;</span><br><span class="line">                postcard.withBoolean(key, Boolean.parseBoolean(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.BYTE.ordinal()) &#123;</span><br><span class="line">                postcard.withByte(key, Byte.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.SHORT.ordinal()) &#123;</span><br><span class="line">                postcard.withShort(key, Short.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.INT.ordinal()) &#123;</span><br><span class="line">                postcard.withInt(key, Integer.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.LONG.ordinal()) &#123;</span><br><span class="line">                postcard.withLong(key, Long.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.FLOAT.ordinal()) &#123;</span><br><span class="line">                postcard.withFloat(key, Float.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.DOUBLE.ordinal()) &#123;</span><br><span class="line">                postcard.withDouble(key, Double.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.STRING.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.PARCELABLE.ordinal()) &#123;</span><br><span class="line">                <span class="comment">// TODO : How to description parcelable value with string?</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.OBJECT.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">// Compatible compiler sdk 1.0.3, in that version, the string type = 18</span></span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postcard.withString(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"LogisticsCenter setValue failed! "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h3 id="2-3-2-ARouter-navigation"><a href="#2-3-2-ARouter-navigation" class="headerlink" title="2.3.2 _ARouter._navigation"></a>2.3.2 _ARouter._navigation</h3><p>可以看到，启动过的过程就是将 Postcard 中的数据设置到 intent 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line">    <span class="comment">//【1】根据跳转类型处理不同的目标；</span></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">//【1.1】创建 activity；</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.2】设置目标启动的 flags</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.3】设置 action！</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【--&gt;2.3.2.1】执行启动；</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider(); <span class="comment">// 这个是针对 Provider 的；</span></span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            <span class="comment">//【1.4】针对于 brocastreceiver，contenprovider，fragment，会拿到其实例！</span></span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【1.4.1】针对于 fragment，还会设置 Arguments；</span></span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD: <span class="comment">// 其他情况没有；</span></span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对于 brocastreceiver，contenprovider，fragment，会拿到其实例，针对于 fragment，还会设置 Arguments！</p><h4 id="2-3-2-1-ARouter-startActivity"><a href="#2-3-2-1-ARouter-startActivity" class="headerlink" title="2.3.2.1 _ARouter.startActivity"></a>2.3.2.1 _ARouter.startActivity</h4><p>这就是最后启动过程了，其实很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">int</span> requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里根据 requestCode 有不同的调用方式；</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;  <span class="comment">// Need start for result</span></span><br><span class="line">        <span class="keyword">if</span> (currentContext <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            ActivityCompat.startActivityForResult((Activity) currentContext, intent, requestCode, postcard.getOptionsBundle());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warning(Consts.TAG, <span class="string">"Must use [navigation(activity, ...)] to support [startActivityForResult]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ActivityCompat.startActivity(currentContext, intent, postcard.getOptionsBundle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((-<span class="number">1</span> != postcard.getEnterAnim() &amp;&amp; -<span class="number">1</span> != postcard.getExitAnim()) &amp;&amp; currentContext <span class="keyword">instanceof</span> Activity) &#123;    <span class="comment">// Old version.</span></span><br><span class="line">        ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.3】启动完成，回调 NavigationCallback</span></span><br><span class="line">        callback.onArrival(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>这里的 postcard.getOptionsBundle() 会返回一个 Bundle 是用来保存额外的启动参数，比如动画等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> Bundle optionsCompat;     </span><br><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">getOptionsBundle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> optionsCompat;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-跳转回调"><a href="#2-4-跳转回调" class="headerlink" title="2.4 跳转回调"></a>2.4 跳转回调</h2><p>我们看看 NavigationCallback 的相关接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigationCallback</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.3】跳转成功后会回调；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>到这里 ARouter 分析就暂告一段落了；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第六篇 - 自动注入 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/"/>
    <id>https://coolqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/</id>
    <published>2019-04-30T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:34.960Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的自动注入原理！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-自动注入"><a href="#1-自动注入" class="headerlink" title="1 自动注入"></a>1 自动注入</h1><p>我们在跳转的过程中，可能会传递一些数据，在原生的机制里面，我们是通过 Intent 来传递数据的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">intent.getXXXX();</span><br></pre></td></tr></table></figure><p>但是这需要我们手动的获取传递的值，ARouter 提供了一种更方便的方法：<strong>自动注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">String key1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_test1);</span><br><span class="line"></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要实现自动注入，对于变量要通过 @Autowired 注解，同时要使用  ARouter.getInstance().inject(this) 方法关联变量；</p><p>其实自动注入依然是通过 intent 来传递值的</p><h1 id="2-注解处理-Autowired"><a href="#2-注解处理-Autowired" class="headerlink" title="2 注解处理 - Autowired"></a>2 注解处理 - Autowired</h1><p>我们来回顾下对于 @Autowired 的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired 注解是由 AutowiredProcessor 解析并处理，这里我们<strong>不再关注注解的处理</strong>了，ok？</p><p>直接来看生成的类！</p><h2 id="2-1-动态生成类"><a href="#2-1-动态生成类" class="headerlink" title="2.1 动态生成类"></a>2.1 动态生成类</h2><p>这里我们以 activity 为例子，下面我们一次性把<strong>所有可以自动注入的变量类</strong>型都加进来；</p><h3 id="2-1-1-被注解的类"><a href="#2-1-1-被注解的类" class="headerlink" title="2.1.1 被注解的类"></a>2.1.1 被注解的类</h3><ul><li><strong>TestInjectActivity</strong>，用于接受 intent 传递的值；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestInjectActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"str1"</span>)</span><br><span class="line">    String str;  <span class="comment">// string</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"bool1"</span>)</span><br><span class="line">    <span class="keyword">boolean</span> bool; <span class="comment">// boolean</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"shortNum1"</span>)</span><br><span class="line">    <span class="keyword">short</span> shortNum; <span class="comment">// short</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> intNum;  <span class="comment">// int</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span>[] intNumArray; <span class="comment">//int[]</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">long</span> longNum;  <span class="comment">// long</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"charStr1"</span>)</span><br><span class="line">    <span class="keyword">char</span> charStr; <span class="comment">// char</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"floatNum1"</span>)</span><br><span class="line">    <span class="keyword">float</span> floatNum; <span class="comment">// float</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">float</span>[] floatNumArray; <span class="comment">// float[]</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"doubleNum"</span>)</span><br><span class="line">    <span class="keyword">double</span> doubleNum;  <span class="comment">// double</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"mapStr"</span>)</span><br><span class="line">    Map&lt;String, String&gt; mapStr; <span class="comment">// map</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestOne&gt; objList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestOne testOne;</span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestOneParcelable testOneParcelable; <span class="comment">// Parcelable</span></span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestTwoParcelable TestTwoParcelable; <span class="comment">// Serializable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/test/TestHelloInterface"</span>)</span><br><span class="line">    HelloInterface helloInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneParcelable</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;  <span class="comment">// 实现了 Parcelable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;TestOneParcelable&gt; CREATOR</span><br><span class="line">             = <span class="keyword">new</span> Parcelable.Creator&lt;TestOneParcelable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> TestOneParcelable <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> TestOneParcelable[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TestOneParcelable[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            dest.writeString(one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestTwoParcelable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">// 实现了 Serializable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span> </span>&#123; <span class="comment">// 自定义的类</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123; <span class="comment">// 用于暴漏服务的接口</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个 TestInjectActivity 定义了一些需要自动赋值的成员！</p><ul><li><strong>TestSerializationService</strong>：用于序列化自定义的类对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestSerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123; <span class="comment">// 用于序列化自定义对象；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestHelloInterface</strong>：暴漏的服务，具体的实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/Test/TestHelloInterface"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloInterface</span> <span class="keyword">implements</span> <span class="title">TestInjectActivity</span>.<span class="title">HelloInterface</span> </span>&#123; <span class="comment">// 用于实现具体的服务；</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面是简单的例子！</p><h3 id="2-1-2-动态生成类"><a href="#2-1-2-动态生成类" class="headerlink" title="2.1.2  动态生成类"></a>2.1.2  动态生成类</h3><p>我们去看看动态生成的类，动态生成的类所在的包名和自动注入的类的包名是一样的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取序列化服务；</span></span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    <span class="comment">//【2】获取目标 activity</span></span><br><span class="line">    TestInjectActivity substitute = (TestInjectActivity)target;</span><br><span class="line">    <span class="comment">//【3】通过 getIntent 来处理传递的数据；</span></span><br><span class="line">    substitute.str = substitute.getIntent().getStringExtra(<span class="string">"str1"</span>);</span><br><span class="line">    substitute.bool = substitute.getIntent().getBooleanExtra(<span class="string">"bool1"</span>, substitute.bool);</span><br><span class="line">    substitute.shortNum = substitute.getIntent().getShortExtra(<span class="string">"shortNum1"</span>, substitute.shortNum);</span><br><span class="line">    substitute.intNum = substitute.getIntent().getIntExtra(<span class="string">"intNum"</span>, substitute.intNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.intNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"intNumArray"</span>), </span><br><span class="line">                                                                <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">int</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'intNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.longNum = substitute.getIntent().getLongExtra(<span class="string">"longNum"</span>, substitute.longNum);</span><br><span class="line">    substitute.charStr = substitute.getIntent().getCharExtra(<span class="string">"charStr1"</span>, substitute.charStr);</span><br><span class="line">    substitute.floatNum = substitute.getIntent().getFloatExtra(<span class="string">"floatNum1"</span>, substitute.floatNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.floatNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"floatNumArray"</span>), </span><br><span class="line">                                                                  <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">float</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'floatNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.doubleNum = substitute.getIntent().getDoubleExtra(<span class="string">"doubleNum"</span>, substitute.doubleNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.mapStr = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"mapStr"</span>), </span><br><span class="line">                                                           <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;Map&lt;String, String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'mapStr' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.objList = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"objList"</span>), </span><br><span class="line">                                                         <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;List&lt;TestInjectActivity.TestOne&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'objList' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.testOne = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"testOne"</span>), </span><br><span class="line">                                                          <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestOne&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'testOne' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.testOneParcelable = substitute.getIntent().getParcelableExtra(<span class="string">"testOneParcelable"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.TestTwoParcelable = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"TestTwoParcelable"</span>), </span><br><span class="line">                                                    <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestTwoParcelable&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'TestTwoParcelable' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.helloInterface = (TestInjectActivity.HelloInterface)ARouter.getInstance().build(<span class="string">"/test/TestHelloInterface"</span>).navigation();;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实这个和之前分析注解解析的时候的模版类是一一对应的。</p><p><strong>可以看到</strong>：</p><ul><li>基本类型，直接通过 intent 的相关方法来处理；</li><li>数组，list，map，自定义类对象，都是通过序列化服务 serializationService 来处理的，也就是说要先将其转为 jsonString，然后保存到 intent 中；</li></ul><p>这里我们就不看 AutoWired 的注解解析了，大家可以直接看前面的文章；</p><h1 id="3-inject-自动注入"><a href="#3-inject-自动注入" class="headerlink" title="3 inject - 自动注入"></a>3 inject - 自动注入</h1><p>下面我们来分析下自动注入的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br></pre></td></tr></table></figure><p>这个是核心的方法！</p><h2 id="3-1-ARouter-inject"><a href="#3-1-ARouter-inject" class="headerlink" title="3.1 ARouter.inject"></a>3.1 ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2】进入 _ARouter</span></span><br><span class="line">    _ARouter.inject(thiz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-ARouter-inject"><a href="#3-2-ARouter-inject" class="headerlink" title="3.2 _ARouter.inject"></a>3.2 _ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回 AutowiredServiceImpl 服务</span></span><br><span class="line">    AutowiredService autowiredService = ((AutowiredService) ARouter.getInstance().build(<span class="string">"/arouter/service/autowired"</span>).navigation());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != autowiredService) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.3.1】通过 AutowiredServiceImpl 自动注入</span></span><br><span class="line">        autowiredService.autowire(thiz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“/arouter/service/autowired” 对应的 service 是 AutowiredServiceImpl，他是 ARouter 系统 Service，实现了 AutowiredService 接口！</p><p>它和 InterceptorServiceImpl 的作用很类似，获取方式这里就不再分析了！</p><h2 id="3-3-AutowiredServiceImpl"><a href="#3-3-AutowiredServiceImpl" class="headerlink" title="3.3 AutowiredServiceImpl"></a>3.3 AutowiredServiceImpl</h2><p>我们来看看 AutowiredServiceImpl 的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/autowired"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredServiceImpl</span> <span class="keyword">implements</span> <span class="title">AutowiredService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LruCache&lt;String, ISyringe&gt; classCache; </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackList;</span><br></pre></td></tr></table></figure><p>内部有一个 LruCache 缓存对象：key 是自动注入的类的全限定名（activity/fragment），value 是 <code>activityName$$ARouter$$Autowired</code> 的实例；</p><p>黑名单 blackList  用于保存哪些无法自动注入的类，value 是 自动注入的类的全限定名（activity/fragment；</p><h3 id="3-3-1-autowire"><a href="#3-3-1-autowire" class="headerlink" title="3.3.1 autowire"></a>3.3.1 autowire</h3><p>我们来看看他是如何处理的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autowire</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取自动注入的类的全限定名；</span></span><br><span class="line">    String className = instance.getClass().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blackList.contains(className)) &#123;</span><br><span class="line">            <span class="comment">//【2】判断是否已经添加到了 classCache 缓存中了；</span></span><br><span class="line">            ISyringe autowiredHelper = classCache.get(className);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == autowiredHelper) &#123; </span><br><span class="line">                <span class="comment">//【3】没有的话就通过反射创建 ISyringe 的实例，其实就是我们解析 AutoWired 的时候生成的：TestInjectActivity$$ARouter$$Autowired</span></span><br><span class="line">                <span class="comment">// 这里会创建其实例；</span></span><br><span class="line">                autowiredHelper = (ISyringe) Class.forName(instance.getClass().getName() + SUFFIX_AUTOWIRED).getConstructor().newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】调用其 inject 方法！</span></span><br><span class="line">            autowiredHelper.inject(instance);</span><br><span class="line">            <span class="comment">//【5】将其加入到缓存中；</span></span><br><span class="line">            classCache.put(className, autowiredHelper);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        blackList.add(className);    <span class="comment">// This instance need not autowired.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SUFFIX_AUTOWIRED 定义在 Consts 中，值为：<code>$$ARouter$$Autowired</code>!!</p><p>这里只是用 <code>TestInjectActivity$$ARouter$$Autowire</code>举个例子，实际上这个类的类名、包名和具体的业务相关；</p><p>后面的逻辑就不多说了，大家去看 inject 方法，一幕了然！</p><h1 id="4-SerializationService"><a href="#4-SerializationService" class="headerlink" title="4 SerializationService"></a>4 SerializationService</h1><p>我们来看看如何序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123; <span class="comment">// TestInjectActivity$$ARouter$$Autowired 使用的是这个方法；</span></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(input, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要自己实现一个 SerializationService，前面的动态生成类，使用了 parseObject 方法，将 jsonString 转为了 Object！</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本篇文章我们分析了 inject 的方法流程，但是我们遗留的下面的问题：</p><ul><li>ARouter 自动注入的值是如何传递的；</li></ul><p>我们会在路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第五篇 - 服务和拦截器 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/"/>
    <id>https://coolqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/</id>
    <published>2019-04-25T12:46:25.000Z</published>
    <updated>2019-08-09T13:23:53.716Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法！</p><h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1 开篇"></a>1 开篇</h1><p>这篇文章分析下 ARouter 的 Service 和 Interceptor，二者有如下的区别：</p><h2 id="1-1-实现接口不同"><a href="#1-1-实现接口不同" class="headerlink" title="1.1 实现接口不同"></a>1.1 实现接口不同</h2><ul><li>Service 直接或者间接的实现了 IProvider 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 直接或者间接的实现了 IInterceptor 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IInterceptor</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-注解不同"><a href="#1-2-注解不同" class="headerlink" title="1.2 注解不同"></a>1.2 注解不同</h2><ul><li>Service 使用 @Route  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/single"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleService</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 使用 @Interceptor  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">7</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Interceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-逻辑处理不同"><a href="#1-3-逻辑处理不同" class="headerlink" title="1.3 逻辑处理不同"></a>1.3 逻辑处理不同</h2><ul><li>拦截器会在 ARouter 初始化 init 的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。<pre><code>- 这个下面可以看到，内部有一个同步锁来控制；</code></pre></li><li>服务没有该限制，某一服务可能在 App 整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作；</li></ul><h1 id="1-服务-Service"><a href="#1-服务-Service" class="headerlink" title="1 服务 Service"></a>1 服务 Service</h1><h2 id="1-1-服务统一接口"><a href="#1-1-服务统一接口" class="headerlink" title="1.1 服务统一接口"></a>1.1 服务统一接口</h2><p>ARouter 已经帮我们提供了一些 Service 统一接口，对于对内对外提供特定的功能模版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  468 May  8 20:46 AutowiredService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  424 May  8 20:46 ClassLoaderService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  590 May  8 20:46 DegradeService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  575 May  8 20:46 InterceptorService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  555 May  8 20:46 PathReplaceService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  656 May  8 20:46 PretreatmentService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  974 May  8 20:46 SerializationService.java</span><br></pre></td></tr></table></figure><ul><li><strong>AutowiredService</strong>：用于处理 Autowired 注解的变量的 Service，ARouter 内置了一个 AutowiredServiceImpl 实现了 AutowiredService，我们在分析 inject 的时候，再讲；</li><li><strong>ClassLoaderService</strong>：针对于 installrun 的 Service；</li><li><strong>DegradeService</strong>：用于在跳转不成功的情况下，做降级处理；</li><li><strong>InterceptorService</strong>：用于处理 Interceptor 的 Service，ARouter 内置了一个 InterceptorServiceImpl 实现了 InterceptorService，用于初始化所有的  Interceptor 和处理拦截，我们下面分析；</li><li><strong>PathReplaceService</strong>：用于对路由的 path 做预处理；</li><li><strong>PretreatmentService</strong>；用于在跳转之前做预处理操作；</li><li><strong>SerializationService</strong>：用于序列化 Object 对象，和 Autowired 注解配合使用，我们在分析 inject 的时候，再讲；</li></ul><h2 id="1-2-获取服务"><a href="#1-2-获取服务" class="headerlink" title="1.2 获取服务"></a>1.2 获取服务</h2><p>ARouter 是通过路由跳转的方式获取服务的，我们来回顾 init 的流程：</p><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br></pre></td></tr></table></figure><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br></pre></td></tr></table></figure><p>之前在分析 init 的过程中，我们又遇到好几个获取 Service 的地方，上面是举了其中几个栗子！</p><ul><li>获取序列化服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br></pre></td></tr></table></figure><p>  上面的代码是在处理 @Autowired 注解的时候，也就是 arouter complier 编译的时候处理的，用于传递自定义的对象；</p><h2 id="1-3-获取流程分析"><a href="#1-3-获取流程分析" class="headerlink" title="1.3 获取流程分析"></a>1.3 获取流程分析</h2><p>通过上面可以知道，获取一个 Service 的方法有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(xxxx.class);</span><br><span class="line"></span><br><span class="line">ARouter.getInstance().build(path).navigation();</span><br></pre></td></tr></table></figure><p>下面我们会分析下这两种方式的流程！</p><p><strong>有些代码在前面的路由处理过程中分析了，这里不会再重复分析。</strong></p><h3 id="1-3-1-navigation-className-class"><a href="#1-3-1-navigation-className-class" class="headerlink" title="1.3.1 navigation(className.class)"></a>1.3.1 navigation(className.class)</h3><p>第一种方式是传入 Service 的父类，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(service.class);</span><br><span class="line">_ARouter.getInstance().navigation(service);</span><br><span class="line">    Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">               Postcard postcard = Warehouse.providersIndex.get(serviceName);</span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些奇葩的</p><h4 id="1-3-1-1-ARouter-navigation"><a href="#1-3-1-1-ARouter-navigation" class="headerlink" title="1.3.1.1 _ARouter.navigation"></a>1.3.1.1 _ARouter.navigation</h4><p>我回顾下 _ARouter.navigation 方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//【2】获取 Serivce；</span></span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心处理：</p><ul><li>LogisticsCenter.buildProvider</li><li>LogisticsCenter.completion</li></ul><h4 id="1-3-1-2-LogisticsCenter-buildProvider"><a href="#1-3-1-2-LogisticsCenter-buildProvider" class="headerlink" title="1.3.1.2 LogisticsCenter.buildProvider"></a>1.3.1.2 LogisticsCenter.buildProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Warehouse.providersIndex 保存的是如下的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br></pre></td></tr></table></figure><h4 id="1-3-1-3-LogisticsCenter-completion"><a href="#1-3-1-3-LogisticsCenter-completion" class="headerlink" title="1.3.1.3 LogisticsCenter.completion"></a>1.3.1.3 LogisticsCenter.completion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.3】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有所谓的 “按组加载”</p><p>可以看到，最后获取了 Service，并调用了其 init 方法；</p><p>最后将获得的 Service 保存到了 Postcard 中；</p><h3 id="1-3-2-build-path-navigation"><a href="#1-3-2-build-path-navigation" class="headerlink" title="1.3.2 build(path).navigation()"></a>1.3.2 build(path).navigation()</h3><p>第二种方式是通过 path 来查找 Service，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(path).navigation() </span><br><span class="line">      Postcard postcard = _ARouter.getInstance().build(path)</span><br><span class="line">      Object object = Postcard.navigation();</span><br><span class="line">           Object object = ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback)</span><br><span class="line">           Object object = _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback)      </span><br><span class="line"> LogisticsCenter.completion(postcard);       </span><br><span class="line">                     Object object = _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些非核心的代码；</p><h4 id="1-3-2-1-ARouter-navigation"><a href="#1-3-2-1-ARouter-navigation" class="headerlink" title="1.3.2.1 _ARouter.navigation"></a>1.3.2.1 _ARouter.navigation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service 是会跳过拦截器的；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-4-ARouter-navigation"><a href="#1-3-2-4-ARouter-navigation" class="headerlink" title="1.3.2.4 _ARouter._navigation"></a>1.3.2.4 _ARouter._navigation</h4><p>最终处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            ... ... ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【1】返回了 iprovider 实例，就是我们的 Service 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            ... ... ...</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，我们获得了 Service 对象！</p><h2 id="1-4-内置服务"><a href="#1-4-内置服务" class="headerlink" title="1.4 内置服务"></a>1.4 内置服务</h2><p>我们来看看内置服务接口！</p><p>对与 AutowiredService，InterceptorService，SerializationService 我们后面会分析，这里就不重点分析了，累！</p><h3 id="1-4-1-DegradeService"><a href="#1-4-1-DegradeService" class="headerlink" title="1.4.1 DegradeService"></a>1.4.1 DegradeService</h3><p>降级服务，当跳转失败后，可以在这里做处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DegradeService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-PathReplaceService"><a href="#1-4-2-PathReplaceService" class="headerlink" title="1.4.2 PathReplaceService"></a>1.4.2 PathReplaceService</h3><p>路径 path 替换服务，我们可以在启动跳转之前，对 path 进行拦截，替换新的 path： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h3 id="1-4-3-PretreatmentService"><a href="#1-4-3-PretreatmentService" class="headerlink" title="1.4.3 PretreatmentService"></a>1.4.3 PretreatmentService</h3><p>跳转预处理服务，我们可以在启动跳转之前，针对跳转路由数据做预处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h1 id="2-拦截器-Interceptor"><a href="#2-拦截器-Interceptor" class="headerlink" title="2 拦截器 Interceptor"></a>2 拦截器 Interceptor</h1><h2 id="2-1-InterceptorServiceImpl-统一管理拦截器"><a href="#2-1-InterceptorServiceImpl-统一管理拦截器" class="headerlink" title="2.1 InterceptorServiceImpl - 统一管理拦截器"></a>2.1 InterceptorServiceImpl - 统一管理拦截器</h2><p>在 ARouter 框架里面，有一个 InterceptorServiceImpl 服务，用于统一管理 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不多说了，这个是获取拦截器管理服务的方式，流程上面分析了；</p><h2 id="2-2-初始化-Interceptor"><a href="#2-2-初始化-Interceptor" class="headerlink" title="2.2 初始化 Interceptor"></a>2.2 初始化 Interceptor</h2><p>Interceptor 的初始化由 InterceptorServiceImpl 完成，</p><p>核心的逻辑在 <strong>LogisticsCenter.completion</strong> 中！</p><h3 id="2-2-1-LogisticsCenter-completion"><a href="#2-2-1-LogisticsCenter-completion" class="headerlink" title="2.2.1 LogisticsCenter.completion"></a>2.2.1 LogisticsCenter.completion</h3><p>这里我们省略掉无关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">    ... ... ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ... ... ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【2.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【1.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1.2.1】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【---&gt;2.2.2】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【1.2.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2.3】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【1.2.4】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回顾</strong>：</p><p>我们知道在路由初始化的过程中，afterInit 会获得 InterceptorServiceImpl 方法并执行其 init 的初始化操作！</p><h3 id="2-2-2-InterceptorServiceImpl-init"><a href="#2-2-2-InterceptorServiceImpl-init" class="headerlink" title="2.2.2 InterceptorServiceImpl.init"></a>2.2.2 InterceptorServiceImpl.init</h3><p>在 InterceptorServiceImpl 的 init 方法中，会获取所有的 Interceptor，并对其做初始化操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【2】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【3】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>; <span class="comment">//【4】init 状态设置为 true；</span></span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123; <span class="comment">//【5】当 init 操作完成后 notifyAll 通知等待 init 的线程；</span></span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是在由线程池管理的字现场中执行 init 操作！</p><p>注意，这里有一个同步锁，如果在路由的时候，发现 interceptorHasInit 为 false，那么会调用 interceptorInitLock.wait 进入阻塞状态，等待初始化完成，被 notifyAll 唤醒！</p><h2 id="2-3-拦截操作"><a href="#2-3-拦截操作" class="headerlink" title="2.3 拦截操作"></a>2.3 拦截操作</h2><p>我们来看看拦截操作是如何做的，核心代码在 _ARouter.navigation 中：</p><h3 id="2-3-1-ARouter-navigation"><a href="#2-3-1-ARouter-navigation" class="headerlink" title="2.3.1 _ARouter.navigation"></a>2.3.1 _ARouter.navigation</h3><p>我们只关注核心的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;  <span class="comment">//【--&gt;2.3.1.1】处理拦截结果；</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里传入了一个拦截结果回调：</p><h4 id="2-3-1-1-InterceptorCallback"><a href="#2-3-1-1-InterceptorCallback" class="headerlink" title="2.3.1.1 InterceptorCallback"></a>2.3.1.1 InterceptorCallback</h4><p>位于 callback 包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterceptorCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-InterceptorServiceImpl-doInterceptions"><a href="#2-3-2-InterceptorServiceImpl-doInterceptions" class="headerlink" title="2.3.2 InterceptorServiceImpl.doInterceptions"></a>2.3.2 InterceptorServiceImpl.doInterceptions</h3><p>当我们路由跳转时，如果指定了 Interceptor，那么就要执行拦截操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInterceptions</span><span class="params">(<span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != Warehouse.interceptors &amp;&amp; Warehouse.interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2.1】判断下 init 操作是否完成；</span></span><br><span class="line">        checkInterceptorsInitStatus();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!interceptorHasInit) &#123;</span><br><span class="line">            callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"Interceptors initialization takes too much time."</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">        LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【2】创建了一个 CountDownLatch 对象，这个对象以 Warehouse.interceptors 的 size 为计数基准；</span></span><br><span class="line">                <span class="comment">// 没处理一个 inteceptor，计数减一，知道计数为 0，才会释放持有的锁！；</span></span><br><span class="line">                CancelableCountDownLatch interceptorCounter = <span class="keyword">new</span> CancelableCountDownLatch(Warehouse.interceptors.size());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】执行拦截操作！</span></span><br><span class="line">                    _excute(<span class="number">0</span>, interceptorCounter, postcard);</span><br><span class="line">                    <span class="comment">//【3】调用 await，子线程进入等待中；</span></span><br><span class="line">                    interceptorCounter.await(postcard.getTimeout(), TimeUnit.SECONDS);</span><br><span class="line">                  </span><br><span class="line">                    <span class="comment">//【4】拦截器处理完成（CountDownLatch 计数归 0），或者 await 超时退出；</span></span><br><span class="line">                    <span class="keyword">if</span> (interceptorCounter.getCount() &gt; <span class="number">0</span>) &#123; <span class="comment">// Cancel the navigation this time, if it hasn't return anythings.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"The interceptor processing timed out."</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != postcard.getTag()) &#123; <span class="comment">// Maybe some exception in the tag.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(postcard.getTag().toString()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback.onContinue(postcard);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    callback.onInterrupt(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback.onContinue(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实可以看出，拦截器使用了责任链模式！</p><p>这里有一个新的类型：CancelableCountDownLatch，其实就是一个 CountDownLatch，代码很简单，不多说了！</p><h4 id="2-3-2-1-checkInterceptorsInitStatus"><a href="#2-3-2-1-checkInterceptorsInitStatus" class="headerlink" title="2.3.2.1 checkInterceptorsInitStatus"></a>2.3.2.1 checkInterceptorsInitStatus</h4><p>判断是否初始化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInterceptorsInitStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">        <span class="comment">//【1】主要是判断 interceptorHasInit 是否为 true！</span></span><br><span class="line">        <span class="keyword">while</span> (!interceptorHasInit) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】进入等待状态，超时时间是 10s！</span></span><br><span class="line">                interceptorInitLock.wait(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Interceptor init cost too much time error! reason = ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorInitLock 是 InterceptorServiceImpl 内部的一个锁对象；</p><h4 id="2-3-2-2-excute"><a href="#2-3-2-2-excute" class="headerlink" title="2.3.2.2 _excute"></a>2.3.2.2 _excute</h4><p>index 的值为 0，开始执行拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">_excute</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index, <span class="keyword">final</span> CancelableCountDownLatch counter, <span class="keyword">final</span> Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; Warehouse.interceptors.size()) &#123;</span><br><span class="line">            <span class="comment">//【1】获得 index 对应的拦截器；</span></span><br><span class="line">            IInterceptor iInterceptor = Warehouse.interceptors.get(index);</span><br><span class="line">            <span class="comment">//【2】执行拦截器的 process 方法，同时传入一个回调：【--&gt;2.3.1.1】InterceptorCallback</span></span><br><span class="line">            iInterceptor.process(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.1】不拦截，CountDownLatch 计数减去 1；</span></span><br><span class="line">                    counter.countDown();</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】继续调用 _excute 方法，index 加一，下一个拦截器；</span></span><br><span class="line">                    _excute(index + <span class="number">1</span>, counter, postcard);  <span class="comment">// When counter is down, it will be execute continue ,but index bigger than interceptors size, then U know.</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.2】拦截，CountDownLatch 计数归 0；</span></span><br><span class="line">                    postcard.setTag(<span class="keyword">null</span> == exception ? <span class="keyword">new</span> HandlerException(<span class="string">"No message."</span>) : exception.getMessage());    <span class="comment">// save the exception message for backup.</span></span><br><span class="line">                    counter.cancel();</span><br><span class="line">                    <span class="comment">// Be attention, maybe the thread in callback has been changed,</span></span><br><span class="line">                    <span class="comment">// then the catch block(L207) will be invalid.</span></span><br><span class="line">                    <span class="comment">// The worst is the thread changed to main thread, then the app will be crash, if you throw this exception!</span></span><br><span class="line"><span class="comment">//                    if (!Looper.getMainLooper().equals(Looper.myLooper())) &#123;    // You shouldn't throw the exception if the thread is main thread.</span></span><br><span class="line"><span class="comment">//                        throw new HandlerException(exception.getMessage());</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程很简单，不多说了。</p><h1 id="3-线程池"><a href="#3-线程池" class="headerlink" title="3 线程池"></a>3 线程池</h1><p>刚刚我们有看到，拦截器的初始化和拦截都是在子线程中做的，ARouter 通过内部的一个线程池来管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultPoolExecutor.java  <span class="comment">// 线程池</span></span><br><span class="line">DefaultThreadFactory.java  <span class="comment">// 线程工厂</span></span><br></pre></td></tr></table></figure><h2 id="3-1-线程池初始化"><a href="#3-1-线程池初始化" class="headerlink" title="3.1 线程池初始化"></a>3.1 线程池初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">_ARouter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【1】DefaultPoolExecutor 是 _ARouter 的静态变量；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance();</span><br></pre></td></tr></table></figure><p>然后再初始化 LogisticsCenter 的时候传递给了 LogisticsCenter；</p><h2 id="3-2-DefaultPoolExecutor"><a href="#3-2-DefaultPoolExecutor" class="headerlink" title="3.2 DefaultPoolExecutor"></a>3.2 DefaultPoolExecutor</h2><p>我们来看下线程池的构造，这里要重点看看线程池的核心参数：</p><h3 id="3-2-1-getInstance"><a href="#3-2-1-getInstance" class="headerlink" title="3.2.1 getInstance"></a>3.2.1 getInstance</h3><p>单例模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultPoolExecutor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DefaultPoolExecutor.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;3.2.2】创建线程池；</span></span><br><span class="line">                instance = <span class="keyword">new</span> DefaultPoolExecutor(</span><br><span class="line">                        INIT_THREAD_COUNT,</span><br><span class="line">                        MAX_THREAD_COUNT,</span><br><span class="line">                        SURPLUS_THREAD_LIFE,</span><br><span class="line">                        TimeUnit.SECONDS,</span><br><span class="line">                        <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">64</span>),</span><br><span class="line">                        <span class="keyword">new</span> DefaultThreadFactory());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-new-DefaultPoolExecutor"><a href="#3-2-2-new-DefaultPoolExecutor" class="headerlink" title="3.2.2 new DefaultPoolExecutor"></a>3.2.2 new DefaultPoolExecutor</h3><p>我们来研究下 DefaultPoolExecutor 的一些核心参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DefaultPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, </span></span></span><br><span class="line"><span class="function"><span class="params">                            ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, <span class="keyword">new</span> RejectedExecutionHandler() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">             ARouter.logger.error(Consts.TAG, <span class="string">"Task rejected, too many task!"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 DefaultPoolExecutor 内部的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors(); <span class="comment">// Java 虚拟机的可用的处理器数量；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_THREAD_COUNT = CPU_COUNT + <span class="number">1</span>;  <span class="comment">// 核心线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_THREAD_COUNT = INIT_THREAD_COUNT;  <span class="comment">// 最大线程数；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SURPLUS_THREAD_LIFE = <span class="number">30L</span>; <span class="comment">// 空闲线程在</span></span><br></pre></td></tr></table></figure><p>可以看到，线程池的参数如下：</p><ul><li>corePoolSize：核心线程数是可用的处理器数量 + 1；</li><li>maximumPoolSize：最大线程数是可用的处理器数量；</li><li>keepAliveTime：空闲线程存活时间：30s；</li><li>workQueue：阻塞队列是 ArrayBlockingQueue，数组实现的阻塞队列，有界 64；</li><li>threadFactory：线程工厂类，自定义的 DefaultThreadFactory 类；</li><li>RejectedExecutionHandler：线程池在无法处理添加的 runnnable 时的处理机制，这里是自定义了一个 RejectedExecutionHandler，只是打印了一个 Log；</li></ul><h2 id="3-3-DefaultThreadFactory"><a href="#3-3-DefaultThreadFactory" class="headerlink" title="3.3 DefaultThreadFactory"></a>3.3 DefaultThreadFactory</h2><p>ARouter 内部自定义的线程工厂类，DefaultThreadFactory 需要实现 ThreadFactory 接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里通过 SecurityManager 来设置 thread 的 group；</span></span><br><span class="line">    SecurityManager s = System.getSecurityManager();</span><br><span class="line">    group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">    namePrefix = <span class="string">"ARouter task pool No."</span> + poolNumber.getAndIncrement() + <span class="string">", thread No."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看 newThread 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(@NonNull Runnable runnable)</span> </span>&#123;</span><br><span class="line">    String threadName = namePrefix + threadNumber.getAndIncrement();</span><br><span class="line">    ARouter.logger.info(Consts.TAG, <span class="string">"Thread production, name is ["</span> + threadName + <span class="string">"]"</span>);</span><br><span class="line">    <span class="comment">//【1】创建线程，一个线程对应一个 runnable；</span></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(group, runnable, threadName, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (thread.isDaemon()) &#123;   <span class="comment">//【2】设为非后台线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thread.getPriority() != Thread.NORM_PRIORITY) &#123; <span class="comment">// 【2】优先级为 normal</span></span><br><span class="line">        thread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】捕获多线程处理中的异常</span></span><br><span class="line">    thread.setUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</span><br><span class="line">            ARouter.logger.info(Consts.TAG, <span class="string">"Running task appeared exception! Thread ["</span> + thread.getName() + <span class="string">"], because ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 的服务和拦截器的相关机制</p><ul><li>拦截器的初始化和拦截操作都是在子线程中处理的，拦截器使用了责任链模式；</li><li>子线程通过线程池管理，采用了单例模式；</li><li>拦截器是使用了责任链模式，通过它使用 CountDownLatch 来实现了路由等待的操作；</li></ul><p>但是遗留了几个问题：</p><ul><li>AutowiredService 和 AutowiredServiceImpl 是如何工作的；</li><li>ClassLoaderService 是如何工作的；</li></ul><p>我们下次再说～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第四篇 - 路由初始化 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/"/>
    <id>https://coolqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/</id>
    <published>2019-04-23T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:46.859Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>绘图工具：PlantXML</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>我们先来看看模块结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">└── com</span><br><span class="line">    └── alibaba</span><br><span class="line">        └── android</span><br><span class="line">            └── arouter</span><br><span class="line">                ├── base</span><br><span class="line">                │   └── UniqueKeyTreeMap.java</span><br><span class="line">                ├── core</span><br><span class="line">                │   ├── AutowiredLifecycleCallback.java</span><br><span class="line">                │   ├── AutowiredServiceImpl.java</span><br><span class="line">                │   ├── InstrumentationHook.java</span><br><span class="line">                │   ├── InterceptorServiceImpl.java</span><br><span class="line">                │   ├── LogisticsCenter.java</span><br><span class="line">                │   └── Warehouse.java</span><br><span class="line">                ├── exception</span><br><span class="line">                │   ├── HandlerException.java</span><br><span class="line">                │   ├── InitException.java</span><br><span class="line">                │   └── NoRouteFoundException.java</span><br><span class="line">                ├── facade</span><br><span class="line">                │   ├── Postcard.java</span><br><span class="line">                │   ├── callback</span><br><span class="line">                │   │   ├── InterceptorCallback.java</span><br><span class="line">                │   │   ├── NavCallback.java</span><br><span class="line">                │   │   └── NavigationCallback.java</span><br><span class="line">                │   ├── service</span><br><span class="line">                │   │   ├── AutowiredService.java</span><br><span class="line">                │   │   ├── ClassLoaderService.java</span><br><span class="line">                │   │   ├── DegradeService.java</span><br><span class="line">                │   │   ├── InterceptorService.java</span><br><span class="line">                │   │   ├── PathReplaceService.java</span><br><span class="line">                │   │   ├── PretreatmentService.java</span><br><span class="line">                │   │   └── SerializationService.java</span><br><span class="line">                │   └── template</span><br><span class="line">                │       ├── IInterceptor.java</span><br><span class="line">                │       ├── IInterceptorGroup.java</span><br><span class="line">                │       ├── ILogger.java</span><br><span class="line">                │       ├── IPolicy.java</span><br><span class="line">                │       ├── IProvider.java</span><br><span class="line">                │       ├── IProviderGroup.java</span><br><span class="line">                │       ├── IRouteGroup.java</span><br><span class="line">                │       ├── IRouteRoot.java</span><br><span class="line">                │       └── ISyringe.java</span><br><span class="line">                ├── launcher</span><br><span class="line">                │   ├── ARouter.java</span><br><span class="line">                │   └── _ARouter.java</span><br><span class="line">                ├── thread</span><br><span class="line">                │   ├── CancelableCountDownLatch.java</span><br><span class="line">                │   ├── DefaultPoolExecutor.java</span><br><span class="line">                │   └── DefaultThreadFactory.java</span><br><span class="line">                └── utils</span><br><span class="line">                    ├── ClassUtils.java</span><br><span class="line">                    ├── Consts.java</span><br><span class="line">                    ├── DefaultLogger.java</span><br><span class="line">                    ├── MapUtils.java</span><br><span class="line">                    ├── PackageUtils.java</span><br><span class="line">                    └── TextUtils.java</span><br></pre></td></tr></table></figure><p> 可以看到，有如下的 package：</p><ul><li><strong>base</strong>：数据缓存类，内部提供了一个 treeMap 实现，用于存储 intercepter；</li><li><strong>core</strong>：核心类，ARouter的核心功能都在这里实现；</li><li><strong>exception</strong>：异常相关，主要是定义了内部的一些异常；</li><li><strong>facade</strong>：通过外观模式对外提供统一的接口，下面有三个子包：<ul><li><strong>callback</strong>：提供回调接口，以及默认的回调处理；</li><li><strong>service</strong>：ARouter 内部已经实现的一些 Service，对外提供拦截等功能；</li><li><strong>template</strong>：包含模版，提供了大量的模版接口，可以通过实现接口，配合注解，实现自定义的功能；</li></ul></li><li><strong>launcher</strong>：ARouter 的入口；</li><li><strong>thread</strong>：线程操作类；</li><li><strong>utils</strong>：提供多个工具类</li></ul><h1 id="2-初始化方法"><a href="#2-初始化方法" class="headerlink" title="2  初始化方法"></a>2  初始化方法</h1><p>我们在使用时，必须要做初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两行必须写在 init 之前，否则这些配置在 init 过程中将无效；     </span></span><br><span class="line"><span class="comment">//【1】打印日志；</span></span><br><span class="line">ARouter.openLog();</span><br><span class="line"><span class="comment">//【2】开启调试模式（如果在 InstantRun 模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险）；</span></span><br><span class="line">ARouter.openDebug();</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在 Application 中初始化；</span></span><br></pre></td></tr></table></figure><p>接下来，我们来看看 init 的过程：</p><h1 id="3-Launcher-包"><a href="#3-Launcher-包" class="headerlink" title="3 Launcher 包"></a>3 Launcher 包</h1><h2 id="3-1-ARouter"><a href="#3-1-ARouter" class="headerlink" title="3.1 ARouter"></a>3.1 ARouter</h2><p>ARouter 是整个库的入口！</p><h3 id="3-1-1-成员变量"><a href="#3-1-1-成员变量" class="headerlink" title="3.1.1 成员变量"></a>3.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Key of raw uri</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ILogger logger;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-init"><a href="#3-1-2-init" class="headerlink" title="3.1.2 init"></a>3.1.2 init</h3><p>我们来看看 init 初始化的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        logger = _ARouter.logger;</span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init start."</span>);</span><br><span class="line">        <span class="comment">//【--&gt;3.2.2】执行初始化；</span></span><br><span class="line">        hasInit = _ARouter.init(application);</span><br><span class="line">        <span class="keyword">if</span> (hasInit) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.2.3】执行初始化后面的操作；</span></span><br><span class="line">            _ARouter.afterInit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init over."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-getInstance"><a href="#3-1-3-getInstance" class="headerlink" title="3.1.3 getInstance"></a>3.1.3 getInstance</h3><p>获得 ARouter 的实例（单例模式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouter::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】ARouter 的构造器方法体是空的；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> ARouter(); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了单例模式创建：ARouter ！</p><h3 id="3-1-4-build"><a href="#3-1-4-build" class="headerlink" title="3.1.4 build"></a>3.1.4 build</h3><p>afterInit 方法中传入了 “/arouter/service/interceptor” 参数，创建跳转信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.4】返回 _ARouter 的实例</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.5】创建跳转信息；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().build(path);</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不关注其他的方法；</span></span><br></pre></td></tr></table></figure><p>ARouter 提供了下面的多个方法用于创建跳转信息：</p><ul><li><p><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法；</p></li><li><p><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</p></li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>可以看到，最后调用的是 _ARouter 的方法，注意这个方法返回的是：</p><ul><li><strong>Postcard</strong>：继承了 RouteMeta，用于封装跳转信息；</li></ul><h3 id="3-1-5-navigation"><a href="#3-1-5-navigation" class="headerlink" title="3.1.5 navigation"></a>3.1.5 navigation</h3><p>执行跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】通过跳转，返回服务对象；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(service);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context mContext, Postcard postcard, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】执行跳转，这也是真正的跳转接口；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARouter 提供了 2 个跳转接口：</p><ul><li><code>navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>，实际上并不是跳转接口；</li><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>这篇博文先不讲 <strong>navigation</strong>，我们分析初始化 init 的过程：</p><ul><li><code>interceptorService = (InterceptorService) ARouter.getInstance().build(&quot;/arouter/service/interceptor&quot;).navigation();</code>    <ul><li>在执行 <strong>afterInit</strong> 的时候，<strong>会通过 navigation 方法返回 InterceptorServiceIpml 实例</strong>，这个方法我们跟踪了代码，调的是第二个 <strong>navigation</strong> 方法；</li></ul></li><li><code>PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</code><ul><li>而在获得  InterceptorService 实例的时候，会<strong>先调用 build 方法</strong>，获得 <strong>PathReplaceService</strong> 实例，这里就是<strong>第一个 navigation 方法</strong>，但是这里我们不分析它；</li><li>实际上 <strong>PathReplaceService 和 InterceptorServiceImpl 的获取方式是一样的</strong>！</li></ul></li></ul><h2 id="3-2-ARouter"><a href="#3-2-ARouter" class="headerlink" title="3.2 _ARouter"></a>3.2 _ARouter</h2><h3 id="3-2-1-成员变量"><a href="#3-2-1-成员变量" class="headerlink" title="3.2.1 成员变量"></a>3.2.1 成员变量</h3><p>下面是 _ARouter 的成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG); <span class="comment">// Log 系统，位于 utils 包；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance(); <span class="comment">// 线程池对象，由 DefaultPoolExecutor 创建；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InterceptorService interceptorService; <span class="comment">// 用于执行所有的 Interceptor；</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-init"><a href="#3-2-2-init" class="headerlink" title="3.2.2 init"></a>3.2.2 init</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    mContext = application;</span><br><span class="line">    <span class="comment">//【--&gt;4.1.2】初始化 LogisticsCenter</span></span><br><span class="line">    LogisticsCenter.init(mContext, executor);</span><br><span class="line">    logger.info(Consts.TAG, <span class="string">"ARouter init success!"</span>);</span><br><span class="line">    hasInit = <span class="keyword">true</span>; <span class="comment">// 判断是否 init；</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()); <span class="comment">// 主线程的 handler</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化 LogisticsCenter 的时候，传入了一个线程池！</p><h3 id="3-2-3-afterInit"><a href="#3-2-3-afterInit" class="headerlink" title="3.2.3 afterInit"></a>3.2.3 afterInit</h3><p> 在 ARouter 执行完成初始化之后，会触发 interceptor 的 init 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.3】获取 ARouter 的实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;3.1.4】build 跳转信息，返回一个 PostCard 实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;6.1.3】执行 PostCard 的 nativagation 方法，获得系统服务 InterceptorServiceImpl 实例；</span></span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，获取 InterceptorServiceImpl 实例，是通过 PostCard.navigation 方法的！</p><p><strong>build 的参数传入的是 “/arouter/service/interceptor”</strong>，这里我们要获取一个 InterceptorServiceImpl 实例 ！</p><h3 id="3-2-4-getInstance"><a href="#3-2-4-getInstance" class="headerlink" title="3.2.4 getInstance"></a>3.2.4 getInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> _ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouterCore::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (_ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】_ARouter 的构造器是空的，就不再分析了；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> _ARouter();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单例模式创建 _ARouter 对象；</p><h3 id="3-2-5-build"><a href="#3-2-5-build" class="headerlink" title="3.2.5 build"></a>3.2.5 build</h3><p>ARouter.build 的方法，最后会掉到 _ARouter 中来；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 path，并对 path 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】调用第三个方法：</span></span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不看其他的 build 方法！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path, String group)</span> </span>&#123; <span class="comment">// Route,path, Route.group；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || TextUtils.isEmpty(group)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 uri，并对 uri 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;5.1】返回跳转信息；</span></span><br><span class="line">        <span class="comment">//【--&gt;6.1.1】创建跳转实例 Postcard；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(path, group);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，也是有三个重载函数：</p><ul><li><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法，这个方法会调用第二个；</li><li><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>（注意：这里有一个 <strong>PathReplaceService</strong>，用于在跳转前，拦截 path，并对 path 做处理，这个 Service 和路由跳转有关系，初始化这里我们先不过多分析！）</p><h4 id="3-2-5-1-extractGroup"><a href="#3-2-5-1-extractGroup" class="headerlink" title="3.2.5.1 extractGroup"></a>3.2.5.1 extractGroup</h4><p>这个方法的作用是对 path 做修正，看 path 是否正确，同时根据 path 生成 group：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">extractGroup</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】校验 path 是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed, the path must be start with"</span> </span><br><span class="line">                                   + <span class="string">"'/' and contain more than 2 '/'!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3】根据 path 生成 group；</span></span><br><span class="line">        String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed! There's nothing between 2 '/'!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultGroup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-navigation"><a href="#3-2-6-navigation" class="headerlink" title="3.2.6 navigation"></a>3.2.6 navigation</h3><p>最后会进入 _ARouter 的 navigation 方法中，我们看到，该方法的逻辑还是很多的，注意，这里我们传入的 callback 是 null 的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*important】这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 PretreatmentService 服务，对 Postcard 做预处理；</span></span><br><span class="line">    <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.2】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">///【1】当完善失败，则通过 callback.onLost 提示用户！</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*important】如果没有指定 callback，显然通过降级服务处理！</span></span><br><span class="line">            <span class="comment">// 这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 DegradeService 服务，对 Postcard 做预处理；</span></span><br><span class="line">            <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【2】回调 onFound 方法，表示跳转信息有效；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;6.1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【*important】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_ARouter 也提供了 2 个跳转接口</strong>：</p><ul><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>同样的，我们也只看 <code>init</code>的过程，也就是获取 <strong>InterceptorServiceImpl</strong> 实例的过程，这个过程调用的是上面的四参方法；</p><ul><li><p><code>&lt;T&gt; T navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.4】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>实际上并不是跳转接口，<strong>PathReplaceService</strong>，<strong>PretreatmentService</strong>，<strong>DegradeService</strong> 都是通过这个方法获取！</p><p>我们后面统一进行分析！</p><h3 id="3-2-7-navigation"><a href="#3-2-7-navigation" class="headerlink" title="3.2.7 _navigation"></a>3.2.7 _navigation</h3><p>最后会调用 _navigation 返回我们的 InterceptorServiceImpl 实例，我们知道 <strong>InterceptorServiceImpl 是 PROVIDER 类型的</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">// Build intent</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set flags.</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set Actions</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Navigation in main looper.</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【over】返回了 iprovider 实例，就是我们的 InterceptorServiceImpl 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到其他类型的处理，我们在路由跳转的时候再分析；</p><h1 id="4-core-包"><a href="#4-core-包" class="headerlink" title="4 core 包"></a>4 core 包</h1><h2 id="4-1-LogisticsCenter-核心一号种子"><a href="#4-1-LogisticsCenter-核心一号种子" class="headerlink" title="4.1 LogisticsCenter - 核心一号种子"></a>4.1 LogisticsCenter - 核心一号种子</h2><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"><span class="keyword">static</span> ThreadPoolExecutor executor; <span class="comment">// 线程池；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> registerByPlugin; <span class="comment">// 是否通过插件自动注册；</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-init"><a href="#4-1-2-init" class="headerlink" title="4.1.2 init"></a>4.1.2 init</h3><p>执行 init 操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, ThreadPoolExecutor tpe)</span> <span class="keyword">throws</span> HandlerException </span>&#123;</span><br><span class="line">  mContext = context;</span><br><span class="line">  executor = tpe;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> startInit = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//【--&gt;5.1.1】是否使用 arouter-auto-register 插件来加载路由表；</span></span><br><span class="line">    loadRouterMap();</span><br><span class="line">    <span class="keyword">if</span> (registerByPlugin) &#123;</span><br><span class="line">      logger.info(TAG, <span class="string">"Load router map by arouter-auto-register plugin."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 默认情况下是进入这里：</span></span><br><span class="line">      Set&lt;String&gt; routerMap;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【1】如果开启了 debug 模式或者说 Apk 发生了更新，那么 ARouter 会重建路由表；</span></span><br><span class="line">      <span class="comment">//【--&gt;9.2.2】isNewVersion 判断 apk 是否是新的安装；</span></span><br><span class="line">      <span class="keyword">if</span> (ARouter.debuggable() || PackageUtils.isNewVersion(context)) &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Run with debug mode or new install, rebuild router map."</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//【--&gt;9.1.2】这里更新路由表，通过包名 com.alibaba.android.arouter.routes，扫描包下面包含的所有的类的 ClassName</span></span><br><span class="line">        <span class="comment">// 这个包是在 arouter complier 阶段生成的，里面包含解析注解生成的 java 类；</span></span><br><span class="line">        routerMap = ClassUtils.getFileNameByPackageName(mContext, ROUTE_ROOT_PAKCAGE);</span><br><span class="line">        <span class="keyword">if</span> (!routerMap.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">//【1.1】当我们能够扫描到路由信息后，会将这个信息保存到本地 sp 中；</span></span><br><span class="line">          context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(AROUTER_SP_KEY_MAP, routerMap).apply();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PackageUtils.updateVersion(context); <span class="comment">//【--&gt;9.2.3】保存版本号；</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Load router map from cache."</span>);</span><br><span class="line">        <span class="comment">//【2】其他情况，是默认从本地缓存中读取路由表的！</span></span><br><span class="line">        routerMap = <span class="keyword">new</span> HashSet&lt;&gt;(context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(AROUTER_SP_KEY_MAP, <span class="keyword">new</span> HashSet&lt;String&gt;()));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.info(TAG, <span class="string">"Find router map finished, map size = "</span> + routerMap.size() + <span class="string">", cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line">      startInit = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【2】处理路由表的信息，在前面，我们将 aouter-compiler 在编译时期生成的 class 都加载到了 routerMap 中了；</span></span><br><span class="line">      <span class="keyword">for</span> (String className : routerMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_ROOT)) &#123;</span><br><span class="line">          <span class="comment">//【2.1】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Root，符合前缀的都是 IRouteRoot 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.groupsIndex；</span></span><br><span class="line">          ((IRouteRoot) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.groupsIndex);</span><br><span class="line">         </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_INTERCEPTORS)) &#123;</span><br><span class="line">          <span class="comment">//【2.2】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Interceptors，符合前缀的都是 IInterceptorGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.interceptorsIndex；</span></span><br><span class="line">          ((IInterceptorGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.interceptorsIndex);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_PROVIDERS)) &#123;</span><br><span class="line">          <span class="comment">//【2.3】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Providers，符合前缀的都是 IProviderGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.providersIndex；</span></span><br><span class="line">          ((IProviderGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.providersIndex);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(TAG, <span class="string">"Load root element finished, cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Warehouse.groupsIndex.size() == <span class="number">0</span>) &#123;</span><br><span class="line">      logger.error(TAG, <span class="string">"No mapping files were found, check your configuration please!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">      logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"LogisticsCenter has already been loaded, GroupIndex[%d], “ </span></span><br><span class="line"><span class="string">                                      + ”InterceptorIndex[%d], ProviderIndex[%d]"</span>, Warehouse.groupsIndex.size(),“ </span><br><span class="line">                                      + Warehouse.interceptorsIndex.size(), Warehouse.providersIndex.size()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init logistics center exception! ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，ARouter 会将路由表存储在本地缓存 sp 中，在版本号发生变化的时候会处理，上面的这些常量定义在 Consts 中。</p><p>我们还记得 arouter compiler 在动态生成代码的时候，会创建 IRouteRoot，IInterceptorGroup，IProviderGroup 的子类，我们通过 Route，intercepor  注解的元素都会被封装成 RouteMeta 实例，通过 loadInto 方法，加入到 Warehouse 对应的集合中！</p><p>下面我们通过之前动态代码来分析：</p><ul><li>如果前缀是 <code>ARouter$$Root</code>, 那么会触发 <code>ARouter$$Root$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.groupsIndex</strong>，这样，我们就可以通过它按组加载了；</p><ul><li>如果前缀是 <code>ARouter$$Interceptors</code>, 那么会触发 <code>ARouter$$Interceptors$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.interceptorsIndex</strong></p><ul><li>如果前缀是 <code>ARouter$$Providers</code>, 那么会触发 <code>ARouter$$Providers$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.providersIndex</strong></p><h4 id="4-2-1-1-loadRouterMap"><a href="#4-2-1-1-loadRouterMap" class="headerlink" title="4.2.1.1 loadRouterMap"></a>4.2.1.1 loadRouterMap</h4><p>这个方法用于判断是否通过 arouter-auto-register 插件自动注册路由；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRouterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    registerByPlugin = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//auto generate register code by gradle plugin: arouter-auto-register</span></span><br><span class="line">    <span class="comment">// looks like below:</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulejava());</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulekotlin());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果使用了 arouter-auto-register 插件，那么会自动执行 registerRouteRoot 相关代码；</p><p>这里我们先不看和 arouter-auto-register 相关的代码：</p><p>这个方法默认是将 registerByPlugin 设置为 false；</p><h3 id="4-1-3-buildProvider"><a href="#4-1-3-buildProvider" class="headerlink" title="4.1.3 buildProvider"></a>4.1.3 buildProvider</h3><p>通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;6.1.2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-completion"><a href="#4-1-4-completion" class="headerlink" title="4.1.4 completion"></a>4.1.4 completion</h3><p>完善跳转信息，completion 会通过 Warehouse 的数据，填充 Postcard！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【1】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.2】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】这里是通过 RouteMeta 来设置 Postcard 对象；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        <span class="comment">//【3】如果指定了 uri 就要从 uri 中设置传递的数据了，显然，这里我们并没有设置 Uri；</span></span><br><span class="line">        <span class="comment">// 我们也没有传递数据，只是为了获取 InterceptorServiceImpl 实例，我们先不看！</span></span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里和 AutoInject 有关系，我们先不看！</span></span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER；</span></span><br><span class="line">                <span class="comment">// routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【--&gt;4.3】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【--&gt;4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;6.1.1】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【--&gt;6.1.1】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存处理</strong>：</p><ul><li><strong>Warehouse.groupsIndex —&gt; Warehouse.routes</strong></li></ul><p>这里优先从 Warehouse.groupsIndex 中读取，Warehouse.groupsIndex 中保存的是类似下面的数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br></pre></td></tr></table></figure><p>这里会从 Warehouse.groupsIndex 中，获取 group 对应的类，并创建实例，比如 <code>ARouter$$Group$$coolqiService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                                                                       <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, </span><br><span class="line">                                                                       <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，调用其 loadInto 方法，就会将数据加入到 <code>Warehouse.routes</code> 中；</p><ul><li><strong>Warehouse.providers</strong></li></ul><p><strong>上面涉及到了数据处理，我们先不看，后面再分析</strong>；</p><h2 id="4-2-WareHouse-核心二号种子"><a href="#4-2-WareHouse-核心二号种子" class="headerlink" title="4.2 WareHouse - 核心二号种子"></a>4.2 WareHouse - 核心二号种子</h2><p>WareHouse 是 ARouter 的数据仓库，存储跳转的信息！</p><h3 id="4-2-1-成员变量"><a href="#4-2-1-成员变量" class="headerlink" title="4.2.1 成员变量"></a>4.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】保存动态生成的 ARouter$$Root$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; groupsIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; routes = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】保存动态生成的 ARouter$$Providers$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; providersIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;Class, IProvider&gt; providers = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存，key：类名，value：实例；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】保存动态生成的 ARouter$$Interceptors$$moduleName.loadInto 方法加载的数据；【--&gt;5.1】对于 interceptor，是通过 UniqueKeyTreeMap 来存放的！</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptorsIndex = <span class="keyword">new</span> UniqueKeyTreeMap&lt;&gt;(<span class="string">"More than one interceptors use same priority [%s]"</span>);</span><br><span class="line"><span class="keyword">static</span> List&lt;IInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 上面数据的缓存</span></span><br></pre></td></tr></table></figure><p>每次都会从 compiler 数据中获取数据保存到缓存数据中，然后删除  compiler 数据；</p><h3 id="4-2-2-clear"><a href="#4-2-2-clear" class="headerlink" title="4.2.2 clear"></a>4.2.2 clear</h3><p>清除内部数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routes.clear();</span><br><span class="line">    groupsIndex.clear();</span><br><span class="line">    providers.clear();</span><br><span class="line">    providersIndex.clear();</span><br><span class="line">    interceptors.clear();</span><br><span class="line">    interceptorsIndex.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WareHouse 只有一个 clear 方法，用来清除数据；</p><h2 id="4-3-InterceptorServiceImpl"><a href="#4-3-InterceptorServiceImpl" class="headerlink" title="4.3 InterceptorServiceImpl"></a>4.3 InterceptorServiceImpl</h2><p>InterceptorServiceImpl 他是 ARouter 内部实现的系统服务，是通过：<code>@Route(path = &quot;/arouter/service/interceptor&quot;)</code> 注解处理的，它的作用是<strong>用于处理拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/interceptor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorServiceImpl</span> <span class="keyword">implements</span> <span class="title">InterceptorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> interceptorHasInit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object interceptorInitLock = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-1-init"><a href="#4-3-1-init" class="headerlink" title="4.3.1 init"></a>4.3.1 init</h3><p>初始化所有的 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又涉及到缓存：<strong>Warehouse.interceptorsIndex —&gt;Warehouse.interceptors</strong>;</p><h1 id="5-base-包"><a href="#5-base-包" class="headerlink" title="5 base 包"></a>5 base 包</h1><h2 id="5-1-UniqueKeyTreeMap"><a href="#5-1-UniqueKeyTreeMap" class="headerlink" title="5.1 UniqueKeyTreeMap"></a>5.1 UniqueKeyTreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueKeyTreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String tipText;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniqueKeyTreeMap</span><span class="params">(String exceptionText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">        tipText = exceptionText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(tipText, key));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="6-facade-包"><a href="#6-facade-包" class="headerlink" title="6 facade 包"></a>6 facade 包</h1><h2 id="6-1-PostCard"><a href="#6-1-PostCard" class="headerlink" title="6.1 PostCard"></a>6.1 PostCard</h2><p>PostCard 继承了 RouteMeta，用于保存跳转的信息；</p><h3 id="6-1-1-成员变量"><a href="#6-1-1-成员变量" class="headerlink" title="6.1.1 成员变量"></a>6.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Uri uri;                <span class="comment">// uri</span></span><br><span class="line"><span class="keyword">private</span> Object tag;             <span class="comment">// A tag prepare for some thing wrong.</span></span><br><span class="line"><span class="keyword">private</span> Bundle mBundle;         <span class="comment">// 数据 bundle；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flags = -<span class="number">1</span>;         <span class="comment">// 跳转的 flags，用于 activity；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">300</span>;      <span class="comment">// Navigation timeout, TimeUnit.Second</span></span><br><span class="line"><span class="keyword">private</span> IProvider provider;     <span class="comment">// 如果跳转的目标实例是 IProvider 的子类，那么该值不为 null；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> greenChannel;   <span class="comment">// 是否跳过所有的拦截器；</span></span><br><span class="line"><span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Bundle optionsCompat;    <span class="comment">// 和动画相关的属性；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> enterAnim = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> exitAnim = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-new-Postcard"><a href="#6-1-2-new-Postcard" class="headerlink" title="6.1.2 new Postcard"></a>6.1.2 new Postcard</h3><p>创建了一个 Postcard 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】最终会调用这个方法；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path); <span class="comment">// 设置 path</span></span><br><span class="line">    setGroup(group); <span class="comment">// 设置 group</span></span><br><span class="line">    setUri(uri); <span class="comment">// 设置 uri</span></span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>在初始化过程中，我们传入的 path：”/arouter/service/interceptor”</p><h3 id="6-1-3-navigation"><a href="#6-1-3-navigation" class="headerlink" title="6.1.3 navigation"></a>6.1.3 navigation</h3><p>在初始化过程中，执行 navigation 方法，获取系统拦截器：<strong>InterceptorServiceImpl</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.5】调用了 ARouter 的 navigation 方法！</span></span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 <strong>NavigationCallback callback</strong> 的概念：<strong>跳转回调</strong>！ </p><h1 id="9-Utils-包"><a href="#9-Utils-包" class="headerlink" title="9 Utils 包"></a>9 Utils 包</h1><h2 id="9-1-ClassUtils"><a href="#9-1-ClassUtils" class="headerlink" title="9.1 ClassUtils"></a>9.1 ClassUtils</h2><h3 id="9-1-1-成员变量"><a href="#9-1-1-成员变量" class="headerlink" title="9.1.1 成员变量"></a>9.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_NAME_EXT = <span class="string">".classes"</span>; <span class="comment">// 文件后缀</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_SUFFIX = <span class="string">".zip"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECONDARY_FOLDER_NAME = <span class="string">"code_cache"</span> + File.separator + <span class="string">"secondary-dexes"</span>; <span class="comment">// 文件路径 /code_cache/secondary-dexes；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFS_FILE = <span class="string">"multidex.version"</span>; <span class="comment">// 记录 mutilDex 信息的 sp name；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_DEX_NUMBER = <span class="string">"dex.number"</span>; <span class="comment">// sp key 值，记录 dex 的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MAJOR = <span class="number">2</span>; <span class="comment">// VM 相关，用于判断 vm 是否支持 multiDex；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MINOR = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="9-1-2-getFileNameByPackageName"><a href="#9-1-2-getFileNameByPackageName" class="headerlink" title="9.1.2 getFileNameByPackageName"></a>9.1.2 getFileNameByPackageName</h3><p>通过指定包名，扫描 Apk 下面包含的所有类的 ClassName:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getFileNameByPackageName</span><span class="params">(Context context, <span class="keyword">final</span> String packageName)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; classNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//【--&gt;9.1.3】获取 apk 源代码（dex）的路径；</span></span><br><span class="line">    List&lt;String&gt; paths = getSourcePaths(context);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch parserCtl = <span class="keyword">new</span> CountDownLatch(paths.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> String path : paths) &#123;</span><br><span class="line">        DefaultPoolExecutor.getInstance().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DexFile dexfile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【2】根据文件后缀的不同，会执行不通的操作，如果后缀是 .zip，那么回调用 DexFile.loadDex 方法；</span></span><br><span class="line">                    <span class="keyword">if</span> (path.endsWith(EXTRACTED_SUFFIX)) &#123; </span><br><span class="line">                        dexfile = DexFile.loadDex(path, path + <span class="string">".tmp"</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dexfile = <span class="keyword">new</span> DexFile(path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3】遍历 dex 文件，找到该 apk 的所有 class，并返回其 class name；</span></span><br><span class="line">                    Enumeration&lt;String&gt; dexEntries = dexfile.entries();</span><br><span class="line">                    <span class="keyword">while</span> (dexEntries.hasMoreElements()) &#123;</span><br><span class="line">                        String className = dexEntries.nextElement();</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(packageName)) &#123;</span><br><span class="line">                            classNames.add(className);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                    Log.e(<span class="string">"ARouter"</span>, <span class="string">"Scan map file in dex files made error."</span>, ignore);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != dexfile) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            dexfile.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    parserCtl.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parserCtl.await();</span><br><span class="line"></span><br><span class="line">    Log.d(Consts.TAG, <span class="string">"Filter "</span> + classNames.size() + <span class="string">" classes by packageName &lt;"</span> + packageName + <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> classNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-1-3-getSourcePaths"><a href="#9-1-3-getSourcePaths" class="headerlink" title="9.1.3 getSourcePaths"></a>9.1.3 getSourcePaths</h3><p>获取源代码路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getSourcePaths</span><span class="params">(Context context)</span> <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException </span>&#123;</span><br><span class="line">    ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), <span class="number">0</span>);</span><br><span class="line">    File sourceApk = <span class="keyword">new</span> File(applicationInfo.sourceDir);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; sourcePaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    sourcePaths.add(applicationInfo.sourceDir);<span class="comment">//【1】添加默认的 apk 源路径；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】文件前缀：name.classes</span></span><br><span class="line">    String extractedFilePrefix = sourceApk.getName() + EXTRACTED_NAME_EXT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;9.1.3.1】判断 vm 是否支持 multiDex，如何已经支持了 muitiDex，那就不去 Secondary Folder 加载 Classesx.zip</span></span><br><span class="line">    <span class="keyword">if</span> (!isVMMultidexCapable()) &#123;</span><br><span class="line">        <span class="comment">//【2】不支持 multiDex，那就要去加载 Classesx.zip；</span></span><br><span class="line">        <span class="keyword">int</span> totalDexNumber = getMultiDexPreferences(context).getInt(KEY_DEX_NUMBER, <span class="number">1</span>); <span class="comment">//【--&gt;9.1.3.2】获取 dex 的数量；</span></span><br><span class="line">        File dexDir = <span class="keyword">new</span> File(applicationInfo.dataDir, SECONDARY_FOLDER_NAME); <span class="comment">// 获取存放其他 dex 的目录；</span></span><br><span class="line">        <span class="comment">//【3】收集 Secondary Folder 目录下的 dex 的路径；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> secondaryNumber = <span class="number">2</span>; secondaryNumber &lt;= totalDexNumber; secondaryNumber++) &#123;</span><br><span class="line">            <span class="comment">//【3.1】每个 dex file 的文件名都是：name.classes.zip，添加到 sourcePaths 列表中；</span></span><br><span class="line">            String fileName = extractedFilePrefix + secondaryNumber + EXTRACTED_SUFFIX;</span><br><span class="line">            File extractedFile = <span class="keyword">new</span> File(dexDir, fileName);</span><br><span class="line">            <span class="keyword">if</span> (extractedFile.isFile()) &#123;</span><br><span class="line">                sourcePaths.add(extractedFile.getAbsolutePath());</span><br><span class="line">                <span class="comment">//we ignore the verify zip part</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Missing extracted secondary dex file '"</span> + extractedFile.getPath() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123; <span class="comment">// Search instant run support only debuggable</span></span><br><span class="line">        sourcePaths.addAll(tryLoadInstantRunDexFile(applicationInfo));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】返回收集的列表</span></span><br><span class="line">    <span class="keyword">return</span> sourcePaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程还是比较简单的；</p><h4 id="9-1-3-1-isVMMultidexCapable"><a href="#9-1-3-1-isVMMultidexCapable" class="headerlink" title="9.1.3.1 isVMMultidexCapable"></a>9.1.3.1 isVMMultidexCapable</h4><p>判断 vm 是否支持 multiDex：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVMMultidexCapable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> isMultidexCapable = <span class="keyword">false</span>;</span><br><span class="line">     String vmName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (isYunOS()) &#123; <span class="comment">//【1】YunOS 需要特殊判断</span></span><br><span class="line">             vmName = <span class="string">"'YunOS'"</span>;</span><br><span class="line">             isMultidexCapable = Integer.valueOf(System.getProperty(<span class="string">"ro.build.version.sdk"</span>)) &gt;= <span class="number">21</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">//【2】非 YunOS 原生 Android</span></span><br><span class="line">             vmName = <span class="string">"'Android'"</span>;</span><br><span class="line">             String versionString = System.getProperty(<span class="string">"java.vm.version"</span>);</span><br><span class="line">             <span class="keyword">if</span> (versionString != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">//【3】判断 java.vm.version 属性的 major 和 minor 的范围；</span></span><br><span class="line">                 Matcher matcher = Pattern.compile(<span class="string">"(\\d+)\\.(\\d+)(\\.\\d+)?"</span>).matcher(versionString);</span><br><span class="line">                 <span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                         <span class="keyword">int</span> major = Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line">                         <span class="keyword">int</span> minor = Integer.parseInt(matcher.group(<span class="number">2</span>));</span><br><span class="line">                         isMultidexCapable = (major &gt; VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 || ((major == VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 &amp;&amp; (minor &gt;= VM_WITH_MULTIDEX_VERSION_MINOR));</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (NumberFormatException ignore) &#123;</span><br><span class="line">                         <span class="comment">// let isMultidexCapable be false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Log.i(Consts.TAG, <span class="string">"VM with name "</span> + vmName + (isMultidexCapable ? <span class="string">" has multidex support"</span> : <span class="string">" does not have multidex support"</span>));</span><br><span class="line">     <span class="keyword">return</span> isMultidexCapable;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>不多说了 ；</p><h4 id="9-1-3-2-getMultiDexPreferences"><a href="#9-1-3-2-getMultiDexPreferences" class="headerlink" title="9.1.3.2 getMultiDexPreferences"></a>9.1.3.2 getMultiDexPreferences</h4><p>获取记录 multi dex 信息 sp，ARouter 将 dex 的数量保存到内部 sp 中，name： “multidex.version”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SharedPreferences <span class="title">getMultiDexPreferences</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> context.getSharedPreferences(PREFS_FILE, Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB </span><br><span class="line">                                         ? Context.MODE_PRIVATE : Context.MODE_PRIVATE | Context.MODE_MULTI_PROCESS);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-PackageUtils"><a href="#9-2-PackageUtils" class="headerlink" title="9.2 PackageUtils"></a>9.2 PackageUtils</h2><h3 id="9-2-1-成员变量"><a href="#9-2-1-成员变量" class="headerlink" title="9.2.1 成员变量"></a>9.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String NEW_VERSION_NAME;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> NEW_VERSION_CODE;</span><br></pre></td></tr></table></figure><p>用来缓存 apk 的版本号和版本名；</p><h3 id="9-2-2-isNewVersion"><a href="#9-2-2-isNewVersion" class="headerlink" title="9.2.2 isNewVersion"></a>9.2.2 isNewVersion</h3><p>判断 apk 是否是新的版本，包括第一次安装/更新安装；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNewVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 apk 的信息；</span></span><br><span class="line">    PackageInfo packageInfo = getPackageInfo(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != packageInfo) &#123;</span><br><span class="line">        <span class="comment">//【2】获取 apk 的版本名和版本号；</span></span><br><span class="line">        String versionName = packageInfo.versionName;</span><br><span class="line">        <span class="keyword">int</span> versionCode = packageInfo.versionCode;</span><br><span class="line"></span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【3】如何和本地缓存的不一样，那就说明是新版本；</span></span><br><span class="line">        <span class="keyword">if</span> (!versionName.equals(sp.getString(LAST_VERSION_NAME, <span class="keyword">null</span>)) || versionCode != sp.getInt(LAST_VERSION_CODE, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">//【3.1】将新的 versionCode 和 VersionName 缓存下来；</span></span><br><span class="line">            NEW_VERSION_NAME = versionName;</span><br><span class="line">            NEW_VERSION_CODE = versionCode;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-updateVersion"><a href="#9-2-3-updateVersion" class="headerlink" title="9.2.3 updateVersion"></a>9.2.3 updateVersion</h3><p>更新本地缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(NEW_VERSION_NAME) &amp;&amp; NEW_VERSION_CODE != <span class="number">0</span>) &#123;</span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【1】写入到本地 sp 中；</span></span><br><span class="line">        sp.edit().putString(LAST_VERSION_NAME, NEW_VERSION_NAME).putInt(LAST_VERSION_CODE, NEW_VERSION_CODE).apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>LAST_VERSION_NAME</strong>，<strong>LAST_VERSION_CODE</strong> 均定义在 Consts 中；</p><h2 id="9-x-Consts"><a href="#9-x-Consts" class="headerlink" title="9.x Consts"></a>9.x Consts</h2><p>常量类，保存了 arouter-api 中的常量关键字；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Consts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SDK_NAME = <span class="string">"ARouter"</span>; <span class="comment">// 这几个常量在 complier 中有见过，用于生成注解处理后的类的类名和包名；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SDK_NAME + <span class="string">"::"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_ROOT = <span class="string">"Root"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_INTERCEPTORS = <span class="string">"Interceptors"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_PROVIDERS = <span class="string">"Providers"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_AUTOWIRED = SEPARATOR + SDK_NAME + SEPARATOR + <span class="string">"Autowired"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOT = <span class="string">"."</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTE_ROOT_PAKCAGE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_CACHE_KEY = <span class="string">"SP_AROUTER_CACHE"</span>; <span class="comment">// 本地缓存 sp 的 name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_KEY_MAP = <span class="string">"ROUTER_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_NAME = <span class="string">"LAST_VERSION_NAME"</span>; <span class="comment">// 用于保存 apk 的版本号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_CODE = <span class="string">"LAST_VERSION_CODE"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-总结"><a href="#10-总结" class="headerlink" title="10 总结"></a>10 总结</h1><p>我们分析路由初始化的整个过程，设计的 pkg 也很多，但是细心的观察，我们其实已经分析了一些路由跳转的逻辑，哈哈哈。</p><p>当然，还有下面的问题遗漏了：</p><ul><li><code>PathReplaceService，PretreatmentService，DegradeService</code>：是如何获取的，作用又是什么呢？</li><li><code>facade.service</code> 下的这些 <code>Service</code> 都是如何工作的呢？</li><li><code>core</code>目录下的 <code>AutowiredServiceImpl</code> 和 <code>InterceptorServiceImpl</code>，又是如何工作的呢？</li><li>ARouter 如何处理跳转回调的呢？</li></ul><p>这些问题，我会在下篇：路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第三篇 - 注解解析 (arouter-compiler)</title>
    <link href="https://coolqi.top/2019/04/19/ARouter3-arouter-compiler/"/>
    <id>https://coolqi.top/2019/04/19/ARouter3-arouter-compiler/</id>
    <published>2019-04-19T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:57.132Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-compiler 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看  arouter-compiler  的模块结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____compiler</span><br><span class="line">| | | | | |____entity</span><br><span class="line">| | | | | | |____RouteDoc.java</span><br><span class="line">| | | | | |____processor</span><br><span class="line">| | | | | | |____BaseProcessor.java</span><br><span class="line">| | | | | | |____InterceptorProcessor.java</span><br><span class="line">| | | | | | |____AutowiredProcessor.java</span><br><span class="line">| | | | | | |____RouteProcessor.java</span><br><span class="line">| | | | | |____utils</span><br><span class="line">| | | | | | |____TypeUtils.java</span><br><span class="line">| | | | | | |____Consts.java</span><br><span class="line">| | | | | | |____Logger.java</span><br></pre></td></tr></table></figure><p>可以看到，一共有三个 pacakge：</p><ul><li>entity：包含了实体数据类；</li><li>processor：包含了所有的注解解释器类；</li><li>utils：包含了一些工具类；</li></ul><p>我们知道，在 Gradle 对 App 执行编译的时候，arouter-compiler 会对相关的注解进行解析，并动态生成所需的类；</p><p>arouter-compiler 模块还依赖了两个三方库：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></span><br><span class="line">implementation <span class="string">'com.squareup:javapoet:1.8.0'</span></span><br></pre></td></tr></table></figure><p><em>JavaPoet</em> 是 square 推出的开源 java 代码生成框架，提供 Java Api 生成 .java 源文件；</p><p>auto-service 是 google 提供的用于自动注册自定义注解处理器的三方库；</p><p>关于这两个库的源码，本系列文章不分析，后面单独分析；</p><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><p>我们分别分析下三个 package 目录下的 class 的作用！</p><h2 id="2-1-entity"><a href="#2-1-entity" class="headerlink" title="2.1 entity"></a>2.1 entity</h2><p>该 package 下面只包含一个实体数据类：RouteDoc。</p><h3 id="2-1-1-RouteDoc"><a href="#2-1-1-RouteDoc" class="headerlink" title="2.1.1 RouteDoc"></a>2.1.1 RouteDoc</h3><p>RouteDoc 用于描述路由跳转的信息，用于生成路由表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDoc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> String prototype;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mark;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Param&gt; params;</span><br><span class="line"></span><br><span class="line">    ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">private</span> String key;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">private</span> String description;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> required;</span><br><span class="line"></span><br><span class="line">        ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 processor 对注解进行解析的时候，它会把路由跳转相关的信息记录到 RouteDoc 中！</p><p>后面我们分析 processor 的时候就可以看到了！ </p><h2 id="2-2-processor-注解解析"><a href="#2-2-processor-注解解析" class="headerlink" title="2.2 processor - 注解解析"></a>2.2 processor - 注解解析</h2><p>该 package 下面包含 ARouter 的核心类：processors，根据前面的注解，一共有三个 processor，我们分别来分析！</p><p>重点要关注他们是如何“<strong>解析注解，并动态生成代码</strong>的！</p><h3 id="2-2-1-BaseProcessor"><a href="#2-2-1-BaseProcessor" class="headerlink" title="2.2.1 BaseProcessor"></a>2.2.1 BaseProcessor</h3><p>BaseProcessor 是其他三个 processor 的基类，定义了一些共有的属性和操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    Filer mFiler;</span><br><span class="line">    Logger logger;</span><br><span class="line">    Types types;</span><br><span class="line">    Elements elementUtils; <span class="comment">// 元素工具类对象；</span></span><br><span class="line">    TypeUtils typeUtils;</span><br><span class="line">    <span class="comment">//【1】模块的名称 name；</span></span><br><span class="line">    String moduleName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//【2】是否要生成 route doc；</span></span><br><span class="line">    <span class="keyword">boolean</span> generateDoc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        types = processingEnv.getTypeUtils();</span><br><span class="line">        elementUtils = processingEnv.getElementUtils();</span><br><span class="line">        <span class="comment">//【*2.3.2】创建 TypeUtils 对象，用于对类型做处理；</span></span><br><span class="line">        typeUtils = <span class="keyword">new</span> TypeUtils(types, elementUtils);</span><br><span class="line">        <span class="comment">//【*2.3.1】创建 Logger 对象，用于打印过程信息；</span></span><br><span class="line">        logger = <span class="keyword">new</span> Logger(processingEnv.getMessager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】获取 Processor 当前所在 moudle 的 name，判断是否生成路由文档；</span></span><br><span class="line">        <span class="comment">// 常量第一在 Consts 中；</span></span><br><span class="line">        Map&lt;String, String&gt; options = processingEnv.getOptions();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(options)) &#123;</span><br><span class="line">            moduleName = options.get(KEY_MODULE_NAME);</span><br><span class="line">            generateDoc = VALUE_ENABLE.equals(options.get(KEY_GENERATE_DOC_NAME));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(moduleName)) &#123; <span class="comment">// 这部分是对 moduleName 进行检查；</span></span><br><span class="line">            moduleName = moduleName.replaceAll(<span class="string">"[^0-9a-zA-Z_]+"</span>, <span class="string">""</span>);</span><br><span class="line">            logger.info(<span class="string">"The user has configuration the module name, it was ["</span> + moduleName + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(NO_MODULE_NAME_TIPS);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... <span class="comment">// getSupportedSourceVersion /getSupportedOptions</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面省略掉了一些非核心方法，我们不关注它们；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            <span class="comment">// 这里是核心配置点；</span></span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="string">AROUTER_MODULE_NAME:</span> project.getName(), <span class="string">AROUTER_GENERATE_DOC:</span> <span class="string">"enable"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 KEY_MODULE_NAME，KEY_GENERATE_DOC_NAME，对应的我们在 .gradle 中的配置，这些配置最终都会解析并保存到 ProcessingEnvironment 中；</p><p><strong>BaseProcessor</strong> 主要作用就是创建 TypeUtils 对象和 Logger 对象，然后获得当前所在 module 的 gradle 配置！</p><h3 id="2-2-2-RouteProcessor"><a href="#2-2-2-RouteProcessor" class="headerlink" title="2.2.2  RouteProcessor"></a>2.2.2  RouteProcessor</h3><p>核心解释器，用于处理 @Route 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_ROUTE, ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-2-1-Field"><a href="#2-2-2-1-Field" class="headerlink" title="2.2.2.1 Field"></a>2.2.2.1 Field</h4><p>内部变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key 是所属的组 group，value 是该组下的所有跳转信息 RouteMeta 对象；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Set&lt;RouteMeta&gt;&gt; groupMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; rootMap = <span class="keyword">new</span> TreeMap&lt;&gt;();  <span class="comment">// Map of root metas, used for generate class file in order.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TypeMirror iProvider = <span class="keyword">null</span>; <span class="comment">// .IProvider 的类型；</span></span><br><span class="line"><span class="keyword">private</span> Writer docWriter;       <span class="comment">// 用于生成路由文档；</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-Init"><a href="#2-2-2-2-Init" class="headerlink" title="2.2.2.2 Init"></a>2.2.2.2 Init</h4><p>初始化 processor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            docWriter = mFiler.createResource(</span><br><span class="line">                    StandardLocation.SOURCE_OUTPUT,</span><br><span class="line">                    PACKAGE_OF_GENERATE_DOCS,</span><br><span class="line">                    <span class="string">"arouter-map-of-"</span> + moduleName + <span class="string">".json"</span></span><br><span class="line">            ).openWriter();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Create doc writer failed, because "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; RouteProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-Process-处理-Route-注解"><a href="#2-2-2-3-Process-处理-Route-注解" class="headerlink" title="2.2.2.3 Process - 处理 Route 注解"></a>2.2.2.3 Process - 处理 Route 注解</h4><p>核心逻辑：注意，这里的参数 Set&lt;? extends TypeElement&gt; annotations ，表示的是要处理的注解，根据前面的内容：Route 和 AutoWired ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】这里返回了 @Route 处理的元素；</span></span><br><span class="line">        Set&lt;? extends Element&gt; routeElements = roundEnv.getElementsAnnotatedWith(Route.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found routes, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.2.3.1】开始处理注解修饰的元素；</span></span><br><span class="line">            <span class="keyword">this</span>.parseRoutes(routeElements);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里调用了 parseRoutes 方法：</p><h5 id="2-2-2-3-1-parseRoutes"><a href="#2-2-2-3-1-parseRoutes" class="headerlink" title="2.2.2.3.1 parseRoutes"></a>2.2.2.3.1 parseRoutes</h5><p>核心的核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRoutes</span><span class="params">(Set&lt;? extends Element&gt; routeElements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(routeElements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found routes, size is "</span> + routeElements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        rootMap.clear();</span><br><span class="line">        <span class="comment">//【1】保存 activity，service，fragment 的元素类型；</span></span><br><span class="line">        TypeMirror type_Activity = elementUtils.getTypeElement(ACTIVITY).asType();</span><br><span class="line">        TypeMirror type_Service = elementUtils.getTypeElement(SERVICE).asType();</span><br><span class="line">        TypeMirror fragmentTm = elementUtils.getTypeElement(FRAGMENT).asType();</span><br><span class="line">        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】获得 .IProvider/.IProviderGroup 对应的 TypeElement 对象；</span></span><br><span class="line">        TypeElement type_IRouteGroup = elementUtils.getTypeElement(IROUTE_GROUP);</span><br><span class="line">        TypeElement type_IProviderGroup = elementUtils.getTypeElement(IPROVIDER_GROUP);</span><br><span class="line">      <span class="comment">//【3】获得 RouteMeta 和 RouteType 的类全限定名；</span></span><br><span class="line">        ClassName routeMetaCn = ClassName.get(RouteMeta.class);</span><br><span class="line">        ClassName routeTypeCn = ClassName.get(RouteType.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】准备动态生成 java 代码：</span></span><br><span class="line">        <span class="comment">//【4.1】生成方法参数类型：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfRoot = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_IRouteGroup))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.2】生成方法参数类型：Map&lt;String, RouteMeta&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfGroup = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ClassName.get(RouteMeta.class)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.4】生成方法参数：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; atlas</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; providers</span></span><br><span class="line">        ParameterSpec rootParamSpec = ParameterSpec.builder(inputMapTypeOfRoot, <span class="string">"routes"</span>).build();</span><br><span class="line">        ParameterSpec groupParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"atlas"</span>).build();</span><br><span class="line">        ParameterSpec providerParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"providers"</span>).build(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.5】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfRootBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(rootParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】处理 @Route 注解修饰的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : routeElements) &#123;</span><br><span class="line">            TypeMirror tm = element.asType(); <span class="comment">// 获得 Route 注解的元素的类型信息；</span></span><br><span class="line">            Route route = element.getAnnotation(Route.class); <span class="comment">// 获得 Route 注解对象；</span></span><br><span class="line">            RouteMeta routeMeta; <span class="comment">// 用于封装跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (types.isSubtype(tm, type_Activity)) &#123;</span><br><span class="line">                <span class="comment">//【5.1】注解的元素是 activity 的子类；</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found activity route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; 类型枚举序号；</span></span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfig = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; Autowired 实例</span></span><br><span class="line">              </span><br><span class="line">                <span class="keyword">for</span> (Element field : element.getEnclosedElements()) &#123;</span><br><span class="line">                    <span class="comment">//【5.1.1】返回该元素直接包含的子元素（成员属性），处理内部哪些被 @Autowired 注解的成员属性（避开 IProvider 子类）；</span></span><br><span class="line">                    <span class="keyword">if</span> (field.getKind().isField() &amp;&amp; field.getAnnotation(Autowired.class) != <span class="keyword">null</span> &amp;&amp; !types.isSubtype(field.asType(), iProvider)) &#123;</span><br><span class="line">                        <span class="comment">// 必须是被 @Autowired 注解的属性，但是不能是 IProvider</span></span><br><span class="line">                        Autowired paramConfig = field.getAnnotation(Autowired.class);</span><br><span class="line">                        <span class="comment">//【5.1.1.1】根据是否设置 Autowired.name 对属性进行 byName 或者 byType 处理；</span></span><br><span class="line">                        String injectName = StringUtils.isEmpty(paramConfig.name()) ? field.getSimpleName().toString() : paramConfig.name();</span><br><span class="line">                        <span class="comment">//【5.1.1.2】加入到集合；</span></span><br><span class="line">                        paramsType.put(injectName, typeUtils.typeExchange(field));</span><br><span class="line">                        injectConfig.put(injectName, paramConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5.1.2】创建跳转对象；</span></span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.ACTIVITY, paramsType);</span><br><span class="line">                routeMeta.setInjectConfig(injectConfig);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123;</span><br><span class="line">                <span class="comment">//【5.2】注解的元素实现了 IProvider 接口，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found provider route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.PROVIDER, <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, type_Service)) &#123;</span><br><span class="line">                <span class="comment">//【5.3】注解的元素是 service 的子类，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found service route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(SERVICE), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, fragmentTm) || types.isSubtype(tm, fragmentTmV4)) </span><br><span class="line">                <span class="comment">//【5.4】注解的元素是 fragment 的子类，，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found fragment route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(FRAGMENT), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; Found unsupported class type, type = ["</span> + types.toString() + <span class="string">"]."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*2.2.2.3.1.1】对跳转对象进行分类；</span></span><br><span class="line">            categories(routeMeta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.6】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; providers) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfProviderBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(providerParamSpec);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;RouteDoc&gt;&gt; docSource = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// key：组名；value：每个组内的路由跳转文档；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】按照分组的方式，遍历 RouteMeta；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;RouteMeta&gt;&gt; entry : groupMap.entrySet()) &#123;</span><br><span class="line">            String groupName = entry.getKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.1】生成方法签名：</span></span><br><span class="line">            <span class="comment">// @Override</span></span><br><span class="line">            <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; atlas) </span></span><br><span class="line">            MethodSpec.Builder loadIntoMethodOfGroupBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(groupParamSpec);</span><br><span class="line"></span><br><span class="line">            List&lt;RouteDoc&gt; routeDocList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 用于保存路由跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.2】获得属于该 group 下的所有 RouteMeta，并依次处理；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; groupData = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (RouteMeta routeMeta : groupData) &#123;</span><br><span class="line">                <span class="comment">//【*2.2.2.3.1.2】根据跳转信息，生成文档对象；</span></span><br><span class="line">                RouteDoc routeDoc = extractDocInfo(routeMeta);</span><br><span class="line"></span><br><span class="line">                ClassName className = ClassName.get((TypeElement) routeMeta.getRawType()); <span class="comment">// 目标类的全限定名</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (routeMeta.getType()) &#123; <span class="comment">//【5.2.1】针对跳转类型为 PROVIDER 的情况，这里会将其父类的信息缓存下来；</span></span><br><span class="line">                    <span class="keyword">case</span> PROVIDER:</span><br><span class="line">                        <span class="comment">// 返回直接由此类实现或直接由此接口扩展的接口类型（目标类的负类）</span></span><br><span class="line">                        List&lt;? extends TypeMirror&gt; interfaces = ((TypeElement) routeMeta.getRawType()).getInterfaces();</span><br><span class="line">                        <span class="keyword">for</span> (TypeMirror tm : interfaces) &#123;</span><br><span class="line">                            routeDoc.addPrototype(tm.toString());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (types.isSameType(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 类型，说明目标类是直接实现的 .IProvider 接口； </span></span><br><span class="line">                                <span class="comment">//【5.2.2】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("目标类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//           $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                                                         + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        (routeMeta.getRawType()).toString(), <span class="comment">// routeMeta.getRawType() 返回的是 element;</span></span><br><span class="line">                                        routeMetaCn,  <span class="comment">// RouteMeta</span></span><br><span class="line">                                        routeTypeCn,  <span class="comment">// RouteType</span></span><br><span class="line">                                        className,    <span class="comment">// 类名；</span></span><br><span class="line">                                        routeMeta.getPath(),  <span class="comment">// Route 的 path 属性；</span></span><br><span class="line">                                        routeMeta.getGroup()); <span class="comment">// group 属性；</span></span><br><span class="line">                              </span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 的字类型，说明目标类是继承了一个实现 .IProvider 的类；</span></span><br><span class="line">                                <span class="comment">//【5.2.3】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("直接父类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//            $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                   + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        tm.toString(),</span><br><span class="line">                                        routeMetaCn,</span><br><span class="line">                                        routeTypeCn,</span><br><span class="line">                                        className,</span><br><span class="line">                                        routeMeta.getPath(),</span><br><span class="line">                                        routeMeta.getGroup());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.3】用于继续生成 route doc, 和 Autowired 注解的参数 hashmap</span></span><br><span class="line">                StringBuilder mapBodyBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType();</span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfigs = routeMeta.getInjectConfig();</span><br><span class="line">                <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                    List&lt;RouteDoc.Param&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; types : paramsType.entrySet()) &#123;</span><br><span class="line">                        <span class="comment">// 创建 Autowired 注解的参数 hashmap；</span></span><br><span class="line">                        mapBodyBuilder.append(<span class="string">"put(\""</span>).append(types.getKey()).append(<span class="string">"\", "</span>).append(types.getValue()).append(<span class="string">"); "</span>);</span><br><span class="line"></span><br><span class="line">                        RouteDoc.Param param = <span class="keyword">new</span> RouteDoc.Param();</span><br><span class="line">                        Autowired injectConfig = injectConfigs.get(types.getKey());</span><br><span class="line">                        param.setKey(types.getKey());</span><br><span class="line">                        param.setType(TypeKind.values()[types.getValue()].name().toLowerCase());</span><br><span class="line">                        param.setDescription(injectConfig.desc());</span><br><span class="line">                        param.setRequired(injectConfig.required());</span><br><span class="line"></span><br><span class="line">                        paramList.add(param);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将 @AutoWeird 修饰的变量信息保存到 routeDoc 中；</span></span><br><span class="line">                    routeDoc.setParams(paramList);</span><br><span class="line">                &#125;</span><br><span class="line">                String mapBody = mapBodyBuilder.toString();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.4】生成方法体：：</span></span><br><span class="line">                <span class="comment">// atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, </span></span><br><span class="line">                <span class="comment">//           $&#123;path&#125;, $&#123;group&#125;, new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span></span><br><span class="line">                loadIntoMethodOfGroupBuilder.addStatement(</span><br><span class="line">                        <span class="string">"atlas.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, "</span> </span><br><span class="line">                  + (StringUtils.isEmpty(mapBody) ? <span class="keyword">null</span> : (<span class="string">"new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;"</span> + mapBodyBuilder.toString()</span><br><span class="line">                              + <span class="string">"&#125;&#125;"</span>)) + <span class="string">", "</span> + routeMeta.getPriority() + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                        routeMeta.getPath(),</span><br><span class="line">                        routeMetaCn,</span><br><span class="line">                        routeTypeCn,</span><br><span class="line">                        className,</span><br><span class="line">                        routeMeta.getPath().toLowerCase(),</span><br><span class="line">                        routeMeta.getGroup().toLowerCase());</span><br><span class="line"></span><br><span class="line">                routeDoc.setClassName(className.toString()); <span class="comment">// 将 className 保存到 routeDoc 中；</span></span><br><span class="line">                routeDocList.add(routeDoc); <span class="comment">// 将这个路由表加入到 routeDocList 中；</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.5】动态生成 java 文件：</span></span><br><span class="line">            String groupFileName = NAME_OF_GROUP + groupName;</span><br><span class="line">            JavaFile.builder(PACKAGE_OF_GENERATE_FILE,   <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                    TypeSpec.classBuilder(groupFileName) <span class="comment">// 类名 ARouter$$Group$$ + $&#123;groupName&#125;</span></span><br><span class="line">                            .addJavadoc(WARNING_TIPS)</span><br><span class="line">                            .addSuperinterface(ClassName.get(type_IRouteGroup)) <span class="comment">// 实现 .IRouteGroup 接口；</span></span><br><span class="line">                            .addModifiers(PUBLIC)</span><br><span class="line">                            .addMethod(loadIntoMethodOfGroupBuilder.build())</span><br><span class="line">                            .build()</span><br><span class="line">            ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Generated group: "</span> + groupName + <span class="string">"&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【5.6】将 key：groupName ---&gt; value：ARouter$$Group$$ + $&#123;groupName&#125; 保存到 rootMap 表中；</span></span><br><span class="line">            rootMap.put(groupName, groupFileName);</span><br><span class="line">            docSource.put(groupName, routeDocList); <span class="comment">// 将当前组的所有路由表保存到 docSource 中；</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(rootMap)) &#123;</span><br><span class="line">            <span class="comment">//【6】生成方法体：：</span></span><br><span class="line">           <span class="comment">// routes.put("app", ARouter$$Group$$$&#123;$groupName&#125;.class);</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : rootMap.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfRootBuilder.addStatement(<span class="string">"routes.put($S, $T.class)"</span>, </span><br><span class="line">                                                         entry.getKey(), ClassName.get(PACKAGE_OF_GENERATE_FILE, entry.getValue())); <span class="comment">// 当然，这里是全限定名；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】如果 gradle 设置了生成路由表，那就将 docSource 以 json 的形式输出；</span></span><br><span class="line">        <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">            docWriter.append(JSON.toJSONString(docSource, SerializerFeature.PrettyFormat));</span><br><span class="line">            docWriter.flush();</span><br><span class="line">            docWriter.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【8】动态生成 java 文件：</span></span><br><span class="line">        String providerMapFileName = NAME_OF_PROVIDER + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE, <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(providerMapFileName) <span class="comment">// 类名：ARouter$$Providers$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_IProviderGroup)) <span class="comment">// 实现 .IProviderGroup 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfProviderBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated provider map, name is "</span> + providerMapFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】动态生成 java 文件：</span></span><br><span class="line">        String rootFileName = NAME_OF_ROOT + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,  <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(rootFileName) <span class="comment">// 包名；ARouter$$Root$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(elementUtils.getTypeElement(ITROUTE_ROOT))) <span class="comment">// 实现 .IRouteRoot 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfRootBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated root, name is "</span> + rootFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程还是很简单清晰的，主要是代码生成过程用很多的占位符，为我们看源码产生了很多的阻碍；</p><ul><li>RouteProcessor 不仅会解析 @Route，还会解析 @AutoWired；</li><li>最终会生成三个 java 文件，具体的模版信息：</li></ul><h6 id="2-2-2-3-1-1-categories"><a href="#2-2-2-3-1-1-categories" class="headerlink" title="2.2.2.3.1.1 categories"></a>2.2.2.3.1.1 categories</h6><p>对跳转信息进行分类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(RouteMeta routeMete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2.2.3.1.2】校验路由跳转信息！</span></span><br><span class="line">    <span class="keyword">if</span> (routeVerify(routeMete)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Start categories, group = "</span> + routeMete.getGroup() + <span class="string">", path = "</span> + routeMete.getPath() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">//【1】将校验通过的跳转 RouteMeta 加入到 groupMap 中；</span></span><br><span class="line">        Set&lt;RouteMeta&gt; routeMetas = groupMap.get(routeMete.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(routeMetas)) &#123;</span><br><span class="line">            <span class="comment">//【2】如果是第一次添加，需要创建一个 Set&lt;RouteMeta&gt;，内部元素以 path 排序；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; routeMetaSet = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;RouteMeta&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(RouteMeta r1, RouteMeta r2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> r1.getPath().compareTo(r2.getPath());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                        logger.error(npe.getMessage());</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//【3】加入到集合中；</span></span><br><span class="line">            routeMetaSet.add(routeMete);</span><br><span class="line">            groupMap.put(routeMete.getGroup(), routeMetaSet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4】已经创建了 set，直接加入；</span></span><br><span class="line">            routeMetas.add(routeMete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.warning(<span class="string">"&gt;&gt;&gt; Route meta verify error, group is "</span> + routeMete.getGroup() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h6 id="2-2-2-3-1-2-routeVerify"><a href="#2-2-2-3-1-2-routeVerify" class="headerlink" title="2.2.2.3.1.2 routeVerify"></a>2.2.2.3.1.2 routeVerify</h6><p>校验路由跳转信息；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">routeVerify</span><span class="params">(RouteMeta meta)</span> </span>&#123;</span><br><span class="line">    String path = meta.getPath();</span><br><span class="line">    <span class="comment">//【1】path 必须要指定，并且以 "/" 开头；</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;   <span class="comment">// The path must be start with '/' and not empty!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果 Route 没有指定 group 属性，那么就以 path 的一级目录为</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(meta.getGroup())) &#123; <span class="comment">// Use default group(the first word in path)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.1】设置组 group</span></span><br><span class="line">            meta.setGroup(defaultGroup);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><h6 id="2-2-2-3-1-2-extractDocInfo"><a href="#2-2-2-3-1-2-extractDocInfo" class="headerlink" title="2.2.2.3.1.2 extractDocInfo"></a>2.2.2.3.1.2 extractDocInfo</h6><p>创建路由信息对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RouteDoc <span class="title">extractDocInfo</span><span class="params">(RouteMeta routeMeta)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】根据 RouteMeta 创建 RouteDoc 实例；</span></span><br><span class="line">    RouteDoc routeDoc = <span class="keyword">new</span> RouteDoc();</span><br><span class="line">    routeDoc.setGroup(routeMeta.getGroup());</span><br><span class="line">    routeDoc.setPath(routeMeta.getPath());</span><br><span class="line">    routeDoc.setDescription(routeMeta.getName());</span><br><span class="line">    routeDoc.setType(routeMeta.getType().name().toLowerCase());</span><br><span class="line">    routeDoc.setMark(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> routeDoc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-4-动态生成类"><a href="#2-2-5-4-动态生成类" class="headerlink" title="2.2.5.4 动态生成类"></a>2.2.5.4 动态生成类</h4><h5 id="2-2-5-4-1-模版信息"><a href="#2-2-5-4-1-模版信息" class="headerlink" title="2.2.5.4.1 模版信息"></a>2.2.5.4.1 模版信息</h5><p>我们来看看生成了哪几种模板类：</p><ul><li><code>ARouter$$Providers$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IProviderGroup，其实都可以猜到，用于添加属于同一组的 iprovider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$$</span>&#123;moduleName&#125; implements IProviderGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">      providers.put(<span class="string">"目标类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                     $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">    </span><br><span class="line">      providers.put(<span class="string">"父类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                                $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Group$$${groupName}.java</code></li></ul><p>这个模版类继承了 IRouteGroup，其实都可以猜到，用于添加属于同一组的所有被 @Route 注解的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$$</span>&#123;groupName&#125; implements IRouteGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;, <span class="keyword">null</span>, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Root$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IRouteRoot，最为 root，用于添加和管理 group 和对应的 <code>ARouter$$Group$$${moduleName}.java</code> 的映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$$</span>&#123;moduleName&#125; implements IRouteRoot &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put($&#123;groupName&#125;, ARouter$$Group$$$&#123;groupName&#125;.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过  <code>ARouter$$Root$$${groupName}.java</code> 知道该 module 一共包含多少个 group。每个组中的的元素，可以通过    <code>ARouter$$Group$$${moduleName}.java</code>  这个文档添加；</p><h5 id="2-2-5-4-2-举个栗子"><a href="#2-2-5-4-2-举个栗子" class="headerlink" title="2.2.5.4.2 举个栗子"></a>2.2.5.4.2 举个栗子</h5><p>我写了个 Demo 可以让大家更直观的看到模版对应的实际代码：</p><h6 id="2-2-5-4-2-1-实例代码"><a href="#2-2-5-4-2-1-实例代码" class="headerlink" title="2.2.5.4.2.1 实例代码"></a>2.2.5.4.2.1 实例代码</h6><p>下面是一个简单的 Demo：</p><ul><li><strong>MyActivity.java</strong></li></ul><p>MyActivity 的组是：<strong>coolqiActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiActivity/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MyIProvider.java</strong></li></ul><p>MyIProvider 的组是：<strong>coolqiProvider</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiProvider/MyIProvider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MySerializationService.java</strong></li></ul><p>MySerializationService 的组是：<strong>coolqiService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiService/MySerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是新建了一个 Module，名字叫：<strong>Coolqi</strong></p><h6 id="2-2-5-4-2-2-动态代码"><a href="#2-2-5-4-2-2-动态代码" class="headerlink" title="2.2.5.4.2.2 动态代码"></a>2.2.5.4.2.2 动态代码</h6><p>动态的代码如下所示：</p><ul><li><code>ARouter$$Group$$coolqiActivity.java</code>， <code>ARouter$$Group$$coolqiProvider.java</code>， <code>ARouter$$Group$$coolqiService.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyActivity;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyPathReplaceService;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyProvider;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.MainActivity;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiActivity</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiActivity/MyActivity"</span>, RouteMeta.build(RouteType.ACTIVITY, MyActivity.class, <span class="string">"/coolqiactivity/myactivity"</span>, <span class="string">"coolqiactivity"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiProvider</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiProvider/MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, <span class="string">"/coolqiprovider/myiprovider"</span>, <span class="string">"coolqiprovider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Providers$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MyIProvider;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MySerializationService;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Root$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><h3 id="2-2-3-AutowiredProcessor"><a href="#2-2-3-AutowiredProcessor" class="headerlink" title="2.2.3 AutowiredProcessor"></a>2.2.3 AutowiredProcessor</h3><p>核心解释器，用于处理 @Autowired 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-3-1-Field"><a href="#2-2-3-1-Field" class="headerlink" title="2.2.3.1 Field"></a>2.2.3.1 Field</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】key 表示属性所属的类，value 是一个 list 列表，保存这个类被 Autowired 修饰的所有元素；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName ARouterClass = ClassName.get(<span class="string">"com.alibaba.android.arouter.launcher"</span>, <span class="string">"ARouter"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName AndroidLog = ClassName.get(<span class="string">"android.util"</span>, <span class="string">"Log"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-Init"><a href="#2-2-3-2-Init" class="headerlink" title="2.2.3.2 Init"></a>2.2.3.2 Init</h4><p>init 方法很简单，没有太多代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; AutowiredProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-3-Process-处理-Autowired-注解"><a href="#2-2-3-3-Process-处理-Autowired-注解" class="headerlink" title="2.2.3.3 Process  - 处理 Autowired 注解"></a>2.2.3.3 Process  - 处理 Autowired 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(set)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found autowired field, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.3.3.1】对变量进行归类，并找到其所属的类；</span></span><br><span class="line">            categories(roundEnvironment.getElementsAnnotatedWith(Autowired.class));</span><br><span class="line">            <span class="comment">//【*2.2.3.3.2】动态生成 java 类！</span></span><br><span class="line">            generateHelper();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-3-1-categories"><a href="#2-2-3-3-1-categories" class="headerlink" title="2.2.3.3.1 categories"></a>2.2.3.3.1 categories</h5><p>对变量进行归类，并找到其所属的类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        <span class="comment">//【1】遍历所有被 @AutoWired 注解的元素；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【2】返回封装此元素（非严格意义上）的最里层元素，实际上就是其所属的类；</span></span><br><span class="line">            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line">            <span class="comment">//【3】如果此成员属性是 private 的，那就抛出异常！</span></span><br><span class="line">            <span class="keyword">if</span> (element.getModifiers().contains(Modifier.PRIVATE)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The inject fields CAN NOT BE 'private'!!! please check field ["</span></span><br><span class="line">                        + element.getSimpleName() + <span class="string">"] in class ["</span> + enclosingElement.getQualifiedName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】将成员属性 element 和所属类元素 enclosingElement 保存到 parentAndChild 中，分类完毕；</span></span><br><span class="line">            <span class="keyword">if</span> (parentAndChild.containsKey(enclosingElement 保存到 )) &#123;</span><br><span class="line">                parentAndChild.get(enclosingElement).add(element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;Element&gt; childs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                childs.add(element);</span><br><span class="line">                parentAndChild.put(enclosingElement, childs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"categories finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，private 的元素不能用 Autowired 修饰；</p><h5 id="2-2-3-3-2-generateHelper"><a href="#2-2-3-3-2-generateHelper" class="headerlink" title="2.2.3.3.2 generateHelper"></a>2.2.3.3.2 generateHelper</h5><p>动态生成 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 .ISyringe/.SerializationService 接口在编译时期的状态信息；</span></span><br><span class="line">    TypeElement type_ISyringe = elementUtils.getTypeElement(ISYRINGE);</span><br><span class="line">    TypeElement type_JsonService = elementUtils.getTypeElement(JSON_SERVICE);</span><br><span class="line">    <span class="comment">//【2】返回类型信息：类/接口</span></span><br><span class="line">    TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line">    TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();</span><br><span class="line">    TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();</span><br><span class="line">    TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】开始动态生成类：</span></span><br><span class="line">    <span class="comment">//【3.1】生成 inject 方法的参数：Object target</span></span><br><span class="line">    ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, <span class="string">"target"</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (MapUtils.isNotEmpty(parentAndChild)) &#123;</span><br><span class="line">        <span class="comment">// 遍历 parentAndChild 集合；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//【3.2】生成 inject 方法签名；</span></span><br><span class="line">            <span class="comment">//  @Override </span></span><br><span class="line">            <span class="comment">//  public void inject(Object target)</span></span><br><span class="line">            MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(METHOD_INJECT)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(objectParamSpec);</span><br><span class="line"></span><br><span class="line">            TypeElement parent = entry.getKey();</span><br><span class="line">            List&lt;Element&gt; childs = entry.getValue();</span><br><span class="line">            <span class="comment">//【3.3】获得所属类的全限定名，包名；</span></span><br><span class="line">            String qualifiedName = parent.getQualifiedName().toString();</span><br><span class="line">            String packageName = qualifiedName.substring(<span class="number">0</span>, qualifiedName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">//【3.4】获得所属类的类名，拼接 "$$ARouter$$Root$$Autowired" 作为动态生成类的类名；</span></span><br><span class="line">            String fileName = parent.getSimpleName() + NAME_OF_AUTOWIRED;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Start process "</span> + childs.size() + <span class="string">" field in "</span> + parent.getSimpleName() + <span class="string">" ... &lt;&lt;&lt;"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】创建生成 java 类 helper 对象：指定类名(fileName)，实现的接口(.ISyringe), 修饰符(public)</span></span><br><span class="line">            TypeSpec.Builder helper = TypeSpec.classBuilder(fileName)</span><br><span class="line">                    .addJavadoc(WARNING_TIPS)</span><br><span class="line">                    .addSuperinterface(ClassName.get(type_ISyringe))</span><br><span class="line">                    .addModifiers(PUBLIC);</span><br><span class="line">            <span class="comment">//【3.6】创建动态类的成员变量：</span></span><br><span class="line">            <span class="comment">//     private com.alibaba.android.arouter.facade.service.SerializationService serializationService;</span></span><br><span class="line">            FieldSpec jsonServiceField = FieldSpec.builder(TypeName.get(type_JsonService.asType()), </span><br><span class="line">                                                           <span class="string">"serializationService"</span>, Modifier.PRIVATE).build();</span><br><span class="line">            helper.addField(jsonServiceField);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】给 inject 增加方法体：</span></span><br><span class="line">            <span class="comment">//      serializationService = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">            <span class="comment">//                .navigation(com.alibaba.android.arouter.facade.service.SerializationService.class);</span></span><br><span class="line">            <span class="comment">//      parentClass substitute = (parentClass) target</span></span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"serializationService = $T.getInstance().navigation($T.class)"</span>, </span><br><span class="line">                                             ARouterClass, ClassName.get(type_JsonService));</span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"$T substitute = ($T)target"</span>, ClassName.get(parent), ClassName.get(parent));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.6】继续给 inject 增加方法体：（处理成员变量）</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : childs) &#123;</span><br><span class="line">                Autowired fieldConfig = element.getAnnotation(Autowired.class);</span><br><span class="line">                <span class="comment">//【3.6.1】获取变量的名称；</span></span><br><span class="line">                String fieldName = element.getSimpleName().toString();</span><br><span class="line">                <span class="comment">//【3.6.2】如果实现了 .IProvider 接口，针对于是否设置了 name 属性，进行 byType/ byName 分类处理；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(element.asType(), iProvider)) &#123;  <span class="comment">// It's provider</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">""</span>.equals(fieldConfig.name())) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.1】如果 Autowired.name 为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .navigation(变量类型的全限定名.class);</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = $T.getInstance().navigation($T.class)"</span>,</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.2】如果 Autowired.name 不为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = (变量类型的全限定名) com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .build(Autowired().name).navigation();</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = ($T)$T.getInstance().build($S).navigation()"</span>,</span><br><span class="line">                                ClassName.get(element.asType()),</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                fieldConfig.name()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【3.6.2.3】判断 Autowired 的 required 是否为 true，如果为 true，那就要禁止 null 的情况！</span></span><br><span class="line">                    <span class="comment">// 其实就是判断 substitute.变量 如果 null，抛出异常；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required()) &#123;</span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (substitute."</span> + fieldName + <span class="string">" == null)"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"throw new RuntimeException(\"The field '"</span> + fieldName + <span class="string">"' is null, in class '\" </span></span><br><span class="line"><span class="string">                                                 + $T.class.getName() + \"!\")"</span>, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.6.3】对于一般的可通过 intent 传递的变量，进入这里；</span></span><br><span class="line">                    String originalValue = <span class="string">"substitute."</span> + fieldName;</span><br><span class="line">                    <span class="comment">// 用于拼接成员变量的生成方式："substitute.变量名 = substitute."；</span></span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.1】对于实现了 serializable 接口的变量, 则是："substitute.变量名 = (变量类型的全限定名) substitute."</span></span><br><span class="line">                    String statement = <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + buildCastCode(element) + <span class="string">"substitute."</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> isActivity = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (types.isSubtype(parent.asType(), activityTm)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.1】如果是 activity，那么拼接代码：getIntent().</span></span><br><span class="line">                        isActivity = <span class="keyword">true</span>;</span><br><span class="line">                        statement += <span class="string">"getIntent()."</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.2】如果是 fragment，那么拼接代码：getArguments().</span></span><br><span class="line">                        statement += <span class="string">"getArguments()."</span>; </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The field ["</span> + fieldName + <span class="string">"] need autowired from intent, "</span> </span><br><span class="line">                                                         + <span class="string">"its parent must be activity or fragment!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.2】处理 getIntent()/getArguments() 的数据；</span></span><br><span class="line">                    <span class="comment">// typeUtils.typeExchange(element) 返回的是成员属性的枚举序号！</span></span><br><span class="line">                    statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity);</span><br><span class="line">                    <span class="keyword">if</span> (statement.startsWith(<span class="string">"serializationService."</span>)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.5.1】处理 serializationService（自定义对象）的情况：</span></span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null != serializationService)"</span>);</span><br><span class="line">                        <span class="comment">//【3.6.5.2】生成方法体："substitute.fieldName = " + statement;</span></span><br><span class="line">                        <span class="comment">// $S 被替换为变量名/Autowired.name，$T 被替换为变量类型的全限定名；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + statement,</span><br><span class="line">                                (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()),</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                        injectMethodBuilder.nextControlFlow(<span class="string">"else"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"You want automatic inject the field '"</span> + fieldName </span><br><span class="line">                                          + <span class="string">"' in class '$T' , then you should implement 'SerializationService'"</span></span><br><span class="line">                                          + <span class="string">" to support object auto inject!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//【3.6.5.3】处理其他的情况，如果 Autowired.name 不为 null，那么 $S 替换为变量名，否则为 Autowired.name</span></span><br><span class="line">                        <span class="comment">// 将方法体写入 inject；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(statement,</span><br><span class="line">                                       StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Autowired 的 required 为 true，且不是 private 的，非空判断；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required() &amp;&amp; !element.asType().getKind().isPrimitive()) &#123; </span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null == substitute."</span> + fieldName + <span class="string">")"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"The field '"</span> + fieldName </span><br><span class="line">                                + <span class="string">"' is null, in class '\" + $T.class.getName() + \"!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow(); <span class="comment">// 闭合方法体；</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            helper.addMethod(injectMethodBuilder.build()); <span class="comment">// 将方法 builder 加入到类 builder 中；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4】动态创建 java 文件；</span></span><br><span class="line">            JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; "</span> + parent.getSimpleName() + <span class="string">" has been processed, "</span> + fileName + <span class="string">" has been generated. &lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Autowired processor stop. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程我们分析完成了，我们先不关注动态生成的类的作用，在后面分析 arouter-api 模块的时候，就会知道这些类的作用是什么了。</p><h6 id="2-2-3-3-2-1-buildCastCode"><a href="#2-2-3-3-2-1-buildCastCode" class="headerlink" title="2.2.3.3.2.1 buildCastCode"></a>2.2.3.3.2.1 buildCastCode</h6><p>判断 element 的类型是否是 SERIALIZABLE 的，这里利用到了前面的枚举类 TypeKind 和工具类 typeUtils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildCastCode</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断 element 的类型是否是 SERIALIZABLE 的！</span></span><br><span class="line">    <span class="keyword">if</span> (typeUtils.typeExchange(element) == TypeKind.SERIALIZABLE.ordinal()) &#123;</span><br><span class="line">        <span class="comment">//【2】创建代码块：(变量类型的全限定名)</span></span><br><span class="line">        <span class="keyword">return</span> CodeBlock.builder().add(<span class="string">"($T) "</span>, ClassName.get(element.asType())).build().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个主要是针对于实现了 serializable 接口的变量，比如一些集合等等；</p><h6 id="2-2-3-3-2-2-buildStatement"><a href="#2-2-3-3-2-2-buildStatement" class="headerlink" title="2.2.3.3.2.2 buildStatement"></a>2.2.3.3.2.2 buildStatement</h6><p>处理 getIntent()/getArguments() 的数据：</p><ul><li>参数 originalValue 表示变量: “substitute.fieldName“，用于返回默认值；</li><li>参数 type 是成员属性对应的枚举序号：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildStatement</span><span class="params">(String originalValue, String statement, <span class="keyword">int</span> type, <span class="keyword">boolean</span> isActivity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (TypeKind.values()[type]) &#123;</span><br><span class="line">        <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">            <span class="comment">//【1】如果是 boolean，那么 activty 拼接：getBooleanExtra($S, 变量)，fragment 拼接：getBoolean($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getBooleanExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getBoolean($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BYTE:</span><br><span class="line">            <span class="comment">//【2】如果是 byte，那么 activty 拼接：getByteExtra($S, 变量)，fragment 拼接：getByte($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getByteExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getByte($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SHORT:</span><br><span class="line">            <span class="comment">//【3】如果是 short，那么 activty 拼接：getShortExtra($S, 变量)，fragment 拼接：getShort($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getShortExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getShort($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> INT:</span><br><span class="line">            <span class="comment">//【4】如果是 int，那么 activty 拼接：getIntExtra($S, 变量)，fragment 拼接：getInt($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getIntExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getInt($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LONG:</span><br><span class="line">            <span class="comment">//【5】如果是 long，那么 activty 拼接：getLongExtra($S, 变量)，fragment 拼接：getLong($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getLongExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getLong($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CHAR:</span><br><span class="line">            <span class="comment">//【6】如果是 char，那么 activty 拼接：getCharExtra($S, 变量)，fragment 拼接：getChar($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getCharExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getChar($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOAT:</span><br><span class="line">            <span class="comment">//【7】如果是 float，那么 activty 拼接：getFloatExtra($S, 变量)，fragment 拼接：getFloat($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getFloatExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getFloat($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOUBLE:</span><br><span class="line">            <span class="comment">//【8】如果是 double，那么 activty 拼接：getDoubleExtra($S, 变量)，fragment 拼接：getDouble($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getDoubleExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getDouble($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STRING:</span><br><span class="line">            <span class="comment">//【9】如果是 string，那么 activty 拼接：getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getString($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getExtras() == null ? "</span> + originalValue + <span class="string">" : substitute.getIntent().getExtras().getString($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getString($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SERIALIZABLE:</span><br><span class="line">            <span class="comment">//【10】如果是 serializable，那么 activty 拼接：getSerializableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getSerializable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getSerializableExtra($S)"</span>) : (<span class="string">"getSerializable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PARCELABLE:</span><br><span class="line">            <span class="comment">//【11】如果是 parcelable，那么 activty 拼接：getParcelableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getParcelable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getParcelableExtra($S)"</span>) : (<span class="string">"getParcelable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OBJECT:</span><br><span class="line">            <span class="comment">//【12】如果是 object，那么 activity 返回：serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            <span class="comment">// fragment 返回：serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            statement = <span class="string">"serializationService.parseObject(substitute."</span> + (isActivity ? <span class="string">"getIntent()."</span> : <span class="string">"getArguments()."</span>) + (isActivity ? <span class="string">"getStringExtra($S)"</span> : <span class="string">"getString($S)"</span>) + <span class="string">", new "</span> + TYPE_WRAPPER + <span class="string">"&lt;$T&gt;()&#123;&#125;.getType())"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，buildStatement 会处理 getIntent()/getArguments() 的数据，在 statement 基础上拼接/修改：</p><ul><li><strong>Activity</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getIntent().getBooleanExtra($S, 变量)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getIntent().getByteExtra($S, 变量)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getIntent().getShortExtra($S, 变量)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getIntent().getIntExtra($S, 变量)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getIntent().getLongExtra($S, 变量)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getIntent().getCharExtra($S, 变量)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getIntent().getFloatExtra($S, 变量)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getIntent().getDoubleExtra($S, 变量)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getIntent().getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getIntent().getSerializableExtra($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getIntent().getParcelableExtra($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><ul><li><strong>Fragment</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getArguments().getBoolean($S)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getArguments().getByte($S)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getArguments().getShort($S)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getArguments().getInt($S)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getArguments().getLong($S)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getArguments().getChar($S)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getArguments().getFloat($S)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getArguments().getDouble($S)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getArguments().getString($S)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getArguments().getSerializable($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getArguments().getParcelable($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><p>返回的 statement 会继续被处理！</p><h4 id="2-2-3-4-动态生成类"><a href="#2-2-3-4-动态生成类" class="headerlink" title="2.2.3.4 动态生成类"></a>2.2.3.4 动态生成类</h4><h5 id="2-2-3-4-1-模版信息"><a href="#2-2-3-4-1-模版信息" class="headerlink" title="2.2.3.4.1 模版信息"></a>2.2.3.4.1 模版信息</h5><p>我们来看一下，解析 AutoWired 后动态生成的 java 类的模版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 所属类所在的包;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> ... ... ...<span class="comment">// 省略掉其他的导入信息（变量类型等等）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 所属类的类名$$<span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">           serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">           所属类的全限定名 substitute = (所属类的全限定名) target;</span><br><span class="line">           <span class="comment">// 实现了 .IProvider 的成员变量；</span></span><br><span class="line">           substitute.变量 = ARouter.getInstance().navigation(变量类型的全限定名.class);</span><br><span class="line">           substitute.变量 = (变量类型) ARouter.getInstance().build(Autowired.name).navigation();</span><br><span class="line">           <span class="comment">// Autowired 的 required 为 true 才有； </span></span><br><span class="line">           <span class="keyword">if</span> (substitute.变量 == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(...);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// activity 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getIntent().getBooleanExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getByteExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getShortExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getIntExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getCharExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getFloatExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getDoubleExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getExtras() == <span class="keyword">null</span> ? substitute.变量 : substitute.getIntent().getExtras().getString(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getIntent().getSerializableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getParcelableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = serializationService.parseObject(substitute.getIntent().getStringExtra(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());   </span><br><span class="line">      </span><br><span class="line">           <span class="comment">// fragment 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getArguments().getBoolean(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getByte(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getShort(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getInt(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getLong(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getChar(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getFloat(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getDouble(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getString(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getArguments().getSerializable(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getParcelable(变量名/Autowired.name);</span><br><span class="line">           serializationService.parseObject(substitute.getArguments().getString(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实大家可以看的出来，inject 方法就是用来自动给成员变量赋值的；</p><h5 id="2-2-3-4-2-举个栗子"><a href="#2-2-3-4-2-举个栗子" class="headerlink" title="2.2.3.4.2 举个栗子"></a>2.2.3.4.2 举个栗子</h5><h6 id="2-2-3-4-2-1-实例代码"><a href="#2-2-3-4-2-1-实例代码" class="headerlink" title="2.2.3.4.2.1 实例代码"></a>2.2.3.4.2.1 实例代码</h6><p>以 activity 为例子；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/app/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-3-4-2-2-动态代码"><a href="#2-2-3-4-2-2-动态代码" class="headerlink" title="2.2.3.4.2.2 动态代码"></a>2.2.3.4.2.2 动态代码</h6><p>如下是动态代码了，不多说了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    MyActivity substitute = (MyActivity)target;</span><br><span class="line">    substitute.isOne = substitute.getIntent().getBooleanExtra(<span class="string">"isOneAuto"</span>, substitute.isOne);</span><br><span class="line">    substitute.isTwo = substitute.getIntent().getIntExtra(<span class="string">"isTwoAuto"</span>, substitute.isTwo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-InterceptorProcessor"><a href="#2-2-4-InterceptorProcessor" class="headerlink" title="2.2.4 InterceptorProcessor"></a>2.2.4 InterceptorProcessor</h3><p>核心解释器，用于处理 @Interceptor 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(ANNOTATION_TYPE_INTECEPTOR)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-4-1-Field"><a href="#2-2-4-1-Field" class="headerlink" title="2.2.4.1 Field"></a>2.2.4.1 Field</h4><p>成员变量有两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于保存 key: [priority 优先级] 和 value：[@Interceptor 修饰的元素 Element] 的映射关系，作为 cache； </span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, Element&gt; interceptors = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"><span class="comment">//【2】用于保存 [com.alibaba.android.arouter.facade.template.IInterceptor] 的类型信息</span></span><br><span class="line"><span class="keyword">private</span> TypeMirror iInterceptor = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-2-Init"><a href="#2-2-4-2-Init" class="headerlink" title="2.2.4.2 Init"></a>2.2.4.2 Init</h4><p>初始化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">    <span class="comment">//【1】Elements.getTypeElement 会返回 .IInterceptor 接口对应的 TypeElement</span></span><br><span class="line">    <span class="comment">// TypeElement.sType() 会返回 .IInterceptor 的类型信息：接口</span></span><br><span class="line">    iInterceptor = elementUtils.getTypeElement(Consts.IINTERCEPTOR).asType();</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; InterceptorProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Consts.IINTERCEPTOR 是 IInterceptor 接口的全限定名：</p><blockquote><p><strong>com.alibaba.android.arouter.facade.template.IInterceptor</strong></p></blockquote><h4 id="2-2-4-3-Process-处理-Interceptor-注解"><a href="#2-2-4-3-Process-处理-Interceptor-注解" class="headerlink" title="2.2.4.3 Process - 处理 Interceptor 注解"></a>2.2.4.3 Process - 处理 Interceptor 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】获得 @Interceptor 修饰的元素，这里会返回多个 Element 组成的 set！！</span></span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Interceptor.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1】解析元素：</span></span><br><span class="line">            parseInterceptors(elements);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 parseInterceptors 中；</p><h5 id="2-2-4-3-1-parseInterceptors"><a href="#2-2-4-3-1-parseInterceptors" class="headerlink" title="2.2.4.3.1 parseInterceptors"></a>2.2.4.3.1 parseInterceptors</h5><p>我们来看下如何解析元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseInterceptors</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found interceptors, size is "</span> + elements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】执行校验，并将元素缓存下来；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1.1】执行校验；</span></span><br><span class="line">            <span class="keyword">if</span> (verify(element)) &#123;</span><br><span class="line">                logger.info(<span class="string">"A interceptor verify over, its "</span> + element.asType());</span><br><span class="line">                <span class="comment">//【1.1】获得 Interceptor 对象的优先级，判断是否已经添加到 interceptors 哈希表中，已经添加，抛出异常；</span></span><br><span class="line">                Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">                Element lastInterceptor = interceptors.get(interceptor.priority());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != lastInterceptor) &#123; <span class="comment">// Added, throw exceptions</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            String.format(Locale.getDefault(), <span class="string">"More than one interceptors use same"</span> +  </span><br><span class="line">                                          <span class="string">"priority [%d], They are [%s] and [%s]."</span>,</span><br><span class="line">                                    interceptor.priority(),</span><br><span class="line">                                    lastInterceptor.getSimpleName(),</span><br><span class="line">                                    element.getSimpleName())</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】将 priority --&gt; element 关系缓存到 interceptors 中；</span></span><br><span class="line">                interceptors.put(interceptor.priority(), element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"A interceptor verify failed, its "</span> + element.asType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】返回 ".IInterceptor/.IInterceptorGroup" 接口对应的 TypeElement，保存了接口在编译时期的状态信息；</span></span><br><span class="line">        TypeElement type_ITollgate = elementUtils.getTypeElement(IINTERCEPTOR);</span><br><span class="line">        TypeElement type_ITollgateGroup = elementUtils.getTypeElement(IINTERCEPTOR_GROUP);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】生成 loadInto 方法的参数类型："Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt;""</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfTollgate = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(Integer.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_ITollgate))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】生成 loadInto 方法的方法参数：“Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors”</span></span><br><span class="line">        ParameterSpec tollgateParamSpec = ParameterSpec.builder(inputMapTypeOfTollgate, <span class="string">"interceptors"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】生成 loadInto 方法声明：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;...&#125;</span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfTollgateBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(tollgateParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】生成 loadInto 方法体:</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;</span></span><br><span class="line">        <span class="comment">//      interceptors.put(priority, $T.class);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != interceptors &amp;&amp; interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// for 循环中 interceptors 是 InterceptorProcessor 的成员变量哦！用来保存所有的 interceptor；</span></span><br><span class="line">            <span class="comment">// $T 最终会被替换为自定义的 interceptor 的类全限定名；</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Element&gt; entry : interceptors.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfTollgateBuilder.addStatement(<span class="string">"interceptors.put("</span> + entry.getKey() + <span class="string">", $T.class)"</span>,</span><br><span class="line">                                                             ClassName.get((TypeElement) entry.getValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】生成最终的类文件，指定了包名，类名，修饰符，实现的接口等等；</span></span><br><span class="line">        <span class="comment">// 常量均定义在 Consts 中，具体的生成的类见下面……</span></span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,</span><br><span class="line">                TypeSpec.classBuilder(NAME_OF_INTERCEPTOR + SEPARATOR + moduleName)</span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addMethod(loadIntoMethodOfTollgateBuilder.build())</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_ITollgateGroup))</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Interceptor group write over. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其是使用 javapoet 三方库来懂爱生成 .java 文件；</p><h6 id="2-2-4-3-1-1-verify"><a href="#2-2-4-3-1-1-verify" class="headerlink" title="2.2.4.3.1.1 verify"></a>2.2.4.3.1.1 verify</h6><p>校验元素和注解的正确性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得注解对象；</span></span><br><span class="line">    Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">    <span class="comment">//【2】元素 Element 必须被 Interceptor 注解修饰，</span></span><br><span class="line">    <span class="comment">// 并且其实现了 com.alibaba.android.arouter.facade.template.IInterceptor 接口；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != interceptor &amp;&amp; ((TypeElement) element).getInterfaces().contains(iInterceptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h4 id="2-2-4-4-动态生成类"><a href="#2-2-4-4-动态生成类" class="headerlink" title="2.2.4.4 动态生成类"></a>2.2.4.4 <strong>动态生成类</strong></h4><h5 id="2-2-4-4-1-模版信息"><a href="#2-2-4-4-1-模版信息" class="headerlink" title="2.2.4.4.1 模版信息"></a>2.2.4.4.1 模版信息</h5><p>最终生成的 java 文件名为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter$$Interceptors$$&#123;moduleName&#125;.java</span><br></pre></td></tr></table></figure><p>最终生成的模版类信息为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$$</span>&#123;moduleName&#125; implements IInterceptorGroup &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)</span></span>&#123;</span><br><span class="line">     interceptors.put($&#123;priority&#125;, $&#123;InterceptorName&#125;.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 Interceptor，ARouter 也是采取分组管理的方式：</p><ul><li>以 module 为组，组名为 <code>ARouter$$Interceptors$${moduleName}</code>；</li></ul><h5 id="2-2-4-4-2-举个栗子"><a href="#2-2-4-4-2-举个栗子" class="headerlink" title="2.2.4.4.2 举个栗子"></a>2.2.4.4.2 举个栗子</h5><h6 id="2-2-4-4-2-1-实例代码"><a href="#2-2-4-4-2-1-实例代码" class="headerlink" title="2.2.4.4.2.1 实例代码"></a>2.2.4.4.2.1 实例代码</h6><p>我们自定义了一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.Postcard;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.callback.InterceptorCallback;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-4-4-2-2-动态代码"><a href="#2-2-4-4-2-2-动态代码" class="headerlink" title="2.2.4.4.2.2 动态代码"></a>2.2.4.4.2.2 动态代码</h6><p>看看最终的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.TestInterceptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-utils"><a href="#2-3-utils" class="headerlink" title="2.3 utils"></a>2.3 utils</h2><p>该 package 下包含了一些工具类：</p><h3 id="2-3-1-Logger"><a href="#2-3-1-Logger" class="headerlink" title="2.3.1 Logger"></a>2.3.1 Logger</h3><p>用于打印 log 信息，调试使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Messager msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">(Messager messager)</span> </span>&#123;</span><br><span class="line">        msg = messager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(CharSequence info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(info)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.NOTE, Consts.PREFIX_OF_LOGGER + info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(CharSequence error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(error)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != error) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error.getMessage() + <span class="string">"]"</span> + </span><br><span class="line">                             <span class="string">"\n"</span> + formatStackTrace(error.getStackTrace()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(CharSequence warning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(warning)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.WARNING, Consts.PREFIX_OF_LOGGER + warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatStackTrace</span><span class="params">(StackTraceElement[] stackTrace)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement element : stackTrace) &#123;</span><br><span class="line">            sb.append(<span class="string">"    at "</span>).append(element.toString());</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法都比较简单，就不多说了。</p><h3 id="2-3-2-TypeUtils"><a href="#2-3-2-TypeUtils" class="headerlink" title="2.3.2 TypeUtils"></a>2.3.2 TypeUtils</h3><p>该类是一个类型工具类，主要用于获取元素的类型，并对类型做一个转换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Types types;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror parcelableType;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror serializableType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeUtils</span><span class="params">(Types types, Elements elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.types = types;</span><br><span class="line">        parcelableType = elements.getTypeElement(PARCELABLE).asType();</span><br><span class="line">        serializableType = elements.getTypeElement(SERIALIZABLE).asType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】可以看到，这个方法用于返回枚举常量的序数。这里的枚举常量是前面分析的 TypeKind.XXX</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">typeExchange</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        TypeMirror typeMirror = element.asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】对于 private，类型这里直接处理；</span></span><br><span class="line">        <span class="keyword">if</span> (typeMirror.getKind().isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> element.asType().getKind().ordinal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】对于 no private 的类型，返回变量的类型，通过 TypeKind 找到类型对应的序数（0，1，2...）</span></span><br><span class="line">        <span class="keyword">switch</span> (typeMirror.toString()) &#123;</span><br><span class="line">            <span class="keyword">case</span> BYTE:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BYTE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> SHORT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.SHORT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> INTEGER:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.INT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> LONG:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.LONG.ordinal();</span><br><span class="line">            <span class="keyword">case</span> FLOAT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.FLOAT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> DOUBEL:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.DOUBLE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BOOLEAN.ordinal();</span><br><span class="line">            <span class="keyword">case</span> CHAR:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.CHAR.ordinal();</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.STRING.ordinal();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//【3】处理 PARCELABLE，SERIALIZABLE 和 OBJECT 的情况；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(typeMirror, parcelableType)) &#123;</span><br><span class="line">                    <span class="comment">// PARCELABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.PARCELABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(typeMirror, serializableType)) &#123;</span><br><span class="line">                    <span class="comment">// SERIALIZABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.SERIALIZABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> TypeKind.OBJECT.ordinal();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TypeKind 前面有分析过，其是一个枚举类！</p><h3 id="2-3-3-Consts"><a href="#2-3-3-Consts" class="headerlink" title="2.3.3 Consts"></a>2.3.3 Consts</h3><p>用于保存一些核心的常量，下面来看看核心的常量。</p><h4 id="2-3-3-1-Log-打印相关"><a href="#2-3-3-1-Log-打印相关" class="headerlink" title="2.3.3.1 Log 打印相关"></a>2.3.3.1 Log 打印相关</h4><p>这些是和 log 打印相关的，比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>; <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = PROJECT + <span class="string">"::"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREFIX_OF_LOGGER = PROJECT + <span class="string">"::Compiler "</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_MODULE_NAME_TIPS = <span class="string">"These no module name, at 'build.gradle', like :\n"</span> +</span><br><span class="line">  <span class="string">"android &#123;\n"</span> +</span><br><span class="line">  <span class="string">"    defaultConfig &#123;\n"</span> +</span><br><span class="line">  <span class="string">"        ...\n"</span> +</span><br><span class="line">  <span class="string">"        javaCompileOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"            annotationProcessorOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"                arguments = [AROUTER_MODULE_NAME: project.getName()]\n"</span> +</span><br><span class="line">  <span class="string">"            &#125;\n"</span> +</span><br><span class="line">  <span class="string">"        &#125;\n"</span> +</span><br><span class="line">  <span class="string">"    &#125;\n"</span> +</span><br><span class="line">  <span class="string">"&#125;\n"</span>;</span><br></pre></td></tr></table></figure><p>不多说！</p><h4 id="2-3-3-2-Gradle-配置相关"><a href="#2-3-3-2-Gradle-配置相关" class="headerlink" title="2.3.3.2 Gradle 配置相关"></a>2.3.3.2 Gradle 配置相关</h4><p>这些是和 gradle 配置相关的机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MODULE_NAME = <span class="string">"AROUTER_MODULE_NAME"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_GENERATE_DOC_NAME = <span class="string">"AROUTER_GENERATE_DOC"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALUE_ENABLE = <span class="string">"enable"</span>;</span><br></pre></td></tr></table></figure><p>这个前面有说过，通过 gradle 配置；</p><h4 id="2-3-3-3-系统核心类"><a href="#2-3-3-3-系统核心类" class="headerlink" title="2.3.3.3 系统核心类"></a>2.3.3.3 系统核心类</h4><p>这些是和 Android 系统的一些核心类有关，也是 ARouter 能够注解处理的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVITY = <span class="string">"android.app.Activity"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT = <span class="string">"android.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT_V4 = <span class="string">"android.support.v4.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE = <span class="string">"android.app.Service"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARCELABLE = <span class="string">"android.os.Parcelable"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是系统类的全限定名；</p><h4 id="2-3-3-4-注解类型"><a href="#2-3-3-4-注解类型" class="headerlink" title="2.3.3.4 注解类型"></a>2.3.3.4 注解类型</h4><p>这些是和 ARouter 的注解相关的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;  <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_INTECEPTOR = FACADE_PACKAGE + <span class="string">".annotation.Interceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_ROUTE = FACADE_PACKAGE + <span class="string">".annotation.Route"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_AUTOWIRED = FACADE_PACKAGE + <span class="string">".annotation.Autowired"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是注解的全限定名；</p><h4 id="2-3-3-5-核心接口和类"><a href="#2-3-3-5-核心接口和类" class="headerlink" title="2.3.3.5 核心接口和类"></a>2.3.3.5 核心接口和类</h4><p>这些是和 ARouter 提供的一些核心接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于指定不同的 package 目录，属于 arouter-api 模块；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_PACKAGE = <span class="string">".template"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_PACKAGE = <span class="string">".service"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODEL_PACKAGE = <span class="string">".model"</span>;</span><br><span class="line"><span class="comment">//【2】下面是 arouter-api 模块的 template 包下的接口的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProvider"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProviderGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptorGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITROUTE_ROOT = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteRoot"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IROUTE_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISYRINGE = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".ISyringe"</span>;</span><br><span class="line"><span class="comment">//【3】下面是 arouter-api 模块的 service 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JSON_SERVICE = FACADE_PACKAGE + SERVICE_PACKAGE + <span class="string">".SerializationService"</span>;</span><br><span class="line"><span class="comment">//【4】下面是 arouter-annotation 模块的 model 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_WRAPPER = FACADE_PACKAGE + MODEL_PACKAGE + <span class="string">".TypeWrapper"</span>;</span><br></pre></td></tr></table></figure><p>同样的，也是一些全限定名；</p><p>ARouter 的拦截器需要实现 IInterceptor 接口，服务需要实现 IProvider 接口；</p><p>同时，由于 ARouter 是分组管理的，所以拦截器和服务又会属于不同的组：拦截器组需要实现 IInterceptorGroup 接口，服务组需要实现 IProviderGroup 组；</p><p>对于跳转来说，也会有分组，跳转组需要实现 IRouteGroup，而所有的跳转组属于一个 root：IRouteRoot</p><h4 id="2-3-3-6-动态生成类"><a href="#2-3-3-6-动态生成类" class="headerlink" title="2.3.3.6 动态生成类"></a>2.3.3.6 动态生成类</h4><p>下面 这些是和动态生成的类相关的：</p><ul><li>动态生成类的类名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_LOAD_INTO = <span class="string">"loadInto"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_INJECT = <span class="string">"inject"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_ROOT = PROJECT + SEPARATOR + <span class="string">"Root"</span>; <span class="comment">// ARouter$$Root</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_PROVIDER = PROJECT + SEPARATOR + <span class="string">"Providers"</span>; <span class="comment">// ARouter$$Providers</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_GROUP = PROJECT + SEPARATOR + <span class="string">"Group"</span> + SEPARATOR; <span class="comment">// ARouter$$Group$$</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_INTERCEPTOR = PROJECT + SEPARATOR + <span class="string">"Interceptors"</span>; <span class="comment">// ARouter$$Interceptors</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_AUTOWIRED = SEPARATOR + PROJECT + SEPARATOR + <span class="string">"Autowired"</span>; <span class="comment">//$$ARouter$$Root$$Autowired</span></span><br></pre></td></tr></table></figure><p>动态生成类的类名是通过 “$$” 将关键字拼接起来！</p><ul><li>动态生成类的所属包名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_FILE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_DOCS = <span class="string">"com.alibaba.android.arouter.docs"</span>;</span><br></pre></td></tr></table></figure><p>ARouter 会通过 javapoet 来动态生成对应的类，我们在分析 processor 的过程中就会看到。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>本篇文章分析了 arouter-compiler 模块的架构，arouter 内置的三种注解处理器，以及 arouter 注解的处理，动态类的生成。</p><p>好累～</p><p>后续上流程图吧～～对于个人收获也是很大的～～至少会自定义注解～～至少会动态生成代码了～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第二篇 - 注解定义 (arouter-annotation)</title>
    <link href="https://coolqi.top/2019/04/17/ARouter2-arouter-annotations/"/>
    <id>https://coolqi.top/2019/04/17/ARouter2-arouter-annotations/</id>
    <published>2019-04-17T12:46:25.000Z</published>
    <updated>2019-08-09T13:25:03.274Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-annotation 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看 arouter-annotation 的结构；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">src -&gt; main -&gt; java:</span><br><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____facade</span><br><span class="line">| | | | | |____enums</span><br><span class="line">| | | | | | |____RouteType.java</span><br><span class="line">| | | | | | |____TypeKind.java</span><br><span class="line">| | | | | |____annotation</span><br><span class="line">| | | | | | |____Interceptor.java</span><br><span class="line">| | | | | | |____Route.java</span><br><span class="line">| | | | | | |____Param.java</span><br><span class="line">| | | | | | |____Autowired.java</span><br><span class="line">| | | | | |____model</span><br><span class="line">| | | | | | |____TypeWrapper.java</span><br><span class="line">| | | | | | |____RouteMeta.java</span><br></pre></td></tr></table></figure><p>一共有三个 package：</p><ul><li>enums：包含了一些枚举类：</li><li>annotation：包含了一些注解；</li><li>model：包含了一些跳转所需的数据；</li></ul><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><h2 id="2-1-enums"><a href="#2-1-enums" class="headerlink" title="2.1 enums"></a>2.1 enums</h2><p>这个 package 包含了一些枚举类：</p><h3 id="2-1-1-RouteType"><a href="#2-1-1-RouteType" class="headerlink" title="2.1.1 RouteType"></a>2.1.1 RouteType</h3><p>枚举类，每一个成员都用于保存 id 和 className 的映射！</p><p>className 包括 android 的 Activity，Service，ContentProvider，Fragment，以及 ARouter 自己的 IProvider 类型！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RouteType &#123;</span><br><span class="line">    ACTIVITY(<span class="number">0</span>, <span class="string">"android.app.Activity"</span> ),</span><br><span class="line">    SERVICE(<span class="number">1</span>, <span class="string">"android.app.Service"</span>),</span><br><span class="line">    PROVIDER(<span class="number">2</span>, <span class="string">"com.alibaba.android.arouter.facade.template.IProvider"</span>),</span><br><span class="line">    CONTENT_PROVIDER(-<span class="number">1</span>, <span class="string">"android.app.ContentProvider"</span>),</span><br><span class="line">    BOARDCAST(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    METHOD(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    FRAGMENT(-<span class="number">1</span>, <span class="string">"android.app.Fragment"</span>),</span><br><span class="line">    UNKNOWN(-<span class="number">1</span>, <span class="string">"Unknown route type"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String className;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RouteType(<span class="keyword">int</span> id, String className) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RouteType <span class="title">parse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RouteType routeType : RouteType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (routeType.getClassName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> routeType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说。</p><p>它的作用是，我们可以通过 RouteType 判断判断 @Route 修饰的是类是那种类型；</p><h3 id="2-1-2-TypeKind"><a href="#2-1-2-TypeKind" class="headerlink" title="2.1.2 TypeKind"></a>2.1.2 TypeKind</h3><p>枚举类，每一个枚举成员都用于表示一个类型，包括基本类型，可序列化类型，字符串，对象等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeKind &#123;</span><br><span class="line">    <span class="comment">// Base type</span></span><br><span class="line">    BOOLEAN,</span><br><span class="line">    BYTE,</span><br><span class="line">    SHORT,</span><br><span class="line">    INT,</span><br><span class="line">    LONG,</span><br><span class="line">    CHAR,</span><br><span class="line">    FLOAT,</span><br><span class="line">    DOUBLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other type</span></span><br><span class="line">    STRING,</span><br><span class="line">    SERIALIZABLE,</span><br><span class="line">    PARCELABLE,</span><br><span class="line">    OBJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是在设置跳转数据的时候，通过 TypeKind 来判断数据的类型，然后调用 Postcard.withXXX 方法，设置不同的类型；</p><h2 id="2-2-annotation"><a href="#2-2-annotation" class="headerlink" title="2.2 annotation"></a>2.2 annotation</h2><p>这个 package 包含了一些注解类：</p><h3 id="2-2-1-Route"><a href="#2-2-1-Route" class="headerlink" title="2.2.1 Route"></a>2.2.1 Route</h3><p>用于注解 RouteType 指定的那些 type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Route &#123;</span><br><span class="line">    <span class="comment">//【1】用于指定路由跳转的路径，至少包含两级目录；</span></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//【2】用于指定路由跳转的分组，组名必须要使用相同的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">group</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【3】路由跳转的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【4】用于指定额外的数据，一共 32 位，每一位都是一个开关；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extras</span><span class="params">()</span> <span class="keyword">default</span> Integer.MIN_VALUE</span>;</span><br><span class="line">    <span class="comment">//【5】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h4 id="2-2-1-1-简单使用"><a href="#2-2-1-1-简单使用" class="headerlink" title="2.2.1.1 简单使用"></a>2.2.1.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Autowired"><a href="#2-2-2-Autowired" class="headerlink" title="2.2.2 Autowired"></a>2.2.2 Autowired</h3><p>用于修饰成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】变量（属性或服务）的名称</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】是否必须不为 null，如果为 true，应用会 crash 当其为 null 的情况；</span></span><br><span class="line">    <span class="comment">// private 类型的变量不会检查是否为 null；</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-简单使用"><a href="#2-2-2-1-简单使用" class="headerlink" title="2.2.2.1 简单使用"></a>2.2.2.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Interceptor"><a href="#2-2-3-Interceptor" class="headerlink" title="2.2.3 Interceptor"></a>2.2.3 Interceptor</h3><p>用于注解拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Interceptor &#123;</span><br><span class="line">    <span class="comment">//【1】拦截器的优先级，ARouter 会根据优先级执行拦截器；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】拦截器的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "Default"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-1-简单使用"><a href="#2-2-3-1-简单使用" class="headerlink" title="2.2.3.1 简单使用"></a>2.2.3.1 简单使用</h4><ul><li><strong>注解拦截器</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Param（DEPRECATED）"><a href="#2-2-4-Param（DEPRECATED）" class="headerlink" title="2.2.4 Param（DEPRECATED）"></a>2.2.4 Param（DEPRECATED）</h3><p>这个注解也是用来修饰成员变量的，但是不推荐使用了，请使用 Autowired！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">    <span class="comment">//【1】属性的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> "No desc."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为已经不在推荐使用，不多说了！</p><h2 id="2-3-model"><a href="#2-3-model" class="headerlink" title="2.3 model"></a>2.3 model</h2><p>这个 package 下主要保存了一些数据类，这些类保存了跳转需要的数据，已经目前对象的类型：</p><h3 id="2-3-1-RouteMeta"><a href="#2-3-1-RouteMeta" class="headerlink" title="2.3.1 RouteMeta"></a>2.3.1 RouteMeta</h3><p>用于保存路由跳转的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteMeta</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RouteType type;         <span class="comment">//【1】路由的类型，枚举类实例；</span></span><br><span class="line">    <span class="keyword">private</span> Element rawType;        <span class="comment">//【2】@Route 注解修饰的元素；</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; destination;   <span class="comment">//【3】路由跳转的目标类</span></span><br><span class="line">    <span class="keyword">private</span> String path;            <span class="comment">//【4】路由跳转的路径 path</span></span><br><span class="line">    <span class="keyword">private</span> String group;           <span class="comment">//【5】路由跳转的组 group</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority = -<span class="number">1</span>;      <span class="comment">//【6】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> extra;              <span class="comment">//【7】路由跳转携带的额外数据，23 位开关；</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; paramsType;  <span class="comment">//【8】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 属性类型对应的枚举序号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//【9】路由跳转的名称；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Autowired&gt; injectConfig;  <span class="comment">//【10】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 对应的 Autowired 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RouteMeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... ... ... ...<span class="comment">// 这里我们先省略内部方法，后续分析！ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以看到，RouteMeta 内部的数据很多事 compiler 解析 Route、Autowired 注解获得的！</p><h3 id="2-3-2-TypeWrapper"><a href="#2-3-2-TypeWrapper" class="headerlink" title="2.3.2 TypeWrapper"></a>2.3.2 TypeWrapper<t></t></h3><p>用于保存路由跳转的目标对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//【1】用于保存泛型 T；</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Type type;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TypeWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【2】调用 getClass() 获得当前类的 class 对象；</span></span><br><span class="line">        <span class="comment">//【3】然后再调用 getGenericSuperclass() 获得带有泛型的父类；</span></span><br><span class="line">        Type superClass = getClass().getGenericSuperclass();</span><br><span class="line">        <span class="comment">//【4】将 superClass 强转为 ParameterizedType 类型；</span></span><br><span class="line">        <span class="comment">//【5】getActualTypeArguments() 返回表示此类型实际类型参数的 Type 对象的数组；</span></span><br><span class="line">        <span class="comment">//【6】[0] 就是这个数组中第一个了，简而言之就是获得超类的泛型参数的实际类型</span></span><br><span class="line">        type = ((ParameterizedType) superClass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeWrapper<t> 是一个泛型类，泛型 T 表示目标对象类型！</t></p><p>后面我们再具体分析。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 中的 arouter-annotation 模块，其内部定义了 ARouter 必须的注解类，数据类，已经枚举类。</p><p>下篇文章将分析 arouter-compiler 模块，探寻在 App 编译期间，Gradle 事如何使用 arouter-compiler  对注解进行解析，和动态生成中间类的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第一篇 - 基本使用</title>
    <link href="https://coolqi.top/2019/04/13/ARouter1-baseUsages/"/>
    <id>https://coolqi.top/2019/04/13/ARouter1-baseUsages/</id>
    <published>2019-04-13T12:46:25.000Z</published>
    <updated>2019-08-01T13:32:27.796Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的原理。</p><p><strong>这篇文章</strong> 里面的一些内容来自：</p><blockquote><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/blob/master/README_CN.md</a></p></blockquote><p>官网对其使用已经总结的很好了，本篇博文在其基础上整理了下～～</p><h1 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1 简单介绍"></a>1 简单介绍</h1><p>对于 ARouter 大家只要做过模块化开发，那么就一定有所了解，ARouter 是阿里巴巴开源的一款路由框架，用于解决模块化开发中的模块依赖。</p><p><br></p><h2 id="2-1-主要模块"><a href="#2-1-主要模块" class="headerlink" title="2.1 主要模块"></a>2.1 主要模块</h2><p>官方提供了下面的四个插件模块：</p><ul><li>arouter-api：对外提供功能相关的 Api；</li><li>arouter-compiler：用于解析注解，生成代码；</li><li>arouter-register：用于 App 加固时的自动注册；</li><li>arouter-idea-plugin：Idea 插件，用于关联路径和目标类；</li></ul><p><br></p><h2 id="2-2-功能介绍"><a href="#2-2-功能介绍" class="headerlink" title="2.2 功能介绍"></a>2.2 功能介绍</h2><p>官方文档中讲到 ARouter 支持如下的功能：</p><ol><li><strong>支持直接解析标准 URL 进行跳转，并自动注入参数到目标页面中；</strong></li><li><strong>支持多模块工程使用；</strong></li><li><strong>支持添加多个拦截器，自定义拦截顺序；</strong></li><li><strong>支持依赖注入，可单独作为依赖注入框架使用；</strong></li><li><strong>支持 InstantRun；</strong></li><li><strong>支持 MultiDex；</strong> (Google 方案)</li><li>映射关系按组分类、多级管理，按需初始化；</li><li><strong>支持用户指定全局降级与局部降级策略</strong>；</li><li>页面、拦截器、服务等组件均自动注册到框架；</li><li><strong>支持多种方式配置转场动画</strong>；</li><li><strong>支持获取 Fragment</strong>；</li><li><strong>完全支持 Kotlin 以及混编</strong>；</li><li><strong>支持第三方 App 加固；</strong>(使用 arouter-register 实现自动注册)</li><li><strong>支持生成路由文档；</strong></li><li><strong>提供 IDE 插件便捷的关联路径和目标类；</strong></li></ol><p><br></p><ul><li>当然，我们后面通过源码分析；</li></ul><h1 id="2-ARouter-使用（官网整理）"><a href="#2-ARouter-使用（官网整理）" class="headerlink" title="2 ARouter 使用（官网整理）"></a>2 ARouter 使用（官网整理）</h1><p>以下内容来自对 <a href="https://github.com/alibaba/ARouter/edit/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/edit/master/README_CN.md</a> 的整理：</p><h2 id="2-1-Gradle-配置"><a href="#2-1-Gradle-配置" class="headerlink" title="2.1 Gradle 配置"></a>2.1 Gradle 配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [AROUTER_MODULE_NAME: project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.alibaba:arouter-api:x.x.x'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.alibaba:arouter-compiler:x.x.x'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个库均要使用最新版本，防止兼容问题发生；</p><h2 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h2><h3 id="2-2-1-添加注解"><a href="#2-2-1-添加注解" class="headerlink" title="2.2.1 添加注解"></a>2.2.1 添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourActivity</span> <span class="title">extend</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-初始化操作"><a href="#2-2-2-初始化操作" class="headerlink" title="2.2.2 初始化操作"></a>2.2.2 初始化操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class="line"><span class="keyword">if</span> (isDebug()) &#123;      </span><br><span class="line">    <span class="comment">//【2】打印日志</span></span><br><span class="line">    ARouter.openLog();</span><br><span class="line">    <span class="comment">//【3】开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！</span></span><br><span class="line">    <span class="comment">// 线上版本需要关闭,否则有安全风险)</span></span><br><span class="line">    ARouter.openDebug();</span><br><span class="line">&#125;</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在Application中初始化</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-路由跳转"><a href="#2-2-3-路由跳转" class="headerlink" title="2.2.3 路由跳转"></a>2.2.3 路由跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】应用内简单的跳转(通过URL跳转在'进阶用法'中)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】跳转并携带参数</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>)</span><br><span class="line">            .withLong(<span class="string">"key1"</span>, <span class="number">666L</span>)</span><br><span class="line">            .withString(<span class="string">"key3"</span>, <span class="string">"888"</span>)</span><br><span class="line">            .withObject(<span class="string">"key4"</span>, <span class="keyword">new</span> Test(<span class="string">"Jack"</span>, <span class="string">"Rose"</span>))</span><br><span class="line">            .navigation();</span><br></pre></td></tr></table></figure><h2 id="2-3-进阶使用"><a href="#2-3-进阶使用" class="headerlink" title="2.3 进阶使用"></a>2.3 进阶使用</h2><h3 id="2-3-1-通过-URL-跳转"><a href="#2-3-1-通过-URL-跳转" class="headerlink" title="2.3.1 通过 URL 跳转"></a>2.3.1 通过 URL 跳转</h3><p>我们除了可以使用 @Route 方式指定 path 来跳转，我们还可以通过 url 跳转：</p><p>当通过 URL 跳转时，URL 中不能传递 Parcelable 类型数据，通过 ARouter api 才能传递 Parcelable 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 Activity 用于监听 Schame 事件, </span></span><br><span class="line"><span class="comment">// 之后直接把 url 传递给 ARouter 即可；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明书 AndroidManifest.xml 中的配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-自动解析参数"><a href="#2-3-2-自动解析参数" class="headerlink" title="2.3.2 自动解析参数"></a>2.3.2 自动解析参数</h3><p>自动解析参数。</p><p>为每一个参数声明一个字段，并使用 @Autowired 标注，我们传递的值将会自动赋值给所属变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】通过 name 来映射 URL 中的不同参数</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"girl"</span>) </span><br><span class="line">    <span class="keyword">boolean</span> boy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】支持解析自定义对象，URL中使用 json 传递</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestObj obj;      </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】使用 withObject 传递 List 和 Map 的实现了</span></span><br><span class="line">    <span class="comment">// Serializable 接口的实现类(ArrayList/HashMap)</span></span><br><span class="line">    <span class="comment">// 的时候，接收该对象的地方不能标注具体的实现类类型</span></span><br><span class="line">    <span class="comment">// 应仅标注为 List 或 Map，否则会影响序列化中类型</span></span><br><span class="line">    <span class="comment">// 的判断, 其他类似情况需要同样处理        </span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestObj&gt; list;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Map&lt;String, List&lt;TestObj&gt;&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//【4】这里很关键，执行 ativity 的注入；</span></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要传递自定义对象（比如上面的 TestObj），新建一个类，实现 SerializationService, 并使用 @Route 注解标注！</p><p>这个类的作用是自定义对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是 JSON 序列化。</p><h3 id="2-3-3-跳转拦截器"><a href="#2-3-3-跳转拦截器" class="headerlink" title="2.3.3 跳转拦截器"></a>2.3.3 跳转拦截器</h3><p>拦截器用于拦截跳转过程，面向切面编程，比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查！</p><p>拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 处理完成，交还控制权</span></span><br><span class="line">        callback.onContinue(postcard); </span><br><span class="line">        <span class="comment">// 觉得有问题，中断路由流程，以上两种至少需要调用其中一种，否则不会继续路由</span></span><br><span class="line">        <span class="comment">// callback.onInterrupt(new RuntimeException("我觉得有点异常")); </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】拦截器的初始化，会在 sdk 初始化的时候调用该方法，仅会调用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说的初始化，就是 ARouter.init 方法；</p><h3 id="2-3-4-处理跳转结果"><a href="#2-3-4-处理跳转结果" class="headerlink" title="2.3.4 处理跳转结果"></a>2.3.4 处理跳转结果</h3><p>navigation 方法支持传入一个 <strong>NavigationCallback 回调</strong>，处理跳转结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-5-自定义全局降级策略"><a href="#2-3-5-自定义全局降级策略" class="headerlink" title="2.3.5 自定义全局降级策略"></a>2.3.5 自定义全局降级策略</h3><p>自定义类，实现 DegradeService 接口，并加上一个 Path 内容任意的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeServiceImpl</span> <span class="keyword">implements</span> <span class="title">DegradeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-为目标页面声明更多信息"><a href="#2-3-6-为目标页面声明更多信息" class="headerlink" title="2.3.6 为目标页面声明更多信息"></a>2.3.6 为目标页面声明更多信息</h3><p>@Route 还有一个 extras 属性，用于设置一些额外的属性，他是一个 int 值，有 32 位，可以配置 32 个开关；</p><p>我们可以通过设置指定的开关位，然后在拦截器中可以拿到这个标记进行业务逻辑判断！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>, extras = Consts.XXXX)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-7-依赖注入解耦"><a href="#2-3-7-依赖注入解耦" class="headerlink" title="2.3.7 依赖注入解耦"></a>2.3.7 依赖注入解耦</h3><p>ARouter 通过定义统一的访问接口来实现解耦 module 依赖；</p><p>核心接口：IProvider！</p><h4 id="2-3-7-1-暴露服务"><a href="#2-3-7-1-暴露服务" class="headerlink" title="2.3.7.1 暴露服务"></a>2.3.7.1 暴露服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明接口,其他组件通过接口来调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】module 间通信接口； </span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】实现接口，也是我们实际要暴漏的服务；</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/hello"</span>, name = <span class="string">"测试服务"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴漏的服务，需要通过 @Route 注解去修饰！</p><h4 id="2-3-7-2-访问服务"><a href="#2-3-7-2-访问服务" class="headerlink" title="2.3.7.2 访问服务"></a>2.3.7.2 访问服务</h4><p>当我们暴漏了服务后，需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】依赖注入的方式</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/yourservicegroupname/hello"</span>)</span><br><span class="line">    HelloService helloService2;</span><br><span class="line">    <span class="comment">//【2】依赖查找的方式</span></span><br><span class="line">    HelloService helloService3;</span><br><span class="line">    HelloService helloService4;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【3】依赖注入的方式；</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问服务的方式有下面两种方式：</p><ul><li><strong>使用依赖注入的方式发现服务</strong></li></ul><p>这也是推荐的方式，通过注解标注字段, 即可使用，无需主动获取</p><p>Autowired 注解标注 name 之后，将会使用 <strong>byName</strong> 的方式注入对应的字段；不设置 name 属性，会默认使用<strong>byType</strong> 的方式发现服务(当同一接口有多个实现的时候，必须使用 byName 的方式发现服务)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helloService.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService2.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>使用依赖查找的方式发现服务</strong></li></ul><p>使用依赖查找的方式发现服务，主动去发现服务并使用，也有 byName 和 byType 两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helloService3 = ARouter.getInstance().navigation(HelloService.class);</span><br><span class="line">helloService4 = (HelloService) ARouter.getInstance().build(<span class="string">"/yourservicegroupname/hello"</span>).navigation();</span><br><span class="line">helloService3.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService4.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-8-预处理服务"><a href="#2-3-8-预处理服务" class="headerlink" title="2.3.8 预处理服务"></a>2.3.8 预处理服务</h3><p>预处理服务和拦截器的概念很类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPretreatment</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-源码结构"><a href="#3-源码结构" class="headerlink" title="3 源码结构"></a>3 源码结构</h1><p>我们来看下 ARouter 的源码结构，下面列出关键的目录：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-ARouter-master.iml      </span><br><span class="line">|-README_CN.md            </span><br><span class="line">|-arouter-api             </span><br><span class="line">|-arouter-idea-plugin</span><br><span class="line">|-arouter-compiler</span><br><span class="line">|-arouter-annotation</span><br><span class="line">|-arouter-gradle-plugin</span><br><span class="line">|- ... ... ...</span><br></pre></td></tr></table></figure><p>这里分别解释下每个 module 的作用：</p><ul><li><strong>arouter-annotation</strong>：<ul><li>定义了 ARouter 使用到的所有的注解；</li></ul></li><li><strong>arouter-api</strong>：<ul><li><strong>对应 “arouter-api” 插件</strong>，对外提供功能相关的 Api；</li></ul></li><li><strong>arouter-compiler</strong>：<ul><li><strong>对应 “arouter-compiler” 插件</strong>，用于解析注解，生成代码；</li></ul></li><li><strong>arouter-gradle-plugin</strong>：<ul><li><strong>对应 “arouter-register” 插件</strong>，用于 App 加固时的自动注册；</li></ul></li><li><strong>arouter-idea-plugin</strong>：<ul><li><strong>对应 “arouter-idea-plugin” 插件</strong>，用于关联路径和目标类；</li></ul></li></ul><h2 id="3-1-Module-依赖关系"><a href="#3-1-Module-依赖关系" class="headerlink" title="3.1 Module 依赖关系"></a>3.1 Module 依赖关系</h2><p>下图我们来看看这几个 module 的依赖关系：</p><p><img src="leanote://file/getImage?fileId=5d3ec537ab6441734a002e54" alt=""></p><p>依赖关系还是很简单的，毕竟只有几个 module。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇博文整理了下 ARouter 官网的一些内容，总结了 ARouter 的基本使用和进阶使用，接下来，会通过分析每个 module 的源码，来进一步分析 ARouter 的原理！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的原理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章&lt;/strong&gt; 里面的一些内容来自：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter/blob/mas
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>Permission第 6 篇 - permission info 的获取和更新</title>
    <link href="https://coolqi.top/2018/11/08/Permission6-getAndUpdatePermissionInfo/"/>
    <id>https://coolqi.top/2018/11/08/Permission6-getAndUpdatePermissionInfo/</id>
    <published>2018-11-07T16:22:14.000Z</published>
    <updated>2018-11-20T15:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！</p><p>PackageManagerService 提供了很多个接口用于获取权限的信息！</p><h1 id="1-获取权限组相关的信息！"><a href="#1-获取权限组相关的信息！" class="headerlink" title="1 获取权限组相关的信息！"></a>1 获取权限组相关的信息！</h1><p>PackageManagerService.mPermissionGroups 保存了从所有 Application 中解析到的权限组信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="1-1-PackageManagerS-getAllPermissionGroups"><a href="#1-1-PackageManagerS-getAllPermissionGroups" class="headerlink" title="1.1 PackageManagerS.getAllPermissionGroups"></a>1.1 PackageManagerS.getAllPermissionGroups</h2><p>获得所有的权限组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">ParceledListSlice&lt;PermissionGroupInfo&gt; <span class="title">getAllPermissionGroups</span><span class="params">(<span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mPermissionGroups.size();</span><br><span class="line">        ArrayList&lt;PermissionGroupInfo&gt; out</span><br><span class="line">                = <span class="keyword">new</span> ArrayList&lt;PermissionGroupInfo&gt;(N);</span><br><span class="line">        <span class="keyword">for</span> (PackageParser.PermissionGroup pg : mPermissionGroups.values()) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">            out.add(PackageParser.generatePermissionGroupInfo(pg, flags));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-PackageManagerS-getPermissionGroupInfo"><a href="#1-2-PackageManagerS-getPermissionGroupInfo" class="headerlink" title="1.2 PackageManagerS.getPermissionGroupInfo"></a>1.2 PackageManagerS.getPermissionGroupInfo</h2><p>获得指定的权限组信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionGroupInfo <span class="title">getPermissionGroupInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">        <span class="keyword">return</span> PackageParser.generatePermissionGroupInfo(</span><br><span class="line">                mPermissionGroups.get(name), flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-PackageParser-generatePermissionGroupInfo"><a href="#1-2-1-PackageParser-generatePermissionGroupInfo" class="headerlink" title="1.2.1 PackageParser.generatePermissionGroupInfo"></a>1.2.1 PackageParser.generatePermissionGroupInfo</h3><p>该方法会新创建的 PermissionGroupInfo 对象，作为解析数据 PermissionGroup.PermissionGroupInfo 的拷贝！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static final PermissionGroupInfo generatePermissionGroupInfo(</span><br><span class="line">        PermissionGroup pg, int flags) &#123;</span><br><span class="line">    if (pg == null) return null;</span><br><span class="line">    // 如果 flags 没有设置 PackageManager.GET_META_DATA，直接返回 PermissionGroup.PermissionGroupInfo</span><br><span class="line">    if ((flags &amp; PackageManager.GET_META_DATA) == 0) &#123;</span><br><span class="line">        return pg.info;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果 flags 设置了 PackageManager.GET_META_DATA，我们会新建一个 PermissionGroupInfo 对象，</span><br><span class="line">    // 将解析的数据拷贝进来！</span><br><span class="line">    PermissionGroupInfo pgi = new PermissionGroupInfo(pg.info);</span><br><span class="line">    pgi.metaData = pg.metaData;</span><br><span class="line">    return pgi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-获取权限相关的信息！"><a href="#2-获取权限相关的信息！" class="headerlink" title="2 获取权限相关的信息！"></a>2 获取权限相关的信息！</h1><p>mSettings.mPermissions 保存了系统和应用定义的所有的权限信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="2-1-PackageParser-getPermissionInfo"><a href="#2-1-PackageParser-getPermissionInfo" class="headerlink" title="2.1 PackageParser.getPermissionInfo"></a>2.1 PackageParser.getPermissionInfo</h2><p>获得指定 name 的权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionInfo <span class="title">getPermissionInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> BasePermission p = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">            <span class="keyword">return</span> generatePermissionInfo(p, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-PackageParser-queryPermissionsByGroup"><a href="#2-2-PackageParser-queryPermissionsByGroup" class="headerlink" title="2.2 PackageParser.queryPermissionsByGroup"></a>2.2 PackageParser.queryPermissionsByGroup</h2><p>获得同一个 group 中的所有权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">ParceledListSlice&lt;PermissionInfo&gt; <span class="title">queryPermissionsByGroup</span><span class="params">(String group,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】校验权限组是否存在！</span></span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; !mPermissionGroups.containsKey(group)) &#123;</span><br><span class="line">            <span class="comment">// This is thrown as NameNotFoundException</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">        ArrayList&lt;PermissionInfo&gt; out = <span class="keyword">new</span> ArrayList&lt;PermissionInfo&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (BasePermission p : mSettings.mPermissions.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123; <span class="comment">// 如果参数 group 为 null，只收集无 group 的权限！</span></span><br><span class="line">                <span class="keyword">if</span> (p.perm == <span class="keyword">null</span> || p.perm.info.group == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    out.add(generatePermissionInfo(p, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.perm != <span class="keyword">null</span> &amp;&amp; group.equals(p.perm.info.group)) &#123;</span><br><span class="line">                    out.add(PackageParser.generatePermissionInfo(p.perm, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-1-PackageParser-generatePermissionInfo"><a href="#2-2-1-PackageParser-generatePermissionInfo" class="headerlink" title="2.2.1 PackageParser.generatePermissionInfo"></a>2.2.1 PackageParser.generatePermissionInfo</h3><p>该方法会新创建的 PermissionInfo 对象，拷贝 Permission 的数据！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PermissionInfo <span class="title">generatePermissionInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Permission p, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.GET_META_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p.info;</span><br><span class="line">    &#125;</span><br><span class="line">    PermissionInfo pi = <span class="keyword">new</span> PermissionInfo(p.info);</span><br><span class="line">    pi.metaData = p.metaData;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不需要 GET_META_DATA，那就直接返回解析得到的 PermissionInfo 对象！</p><h1 id="3-获取权限标志位的信息！"><a href="#3-获取权限标志位的信息！" class="headerlink" title="3 获取权限标志位的信息！"></a>3 获取权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来获得权限标志位组的信息！</p><p>PackageManagerService.mPackages 用于保存所有解析过的 Pacakge 信息！</p><p>mSettings.mPermissions 中保存了系统中所有的权限信息！</p><h2 id="3-1-PackageManagerService-getPermissionFlags"><a href="#3-1-PackageManagerService-getPermissionFlags" class="headerlink" title="3.1 PackageManagerService.getPermissionFlags"></a>3.1 PackageManagerService.getPermissionFlags</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果 packageName 不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果权限不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】获得该 package 对应的 PackageSettings 或者 SharedUserSetting 对象！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】获得权限的 flags</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">        <span class="keyword">return</span> permissionsState.getPermissionFlags(name, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h1 id="4-更新权限标志位的信息！"><a href="#4-更新权限标志位的信息！" class="headerlink" title="4 更新权限标志位的信息！"></a>4 更新权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来更新权限标志位的信息！</p><h2 id="4-1-PackageManagerService-updatePermissionFlags"><a href="#4-1-PackageManagerService-updatePermissionFlags" class="headerlink" title="4.1 PackageManagerService.updatePermissionFlags"></a>4.1 PackageManagerService.updatePermissionFlags</h2><p>该方法更新指定权限的 flags，flagMask 表示的是 flags 的位掩码，用来屏蔽某些位；flagValues 表示新的标志位值！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> flagMask,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果调用者不是 system uid，不能改变以下标志位，flagMask  和 flagValues 需去掉对应标志位：</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】如果该 package 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】如果权限 name 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown permission: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】如果该 package 没有安装记录，抛出异常！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5】获得该 package 的权限状态管理对象！</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】获得该应用程序的运行时权限状态信息，返回不为 null，说明其有运行时权限！</span></span><br><span class="line">        <span class="keyword">boolean</span> hadState = permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.1.1】更新该权限的标志位！</span></span><br><span class="line">        <span class="keyword">if</span> (permissionsState.updatePermissionFlags(bp, userId, flagMask, flagValues)) &#123;</span><br><span class="line">            <span class="comment">// 安装时权限和运行时权限保存在不同的目录下，所以要更新不同的文件</span></span><br><span class="line">            <span class="keyword">if</span> (permissionsState.getInstallPermissionState(name) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleWriteSettingsLocked(); <span class="comment">// 更新运行时权限！</span></span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span></span><br><span class="line">                    || hadState) &#123; <span class="comment">// 更新安装时权限！</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先会更新 flags，更新成功后，会根据权限的类型去，去更新对应的持久化文件！</p><h3 id="4-1-1-PermissionsState-updatePermissionFlags"><a href="#4-1-1-PermissionsState-updatePermissionFlags" class="headerlink" title="4.1.1 PermissionsState.updatePermissionFlags"></a>4.1.1 PermissionsState.updatePermissionFlags</h3><p>PermissionsState 用于管理 package 的权限状态!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlags</span><span class="params">(BasePermission permission, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line">    <span class="comment">//【1】如果 flagValues 和 flagMask 有一个不为 0，那就需要更新 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> mayChangeFlags = flagValues != <span class="number">0</span> || flagMask != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PermissionData permissionData = mPermissions.get(permission.name);</span><br><span class="line">    <span class="keyword">if</span> (permissionData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        permissionData = ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得旧的 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = permissionData.getFlags(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.1.1.1】调用 PermissionData.updatePermissionFlags 更新权限的标志位：</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updated = permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 flags 发生了更新，比较下，更新后是否需要再次 review！</span></span><br><span class="line">    <span class="keyword">if</span> (updated) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newFlags = permissionData.getFlags(userId); <span class="comment">// 获得新的 flags！</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line">            &#125;</span><br><span class="line">            mPermissionReviewRequired.put(userId, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired.delete(userId);</span><br><span class="line">                <span class="keyword">if</span> (mPermissionReviewRequired.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    mPermissionReviewRequired = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法很简单，无需多说，前面分析过了，这里就不多说了！！</p><h4 id="4-1-1-1-PermissionData-updateFlags"><a href="#4-1-1-1-PermissionData-updateFlags" class="headerlink" title="4.1.1.1 PermissionData.updateFlags"></a>4.1.1.1 PermissionData.updateFlags</h4><p>PermissionData 用于封装指定权限的状态信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateFlags</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInstallPermission()) &#123;</span><br><span class="line">        userId = UserHandle.USER_ALL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isCompatibleUserId(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】新的 newFlags 取 flagValues 和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="comment">// 就是说，新的 flags 要么是 0，要么只能取和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newFlags = flagValues &amp; flagMask;</span><br><span class="line"></span><br><span class="line">    PermissionState userState = mUserStates.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (userState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = userState.mFlags;</span><br><span class="line">        <span class="comment">//【2】最新的权限 flags 设置如下：</span></span><br><span class="line">        <span class="comment">// 先取 oldFlags 和 ~flagMask 相同的位值，然后加上 newFlags！</span></span><br><span class="line">        userState.mFlags = (userState.mFlags &amp; ~flagMask) | newFlags;</span><br><span class="line">        <span class="keyword">if</span> (userState.isDefault()) &#123;</span><br><span class="line">            mUserStates.remove(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userState.mFlags != oldFlags; <span class="comment">// 判断标志位是否变化！</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newFlags != <span class="number">0</span>) &#123;</span><br><span class="line">        userState = <span class="keyword">new</span> PermissionState(mPerm.name);</span><br><span class="line">        userState.mFlags = newFlags;</span><br><span class="line">        mUserStates.put(userId, userState);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，通过 flagValues &amp; flagMask 取其相同的位值为 newFlags！</p><p>设置最新的 flags 的时候，先是 oldFlags &amp; ~flagMask 取 oldFlags 和 ～flagMask 相同的位值，然后加上 newFlags！</p><h2 id="4-2-PackageManagerService-updatePermissionFlagsForAllApps"><a href="#4-2-PackageManagerService-updatePermissionFlagsForAllApps" class="headerlink" title="4.2 PackageManagerService.updatePermissionFlagsForAllApps"></a>4.2 PackageManagerService.updatePermissionFlagsForAllApps</h2><p>该方法更新指定所有权限的 flags！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlagsForAllApps</span><span class="params">(<span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果不是 system uid，不能修改 system fixed flags，从 flagMask 和 flagValues 中去掉该标志位！</span></span><br><span class="line">    <span class="comment">// 那么下面的调整中就不会涉及到 system fix 标志位！</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> packageCount = mPackages.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pkgIndex = <span class="number">0</span>; pkgIndex &lt; packageCount; pkgIndex++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package pkg = mPackages.valueAt(pkgIndex);</span><br><span class="line">            SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">            <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">            <span class="comment">//【*4.2.1】调用了 updatePermissionFlagsForAllPermissions 方法，更新 flags！</span></span><br><span class="line">            changed |= permissionsState.updatePermissionFlagsForAllPermissions(</span><br><span class="line">                    userId, flagMask, flagValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123; </span><br><span class="line">            <span class="comment">//【2】如果发生了改变，更新 rumtime-permissions.xml 文件！</span></span><br><span class="line">            mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions"><a href="#4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions" class="headerlink" title="4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions"></a>4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlagsForAllPermissions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permissionCount = mPermissions.size();</span><br><span class="line">    <span class="comment">//【*4.1.1.1】更新 PermissionsState 管理的所有权限的 flags！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissionCount; i++) &#123;</span><br><span class="line">        PermissionData permissionData = mPermissions.valueAt(i);</span><br><span class="line">        changed |= permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/h1&gt;&lt;p&gt;基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！&lt;/p&gt;
&lt;p&gt;Pac
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Permission权限管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Permission权限管理" scheme="https://coolqi.top/tags/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 12 篇 - 通过 adb 指令分析 enable/disable 过程</title>
    <link href="https://coolqi.top/2018/09/17/PMS12-enable_disableThroughAdb/"/>
    <id>https://coolqi.top/2018/09/17/PMS12-enable_disableThroughAdb/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2019-01-27T09:50:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本文来分析下 pms enable 相关的操作：</p><ul><li>adb shell pm enable</li><li>adb shell pm disable</li></ul><p>同样的，我们从 Pm 中看起！</p><h1 id="1-Pm"><a href="#1-Pm" class="headerlink" title="1 Pm"></a>1 Pm</h1><h2 id="1-1-run"><a href="#1-1-run" class="headerlink" title="1.1 run"></a>1.1 run</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validCommand = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    String op = args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"enable"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable-user"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；**</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable-until-used"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"default-state"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，和 enable/disable 相关的 pm 指令有很多，但无疑最后调用的都是：runSetEnabledSetting，唯一的区别是参数 int state 不一样！</p><p>我们知道，在 AndroidManifest.xml 中，我们可以给 application，activity 等四大组件设置如下的属性，来设置其是否可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:enabled=<span class="string">"true|false"</span></span><br></pre></td></tr></table></figure><p>下面，我们来看下 state 的值：</p><ul><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_ENABLED</strong>：组件或应用程序已被明确启用，无论其清单中指定了什么，适用于 setApplicationEnabledSetting 和 setComponentEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED</strong>：组件或应用程序已被明确禁用，无论其清单中指定了什么，适用于 setApplicationEnabledSetting 和 setComponentEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER</strong>：应用程序已被明确禁用，无论其清单中指定了什么。因为这是由于用户的请求，所以如果需要，他们可以通过适当的系统 UI 重新启用它，只适用于 setApplicationEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED</strong>：</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DEFAULT</strong>：组件或应用程序处于默认的 enable 状态，也就是我们在 AndroidManifest.xml 中设置的值！</p></li></ul><p>接下来，我们继续分析下流程：</p><h2 id="1-2-runSetEnabledSetting"><a href="#1-2-runSetEnabledSetting" class="headerlink" title="1.2 runSetEnabledSetting"></a>1.2 runSetEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runSetEnabledSetting</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_SYSTEM;</span><br><span class="line">    String option = nextOption();</span><br><span class="line">    <span class="comment">//【1】如果有指定 user，那么将 user id 保存到 userId 中；</span></span><br><span class="line">    <span class="keyword">if</span> (option != <span class="keyword">null</span> &amp;&amp; option.equals(<span class="string">"--user"</span>)) &#123;</span><br><span class="line">        String optionData = nextOptionData();</span><br><span class="line">        <span class="keyword">if</span> (optionData == <span class="keyword">null</span> || !isNumber(optionData)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Error: no USER_ID specified"</span>);</span><br><span class="line">            <span class="keyword">return</span> showUsage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userId = Integer.parseInt(optionData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得传入的包名参数；</span></span><br><span class="line">    String pkg = nextArg();</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Error: no package or component specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】尝试将其转为组件名；</span></span><br><span class="line">    ComponentName cn = ComponentName.unflattenFromString(pkg);</span><br><span class="line">    <span class="keyword">if</span> (cn == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.1】如果传入的参数指定的是包名，调用 setApplicationEnabledSetting 方法！</span></span><br><span class="line">            mPm.setApplicationEnabledSetting(pkg, state, <span class="number">0</span>, userId,</span><br><span class="line">                    <span class="string">"shell:"</span> + android.os.Process.myUid());</span><br><span class="line">            System.out.println(<span class="string">"Package "</span> + pkg + <span class="string">" new state: "</span></span><br><span class="line">                    + enabledSettingToString(</span><br><span class="line">                    mPm.getApplicationEnabledSetting(pkg, userId)));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.err.println(e.toString());</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.2】如果传入的参数指定的是组件名，调用 setComponentEnabledSetting 方法；</span></span><br><span class="line">            mPm.setComponentEnabledSetting(cn, state, <span class="number">0</span>, userId);</span><br><span class="line">            System.out.println(<span class="string">"Component "</span> + cn.toShortString() + <span class="string">" new state: "</span></span><br><span class="line">                    + enabledSettingToString(</span><br><span class="line">                    mPm.getComponentEnabledSetting(cn, userId)));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.err.println(e.toString());</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面会进入 PackageManagerService 中去！</p><h1 id="2-PackageManagerService"><a href="#2-PackageManagerService" class="headerlink" title="2 PackageManagerService"></a>2 PackageManagerService</h1><h2 id="2-1-setApplicationEnabledSetting"><a href="#2-1-setApplicationEnabledSetting" class="headerlink" title="2.1 setApplicationEnabledSetting"></a>2.1 setApplicationEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEnabledSetting</span><span class="params">(String appPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> newState, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (callingPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callingPackage = Integer.toString(Binder.getCallingUid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3】设置 enable 状态</span></span><br><span class="line">    setEnabledSetting(appPackageName, <span class="keyword">null</span>, newState, flags, userId, callingPackage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-setComponentEnabledSetting"><a href="#2-2-setComponentEnabledSetting" class="headerlink" title="2.2 setComponentEnabledSetting"></a>2.2 setComponentEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComponentEnabledSetting</span><span class="params">(ComponentName componentName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> newState, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//【*2.3】设置 enable 状态</span></span><br><span class="line">    setEnabledSetting(componentName.getPackageName(),</span><br><span class="line">            componentName.getClassName(), newState, flags, userId, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-setEnabledSetting-核心入口"><a href="#2-3-setEnabledSetting-核心入口" class="headerlink" title="2.3 setEnabledSetting - 核心入口"></a>2.3 setEnabledSetting - 核心入口</h2><p>可以看到，无论 application 环视 component，最后调用的都是该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEnabledSetting</span><span class="params">(<span class="keyword">final</span> String packageName, String className, <span class="keyword">int</span> newState,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> flags, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先是对 newState 的取值做检查！</span></span><br><span class="line">    <span class="keyword">if</span> (!(newState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_ENABLED</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid new component state: "</span></span><br><span class="line">                + newState);</span><br><span class="line">    &#125;</span><br><span class="line">    PackageSetting pkgSetting;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permission;</span><br><span class="line">    <span class="comment">//【2】校验权限，如果是 system uid 默认是授予；如果是其他 uid 检查下是否有 CHANGE_COMPONENT_ENABLED_STATE</span></span><br><span class="line">    <span class="comment">// 的权限；</span></span><br><span class="line">    <span class="keyword">if</span> (uid == Process.SYSTEM_UID) &#123;</span><br><span class="line">        permission = PackageManager.PERMISSION_GRANTED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        permission = mContext.checkCallingOrSelfPermission(</span><br><span class="line">                android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】检查是否有跨 user 的权限；</span></span><br><span class="line">    enforceCrossUserPermission(uid, userId,</span><br><span class="line">            <span class="keyword">false</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>, <span class="string">"set enabled"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> allowedByPermission = (permission == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">    <span class="keyword">boolean</span> sendNow = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isApp = (className == <span class="keyword">null</span>);</span><br><span class="line">    String componentName = isApp ? packageName : className;</span><br><span class="line">    <span class="keyword">int</span> packageUid = -<span class="number">1</span>;</span><br><span class="line">    ArrayList&lt;String&gt; components;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// writer</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【4】获得上一次的安装信息；</span></span><br><span class="line">        pkgSetting = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkgSetting == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Unknown component: "</span> + packageName + <span class="string">"/"</span> + className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】对于可以执行 enable/disable 的应用做限制，如果 calling uid 和要被 enable/disable 的应用不是同一个</span></span><br><span class="line">    <span class="comment">// ，那么，如果前面没有权限，不允许 enable/disable；如果该应用是受保护的，那么也不允许；</span></span><br><span class="line">    <span class="keyword">if</span> (!UserHandle.isSameApp(uid, pkgSetting.appId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allowedByPermission) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">"Permission Denial: attempt to change component state from pid="</span></span><br><span class="line">                    + Binder.getCallingPid()</span><br><span class="line">                    + <span class="string">", uid="</span> + uid + <span class="string">", package uid="</span> + pkgSetting.appId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mProtectedPackages.isPackageStateProtected(userId, packageName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Cannot disable a protected package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】进一步处理！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (uid == Process.SHELL_UID) &#123;</span><br><span class="line">            <span class="comment">//【6.1】Shell 只能改变 application 的状态，在 ENABLED 和 DISABLED_USER 之间；</span></span><br><span class="line">            <span class="comment">// Shell 不能该 compnent 的状态；</span></span><br><span class="line">            <span class="keyword">int</span> oldState = pkgSetting.getEnabled(userId);</span><br><span class="line">            <span class="keyword">if</span> (className == <span class="keyword">null</span></span><br><span class="line">                &amp;&amp;</span><br><span class="line">                (oldState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">                 || oldState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                 || oldState == COMPONENT_ENABLED_STATE_ENABLED)</span><br><span class="line">                &amp;&amp;</span><br><span class="line">                (newState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">                 || newState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                 || newState == COMPONENT_ENABLED_STATE_ENABLED)) &#123;</span><br><span class="line">                <span class="comment">// ok</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                        <span class="string">"Shell cannot change component state for "</span> + packageName + <span class="string">"/"</span></span><br><span class="line">                        + className + <span class="string">" to "</span> + newState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【6.2】开始设置 state 状态；</span></span><br><span class="line">        <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【6.2.1】设置的是 application/package 级别的 state；</span></span><br><span class="line">            <span class="keyword">if</span> (pkgSetting.getEnabled(userId) == newState) &#123;</span><br><span class="line">                <span class="comment">// 如果本次设置的状态和上一次的一样，不做任何处理</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【6.2.2】如果新的状态是 default 或者 enabled 那么我们不关注 callingPackage！</span></span><br><span class="line">            <span class="keyword">if</span> (newState == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                || newState == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) &#123;</span><br><span class="line">                callingPackage = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*3.2】设置 state 状态；</span></span><br><span class="line">            pkgSetting.setEnabled(newState, userId, callingPackage);</span><br><span class="line">            <span class="comment">// pkgSetting.pkg.mSetEnabled = newState;</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【6.2.3】设置的是 component 级别的 state，前提是 component 的 className 是有效的；</span></span><br><span class="line">            PackageParser.Package pkg = pkgSetting.pkg;</span><br><span class="line">            <span class="keyword">if</span> (pkg == <span class="keyword">null</span> || !pkg.hasComponentClassName(className)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pkg != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        pkg.applicationInfo.targetSdkVersion &gt;=</span><br><span class="line">                                Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Component class "</span> + className</span><br><span class="line">                            + <span class="string">" does not exist in "</span> + packageName);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Failed setComponentEnabledSetting: component class "</span></span><br><span class="line">                            + className + <span class="string">" does not exist in "</span> + packageName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【6.2.4】处理新的 state 状态；</span></span><br><span class="line">            <span class="keyword">switch</span> (newState) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_ENABLED:</span><br><span class="line">                <span class="comment">//【*3.3】enable 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.enableComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_DISABLED:</span><br><span class="line">                <span class="comment">//【*3.4】disable 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.disableComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_DEFAULT:</span><br><span class="line">                <span class="comment">//【*3.5】restore 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.restoreComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Slog.e(TAG, <span class="string">"Invalid new component state: "</span> + newState);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【7】保存偏好设置文件；</span></span><br><span class="line">        scheduleWritePackageRestrictionsLocked(userId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【8】准备发送 Package Changed 广播，mPendingBroadcasts 用于保存需要延迟发送的b包广播;</span></span><br><span class="line">        components = mPendingBroadcasts.get(userId, packageName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】判断该 userId 下是否是第一次添加 package；</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> newPackage = components == <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (newPackage) &#123;</span><br><span class="line">            components = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!components.contains(componentName)) &#123;</span><br><span class="line">            components.add(componentName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【10】如果没有设置 DONT_KILL_APP 标志，那么就会立即发送，sendNow 为 true；</span></span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;PackageManager.DONT_KILL_APP) == <span class="number">0</span>) &#123;</span><br><span class="line">            sendNow = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【10.1】因为是立即发送，所以会将这次处理的 package 从中移除；</span></span><br><span class="line">            mPendingBroadcasts.remove(userId, packageName);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【10.2】如果该 userId 下是第一次添加 package，那么我们会把对应关系保存到 mPendingBroadcasts 中！</span></span><br><span class="line">            <span class="keyword">if</span> (newPackage) &#123;</span><br><span class="line">                mPendingBroadcasts.put(userId, packageName, components);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mHandler.hasMessages(SEND_PENDING_BROADCAST)) &#123;</span><br><span class="line">                <span class="comment">// 延迟 10s 发送广播；</span></span><br><span class="line">                mHandler.sendEmptyMessageDelayed(SEND_PENDING_BROADCAST, BROADCAST_DELAY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【11】这里是立即发送广播 Intent.ACTION_PACKAGE_CHANGED !</span></span><br><span class="line">        <span class="comment">//（注意这里使用了 Binder 相关的方法，将发送广播的 uid 和 pid 变成了 system process）</span></span><br><span class="line">        <span class="keyword">if</span> (sendNow) &#123;</span><br><span class="line">            packageUid = UserHandle.getUid(userId, pkgSetting.appId);</span><br><span class="line">            <span class="comment">//【*2.3.1】发送 PACKAGE CHANGED 的广播；</span></span><br><span class="line">            sendPackageChangedBroadcast(packageName,</span><br><span class="line">                    (flags&amp;PackageManager.DONT_KILL_APP) != <span class="number">0</span>, components, packageUid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pms 内部有一个 PendingPackageBroadcasts 对象 mPendingBroadcasts，用于保存需要延迟返送的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PendingPackageBroadcasts mPendingBroadcasts = <span class="keyword">new</span> PendingPackageBroadcasts();</span><br></pre></td></tr></table></figure><p>我们来看下 PendingPackageBroadcasts 的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Set of pending broadcasts for aggregating enable/disable of components.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPackageBroadcasts</span> </span>&#123;</span><br><span class="line">     <span class="comment">// for each user id, a map of &lt;package name -&gt; components within that package&gt;</span></span><br><span class="line">     <span class="keyword">final</span> SparseArray&lt;ArrayMap&lt;String, ArrayList&lt;String&gt;&gt;&gt; mUidMap;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">PendingPackageBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         mUidMap = <span class="keyword">new</span> SparseArray&lt;ArrayMap&lt;String, ArrayList&lt;String&gt;&gt;&gt;(<span class="number">2</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其内部有一个 mUidMap 的 SparseArray 数组，保存的数据结构满足如下关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userId --&gt;  ArrayMap&lt; packageName --&gt; ArrayList&lt;componentName&gt; &gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-sendPackageChangedBroadcast"><a href="#2-3-1-sendPackageChangedBroadcast" class="headerlink" title="2.3.1 sendPackageChangedBroadcast"></a>2.3.1 sendPackageChangedBroadcast</h3><p>发送 ACTION_PACKAGE_CHANGED 的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageChangedBroadcast</span><span class="params">(String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> killFlag, ArrayList&lt;String&gt; componentNames, <span class="keyword">int</span> packageUid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL)</span><br><span class="line">        Log.v(TAG, <span class="string">"Sending package changed: package="</span> + packageName + <span class="string">" components="</span></span><br><span class="line">                + componentNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】保存要发送的一些数据；</span></span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">4</span>);</span><br><span class="line">    extras.putString(Intent.EXTRA_CHANGED_COMPONENT_NAME, componentNames.get(<span class="number">0</span>));</span><br><span class="line">    String nameList[] = <span class="keyword">new</span> String[componentNames.size()];</span><br><span class="line">    componentNames.toArray(nameList);</span><br><span class="line">    extras.putStringArray(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST, nameList);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, killFlag);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, packageUid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If this is not reporting a change of the overall package, then only send it</span></span><br><span class="line">    <span class="comment">// to registered receivers.  We don't want to launch a swath of apps for every</span></span><br><span class="line">    <span class="comment">// little component state change.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> flags = !componentNames.contains(packageName)</span><br><span class="line">            ? Intent.FLAG_RECEIVER_REGISTERED_ONLY : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】发送广播，这个方法前面看过，这里就不多说了。</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_CHANGED,  packageName, extras, flags, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;UserHandle.getUserId(packageUid)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="3-PackageSetting"><a href="#3-PackageSetting" class="headerlink" title="3 PackageSetting"></a>3 PackageSetting</h1><p>下面的方法确切的讲是 PackageSetting 的父类 PackageSettingBase 父类的方法：</p><h2 id="3-1-getEnabled"><a href="#3-1-getEnabled" class="headerlink" title="3.1 getEnabled"></a>3.1 getEnabled</h2><p>获得指定 user 下的 app 的 enabled 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getEnabled</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1.1】读取指定 userId 下的 PackageUserState 实例：</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).enabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-readUserState"><a href="#3-1-1-readUserState" class="headerlink" title="3.1.1 readUserState"></a>3.1.1 readUserState</h3><p>PackageSetting 内部有一个 SparseArray 数组：userState</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-setEnabled"><a href="#3-2-setEnabled" class="headerlink" title="3.2 setEnabled"></a>3.2 setEnabled</h2><p>设置指定 user 下的 app 的 enabled 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.2.1】modify 和 read 的区别是，在没有对应的使用信息的情况下，modify 会创建新的使用信息对象；</span></span><br><span class="line">    PackageUserState st = modifyUserState(userId);</span><br><span class="line">    <span class="comment">//【1】设置状态的值，和修改该值的 pkg；</span></span><br><span class="line">    st.enabled = state;</span><br><span class="line">    st.lastDisableAppCaller = callingPackage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-modifyUserState"><a href="#3-2-1-modifyUserState" class="headerlink" title="3.2.1 modifyUserState"></a>3.2.1 modifyUserState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageUserState <span class="title">modifyUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state = <span class="keyword">new</span> PackageUserState();</span><br><span class="line">        userState.put(userId, state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-enableComponentLPw"><a href="#3-3-enableComponentLPw" class="headerlink" title="3.3 enableComponentLPw"></a>3.3 enableComponentLPw</h2><p>enable 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enableComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.disabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.disabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 enable 的组件从 disabledComponents 移动到 enabledComponents 中；</span></span><br><span class="line">    changed |= state.enabledComponents.add(componentClassName);</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-modifyUserStateComponents"><a href="#3-3-1-modifyUserStateComponents" class="headerlink" title="3.3.1 modifyUserStateComponents"></a>3.3.1 modifyUserStateComponents</h3><p>modify 方法是对 PackageUserState 做一个初始化，然后返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PackageUserState <span class="title">modifyUserStateComponents</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">boolean</span> disabled, <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.2.1】返回对应的 PackageUserState 对象；</span></span><br><span class="line">    PackageUserState state = modifyUserState(userId);</span><br><span class="line">    <span class="comment">//【1】如果是 disable 的话，disabledComponents 为 null，那么会初始化该 set；</span></span><br><span class="line">    <span class="keyword">if</span> (disabled &amp;&amp; state.disabledComponents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state.disabledComponents = <span class="keyword">new</span> ArraySet&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果是 enable 的话，enabledComponents 为 null，那么会初始化该 set；</span></span><br><span class="line">    <span class="keyword">if</span> (enabled &amp;&amp; state.enabledComponents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state.enabledComponents = <span class="keyword">new</span> ArraySet&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageUserState 内部有两个 ArraySet 集合:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArraySet&lt;String&gt; disabledComponents; <span class="comment">// 禁用的组件；</span></span><br><span class="line"><span class="keyword">public</span> ArraySet&lt;String&gt; enabledComponents; <span class="comment">// 可用的组件；</span></span><br></pre></td></tr></table></figure><p>… …</p><h2 id="3-3-disableComponentLPw"><a href="#3-3-disableComponentLPw" class="headerlink" title="3.3 disableComponentLPw"></a>3.3 disableComponentLPw</h2><p>disable 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">disableComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.enabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.enabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 enable 的组件从 enabledComponents 移动到 disabledComponents 中；</span></span><br><span class="line">    changed |= state.disabledComponents.add(componentClassName);</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-restoreComponentLPw"><a href="#3-4-restoreComponentLPw" class="headerlink" title="3.4 restoreComponentLPw"></a>3.4 restoreComponentLPw</h2><p>restore 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">restoreComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.disabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.disabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 restore 的组件从 enabledComponents 和 disabledComponents 中都移除；</span></span><br><span class="line">    changed |= state.enabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.enabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-PackageHandler"><a href="#4-PackageHandler" class="headerlink" title="4 PackageHandler"></a>4 PackageHandler</h1><p>然后我们来看下 PackageHandler 对于消息的处理：</p><h2 id="4-1-doHandleMessage-SEND-PENDING-BROADCAST"><a href="#4-1-doHandleMessage-SEND-PENDING-BROADCAST" class="headerlink" title="4.1 doHandleMessage[SEND_PENDING_BROADCAST]"></a>4.1 doHandleMessage[SEND_PENDING_BROADCAST]</h2><p>然后我们来看下延迟发送广播的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SEND_PENDING_BROADCAST: &#123;</span><br><span class="line">    String packages[];</span><br><span class="line">    ArrayList&lt;String&gt; components[];</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> uids[];</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPendingBroadcasts == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = mPendingBroadcasts.size();</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Nothing to be done. Just return</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】保存所有 change 的 package；</span></span><br><span class="line">        packages = <span class="keyword">new</span> String[size];</span><br><span class="line">        <span class="comment">//【2】保存所有 change 的 component；</span></span><br><span class="line">        components = <span class="keyword">new</span> ArrayList[size];</span><br><span class="line">        <span class="comment">//【3】保存所有 change 的 package 的 uid；</span></span><br><span class="line">        uids = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// filling out the above arrays</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】遍历 mPendingBroadcasts 数组，处理每一项；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; mPendingBroadcasts.userIdCount(); n++) &#123;</span><br><span class="line">            <span class="keyword">int</span> packageUserId = mPendingBroadcasts.userIdAt(n);</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, ArrayList&lt;String&gt;&gt;&gt; it</span><br><span class="line">                    = mPendingBroadcasts.packagesForUserId(packageUserId)</span><br><span class="line">                            .entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4.1】将 mPendingBroadcasts 中的每一项保存到 packages[i]，components[i] 和 uids[i] 中！</span></span><br><span class="line">            <span class="keyword">while</span> (it.hasNext() &amp;&amp; i &lt; size) &#123;</span><br><span class="line">                Map.Entry&lt;String, ArrayList&lt;String&gt;&gt; ent = it.next();</span><br><span class="line">                packages[i] = ent.getKey();</span><br><span class="line">                components[i] = ent.getValue();</span><br><span class="line">                PackageSetting ps = mSettings.mPackages.get(ent.getKey());</span><br><span class="line">                uids[i] = (ps != <span class="keyword">null</span>)</span><br><span class="line">                        ? UserHandle.getUid(packageUserId, ps.appId)</span><br><span class="line">                        : -<span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        size = i;</span><br><span class="line">        mPendingBroadcasts.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3.1】发送 Package Changed 广播！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        sendPackageChangedBroadcast(packages[i], <span class="keyword">true</span>, components[i], uids[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-不同的-enable-状态的区别"><a href="#5-不同的-enable-状态的区别" class="headerlink" title="5 不同的 enable 状态的区别"></a>5 不同的 enable 状态的区别</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 11 篇 - 通过 adb 指令分析 hide/unhide 过程</title>
    <link href="https://coolqi.top/2018/09/11/PMS11-hide_unhideThroughAdb/"/>
    <id>https://coolqi.top/2018/09/11/PMS11-hide_unhideThroughAdb/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2019-01-27T09:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本文来分析下 pms hide 相关的操作：</p><ul><li>adb shell pm hide</li><li>adb shell pm unhide</li></ul><p>这个指令可以让一个 package 被 hide，无法被找到，同样的，我们从 Pm 中看起！</p><h1 id="1-Pm"><a href="#1-Pm" class="headerlink" title="1 Pm"></a>1 Pm</h1><h2 id="1-1-run"><a href="#1-1-run" class="headerlink" title="1.1 run"></a>1.1 run</h2><p>和其他方法的调用逻辑一样，进入 run 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validCommand = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    String op = args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"hide"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用自身的另一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> runSetHiddenSetting(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"unhide"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用自身的另一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> runSetHiddenSetting(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-runSetHiddenSetting"><a href="#1-2-runSetHiddenSetting" class="headerlink" title="1.2 runSetHiddenSetting"></a>1.2 runSetHiddenSetting</h2><p>我们来看下 runSetHiddenSetting 的调用逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runSetHiddenSetting</span><span class="params">(<span class="keyword">boolean</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】默认要 hide 所在的用户，为 USER_SYSTEM(0)</span></span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_SYSTEM;</span><br><span class="line">    String option = nextOption();</span><br><span class="line">    <span class="comment">//【2】如果通过 --user 指定了 hide 的 user。那就初始化为该 user！</span></span><br><span class="line">    <span class="keyword">if</span> (option != <span class="keyword">null</span> &amp;&amp; option.equals(<span class="string">"--user"</span>)) &#123;</span><br><span class="line">        String optionData = nextOptionData();</span><br><span class="line">        <span class="keyword">if</span> (optionData == <span class="keyword">null</span> || !isNumber(optionData)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Error: no USER_ID specified"</span>);</span><br><span class="line">            <span class="keyword">return</span> showUsage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userId = Integer.parseInt(optionData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】获得要 hide 的应用包名；</span></span><br><span class="line">    String pkg = nextArg();</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Error: no package or component specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.1】进入 pms！</span></span><br><span class="line">        mPm.setApplicationHiddenSettingAsUser(pkg, state, userId);</span><br><span class="line">        System.out.println(<span class="string">"Package "</span> + pkg + <span class="string">" new hidden state: "</span></span><br><span class="line">                + mPm.getApplicationHiddenSettingAsUser(pkg, userId));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        System.err.println(e.toString());</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="2-PackageManagerService"><a href="#2-PackageManagerService" class="headerlink" title="2 PackageManagerService"></a>2 PackageManagerService</h1><p>进入 pms 中去：</p><h2 id="2-1-setApplicationHiddenSettingAsUser"><a href="#2-1-setApplicationHiddenSettingAsUser" class="headerlink" title="2.1 setApplicationHiddenSettingAsUser"></a>2.1 setApplicationHiddenSettingAsUser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setApplicationHiddenSettingAsUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> hidden,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先校验下是否有 MANAGE_USERS 权限以及跨用户的权限；</span></span><br><span class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USERS, <span class="keyword">null</span>);</span><br><span class="line">    PackageSetting pkgSetting;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    enforceCrossUserPermission(uid, userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"setApplicationHiddenSetting for user "</span> + userId);</span><br><span class="line">    <span class="comment">//【2】如果要 hide 的 package 是 device admin，禁止 hide！</span></span><br><span class="line">    <span class="keyword">if</span> (hidden &amp;&amp; isPackageDeviceAdmin(packageName, userId)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Not hiding package "</span> + packageName + <span class="string">": has active device admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> sendAdded = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> sendRemoved = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// writer</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">//【3】获得该 package 对应的 PackageSetting 实例；</span></span><br><span class="line">            pkgSetting = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (pkgSetting == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】不允许 "android" 被 hide！</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"android"</span>.equals(packageName)) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Cannot hide package: android"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】只允许受保护的 package hide 他们自己！</span></span><br><span class="line">            <span class="keyword">if</span> (hidden &amp;&amp; !UserHandle.isSameApp(uid, pkgSetting.appId)</span><br><span class="line">                    &amp;&amp; mProtectedPackages.isPackageStateProtected(userId, packageName)) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Not hiding protected package: "</span> + packageName);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【6】处理 hide 状态，如果本次设置的和上一次的 hide 状态不一样，那么就需要更新 hide 状态！</span></span><br><span class="line">            <span class="comment">//【*2.1.1】获得该 package 在 userId 下的 PackageUserState 实例，然后获得其 hide 值；</span></span><br><span class="line">            <span class="keyword">if</span> (pkgSetting.getHidden(userId) != hidden) &#123;</span><br><span class="line">                <span class="comment">//【*2.1.2】设置该 package 在 userId 下的 hide 状态！</span></span><br><span class="line">                pkgSetting.setHidden(hidden, userId);</span><br><span class="line">                <span class="comment">//【6.1】更新偏好设置的本地化文件；</span></span><br><span class="line">                mSettings.writePackageRestrictionsLPr(userId);</span><br><span class="line">                <span class="comment">//【6.2】如果本次是 hide，sendRemoved 为 true；如果本次是 unhide，sendAdded 为 true；</span></span><br><span class="line">                <span class="keyword">if</span> (hidden) &#123;</span><br><span class="line">                    sendRemoved = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sendAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【7】如果是 unhide，进入这里；</span></span><br><span class="line">        <span class="keyword">if</span> (sendAdded) &#123;</span><br><span class="line">            <span class="comment">//【*2.2】发送 pkg add 的广播！</span></span><br><span class="line">            sendPackageAddedForUser(packageName, pkgSetting, userId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【8】如果是 hide，进入这里；</span></span><br><span class="line">        <span class="keyword">if</span> (sendRemoved) &#123;</span><br><span class="line">            <span class="comment">//【*2.3】杀掉 pkg 进程；</span></span><br><span class="line">            killApplication(packageName, UserHandle.getUid(userId, pkgSetting.appId),</span><br><span class="line">                    <span class="string">"hiding pkg"</span>);</span><br><span class="line">            <span class="comment">//【*2.4】发送 pkg add 的广播！</span></span><br><span class="line">            sendApplicationHiddenForUser(packageName, pkgSetting, userId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-1-PackageSetting-getHidden"><a href="#2-1-1-PackageSetting-getHidden" class="headerlink" title="2.1.1 PackageSetting.getHidden"></a>2.1.1 PackageSetting.getHidden</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getHidden</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.1.1.1】获得对应的 PackageUserState.hide 值；</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h4 id="2-1-1-1-readUserState"><a href="#2-1-1-1-readUserState" class="headerlink" title="2.1.1.1 readUserState"></a>2.1.1.1 readUserState</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】在 userId 下的 PackageUserState 实例！ </span></span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-PackageSetting-setHidden"><a href="#2-1-2-PackageSetting-setHidden" class="headerlink" title="2.1.2 PackageSetting.setHidden"></a>2.1.2 PackageSetting.setHidden</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHidden</span><span class="params">(<span class="keyword">boolean</span> hidden, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.1.2.1】设置对应 userId 下的 PackageUserState 的 hide 状态；</span></span><br><span class="line">    modifyUserState(userId).hidden = hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-1-modifyUserState"><a href="#2-1-2-1-modifyUserState" class="headerlink" title="2.1.2.1 modifyUserState"></a>2.1.2.1 modifyUserState</h4><p>该方法其实很简单，不多说了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageUserState <span class="title">modifyUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state = <span class="keyword">new</span> PackageUserState();</span><br><span class="line">        userState.put(userId, state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-sendPackageAddedForUser-3"><a href="#2-2-sendPackageAddedForUser-3" class="headerlink" title="2.2 sendPackageAddedForUser[3]"></a>2.2 sendPackageAddedForUser[3]</h2><p>给指定的 user 发送 Intent.ACTION_PACKAGE_ADDED 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】是不是 sys app;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem = isSystemApp(pkgSetting) || isUpdatedSystemApp(pkgSetting);</span><br><span class="line">    <span class="comment">//【*2.2.1】调用另一方法：</span></span><br><span class="line">    sendPackageAddedForUser(packageName, isSystem, pkgSetting.appId, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h3 id="2-2-1-sendPackageAddedForUser-4"><a href="#2-2-1-sendPackageAddedForUser-4" class="headerlink" title="2.2.1 sendPackageAddedForUser[4]"></a>2.2.1 sendPackageAddedForUser[4]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> isSystem,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> appId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//【1】获得 inhide 的应用所在的 user！</span></span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, UserHandle.getUid(userId, appId));</span><br><span class="line">    <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_ADDED 广播；</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</span><br><span class="line">            packageName, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】如果 unhide 的是 sys app，并且 userId 正在运行中；</span></span><br><span class="line">        <span class="keyword">if</span> (isSystem &amp;&amp; am.isUserRunning(userId, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// The just-installed/enabled app is bundled on the system, so presumed</span></span><br><span class="line">            <span class="comment">// to be able to run automatically without needing an explicit launch.</span></span><br><span class="line">            <span class="comment">// Send it a BOOT_COMPLETED if it would ordinarily have gotten one.</span></span><br><span class="line">            <span class="comment">//【2.1】这里会发送一个 boot completed 广播给这个 pkg，给它一个引导；</span></span><br><span class="line">            Intent bcIntent = <span class="keyword">new</span> Intent(Intent.ACTION_BOOT_COMPLETED)</span><br><span class="line">                    .addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)</span><br><span class="line">                    .setPackage(packageName);</span><br><span class="line">            am.broadcastIntent(<span class="keyword">null</span>, bcIntent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                    android.app.AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// shouldn't happen</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Unable to bootstrap installed package"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="2-2-1-1-sendPackageBroadcast"><a href="#2-2-1-1-sendPackageBroadcast" class="headerlink" title="2.2.1.1 sendPackageBroadcast"></a>2.2.1.1 sendPackageBroadcast</h4><p>发送广播的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sendPackageBroadcast</span><span class="params">(<span class="keyword">final</span> String action, <span class="keyword">final</span> String pkg, <span class="keyword">final</span> Bundle extras,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> flags, <span class="keyword">final</span> String targetPkg, <span class="keyword">final</span> IIntentReceiver finishedReceiver,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span>[] userIds)</span> </span>&#123;</span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">                <span class="keyword">if</span> (am == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">//【1】要发送的目标 userIds；</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span>[] resolvedUserIds;</span><br><span class="line">                <span class="keyword">if</span> (userIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    resolvedUserIds = am.getRunningUserIds();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolvedUserIds = userIds;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2】开始发送广播：</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> id : resolvedUserIds) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(action,</span><br><span class="line">                            pkg != <span class="keyword">null</span> ? Uri.fromParts(PACKAGE_SCHEME, pkg, <span class="keyword">null</span>) : <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        intent.putExtras(extras);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (targetPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        intent.setPackage(targetPkg);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.1】计算 package 在目标 userId 下的 uid！</span></span><br><span class="line">                    <span class="keyword">int</span> uid = intent.getIntExtra(Intent.EXTRA_UID, -<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (uid &gt; <span class="number">0</span> &amp;&amp; UserHandle.getUserId(uid) != id) &#123;</span><br><span class="line">                        uid = UserHandle.getUid(id, UserHandle.getAppId(uid));</span><br><span class="line">                        intent.putExtra(Intent.EXTRA_UID, uid);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.2】计算目标 userId！</span></span><br><span class="line">                    intent.putExtra(Intent.EXTRA_USER_HANDLE, id);</span><br><span class="line">                    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT | flags);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_BROADCASTS) &#123;</span><br><span class="line">                        RuntimeException here = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line">                        here.fillInStackTrace();</span><br><span class="line">                        Slog.d(TAG, <span class="string">"Sending to user "</span> + id + <span class="string">": "</span></span><br><span class="line">                                + intent.toShortString(<span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">                                + <span class="string">" "</span> + intent.getExtras(), here);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.3】发送广播！</span></span><br><span class="line">                    am.broadcastIntent(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, finishedReceiver,</span><br><span class="line">                            <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, android.app.AppOpsManager.OP_NONE,</span><br><span class="line">                            <span class="keyword">null</span>, finishedReceiver != <span class="keyword">null</span>, <span class="keyword">false</span>, id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就不多说了！</p><h2 id="2-3-killApplication-3"><a href="#2-3-killApplication-3" class="headerlink" title="2.3 killApplication[3]"></a>2.3 killApplication[3]</h2><p>杀掉应用的进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">killApplication</span><span class="params">(String pkgName, <span class="keyword">int</span> appId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.3.1】调用另一个方法：</span></span><br><span class="line">    killApplication(pkgName, appId, UserHandle.USER_ALL, reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-1-killApplication-4"><a href="#2-3-1-killApplication-4" class="headerlink" title="2.3.1 killApplication[4]"></a>2.3.1 killApplication[4]</h3><p>另一个 4 参数的 kill：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">killApplication</span><span class="params">(String pkgName, <span class="keyword">int</span> appId, <span class="keyword">int</span> userId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Request the ActivityManager to kill the process(only for existing packages)</span></span><br><span class="line">    <span class="comment">// so that we do not end up in a confused state while the user is still using the older</span></span><br><span class="line">    <span class="comment">// version of the application while the new one gets installed.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> token = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】杀掉进程；</span></span><br><span class="line">                am.killApplication(pkgName, appId, userId, reason);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于 killApplication 杀进程的流程，这里就不再分析了！</p><h2 id="2-4-sendApplicationHiddenForUser"><a href="#2-4-sendApplicationHiddenForUser" class="headerlink" title="2.4 sendApplicationHiddenForUser"></a>2.4 sendApplicationHiddenForUser</h2><p>给指定的 user 发送 Intent.ACTION_PACKAGE_REMOVED 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendApplicationHiddenForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.4.1】创建了一个 PackageRemovedInfo！</span></span><br><span class="line">    <span class="keyword">final</span> PackageRemovedInfo info = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">    <span class="comment">//【1】初始化 removedPackage，removedUsers 和 uid；</span></span><br><span class="line">    info.removedPackage = packageName;</span><br><span class="line">    info.removedUsers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</span><br><span class="line">    info.uid = UserHandle.getUid(userId, pkgSetting.appId);</span><br><span class="line">    <span class="comment">//【*2.4.2】调用了 PackageRemovedInfo 的 sendPackageRemovedBroadcasts 方法！</span></span><br><span class="line">    info.sendPackageRemovedBroadcasts(<span class="keyword">true</span> <span class="comment">/*killApp*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不多数说了！</p><h3 id="2-4-1-new-PackageRemovedInfo"><a href="#2-4-1-new-PackageRemovedInfo" class="headerlink" title="2.4.1 new PackageRemovedInfo"></a>2.4.1 new PackageRemovedInfo</h3><p>对于 PackageRemovedInfo 这里简单看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageRemovedInfo</span> </span>&#123;</span><br><span class="line">    String removedPackage;  <span class="comment">// 要 hide 的 packageName</span></span><br><span class="line">    <span class="keyword">int</span> uid = -<span class="number">1</span>;    <span class="comment">// 该 pkg 在指定的 userId 下的 uid</span></span><br><span class="line">    <span class="keyword">int</span> removedAppId = -<span class="number">1</span>;  <span class="comment">// 该 pkg 的 appId</span></span><br><span class="line">    <span class="keyword">int</span>[] origUsers;</span><br><span class="line">    <span class="keyword">int</span>[] removedUsers = <span class="keyword">null</span>; <span class="comment">// 要移除的 userId</span></span><br><span class="line">    <span class="keyword">boolean</span> isRemovedPackageSystemUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isUpdate;</span><br><span class="line">    <span class="keyword">boolean</span> dataRemoved; <span class="comment">// 是否移除数据，默认 false 不移除</span></span><br><span class="line">    <span class="keyword">boolean</span> removedForAllUsers; <span class="comment">// 是否从所有 user 下移除，默认 false；</span></span><br><span class="line">    <span class="comment">// Clean up resources deleted packages.</span></span><br><span class="line">    InstallArgs args = <span class="keyword">null</span>;</span><br><span class="line">    ArrayMap&lt;String, PackageRemovedInfo&gt; removedChildPackages;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; appearedChildPackages;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-PackageRemovedInfo-sendPackageRemovedBroadcasts"><a href="#2-4-2-PackageRemovedInfo-sendPackageRemovedBroadcasts" class="headerlink" title="2.4.2 PackageRemovedInfo.sendPackageRemovedBroadcasts"></a>2.4.2 PackageRemovedInfo.sendPackageRemovedBroadcasts</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcasts</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.4.2.1】调用另一个 send 方法；</span></span><br><span class="line">    sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">    <span class="comment">//【1】对于 child packages 执行相同的操作！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = removedChildPackages != <span class="keyword">null</span> ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">        <span class="comment">//【*2.4.2.1】调用另一个 send 方法；</span></span><br><span class="line">        childInfo.sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-1-PackageRemovedInfo-sendPackageRemovedBroadcastInternal"><a href="#2-4-1-1-PackageRemovedInfo-sendPackageRemovedBroadcastInternal" class="headerlink" title="2.4.1.1 PackageRemovedInfo.sendPackageRemovedBroadcastInternal"></a>2.4.1.1 PackageRemovedInfo.sendPackageRemovedBroadcastInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcastInternal</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建了一个 Bundle 对象；</span></span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//【2】保存要发送的数据：uid，data_moved，kill_app 等；</span></span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span>  ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DATA_REMOVED, dataRemoved);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, !killApp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】显然，对于 hide 是不进入这里的；</span></span><br><span class="line">    <span class="keyword">if</span> (isUpdate || isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REMOVED_FOR_ALL_USERS, removedForAllUsers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】准备发送广播：</span></span><br><span class="line">    <span class="keyword">if</span> (removedPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_REMOVED 广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED, removedPackage,</span><br><span class="line">                extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【4.1】如果需要移除数据，同时 remove 的是 sys app 自身，说明这是一个完全移除；</span></span><br><span class="line">        <span class="comment">//（hide 是不会进入这个逻辑的！）</span></span><br><span class="line">        <span class="keyword">if</span> (dataRemoved &amp;&amp; !isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">            <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_FULLY_REMOVED 广播；</span></span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_FULLY_REMOVED,</span><br><span class="line">                    removedPackage, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】如果 removedAppId &gt;= 0，说明应用对应的 uid 被移除了！</span></span><br><span class="line">    <span class="comment">// 然而这里 app 被 hide 了，其 app id 依然存在，所以不会发送对应的广播；</span></span><br><span class="line">    <span class="comment">//（hide 是不会进入这个逻辑的！）</span></span><br><span class="line">    <span class="keyword">if</span> (removedAppId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_UID_REMOVED 广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_UID_REMOVED, <span class="keyword">null</span>, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                removedUsers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 10 篇 - 通过 PackageInstaller 分析 uninstall 过程</title>
    <link href="https://coolqi.top/2018/09/10/PMS10-unisntallThroughPackageInstaller/"/>
    <id>https://coolqi.top/2018/09/10/PMS10-unisntallThroughPackageInstaller/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2019-01-27T09:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>前面总结了通过 pm uninstall 的方式来卸载一个 apk，下面我们来分析下通过 PackageInstaller 来卸载应用！ </p><p>对于用户来说，他们最常用的卸载方式，就是进入应用管理，然后进入指定的应用界面，选择卸载应用：</p><p>我们通过 dumpsys window 指令，可以看到这个焦点弹窗：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sailfish:/ $ dumpsys window | grep mF</span><br><span class="line">    mLastSystemUiFlags=0x8008 mResettingSystemUiFlags=0x0 mForceClearedSystemUiFlags=0x0</span><br><span class="line">    mFocusedWindow=Window&#123;b272ea0 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity&#125;</span><br><span class="line">    mFocusedApp=Token&#123;b7d3821 ActivityRecord&#123;53e1688 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity t55&#125;&#125;</span><br><span class="line">    mForceStatusBar=false mForceStatusBarFromKeyguard=false</span><br><span class="line">             mFillsParent=false mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=5</span><br><span class="line">             mFillsParent=true mOrientation=1</span><br><span class="line">    mPolicyVisibility=false mPolicyVisibilityAfterAnim=false mAppOpVisibility=true parentHidden=false mPermanentlyHidden=false mHiddenWhileSuspended=false mForceHideNonSystemOverlayWindow=false</span><br><span class="line">  mFocusedApp=AppWindowToken&#123;5f12446 token=Token&#123;b7d3821 ActivityRecord&#123;53e1688 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity t55&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个看起来像弹窗的界面，实际上是一个 Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity</span><br></pre></td></tr></table></figure><p>也就是说，拉起了 packageInstaller 去进行卸载操作，当我们点击卸载后，会触发如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uninstallPkg</span><span class="params">(String packageName, <span class="keyword">boolean</span> allUsers, <span class="keyword">boolean</span> andDisable)</span> </span>&#123;</span><br><span class="line">stopListeningToPackageRemove();</span><br><span class="line"><span class="comment">// Create new intent to launch Uninstaller activity</span></span><br><span class="line"><span class="comment">//【1】创建了一个 Uri，封装 packageName 的信息，然后通过 Intent 启动 UninstallerActivity！</span></span><br><span class="line">Uri packageUri = Uri.parse(<span class="string">"package:"</span> + packageName);</span><br><span class="line">Intent uninstallIntent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE, packageUri);</span><br><span class="line">uninstallIntent.putExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, allUsers);</span><br><span class="line"></span><br><span class="line">mMetricsFeatureProvider.action(</span><br><span class="line">mActivity, MetricsProto.MetricsEvent.ACTION_SETTINGS_UNINSTALL_APP);</span><br><span class="line">mFragment.startActivityForResult(uninstallIntent, mRequestUninstall);</span><br><span class="line">mDisableAfterUninstall = andDisable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们继续分析：</p><h1 id="1-UninstallerActivity"><a href="#1-UninstallerActivity" class="headerlink" title="1 UninstallerActivity"></a>1 UninstallerActivity</h1><h2 id="1-1-onCreate"><a href="#1-1-onCreate" class="headerlink" title="1.1 onCreate"></a>1.1 onCreate</h2><p>当我们点击了卸载时，会拉起 PackageInstaller 的 UninstallerActivity 界面：</p><p>卸载时，传入的 Uri 的格式如下：</p><ul><li><code>package://&lt;packageName&gt;#&lt;className&gt;</code>，className 是额外的参数，如果被指定，表示用户要卸载的具体的 activity；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">      <span class="comment">//【1】获得启动的 intent，以及其传递的 Uri！</span></span><br><span class="line">      <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line">      <span class="keyword">final</span> Uri packageUri = intent.getData();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【2】packageUri 不能为 null；</span></span><br><span class="line">      <span class="keyword">if</span> (packageUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"No package URI in intent"</span>);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//【3】包名也不能为 null；</span></span><br><span class="line">      mPackageName = packageUri.getEncodedSchemeSpecificPart();</span><br><span class="line">      <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Invalid package name in URI: "</span> + packageUri);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//【4】获得 pms 代理对象；</span></span><br><span class="line">      <span class="keyword">final</span> IPackageManager pm = IPackageManager.Stub.asInterface(</span><br><span class="line">              ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【*1.1.1】创建一个 DialogInfo 对象，保存安装和显示相关的信息；</span></span><br><span class="line">      mDialogInfo = <span class="keyword">new</span> DialogInfo();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【5】获得卸载时，指定的用户 user，如果没有指定，默认是当前用户；</span></span><br><span class="line">      mDialogInfo.user = intent.getParcelableExtra(Intent.EXTRA_USER);</span><br><span class="line">      <span class="keyword">if</span> (mDialogInfo.user == <span class="keyword">null</span>) &#123;</span><br><span class="line">          mDialogInfo.user = android.os.Process.myUserHandle();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【6】判断是否是从所有 user 下卸载；同时，获得卸载的回调 IBinder 对象；</span></span><br><span class="line">      mDialogInfo.allUsers = intent.getBooleanExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, <span class="keyword">false</span>);</span><br><span class="line">      mDialogInfo.callback = intent.getIBinderExtra(PackageInstaller.EXTRA_CALLBACK);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【7】获得要卸载的应用信息；</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          mDialogInfo.appInfo = pm.getApplicationInfo(mPackageName,</span><br><span class="line">                  PackageManager.GET_UNINSTALLED_PACKAGES, mDialogInfo.user.getIdentifier());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Unable to get packageName. Package manager is dead?"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//【8】应用信息不能为 null</span></span><br><span class="line">      <span class="keyword">if</span> (mDialogInfo.appInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Invalid packageName: "</span> + mPackageName);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The class name may have been specified (e.g. when deleting an app from all apps)</span></span><br><span class="line">      <span class="comment">//【9】如果指定了 actiivity，那么要获得该 activity 的信息对象；</span></span><br><span class="line">      <span class="keyword">final</span> String className = packageUri.getFragment();</span><br><span class="line">      <span class="keyword">if</span> (className != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              mDialogInfo.activityInfo = pm.getActivityInfo(</span><br><span class="line">                      <span class="keyword">new</span> ComponentName(mPackageName, className), <span class="number">0</span>,</span><br><span class="line">                      mDialogInfo.user.getIdentifier());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">              Log.e(TAG, <span class="string">"Unable to get className. Package manager is dead?"</span>);</span><br><span class="line">              <span class="comment">// Continue as the ActivityInfo isn't critical.</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//【*1.2】继续下一步的处理！</span></span><br><span class="line">      showConfirmationDialog();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-1-new-DialogInfo"><a href="#1-1-1-new-DialogInfo" class="headerlink" title="1.1.1 new DialogInfo"></a>1.1.1 new DialogInfo</h3><p>这里创建了一个 DialogInfo 对象，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogInfo</span> </span>&#123;</span><br><span class="line">    ApplicationInfo appInfo;</span><br><span class="line">    ActivityInfo activityInfo;</span><br><span class="line">    <span class="keyword">boolean</span> allUsers;</span><br><span class="line">    UserHandle user;</span><br><span class="line">    IBinder callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-showConfirmationDialog"><a href="#1-2-showConfirmationDialog" class="headerlink" title="1.2 showConfirmationDialog"></a>1.2 showConfirmationDialog</h2><p>继续下一步的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConfirmationDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*1.2.1】这里是切换到了一个 fragment 来显示信息；</span></span><br><span class="line">    <span class="comment">//【*2】这里会进入到 UninstallAlertDialogFragment 界面中；</span></span><br><span class="line">    showDialogFragment(<span class="keyword">new</span> UninstallAlertDialogFragment());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-showDialogFragment"><a href="#1-2-1-showDialogFragment" class="headerlink" title="1.2.1 showDialogFragment"></a>1.2.1 showDialogFragment</h3><p>切换显示 Fragment：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialogFragment</span><span class="params">(DialogFragment fragment)</span> </span>&#123;</span><br><span class="line">    FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class="line">    Fragment prev = getFragmentManager().findFragmentByTag(<span class="string">"dialog"</span>);</span><br><span class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ft.remove(prev);</span><br><span class="line">    &#125;</span><br><span class="line">    fragment.show(ft, <span class="string">"dialog"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-startUninstallProgress"><a href="#1-3-startUninstallProgress" class="headerlink" title="1.3 startUninstallProgress"></a>1.3 startUninstallProgress</h2><p>开始卸载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startUninstallProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建 Intent，传递参数：</span></span><br><span class="line">    Intent newIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    <span class="comment">//【2】要卸载的目标 user！</span></span><br><span class="line">    newIntent.putExtra(Intent.EXTRA_USER, mDialogInfo.user);</span><br><span class="line">    <span class="comment">//【3】是否从所有用户下下载；</span></span><br><span class="line">    newIntent.putExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, mDialogInfo.allUsers);</span><br><span class="line">    <span class="comment">//【4】卸载回调</span></span><br><span class="line">    newIntent.putExtra(PackageInstaller.EXTRA_CALLBACK, mDialogInfo.callback);</span><br><span class="line">    <span class="comment">//【5】要卸载的 app info</span></span><br><span class="line">    newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO, mDialogInfo.appInfo);</span><br><span class="line">    <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">true</span>);</span><br><span class="line">        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class="line">    &#125;</span><br><span class="line">    newIntent.setClass(<span class="keyword">this</span>, UninstallAppProgress.class);</span><br><span class="line">    <span class="comment">//【*3.1】进入 UninstallAppProgress 界面；   </span></span><br><span class="line">    startActivity(newIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 UninstallAppProgress activity，进入卸载状态！</p><h1 id="2-UninstallAlertDialogFragment"><a href="#2-UninstallAlertDialogFragment" class="headerlink" title="2 UninstallAlertDialogFragment"></a>2 UninstallAlertDialogFragment</h1><p>UninstallAlertDialogFragment 是 DialogFragment 的子类，实现了 DialogInterface.OnClickListener 接口。</p><p>我们去他的 onCreateDialog 方法中看看：</p><h2 id="2-1-onCreateDialog"><a href="#2-1-onCreateDialog" class="headerlink" title="2.1 onCreateDialog"></a>2.1 onCreateDialog</h2><p>该方法会创建一个 Dialog：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = getActivity().getPackageManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*1.1】获得前面创建的 DialogInfo 实例</span></span><br><span class="line">    <span class="keyword">final</span> DialogInfo dialogInfo = ((UninstallerActivity) getActivity()).mDialogInfo;</span><br><span class="line">    <span class="keyword">final</span> CharSequence appLabel = dialogInfo.appInfo.loadLabel(pm);</span><br><span class="line"></span><br><span class="line">    AlertDialog.Builder dialogBuilder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">    StringBuilder messageBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果指定了 activity，那么同时 Activity label 不同于 App label</span></span><br><span class="line">    <span class="comment">// 这里就要显示的通知用户要卸载的 activity 属于该 app！</span></span><br><span class="line">    <span class="keyword">if</span> (dialogInfo.activityInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> CharSequence activityLabel = dialogInfo.activityInfo.loadLabel(pm);</span><br><span class="line">        <span class="keyword">if</span> (!activityLabel.equals(appLabel)) &#123;</span><br><span class="line">            <span class="comment">// uninstall_activity_text：属于以下应用：</span></span><br><span class="line">            messageBuilder.append(</span><br><span class="line">                    getString(R.string.uninstall_activity_text, activityLabel));</span><br><span class="line">            messageBuilder.append(<span class="string">" "</span>).append(appLabel).append(<span class="string">".\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断下要卸载的应用是不是安装在 data 分区的 sys app 的更新；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isUpdate =</span><br><span class="line">            ((dialogInfo.appInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>);</span><br><span class="line">    UserManager userManager = UserManager.get(getActivity());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">        <span class="comment">//【3】如果卸载是安装在 data 分区的 sys app 的更新，那么要根据系统是否是 single user </span></span><br><span class="line">        <span class="comment">// 提示不同的信息！</span></span><br><span class="line">        <span class="keyword">if</span> (isSingleUser(userManager)) &#123;</span><br><span class="line">            <span class="comment">//【*2.1.1】isSingleUser 判断是否是 single user！</span></span><br><span class="line">            <span class="comment">// 提示："要将此应用替换为出厂版本吗？这样会移除所有数据。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_update_text));</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 提示："要将此应用替换为出厂版本吗？这样会移除所有数据，并会影响此设备的所有用户</span></span><br><span class="line">            <span class="comment">//（包括已设置工作资料的用户）。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_update_text_multiuser));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【4】如果卸载是安装在 data 分区的 user app，那么同样的，要根据系统是否是 single user</span></span><br><span class="line">        <span class="comment">// 以及卸载的 allUsers 参数来做不同的显示！</span></span><br><span class="line">        <span class="keyword">if</span> (dialogInfo.allUsers &amp;&amp; !isSingleUser(userManager)) &#123;</span><br><span class="line">            <span class="comment">//【4.1】如果是要从所有用户下卸载，同时系统不是 single user 的，那么</span></span><br><span class="line">            <span class="comment">// 提示："是否要为所有用户卸载此应用？系统将为设备上的所有用户删除此应用及其数据。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_application_text_all_users));</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dialogInfo.user.equals(android.os.Process.myUserHandle())) &#123;</span><br><span class="line">            <span class="comment">//【4.2】如果指定了要卸载的用户 user，同时该用户不是当前用户 user！</span></span><br><span class="line">            <span class="comment">// 提示："您要为用户 user 卸载此应用吗？"</span></span><br><span class="line">            UserInfo userInfo = userManager.getUserInfo(dialogInfo.user.getIdentifier());</span><br><span class="line">            messageBuilder.append(</span><br><span class="line">                    getString(R.string.uninstall_application_text_user, userInfo.name));</span><br><span class="line">                    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4.3】其他情况，提示："要卸载此应用吗？"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_application_text));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】创建一个 Dialog 并返回！</span></span><br><span class="line">    dialogBuilder.setTitle(appLabel);</span><br><span class="line">    dialogBuilder.setIcon(dialogInfo.appInfo.loadIcon(pm));</span><br><span class="line">    dialogBuilder.setPositiveButton(android.R.string.ok, <span class="keyword">this</span>);</span><br><span class="line">    dialogBuilder.setNegativeButton(android.R.string.cancel, <span class="keyword">this</span>);</span><br><span class="line">    dialogBuilder.setMessage(messageBuilder.toString());</span><br><span class="line">    <span class="keyword">return</span> dialogBuilder.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程很简单，不多说了！</p><h3 id="2-1-1-isSingleUser"><a href="#2-1-1-isSingleUser" class="headerlink" title="2.1.1 isSingleUser"></a>2.1.1 isSingleUser</h3><p>判断系统是否是单用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSingleUser</span><span class="params">(UserManager userManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userCount = userManager.getUserCount();</span><br><span class="line">    <span class="keyword">return</span> userCount == <span class="number">1</span></span><br><span class="line">            || (UserManager.isSplitSystemUser() &amp;&amp; userCount == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-onClick"><a href="#2-2-onClick" class="headerlink" title="2.2 onClick"></a>2.2 onClick</h2><p>卸载的关键触发是在 UninstallAlertDialogFragment 的点击事件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (which == Dialog.BUTTON_POSITIVE) &#123;</span><br><span class="line">        <span class="comment">//【*1.3】开始卸载！</span></span><br><span class="line">        ((UninstallerActivity) getActivity()).startUninstallProgress();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ((UninstallerActivity) getActivity()).dispatchAborted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h1 id="3-UninstallAppProgress"><a href="#3-UninstallAppProgress" class="headerlink" title="3 UninstallAppProgress"></a>3 UninstallAppProgress</h1><h2 id="3-1-onCreate"><a href="#3-1-onCreate" class="headerlink" title="3.1 onCreate"></a>3.1 onCreate</h2><p>下面是卸载界面的 onCreate 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">//【1】获得启动的 Intent；</span></span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    <span class="comment">//【2】获得要卸载的 app info</span></span><br><span class="line">    mAppInfo = intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class="line">    <span class="comment">//【3】获得安装回调；</span></span><br><span class="line">    mCallback = intent.getIBinderExtra(PackageInstaller.EXTRA_CALLBACK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里是因为 UninstallAppProgress 不支持 onDestroy-&gt;onCreate 的数据恢复；</span></span><br><span class="line">    <span class="comment">// 如果是这种情况，结束安装；</span></span><br><span class="line">    <span class="keyword">if</span> (icicle != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mResultCode = PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">        <span class="comment">//【4.1】如果指定了回调，那么会获得其代理对象，然后触发回调！</span></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub</span><br><span class="line">                    .asInterface(mCallback);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                observer.onPackageDeleted(mAppInfo.packageName, mResultCode, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            finish();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4.2】如果没有指定回调，那么会发送 resultCode！</span></span><br><span class="line">            setResultAndFinish(mResultCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】是否是从所有用户下下载；</span></span><br><span class="line">    mAllUsers = intent.getBooleanExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//【6】如果是所有用户，而当前用户不是 AdminUser，那么会抛出异常；</span></span><br><span class="line">    <span class="keyword">if</span> (mAllUsers &amp;&amp; !UserManager.get(<span class="keyword">this</span>).isAdminUser()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Only admin user can request uninstall for all users"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】是否指定了 user，如果没有指定那么默认就是当前 user；如果指定了，那么该 user 必须存在！</span></span><br><span class="line">    mUser = intent.getParcelableExtra(Intent.EXTRA_USER);</span><br><span class="line">    <span class="keyword">if</span> (mUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mUser = android.os.Process.myUserHandle();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        UserManager userManager = (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">        List&lt;UserHandle&gt; profiles = userManager.getUserProfiles();</span><br><span class="line">        <span class="keyword">if</span> (!profiles.contains(mUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"User "</span> + android.os.Process.myUserHandle() + <span class="string">" can't "</span></span><br><span class="line">                    + <span class="string">"request uninstall for user "</span> + mUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1.1】创建 PackageDeleteObserver 对象，接收卸载的回调；</span></span><br><span class="line">    PackageDeleteObserver observer = <span class="keyword">new</span> PackageDeleteObserver();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使窗口透明，直到调用 initView。 在许多情况下，我们可以避免显示UI，因为应用程序很快就会被卸载。 </span></span><br><span class="line">    <span class="comment">// 如果我们显示 UI 并立即删除它，它看起来就像一个闪烁。</span></span><br><span class="line">    getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br><span class="line">    getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">    getWindow().setNavigationBarColor(Color.TRANSPARENT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5】执行卸载操作！</span></span><br><span class="line">    getPackageManager().deletePackageAsUser(mAppInfo.packageName, observer,</span><br><span class="line">            mAllUsers ? PackageManager.DELETE_ALL_USERS : <span class="number">0</span>, mUser.getIdentifier());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.1】延迟 500 ms，发送了 UNINSTALL_IS_SLOW 消息，初始化界面！</span></span><br><span class="line">    mHandler.sendMessageDelayed(mHandler.obtainMessage(UNINSTALL_IS_SLOW),</span><br><span class="line">            QUICK_INSTALL_DELAY_MILLIS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-new-PackageDeleteObserver"><a href="#3-1-1-new-PackageDeleteObserver" class="headerlink" title="3.1.1 new PackageDeleteObserver"></a>3.1.1 new PackageDeleteObserver</h3><p>PackageDeleteObserver 接收安装结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageDeleteObserver</span> <span class="keyword">extends</span> <span class="title">IPackageDeleteObserver</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">packageDeleted</span><span class="params">(String packageName, <span class="keyword">int</span> returnCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【4.2】卸载完成后，会发送 UNINSTALL_COMPLETE 消息！</span></span><br><span class="line">        Message msg = mHandler.obtainMessage(UNINSTALL_COMPLETE);</span><br><span class="line">        msg.arg1 = returnCode; <span class="comment">// 保存了安装结果码；</span></span><br><span class="line">        msg.obj = packageName;</span><br><span class="line">        mHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！</p><h2 id="3-2-initView"><a href="#3-2-initView" class="headerlink" title="3.2 initView"></a>3.2 initView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mIsViewInitialized) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mIsViewInitialized = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We set the window background to translucent in constructor, revert this</span></span><br><span class="line">    TypedValue attribute = <span class="keyword">new</span> TypedValue();</span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.windowBackground, attribute, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (attribute.type &gt;= TypedValue.TYPE_FIRST_COLOR_INT &amp;&amp;</span><br><span class="line">            attribute.type &lt;= TypedValue.TYPE_LAST_COLOR_INT) &#123;</span><br><span class="line">        getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(attribute.data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getWindow().setBackgroundDrawable(getResources().getDrawable(attribute.resourceId,</span><br><span class="line">                getTheme()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.navigationBarColor, attribute, <span class="keyword">true</span>);</span><br><span class="line">    getWindow().setNavigationBarColor(attribute.data);</span><br><span class="line"></span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.statusBarColor, attribute, <span class="keyword">true</span>);</span><br><span class="line">    getWindow().setStatusBarColor(attribute.data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】判断下要卸载的应用是不是安装在 data 分区的 sys app 的更新，用于不同的显示！</span></span><br><span class="line">    <span class="keyword">boolean</span> isUpdate = ((mAppInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>);</span><br><span class="line">    setTitle(isUpdate ? R.string.uninstall_update_title : R.string.uninstall_application_title);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.uninstall_progress); <span class="comment">// 设置布局！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】初始化 view！</span></span><br><span class="line">    View snippetView = findViewById(R.id.app_snippet);</span><br><span class="line">    <span class="comment">//【3】使用 app info 初始化 snippetView，显示 app 信息！</span></span><br><span class="line">    PackageUtil.initSnippetForInstalledApp(<span class="keyword">this</span>, mAppInfo, snippetView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】初始化设备管理按钮和用户管理按钮，默认是 gone，同时设置点击事件！</span></span><br><span class="line">    mDeviceManagerButton = (Button) findViewById(R.id.device_manager_button);</span><br><span class="line">    mUsersButton = (Button) findViewById(R.id.users_button);</span><br><span class="line">    mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">    mDeviceManagerButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.setClassName(<span class="string">"com.android.settings"</span>,</span><br><span class="line">                    <span class="string">"com.android.settings.Settings$DeviceAdminSettingsActivity"</span>);</span><br><span class="line">            intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mUsersButton.setVisibility(View.GONE);</span><br><span class="line">    mUsersButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_USER_SETTINGS);</span><br><span class="line">            intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//【5】初始化完成按钮，默认也是 gone 在布局里设置的！</span></span><br><span class="line">    mOkButton = (Button) findViewById(R.id.ok_button);</span><br><span class="line">    mOkButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-mHandler-mainLooper"><a href="#4-mHandler-mainLooper" class="headerlink" title="4 mHandler - mainLooper"></a>4 mHandler - mainLooper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line"> ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mHandler 持有 main thead 的 looper 对象，消息都会发送到主线程操作！</p><h2 id="4-1-handleMessage-UNINSTALL-IS-SLOW"><a href="#4-1-handleMessage-UNINSTALL-IS-SLOW" class="headerlink" title="4.1 handleMessage[UNINSTALL_IS_SLOW]"></a>4.1 handleMessage[UNINSTALL_IS_SLOW]</h2><p>发送 UNINSTALL_IS_SLOW 消息，触发 initView 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> UNINSTALL_IS_SLOW:</span><br><span class="line">    <span class="comment">//【*3.2】初始化 view！</span></span><br><span class="line">    initView();</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="4-2-handleMessage-UNINSTALL-COMPLETE"><a href="#4-2-handleMessage-UNINSTALL-COMPLETE" class="headerlink" title="4.2 handleMessage[UNINSTALL_COMPLETE]"></a>4.2 handleMessage[UNINSTALL_COMPLETE]</h2><p>发送 UNINSTALL_COMPLETE 消息，处理卸载结果和最终的显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> UNINSTALL_COMPLETE:</span><br><span class="line">    mHandler.removeMessages(UNINSTALL_IS_SLOW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (msg.arg1 != PackageManager.DELETE_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">//【*3.2】结果不是 success，再次初始化 view！</span></span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mResultCode = msg.arg1;</span><br><span class="line">    <span class="keyword">final</span> String packageName = (String) msg.obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果指定了回调，那就通过回调返回结果，并 finish 掉 UninstallAppProgress！</span></span><br><span class="line">    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub</span><br><span class="line">                .asInterface(mCallback);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            observer.onPackageDeleted(mAppInfo.packageName, mResultCode,</span><br><span class="line">                    packageName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        finish();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 intent 指定了返回启动结果，那么就通过 intent 返回卸载结果，</span></span><br><span class="line">    <span class="comment">// 并 finish 掉 UninstallAppProgress！</span></span><br><span class="line">    <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        Intent result = <span class="keyword">new</span> Intent();</span><br><span class="line">        result.putExtra(Intent.EXTRA_INSTALL_RESULT, mResultCode);</span><br><span class="line">        setResult(mResultCode == PackageManager.DELETE_SUCCEEDED</span><br><span class="line">                ? Activity.RESULT_OK : Activity.RESULT_FIRST_USER,</span><br><span class="line">                        result);</span><br><span class="line">        finish();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】更新界面显示内容；</span></span><br><span class="line">    <span class="keyword">final</span> String statusText;</span><br><span class="line">    <span class="keyword">switch</span> (msg.arg1) &#123;</span><br><span class="line">        <span class="comment">//【3.1】卸载成功；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_SUCCEEDED:</span><br><span class="line">            statusText = getString(R.string.uninstall_done);</span><br><span class="line">            <span class="comment">// Show a Toast and finish the activity</span></span><br><span class="line">            Context ctx = getBaseContext();</span><br><span class="line">            Toast.makeText(ctx, statusText, Toast.LENGTH_LONG).show();</span><br><span class="line">            <span class="comment">//【3.1.1】返回结果；</span></span><br><span class="line">            setResultAndFinish(mResultCode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.2】该 apk 是处于 active 状态的设备管理者，不可卸载；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER: &#123;</span><br><span class="line">            UserManager userManager =</span><br><span class="line">                    (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">            IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));</span><br><span class="line">            <span class="comment">// Find out if the package is an active admin for some non-current user.</span></span><br><span class="line">            <span class="comment">//【3.2.1】获得当前的 user id；</span></span><br><span class="line">            <span class="keyword">int</span> myUserId = UserHandle.myUserId();</span><br><span class="line">            UserInfo otherBlockingUser = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//【3.2.2】遍历所有的 user！</span></span><br><span class="line">            <span class="keyword">for</span> (UserInfo user : userManager.getUsers()) &#123;</span><br><span class="line">                <span class="comment">//【3.2.2.1】找到不是当前 user 或者不是当前 user 的 profile 的 user！</span></span><br><span class="line">                <span class="keyword">if</span> (isProfileOfOrSame(userManager, myUserId, user.id)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.2.2.1】如果该 apk 在这个 user 下是活跃的设备管理者，将其保存到 </span></span><br><span class="line">                    <span class="comment">// otherBlockingUser 中；</span></span><br><span class="line">                    <span class="keyword">if</span> (dpm.packageHasActiveAdmins(packageName, user.id)) &#123;</span><br><span class="line">                        otherBlockingUser = user;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"Failed to talk to package manager"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.2.3】如果 otherBlockingUser 为 null，说明 apk 是当前 user 的活跃设备管理者；</span></span><br><span class="line">            <span class="comment">// 如果不为 null，说明在其他 user 下是活跃设备管理者；</span></span><br><span class="line">            <span class="keyword">if</span> (otherBlockingUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed because "</span> + packageName</span><br><span class="line">                        + <span class="string">" is a device admin"</span>);</span><br><span class="line">                <span class="comment">//【3.2.3.1】可以看到，这里 mDeviceManagerButton 是可以点击的！！！</span></span><br><span class="line">                mDeviceManagerButton.setVisibility(View.VISIBLE);</span><br><span class="line">                statusText = getString(</span><br><span class="line">                        R.string.uninstall_failed_device_policy_manager);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed because "</span> + packageName</span><br><span class="line">                        + <span class="string">" is a device admin of user "</span> + otherBlockingUser);</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">                statusText = String.format(</span><br><span class="line">                        getString(R.string.uninstall_failed_device_policy_manager_of_user),</span><br><span class="line">                        otherBlockingUser.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.3】该 apk 被设备管理者标记为不可卸载；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_FAILED_OWNER_BLOCKED: &#123;</span><br><span class="line">            UserManager userManager =</span><br><span class="line">                    (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">            IPackageManager packageManager = IPackageManager.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line">            <span class="comment">//【3.3.1】首先找到，在那个 user 下是不可卸载的，只会找到第一个 user！</span></span><br><span class="line">            List&lt;UserInfo&gt; users = userManager.getUsers();</span><br><span class="line">            <span class="keyword">int</span> blockingUserId = UserHandle.USER_NULL;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserInfo user = users.get(i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (packageManager.getBlockUninstallForUser(packageName,</span><br><span class="line">                            user.id)) &#123;</span><br><span class="line">                        blockingUserId = user.id;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="comment">// Shouldn't happen.</span></span><br><span class="line">                    Log.e(TAG, <span class="string">"Failed to talk to package manager"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> myUserId = UserHandle.myUserId();</span><br><span class="line">            <span class="comment">//【3.3.2】如果该 user 是当前 user 或者是当前 user 的 profile，</span></span><br><span class="line">            <span class="comment">// 那么 Device Manager Button 可点击；</span></span><br><span class="line">            <span class="comment">// 否则 Users Button 可点击；</span></span><br><span class="line">            <span class="keyword">if</span> (isProfileOfOrSame(userManager, myUserId, blockingUserId)) &#123;</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">                mUsersButton.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> b/25442806</span></span><br><span class="line">            <span class="keyword">if</span> (blockingUserId == UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                <span class="comment">// 提示："这是您的设备管理员要求必须安装的应用，因此无法卸载。"</span></span><br><span class="line">                statusText = getString(R.string.uninstall_blocked_device_owner);</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blockingUserId == UserHandle.USER_NULL) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed for "</span> + packageName + <span class="string">" with code "</span></span><br><span class="line">                        + msg.arg1 + <span class="string">" no blocking user"</span>);</span><br><span class="line">                <span class="comment">// 提示："卸载失败。"</span></span><br><span class="line">                statusText = getString(R.string.uninstall_failed);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是所有用户下卸载，</span></span><br><span class="line">                <span class="comment">// 提示："这是部分用户或个人资料所需的应用；已为其他用户或个人资料卸载此应用"</span></span><br><span class="line">                <span class="comment">// 否则提示："这是您的个人资料所需的应用，因此无法卸载。"</span></span><br><span class="line">                statusText = mAllUsers</span><br><span class="line">                        ? getString(R.string.uninstall_all_blocked_profile_owner) :</span><br><span class="line">                        getString(R.string.uninstall_blocked_profile_owner);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Log.d(TAG, <span class="string">"Uninstall failed for "</span> + packageName + <span class="string">" with code "</span></span><br><span class="line">                    + msg.arg1);</span><br><span class="line">            statusText = getString(R.string.uninstall_failed);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    findViewById(R.id.progress_view).setVisibility(View.GONE);</span><br><span class="line">    findViewById(R.id.status_view).setVisibility(View.VISIBLE);</span><br><span class="line">    ((TextView)findViewById(R.id.status_text)).setText(statusText);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】将完成按钮显示出来！</span></span><br><span class="line">    findViewById(R.id.ok_panel).setVisibility(View.VISIBLE);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h1 id="5-PackageManagerService"><a href="#5-PackageManagerService" class="headerlink" title="5 PackageManagerService"></a>5 PackageManagerService</h1><p>最终的卸载，进入了 pms：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackageAsUser</span><span class="params">(String packageName, IPackageDeleteObserver observer, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*important】这里和 adb uninstall 的逻辑一样了！    </span></span><br><span class="line">    <span class="comment">//【*5.1】对前面的回调做二次封装；</span></span><br><span class="line">    deletePackage(packageName, <span class="keyword">new</span> LegacyPackageDeleteObserver(observer).getBinder(), userId,</span><br><span class="line">            flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-1-new-LegacyPackageDeleteObserver"><a href="#5-1-new-LegacyPackageDeleteObserver" class="headerlink" title="5.1 new LegacyPackageDeleteObserver"></a>5.1 new LegacyPackageDeleteObserver</h2><p>LegacyPackageDeleteObserver 的定义是在 PackageManager.java 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyPackageDeleteObserver</span> <span class="keyword">extends</span> <span class="title">PackageDeleteObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IPackageDeleteObserver mLegacy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LegacyPackageDeleteObserver</span><span class="params">(IPackageDeleteObserver legacy)</span> </span>&#123;</span><br><span class="line">        mLegacy = legacy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageDeleted</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mLegacy == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*3.1.1】回调接口！</span></span><br><span class="line">            mLegacy.packageDeleted(basePackageName, returnCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LegacyPackageDeleteObserver 实际上是对前面的回调的一次封装！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 9 篇 - 通过 adb 指令分析 uninstall 过程</title>
    <link href="https://coolqi.top/2018/09/01/PMS9-uninstallThroughAdb/"/>
    <id>https://coolqi.top/2018/09/01/PMS9-uninstallThroughAdb/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2019-01-27T09:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本篇文章总结下 uninstall package 的过程，一般来说，卸载一个应用有如下的方式：</p><ul><li>adb uninstall（最终调用的还是 pm uninstall/cmd package uninstall）；</li><li>adb cmd package uninstall;</li><li>adb shell pm uninstall;</li><li>进入应用管理器中，手动触发卸载（进入 packageInstaller）；</li></ul><p>这里我们先来看通过 adb 指令 uninstall 的过程：</p><h1 id="1-adb-uninstall-commandline-adb-commandline"><a href="#1-adb-uninstall-commandline-adb-commandline" class="headerlink" title="1 adb uninstall - commandline::adb_commandline"></a>1 adb uninstall - commandline::adb_commandline</h1><p>同样的 adb uninstall 的执行也是从 system/core/adb/commandline.cpp 开始：</p><p>adb_commandline 中会设置到大量的 adb 指令的处理，这里我们只关注 adb install 的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adb_commandline</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!strcmp(argv[<span class="number">0</span>], <span class="string">"uninstall"</span>)) &#123; <span class="comment">// adb uninstall 命令!</span></span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">if</span> (_use_legacy_install()) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.2】不支持 cmd 使用 pm 安装！</span></span><br><span class="line">            <span class="keyword">return</span> uninstall_app_legacy(transport_type, serial, argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*1.2.1】支持 cmd 使用 cmd 安装！</span></span><br><span class="line">        <span class="keyword">return</span> uninstall_app(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">    usage();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到，如果支持 cmd 命令的情况下，_use_legacy_install() 方法返回 false，会调用 uninstall_app；不支持的话，执行 uninstall_app_legacy 方法！</p><p>Android cmd 命令功能非常强大，包含了我们之前使用 am pm 等等的命令，这里我们不深入分析 cmd 的命令的实现，我们关注和 uninstall 相关的逻辑！</p><p>下面继续分析，进一步的安装过程：</p><h2 id="1-1-cmd-uninstall-支持-cmd-指令"><a href="#1-1-cmd-uninstall-支持-cmd-指令" class="headerlink" title="1.1 cmd uninstall - 支持 cmd 指令"></a>1.1 cmd uninstall - 支持 cmd 指令</h2><h3 id="1-1-1-commandline-uninstall-app"><a href="#1-1-1-commandline-uninstall-app" class="headerlink" title="1.1.1 commandline::uninstall_app"></a>1.1.1 commandline::uninstall_app</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】adb uninstall 会转为 cmd package uninstall，参数相同；</span></span><br><span class="line">    std::string cmd = <span class="string">"cmd package"</span>;</span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(*argv, <span class="string">"-k"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            printf(</span><br><span class="line">                <span class="string">"The -k option uninstalls the application while retaining the data/cache.\n"</span></span><br><span class="line">                <span class="string">"At the moment, there is no way to remove the remaining data.\n"</span></span><br><span class="line">                <span class="string">"You will have to reinstall the application with the same signature, and fully uninstall it.\n"</span></span><br><span class="line">                <span class="string">"If you truly wish to continue, execute 'adb shell cmd package uninstall -k'.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.3】调用 send_shell_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-pm-uninstall-不支持-cmd-指令"><a href="#1-2-pm-uninstall-不支持-cmd-指令" class="headerlink" title="1.2 pm uninstall - 不支持 cmd 指令"></a>1.2 pm uninstall - 不支持 cmd 指令</h2><h3 id="1-2-1-commandline-uninstall-app-legacy"><a href="#1-2-1-commandline-uninstall-app-legacy" class="headerlink" title="1.2.1 commandline::uninstall_app_legacy"></a>1.2.1 commandline::uninstall_app_legacy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app_legacy</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strcmp(argv[i], <span class="string">"-k"</span>)) &#123;</span><br><span class="line">            printf(</span><br><span class="line">                <span class="string">"The -k option uninstalls the application while retaining the data/cache.\n"</span></span><br><span class="line">                <span class="string">"At the moment, there is no way to remove the remaining data.\n"</span></span><br><span class="line">                <span class="string">"You will have to reinstall the application with the same signature, and fully uninstall it.\n"</span></span><br><span class="line">                <span class="string">"If you truly wish to continue, execute 'adb shell pm uninstall -k'\n."</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.2】调用 pm_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> pm_command(transport, serial, argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-commandline-pm-command"><a href="#1-2-2-commandline-pm-command" class="headerlink" title="1.2.2 commandline::pm_command"></a>1.2.2 commandline::pm_command</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pm_command</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//【1】adb uninstall 会转为 pm uninstall，参数相同；</span></span><br><span class="line">    std::string cmd = <span class="string">"pm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.3】调用 send_shell_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-commandline-send-shell-command"><a href="#1-2-3-commandline-send-shell-command" class="headerlink" title="1.2.3 commandline::send_shell_command"></a>1.2.3 commandline::send_shell_command</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send_shell_command</span><span class="params">(TransportType transport_type, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">const</span> std::string&amp; command,</span></span></span><br><span class="line"><span class="function"><span class="params">                       bool disable_shell_protocol, StandardStreamsCallbackInterface* callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    bool use_shell_protocol = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        bool attempt_connection = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 使用 shell protocol</span></span><br><span class="line">        <span class="keyword">if</span> (!disable_shell_protocol) &#123;</span><br><span class="line">            FeatureSet features;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="keyword">if</span> (adb_get_feature_set(&amp;features, &amp;error)) &#123;</span><br><span class="line">                <span class="comment">// 如果系统支持 shell_v2 的 feature，则使用 shell！！</span></span><br><span class="line">                use_shell_protocol = CanUseFeature(features, kFeatureShell2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                attempt_connection = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (attempt_connection) &#123;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="comment">// 如果是 pm uninstall 此时 command 中携带的就是以 pm 开头的命令；</span></span><br><span class="line">            <span class="comment">// 如果是 cmd package uninstall 此时 command 中携带的就是以 cmd 开头的命令；</span></span><br><span class="line">            std::string service_string = ShellServiceString(use_shell_protocol, <span class="string">""</span>, command);</span><br><span class="line">            <span class="comment">// 向 shell protocol 发送命令</span></span><br><span class="line">            fd = adb_connect(service_string, &amp;error);</span><br><span class="line">            <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fprintf(stderr, <span class="string">"- waiting for device -\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!wait_for_device(<span class="string">"wait-for-device"</span>, transport_type, serial)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理命令执行结果！</span></span><br><span class="line">    <span class="keyword">int</span> exit_code = read_and_dump(fd, use_shell_protocol, callback);</span><br><span class="line">    <span class="keyword">if</span> (adb_close(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PLOG(ERROR) &lt;&lt; <span class="string">"failure closing FD "</span> &lt;&lt; fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，最后都是调用 shell 执行相关指令！</p><p>前面我们有分析过：</p><ul><li>cmd package uninstall 最后调用的是 PackageManagerShellCommand 相关方法；</li><li>pm uninstall 最后调用的是 pm 相关方法；</li></ul><h1 id="2-Pm-install"><a href="#2-Pm-install" class="headerlink" title="2 Pm install"></a>2 Pm install</h1><p>对于 pm 命令的执行过程，我们不在过多分析，直接进入重点：</p><h2 id="2-1-runUninstall"><a href="#2-1-runUninstall" class="headerlink" title="2.1 runUninstall"></a>2.1 runUninstall</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runUninstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2】继续处理！</span></span><br><span class="line">    <span class="keyword">return</span> runShellCommand(<span class="string">"package"</span>, mArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-runShellCommand"><a href="#2-2-runShellCommand" class="headerlink" title="2.2 runShellCommand"></a>2.2 runShellCommand</h2><p>我们看到，我们传入的 Service name 是 “package”，其实看到这里，我们已经能猜到了，其和 cmd install 一样，最后会调用了 PackageManagerShellCommand 的 onCommand 方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runShellCommand</span><span class="params">(String serviceName, String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> HandlerThread handlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"results"</span>);</span><br><span class="line">    handlerThread.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.1】通过 pms 触发 PackageManagerShellCommand 的 onCommand 方法，最后会根据参数</span></span><br><span class="line">        <span class="comment">// 最后会进入 runUninstall 方法中！</span></span><br><span class="line">        ServiceManager.getService(serviceName).shellCommand(</span><br><span class="line">                FileDescriptor.in, FileDescriptor.out, FileDescriptor.err,</span><br><span class="line">                args, <span class="keyword">new</span> ResultReceiver(<span class="keyword">new</span> Handler(handlerThread.getLooper())));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        handlerThread.quitSafely();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以去 pms 的代码中看到，pms 有如下的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShellCommand</span><span class="params">(FileDescriptor in, FileDescriptor out,</span></span></span><br><span class="line"><span class="function"><span class="params">        FileDescriptor err, String[] args, ResultReceiver resultReceiver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1】调用了 PackageManagerShellCommand 的接口！！</span></span><br><span class="line">    (<span class="keyword">new</span> PackageManagerShellCommand(<span class="keyword">this</span>)).exec(</span><br><span class="line">            <span class="keyword">this</span>, in, out, err, args, resultReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageManagerShellCommand 继承了 ShellCommand， exec 内部会触发 onCommand 方法，有兴趣大家可以去学习，这里不关注！！</p><h1 id="3-PackageManagerShellCommand"><a href="#3-PackageManagerShellCommand" class="headerlink" title="3 PackageManagerShellCommand"></a>3 PackageManagerShellCommand</h1><h2 id="3-1-runUninstall"><a href="#3-1-runUninstall" class="headerlink" title="3.1 runUninstall"></a>3.1 runUninstall</h2><p>我们来分析下 runUninstall 的逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runUninstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="keyword">int</span> flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_ALL; <span class="comment">// 默认所有用户！</span></span><br><span class="line"></span><br><span class="line">    String opt;</span><br><span class="line">    <span class="comment">//【1】读取额外参数</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = getNextOption()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-k"</span>:</span><br><span class="line">                <span class="comment">//【1.1】是否再卸载后保留数据；</span></span><br><span class="line">                flags |= PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--user"</span>:</span><br><span class="line">                <span class="comment">//【1.1】是否指定 user！</span></span><br><span class="line">                userId = UserHandle.parseUserArg(getNextArgRequired());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                pw.println(<span class="string">"Error: Unknown option: "</span> + opt);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】获得要卸载的应用包名；</span></span><br><span class="line">    <span class="keyword">final</span> String packageName = getNextArg();</span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: package name not specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】获得要卸载的应用的 split apk 包名，如果指定的 split name，那就只卸载对应的 split apk！</span></span><br><span class="line">    <span class="keyword">final</span> String splitName = getNextArg();</span><br><span class="line">    <span class="keyword">if</span> (splitName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.2】移除 split apk！</span></span><br><span class="line">        <span class="keyword">return</span> runRemoveSplit(packageName, splitName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1.1】对 userId 做一个转换处理;</span></span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runUninstall"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        <span class="comment">//【5】如果是从所有用户下删除，那么 userId 变为 USER_SYSTEM；</span></span><br><span class="line">        <span class="comment">// flags 设置 DELETE_ALL_USERS 标志位；</span></span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        flags |= PackageManager.DELETE_ALL_USERS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【6】如果是从指定用户下删除，那么要判断在该 userId 下是否有安装信息；</span></span><br><span class="line">        <span class="keyword">final</span> PackageInfo info = mInterface.getPackageInfo(packageName, <span class="number">0</span>, userId);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pw.println(<span class="string">"Failure [not installed for "</span> + userId + <span class="string">"]"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【7】判断是否是 sys app，如果是的话 flags 增加 DELETE_SYSTEM_APP 标志位！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem =</span><br><span class="line">                (info.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isSystem) &#123;</span><br><span class="line">            flags |= PackageManager.DELETE_SYSTEM_APP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.1.2.1】这里是注册可以了本地监听器 LocalIntentReceiver，监听卸载结果，在 install 我们</span></span><br><span class="line">    <span class="comment">// 有分析过，这里就不多说了！</span></span><br><span class="line">    <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.1】触发卸载；</span></span><br><span class="line">    mInterface.getPackageInstaller().uninstall(packageName, <span class="keyword">null</span> <span class="comment">/*callerPackageName*/</span>, flags,</span><br><span class="line">            receiver.getIntentSender(), userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.1.2.2】接收卸载结果，就是前面分析时，创建的 intent fillIn！！</span></span><br><span class="line">    <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageInstaller.STATUS_FAILURE);</span><br><span class="line">    <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">        pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pw.println(<span class="string">"Failure ["</span></span><br><span class="line">                + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的 mInterface.getPackageInstaller() 返回的是 PackageInstallerService，下面我们去 PackageInstallerService 中看看：</p><h3 id="3-1-1-translateUserId"><a href="#3-1-1-translateUserId" class="headerlink" title="3.1.1 translateUserId"></a>3.1.1 translateUserId</h3><p>如果 uninstall 指定的 user，那么这里会对 userId 做一个转换处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">translateUserId</span><span class="params">(<span class="keyword">int</span> userId, String logContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ActivityManager.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</span><br><span class="line">            userId, <span class="keyword">true</span>, <span class="keyword">true</span>, logContext, <span class="string">"pm command"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-1-2-LocalIntentReceiver"><a href="#3-1-2-LocalIntentReceiver" class="headerlink" title="3.1.2 LocalIntentReceiver"></a>3.1.2 LocalIntentReceiver</h3><p>LocalIntentReceiver 主要用于接收最终的返回结果，以及和其他模块通信：</p><h4 id="3-1-2-1-new-LocalIntentReceiver"><a href="#3-1-2-1-new-LocalIntentReceiver" class="headerlink" title="3.1.2.1 new LocalIntentReceiver"></a>3.1.2.1 new LocalIntentReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalIntentReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】内有一个阻塞队列，用于保存 intent！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SynchronousQueue&lt;Intent&gt; mResult = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】发送 intent 给其他模块：</span></span><br><span class="line">    <span class="keyword">private</span> IIntentSender.Stub mLocalSender = <span class="keyword">new</span> IIntentSender.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> code, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">                IIntentReceiver finishedReceiver, String requiredPermission, Bundle options)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【2.1】将 Proxy 传来的 intent 加入的阻塞队列中！</span></span><br><span class="line">                mResult.offer(intent, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>不多数说了！！</p><h4 id="3-1-2-2-getIntentSender"><a href="#3-1-2-2-getIntentSender" class="headerlink" title="3.1.2.2 getIntentSender"></a>3.1.2.2 getIntentSender</h4><p>返回代理对象，用于跨进程通信：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IntentSender <span class="title">getIntentSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IntentSender((IIntentSender) mLocalSender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-2-2-getResult"><a href="#3-1-2-2-getResult" class="headerlink" title="3.1.2.2 getResult"></a>3.1.2.2 getResult</h4><p>从内部的阻塞队列中返回结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mResult.take();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-runRemoveSplit"><a href="#3-2-runRemoveSplit" class="headerlink" title="3.2 runRemoveSplit"></a>3.2 runRemoveSplit</h2><p>我们来看下删除 split apk 的逻辑！</p><p>参数 String packageName 是主 pkg，String splitName 则是 split apk 的包名！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runRemoveSplit</span><span class="params">(String packageName, String splitName)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="comment">//【1-review】这边创建了一个 SessionParams 实例，封装卸载的事务参数！</span></span><br><span class="line">    <span class="comment">// 这里就不在分析了，前面看过！</span></span><br><span class="line">    <span class="keyword">final</span> SessionParams sessionParams = <span class="keyword">new</span> SessionParams(SessionParams.MODE_INHERIT_EXISTING);</span><br><span class="line">    sessionParams.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    sessionParams.appPackageName = packageName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.2.1】创建一个卸载事务！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId =</span><br><span class="line">            doCreateSession(sessionParams, <span class="keyword">null</span> <span class="comment">/*installerPackageName*/</span>, UserHandle.USER_ALL);</span><br><span class="line">    <span class="keyword">boolean</span> abandonSession = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.2.2】移除 split apk！</span></span><br><span class="line">        <span class="keyword">if</span> (doRemoveSplit(sessionId, splitName, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*3.2.3】提交事务</span></span><br><span class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        abandonSession = <span class="keyword">false</span>;</span><br><span class="line">        pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (abandonSession) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doAbandonSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先创建了一个 SessionParams，参数均是 @hide 的，这里我省略了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mode = MODE_INVALID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installFlags;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installLocation = PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY; <span class="comment">// 默认为仅内置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sizeBytes = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String appPackageName; <span class="comment">// 这里其为主 pkg 的包名！</span></span><br><span class="line">    <span class="keyword">public</span> Bitmap appIcon;</span><br><span class="line">    <span class="keyword">public</span> String appLabel;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> appIconLastModified = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> Uri originatingUri;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> originatingUid = UID_UNKNOWN;</span><br><span class="line">    <span class="keyword">public</span> Uri referrerUri;</span><br><span class="line">    <span class="keyword">public</span> String abiOverride;</span><br><span class="line">    <span class="keyword">public</span> String volumeUuid;</span><br><span class="line">    <span class="keyword">public</span> String[] grantedRuntimePermissions;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionParams</span><span class="params">(<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mode = mode;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 remove split apk，其流程和 install 很类似！</p><h3 id="3-2-1-doCreateSession"><a href="#3-2-1-doCreateSession" class="headerlink" title="3.2.1 doCreateSession"></a>3.2.1 doCreateSession</h3><p>创建事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCreateSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1.1】对 user 进行一个转换；</span></span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runInstallCreate"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.1.1】调用 PackageInstallerService 的 createSession 创建一个新的事务！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = mInterface.getPackageInstaller()</span><br><span class="line">            .createSession(params, installerPackageName, userId);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和 install 很类似！</p><h3 id="3-2-2-doRemoveSplit"><a href="#3-2-2-doRemoveSplit" class="headerlink" title="3.2.2 doRemoveSplit"></a>3.2.2 doRemoveSplit</h3><p>移除 split apk，这里是真正的对 split apk 做处理，前面只是创建了一个主 apk 的 install 食物：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doRemoveSplit</span><span class="params">(<span class="keyword">int</span> sessionId, String splitName, <span class="keyword">boolean</span> logSuccess)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1-review】返回之前创建的 PackageInstallerSession，将其封装为 PackageInstaller.Session 实例！</span></span><br><span class="line">        <span class="comment">//【*7.1.1.2】获得事务；</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【*7.2.2】这个地方我们知道，最后调用了 PackageInstallerSession 的 removeSplit 方法!</span></span><br><span class="line">        session.removeSplit(splitName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">            pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: failed to remove split; "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session 其实很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IPackageInstallerSession mSession;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多数了！</p><p>继续分析，我们看看 removeSplit 发生了什么：</p><h3 id="3-2-3-doCommitSession"><a href="#3-2-3-doCommitSession" class="headerlink" title="3.2.3 doCommitSession"></a>3.2.3 doCommitSession</h3><p>提交事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCommitSession</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*3.1.2.1】这里是注册可以了本地监听器 LocalIntentReceiver，监听卸载结果，在 install 我们</span></span><br><span class="line">        <span class="comment">// 有分析过，这里就不多说了！</span></span><br><span class="line">        <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【*7.2.4】提交事务</span></span><br><span class="line">        session.commit(receiver.getIntentSender());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">                PackageInstaller.STATUS_FAILURE);</span><br><span class="line">        <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">                pw.println(<span class="string">"Success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pw.println(<span class="string">"Failure ["</span></span><br><span class="line">                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-PackageInstallerService"><a href="#4-PackageInstallerService" class="headerlink" title="4 PackageInstallerService"></a>4 PackageInstallerService</h1><h2 id="4-1-uninstall"><a href="#4-1-uninstall" class="headerlink" title="4.1 uninstall"></a>4.1 uninstall</h2><p>这里我们说一下参数 IntentSender statusReceiver，其是前面 LocalIntentReceiver.getIntentSender() 返回的 IntentSender 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uninstall</span><span class="params">(String packageName, String callerPackageName, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            IntentSender statusReceiver, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】会校验调用者是否具有 across user 的权限，同时也会调用 appOps 去检查 callingUid 和 callerPackageName</span></span><br><span class="line">    <span class="comment">// 是否匹配！</span></span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"uninstall"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((callingUid != Process.SHELL_UID) &amp;&amp; (callingUid != Process.ROOT_UID)) &#123;</span><br><span class="line">        mAppOps.checkPackage(callingUid, callerPackageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】检查 caller 是否是设备用户自身！</span></span><br><span class="line">    DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">            Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">    <span class="keyword">boolean</span> isDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">            callerPackageName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.1.1.1】创建一个 PackageDeleteObserverAdapter 监听卸载删除结果！</span></span><br><span class="line">    <span class="keyword">final</span> PackageDeleteObserverAdapter adapter = <span class="keyword">new</span> PackageDeleteObserverAdapter(mContext,</span><br><span class="line">            statusReceiver, packageName, isDeviceOwner, userId);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//【3】检查调用者是否有 DELETE_PACKAGES 的权限，如果有直接通过 pms 直接 deletePackage！</span></span><br><span class="line">    <span class="keyword">if</span> (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES)</span><br><span class="line">                == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">//【*5.1】继续卸载；</span></span><br><span class="line">        mPm.deletePackage(packageName, adapter.getBinder(), userId, flags);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDeviceOwner) &#123;</span><br><span class="line">        <span class="comment">//【4】检查调用者是否是 DeviceOwner，如果有直接通过 pms 直接 deletePackage！</span></span><br><span class="line">        <span class="comment">// 这里会将调用者转为系统进程，继续处理！</span></span><br><span class="line">        <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*5.1】继续卸载；</span></span><br><span class="line">            mPm.deletePackage(packageName, adapter.getBinder(), userId, flags);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5】这种情况需要通知用户，让用户主动卸载，会发送 Intent.ACTION_UNINSTALL_PACKAGE 给 PackageInstaller！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line">        intent.setData(Uri.fromParts(<span class="string">"package"</span>, packageName, <span class="keyword">null</span>));</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_CALLBACK, adapter.getBinder().asBinder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.1.1.2】通知用户！</span></span><br><span class="line">        adapter.onUserActionRequired(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说了！</p><h3 id="4-1-1-PackageDeleteObserverAdapter"><a href="#4-1-1-PackageDeleteObserverAdapter" class="headerlink" title="4.1.1 PackageDeleteObserverAdapter"></a>4.1.1 PackageDeleteObserverAdapter</h3><h4 id="4-1-1-1-new-PackageInstallerService"><a href="#4-1-1-1-new-PackageInstallerService" class="headerlink" title="4.1.1.1 new PackageInstallerService"></a>4.1.1.1 new PackageInstallerService</h4><p>创建了一个 package delete 监听器！</p><p>boolean showNotification 表示是否需要显示通知，上面传入的是 isDeviceOwner，就是说如果是设备拥有者，那么一定会显示通知！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageDeleteObserverAdapter</span> <span class="keyword">extends</span> <span class="title">PackageDeleteObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntentSender mTarget; <span class="comment">// 对应的 LocalIntentReceiver.getIntentSender(！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mPackageName; <span class="comment">// 要卸载的 apk</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Notification mNotification; <span class="comment">// 显示的通知！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageDeleteObserverAdapter</span><span class="params">(Context context, IntentSender target,</span></span></span><br><span class="line"><span class="function"><span class="params">            String packageName, <span class="keyword">boolean</span> showNotification, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mTarget = target;</span><br><span class="line">        mPackageName = packageName;</span><br><span class="line">        <span class="keyword">if</span> (showNotification) &#123;</span><br><span class="line">            mNotification = buildSuccessNotification(mContext,</span><br><span class="line">                    mContext.getResources().getString(R.string.package_deleted_device_owner),</span><br><span class="line">                    packageName,</span><br><span class="line">                    userId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mNotification = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="4-1-1-2-onUserActionRequired"><a href="#4-1-1-2-onUserActionRequired" class="headerlink" title="4.1.1.2 onUserActionRequired"></a>4.1.1.2 onUserActionRequired</h4><p>当没有权限直接卸载时，需要用户参与卸载时，会触发该方法，可以看到，该方法最后会发送 Intent.ACTION_UNINSTALL_PACKAGE 到 PackageInstaller 中去！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建了一个新的 Intent fillIn；</span></span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【2】卸载的 apk 包名；</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);</span><br><span class="line">    <span class="comment">//【3】卸载的结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageInstaller.STATUS_PENDING_USER_ACTION);</span><br><span class="line">    <span class="comment">//【4】卸载后用于额外通信的的 Intent！！</span></span><br><span class="line">    fillIn.putExtra(Intent.EXTRA_INTENT, intent);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【5】发送结果 fillIn 到 3.1.2.1！</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于传入的参数 intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action 是 Intent.ACTION_UNINSTALL_PACKAGE！</span></span><br><span class="line"><span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line"><span class="comment">// 设置 data；</span></span><br><span class="line">intent.setData(Uri.fromParts(<span class="string">"package"</span>, packageName, <span class="keyword">null</span>));</span><br><span class="line"><span class="comment">// 设置额外的回调；</span></span><br><span class="line">intent.putExtra(PackageInstaller.EXTRA_CALLBACK, adapter.getBinder().asBinder());</span><br></pre></td></tr></table></figure><p>接着，在 onUserActionRequired 有对参数 intent 进行了进一步的安装！</p><p>关于 PackageInstaller.STATUS_PENDING_USER_ACTION 的广播，我们后面再分析，这里先不关注！</p><h4 id="4-1-1-3-onPackageDeleted"><a href="#4-1-1-3-onPackageDeleted" class="headerlink" title="4.1.1.3 onPackageDeleted"></a>4.1.1.3 onPackageDeleted</h4><p>卸载成功后回调该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageDeleted</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果安装成功的话，会有通知！！</span></span><br><span class="line">    <span class="keyword">if</span> (PackageManager.DELETE_SUCCEEDED == returnCode &amp;&amp; mNotification != <span class="keyword">null</span>) &#123;</span><br><span class="line">        NotificationManager notificationManager = (NotificationManager)</span><br><span class="line">                mContext.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        notificationManager.notify(basePackageName, <span class="number">0</span>, mNotification);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】创建封装结果的 intent！</span></span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【3】卸载的 apk！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);</span><br><span class="line">    <span class="comment">//【4】卸载的结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageManager.deleteStatusToPublicStatus(returnCode));</span><br><span class="line">    <span class="comment">//【5】卸载的额外信息！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS_MESSAGE,</span><br><span class="line">            PackageManager.deleteStatusToString(returnCode, msg));</span><br><span class="line">    <span class="comment">//【4】卸载的原始结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_LEGACY_STATUS, returnCode);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【5】发送结果 fillIn 到 3.1.2.1！</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h1 id="5-PackageManagerService"><a href="#5-PackageManagerService" class="headerlink" title="5 PackageManagerService"></a>5 PackageManagerService</h1><p>卸载的核心接口在 PackageManagerService 中：</p><h2 id="5-1-deletePackage"><a href="#5-1-deletePackage" class="headerlink" title="5.1 deletePackage"></a>5.1 deletePackage</h2><p>开始卸载删除应用：</p><p>我们知道，在前面的时候，如果是从所有用户下卸载，那么 userId 和 flags 会有如下的变化：</p><p>userId = UserHandle.USER_SYSTEM;<br>flags |= PackageManager.DELETE_ALL_USERS;</p><p>如果是从指定用户下卸载，那么 userId 就是我们指定的用户！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackage</span><span class="params">(<span class="keyword">final</span> String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> IPackageDeleteObserver2 observer, <span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags)</span> </span>&#123;</span><br><span class="line">    mContext.enforceCallingOrSelfPermission(</span><br><span class="line">            android.Manifest.permission.DELETE_PACKAGES, <span class="keyword">null</span>);</span><br><span class="line">    Preconditions.checkNotNull(packageName);</span><br><span class="line">    Preconditions.checkNotNull(observer);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【*5.1.1】首先判断该 apk 是否是孤立的；</span></span><br><span class="line">    <span class="comment">//【*5.1.2】同时判断是否允许静默卸载！</span></span><br><span class="line">    <span class="comment">// 如果这个 apk 不是孤立的，并且不允许静默卸载，那么需要用户参与卸载，也就是通过 PackageInstaller</span></span><br><span class="line">    <span class="comment">// 这里会结束流程，同时调用 observer.onUserActionRequired 返回结果！</span></span><br><span class="line">    <span class="keyword">if</span> (!isOrphaned(packageName)</span><br><span class="line">            &amp;&amp; !isCallerAllowedToSilentlyUninstall(uid, packageName)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line">            intent.setData(Uri.fromParts(PACKAGE_SCHEME, packageName, <span class="keyword">null</span>));</span><br><span class="line">            intent.putExtra(PackageInstaller.EXTRA_CALLBACK, observer.asBinder());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*4.1.1.2】通知用户参与安装！</span></span><br><span class="line">            observer.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断是否是从所有 user 下卸载该应用，如果需要同时校验是否有 INTERACT_ACROSS_USERS_FULL 的权限！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> deleteAllUsers = (deleteFlags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] users = deleteAllUsers ? sUserManager.getUserIds() : <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; userId &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UserHandle.getUserId(uid) != userId || (deleteAllUsers &amp;&amp; users.length &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        mContext.enforceCallingOrSelfPermission(</span><br><span class="line">                android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,</span><br><span class="line">                <span class="string">"deletePackage for user "</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*5.1.3】如果该用户下不允许卸载应用（用户限制）</span></span><br><span class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_UNINSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*4.1.1.3】结束卸载，返回！</span></span><br><span class="line">            observer.onPackageDeleted(packageName,</span><br><span class="line">                    PackageManager.DELETE_FAILED_USER_RESTRICTED, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果不是从所有的用户下卸载，并且该 apk 处于 BlockUninstall 状态</span></span><br><span class="line">    <span class="comment">// 那么不能卸载！</span></span><br><span class="line">    <span class="comment">//【*5.1.4】通过 getBlockUninstallForUser 来判断应用是否处于 Blockinstall 状态！</span></span><br><span class="line">    <span class="keyword">if</span> (!deleteAllUsers &amp;&amp; getBlockUninstallForUser(packageName, userId)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*4.1.1.3】结束卸载，返回！</span></span><br><span class="line">            observer.onPackageDeleted(packageName,</span><br><span class="line">                    PackageManager.DELETE_FAILED_OWNER_BLOCKED, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">"deletePackageAsUser: pkg="</span> + packageName + <span class="string">" user="</span> + userId</span><br><span class="line">                + <span class="string">" deleteAllUsers: "</span> + deleteAllUsers );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里的 mHandler 我们在 pms 的启动的时候有分析过，其持有子线程的 looper！</span></span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">int</span> returnCode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【4.1】如果不是从所有的 user 下卸载该 apk，进入 if 分支，否则，进入 else 分支！</span></span><br><span class="line">            <span class="keyword">if</span> (!deleteAllUsers) &#123;</span><br><span class="line">                <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                returnCode = deletePackageX(packageName, userId, deleteFlags);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*5.1.4】先获得 pkg 在所有 user 下的 block unistall 状态！</span></span><br><span class="line">                <span class="keyword">int</span>[] blockUninstallUserIds = getBlockUninstallForUsers(packageName, users);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【4.2】如果都不处于 block unistall，那么就直接卸载！</span></span><br><span class="line">                <span class="keyword">if</span> (ArrayUtils.isEmpty(blockUninstallUserIds)) &#123;</span><br><span class="line">                    <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                    returnCode = deletePackageX(packageName, userId, deleteFlags);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【4.3】flags 取消 DELETE_ALL_USERS 标志位！</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> userFlags = deleteFlags &amp; ~PackageManager.DELETE_ALL_USERS;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : users) &#123;</span><br><span class="line">                        <span class="comment">//【4.3.1】只会卸载那些不处于 block unistall 状态下的 user 中的 apk！</span></span><br><span class="line">                        <span class="keyword">if</span> (!ArrayUtils.contains(blockUninstallUserIds, userId)) &#123;</span><br><span class="line">                            <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                            returnCode = deletePackageX(packageName, userId, userFlags);</span><br><span class="line">                            <span class="keyword">if</span> (returnCode != PackageManager.DELETE_SUCCEEDED) &#123;</span><br><span class="line">                                Slog.w(TAG, <span class="string">"Package delete failed for user "</span> + userId</span><br><span class="line">                                        + <span class="string">", returnCode "</span> + returnCode);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【4.4】由于在某些 user 下 pkg 处于 block uninstall 状态导致无法安装</span></span><br><span class="line">                    <span class="comment">// 所以需要返回给用户！</span></span><br><span class="line">                    returnCode = PackageManager.DELETE_FAILED_OWNER_BLOCKED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*4.1.1.3】返回结果！</span></span><br><span class="line">                observer.onPackageDeleted(packageName, returnCode, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"Observer no longer exists."</span>);</span><br><span class="line">            &#125; <span class="comment">//end catch</span></span><br><span class="line">        &#125; <span class="comment">//end run</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程分析的很详细！</p><h3 id="5-1-1-isOrphaned"><a href="#5-1-1-isOrphaned" class="headerlink" title="5.1.1 isOrphaned"></a>5.1.1 isOrphaned</h3><p>判断该应用是否是孤立的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrphaned</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.1.1】进一步判断！</span></span><br><span class="line">        <span class="keyword">return</span> mSettings.isOrphaned(packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-1-Settings-isOrphaned"><a href="#5-1-1-1-Settings-isOrphaned" class="headerlink" title="5.1.1.1 Settings.isOrphaned"></a>5.1.1.1 Settings.isOrphaned</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isOrphaned</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting pkg = mPackages.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】通过 PackageSetting 的 isOrphaned 属性判断！</span></span><br><span class="line">    <span class="keyword">return</span> pkg.isOrphaned;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多数了！！</p><h3 id="5-1-2-isCallerAllowedToSilentlyUninstall"><a href="#5-1-2-isCallerAllowedToSilentlyUninstall" class="headerlink" title="5.1.2 isCallerAllowedToSilentlyUninstall"></a>5.1.2 isCallerAllowedToSilentlyUninstall</h3><p>判断是否允许静默卸载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCallerAllowedToSilentlyUninstall</span><span class="params">(<span class="keyword">int</span> callingUid, String pkgName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 callingUid 是 shell，root 或者 system，那么是可以静默卸载的！</span></span><br><span class="line">    <span class="keyword">if</span> (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID</span><br><span class="line">          || callingUid == Process.SYSTEM_UID) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUserId = UserHandle.getUserId(callingUid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 caller 就是安装该 apk 的 installer，那么支持静默卸载！</span></span><br><span class="line">    <span class="comment">//【*5.1.2.1】通过 getPackageUid 获得 package uid；</span></span><br><span class="line">    <span class="comment">//【*5.1.2.2】通过 getInstallerPackageName 获得 package 的安装者；</span></span><br><span class="line">    <span class="keyword">if</span> (callingUid == getPackageUid(getInstallerPackageName(pkgName), <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 caller 是 package verifier，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mRequiredVerifierPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mRequiredVerifierPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果 caller 是 package unstaller，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mRequiredUninstallerPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mRequiredUninstallerPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】如果 caller 是 storage manager，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mStorageManagerPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mStorageManagerPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-1-getPackageUid"><a href="#5-1-2-1-getPackageUid" class="headerlink" title="5.1.2.1 getPackageUid"></a>5.1.2.1 getPackageUid</h4><p>获得 pacakge 的 uid：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPackageUid</span><span class="params">(String packageName, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    flags = updateFlagsForPackage(flags, userId, packageName);</span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">false</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>, <span class="string">"get package uid"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package p = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.isMatch(flags)) &#123;</span><br><span class="line">            <span class="keyword">return</span> UserHandle.getUid(userId, p.applicationInfo.uid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; MATCH_UNINSTALLED_PACKAGES) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span> &amp;&amp; ps.isMatch(flags)) &#123;</span><br><span class="line">                <span class="keyword">return</span> UserHandle.getUid(userId, ps.appId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-getInstallerPackageName"><a href="#5-1-2-2-getInstallerPackageName" class="headerlink" title="5.1.2.2 getInstallerPackageName"></a>5.1.2.2 getInstallerPackageName</h4><p>获得 package 的安装者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInstallerPackageName</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.2.2.1】通过 Settings 获得该 pkg 的 installer！</span></span><br><span class="line">        <span class="keyword">return</span> mSettings.getInstallerPackageNameLPr(packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-2-1-Settings-getInstallerPackageNameLPr"><a href="#5-1-2-2-1-Settings-getInstallerPackageNameLPr" class="headerlink" title="5.1.2.2.1 Settings.getInstallerPackageNameLPr"></a>5.1.2.2.1 Settings.getInstallerPackageNameLPr</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getInstallerPackageNameLPr</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting pkg = mPackages.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】返回 PackageSetting 的属性 installerPackageName</span></span><br><span class="line">    <span class="keyword">return</span> pkg.installerPackageName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="5-1-3-isUserRestricted"><a href="#5-1-3-isUserRestricted" class="headerlink" title="5.1.3 isUserRestricted"></a>5.1.3 isUserRestricted</h3><p>判断在 userId 是否有用户限制，限制由 restrictionKey 指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isUserRestricted</span><span class="params">(<span class="keyword">int</span> userId, String restrictionKey)</span> </span>&#123;</span><br><span class="line">    Bundle restrictions = sUserManager.getUserRestrictions(userId);</span><br><span class="line">    <span class="keyword">if</span> (restrictions.getBoolean(restrictionKey, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"User is restricted: "</span> + restrictionKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-getBlockUninstallForUser"><a href="#5-1-4-getBlockUninstallForUser" class="headerlink" title="5.1.4 getBlockUninstallForUser"></a>5.1.4 getBlockUninstallForUser</h3><p>判断该 package 是否处于 block uninstall 的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBlockUninstallForUser</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Package doesn't exist in get block uninstall "</span> + packageName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*5.1.4.1】通过 PackageSetting 返回其 block uninstall 的状态！</span></span><br><span class="line">        <span class="keyword">return</span> ps.getBlockUninstall(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-4-1-PackageSettingBase-getBlockUninstall"><a href="#5-1-4-1-PackageSettingBase-getBlockUninstall" class="headerlink" title="5.1.4.1 PackageSettingBase.getBlockUninstall"></a>5.1.4.1 PackageSettingBase.getBlockUninstall</h4><p>PackageSetting 继承了 PackageSettingBase，getBlockUninstall 方法是在父类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getBlockUninstall</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.1.4.2】返回该 pkg 的使用状态对象：PackageUserState！</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).blockUninstall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageUserState 实例，表示每个 pkg 在对应的 user 下的使用状态，其在我们分析 pms 的启动时有分析过，这里不多说了！</p><h4 id="5-1-4-2-PackageSettingBase-readUserState"><a href="#5-1-4-2-PackageSettingBase-readUserState" class="headerlink" title="5.1.4.2 PackageSettingBase.readUserState"></a>5.1.4.2 PackageSettingBase.readUserState</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】如果有的话，就返回这个 user 下的 PackageUserState 实例！</span></span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】否则，返回默认的！</span></span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 DEFAULT_USER_STATE 是一个 PackageUserState 对象！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PackageUserState DEFAULT_USER_STATE = <span class="keyword">new</span> PackageUserState();</span><br></pre></td></tr></table></figure><h3 id="5-1-5-getBlockUninstallForUsers"><a href="#5-1-5-getBlockUninstallForUsers" class="headerlink" title="5.1.5 getBlockUninstallForUsers"></a>5.1.5 getBlockUninstallForUsers</h3><p>该方法用于获得该 package 在多个 user 下的 block uninstall 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getBlockUninstallForUsers(String packageName, <span class="keyword">int</span>[] userIds) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = EMPTY_INT_ARRAY;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> userId : userIds) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.4】获得单个 user 下的 pkg 的 block uninstall 状态，并将状态为 true 的 user！</span></span><br><span class="line">        <span class="comment">// 保存到数组中，返回！</span></span><br><span class="line">        <span class="keyword">if</span> (getBlockUninstallForUser(packageName, userId)) &#123;</span><br><span class="line">            result = ArrayUtils.appendInt(result, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h2 id="5-2-deletePackageX"><a href="#5-2-deletePackageX" class="headerlink" title="5.2 deletePackageX"></a>5.2 deletePackageX</h2><p>接着是进入第二阶段的卸载：</p><ul><li>如果可以卸载所有 user 下的安装，那么 deleteFlags 会被设置为 PackageManager.DELETE_ALL_USERS; 而 user 则是每一个用户；</li><li>如果是卸载指定的 user 下的安装，那么 deleteFlags 不会设置为 PackageManager.DELETE_ALL_USERS；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deletePackageX</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> deleteFlags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.2.1.1】创建一个 PackageRemovedInfo 对象！</span></span><br><span class="line">    <span class="keyword">final</span> PackageRemovedInfo info = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】这里对 user 又做了一次处理。如果是卸载所有用户下的安装，那么 removeUser 为 UserHandle.USER_ALL！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> removeUser = (deleteFlags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span></span><br><span class="line">            ? UserHandle.USER_ALL : userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.2.2】如果要卸载的 pkg 是用于设备管理的，那么禁止卸载，返回！</span></span><br><span class="line">    <span class="keyword">if</span> (isPackageDeviceAdmin(packageName, removeUser)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Not removing package "</span> + packageName + <span class="string">": has active device admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageSetting uninstalledPs = <span class="keyword">null</span>; <span class="comment">// 要卸载的 apk 的安装信息！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] allUsers;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】获得上一次的安装信息，如果为 null，直接返回！！</span></span><br><span class="line">        uninstalledPs = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (uninstalledPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Not removing non-existent package "</span> + packageName);</span><br><span class="line">            <span class="keyword">return</span> PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】获得所用的 user，并判断 pkg 是安装在哪些 user 下的，返回这些 user 的数组！</span></span><br><span class="line">        allUsers = sUserManager.getUserIds();</span><br><span class="line">        info.origUsers = uninstalledPs.queryInstalledUsers(allUsers, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> freezeUser; <span class="comment">// 用于保存卸载前，应用在那个 user 下处于冻结状态！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】如果这是要卸载的应用是一个被覆盖安装更新过的 sys apk，同时 deleteFlags 没有设置 DELETE_SYSTEM_APP 位</span></span><br><span class="line">    <span class="comment">// 那么，我们在所有用户下冻结，否则我们只在 removeUser 下冻结！</span></span><br><span class="line">    <span class="comment">//【*5.2.3】isUpdatedSystemApp 判断是否是被覆盖安装更新过的 sys apk！</span></span><br><span class="line">    <span class="keyword">if</span> (isUpdatedSystemApp(uninstalledPs)</span><br><span class="line">            &amp;&amp; ((deleteFlags &amp; PackageManager.DELETE_SYSTEM_APP) == <span class="number">0</span>)) &#123;</span><br><span class="line">        freezeUser = UserHandle.USER_ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        freezeUser = removeUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deletePackageX: pkg="</span> + packageName + <span class="string">" user="</span> + userId);</span><br><span class="line">        <span class="comment">//【*5.2.4】在卸载前进入冻结状态！</span></span><br><span class="line">        <span class="keyword">try</span> (PackageFreezer freezer = freezePackageForDelete(packageName, freezeUser,</span><br><span class="line">                deleteFlags, <span class="string">"deletePackageX"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*5.3】继续卸载；</span></span><br><span class="line">            res = deletePackageLIF(packageName, UserHandle.of(removeUser), <span class="keyword">true</span>, allUsers,</span><br><span class="line">                    deleteFlags | REMOVE_CHATTY, info, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                mEphemeralApplicationRegistry.onPackageUninstalledLPw(uninstalledPs.pkg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】res 为 true，表示卸载成功了，那么发送相关的广播！</span></span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> killApp = (deleteFlags &amp; PackageManager.DELETE_DONT_KILL_APP) == <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【*5.2.1.2】发送 removed 广播；</span></span><br><span class="line">        info.sendPackageRemovedBroadcasts(killApp);</span><br><span class="line">        <span class="comment">//【*5.2.1.3】发送 updated 广播；</span></span><br><span class="line">        info.sendSystemPackageUpdatedBroadcasts();</span><br><span class="line">        <span class="comment">//【*5.2.1.4】发送 appeared广播；</span></span><br><span class="line">        info.sendSystemPackageAppearedBroadcasts();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Runtime.getRuntime().gc(); <span class="comment">// gc 回收资源！！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete the resources here after sending the broadcast to let</span></span><br><span class="line">    <span class="comment">// other processes clean up before deleting resources.</span></span><br><span class="line">    <span class="keyword">if</span> (info.args != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.2.1.2】执行删除 apk 的操作！！</span></span><br><span class="line">            info.args.doPostDeleteLI(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res ? PackageManager.DELETE_SUCCEEDED : PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程已经分析的很详细了！！</p><h3 id="5-2-1-PackageRemovedInfo"><a href="#5-2-1-PackageRemovedInfo" class="headerlink" title="5.2.1 PackageRemovedInfo"></a>5.2.1 PackageRemovedInfo</h3><h4 id="5-2-1-1-new-PackageRemovedInfo"><a href="#5-2-1-1-new-PackageRemovedInfo" class="headerlink" title="5.2.1.1 new PackageRemovedInfo"></a>5.2.1.1 new PackageRemovedInfo</h4><p>创建一个 PackageRemovedInfo 实例，分装要卸载的 apk 的相关信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageRemovedInfo</span> </span>&#123;</span><br><span class="line">    String removedPackage;</span><br><span class="line">    <span class="keyword">int</span> uid = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> removedAppId = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] origUsers;</span><br><span class="line">    <span class="keyword">int</span>[] removedUsers = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isRemovedPackageSystemUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isUpdate;</span><br><span class="line">    <span class="keyword">boolean</span> dataRemoved;</span><br><span class="line">    <span class="keyword">boolean</span> removedForAllUsers;</span><br><span class="line">    InstallArgs args = <span class="keyword">null</span>; <span class="comment">// 参数实例，用于执行卸载，清理的操作，后面会分析到！</span></span><br><span class="line">    ArrayMap&lt;String, PackageRemovedInfo&gt; removedChildPackages;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; appearedChildPackages;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，PackageRemovedInfo 内部也有很多的方法，用于发送广播，这里我们先分析当前流程能用的到的!!</p><h4 id="5-2-1-2-sendPackageRemovedBroadcasts"><a href="#5-2-1-2-sendPackageRemovedBroadcasts" class="headerlink" title="5.2.1.2 sendPackageRemovedBroadcasts"></a>5.2.1.2 sendPackageRemovedBroadcasts</h4><p>发送升级包被移除的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcasts</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//【*5.2.1.2.1】发送 removed 的广播；</span></span><br><span class="line">     sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> childCount = removedChildPackages != <span class="keyword">null</span> ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">         PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">         <span class="comment">//【*5.2.1.2.1】对 child pkg 一样的处理；</span></span><br><span class="line">         childInfo.sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>逻辑简单，不多说了！</p><h5 id="5-2-1-2-1-sendPackageRemovedBroadcastInternal"><a href="#5-2-1-2-1-sendPackageRemovedBroadcastInternal" class="headerlink" title="5.2.1.2.1 sendPackageRemovedBroadcastInternal"></a>5.2.1.2.1 sendPackageRemovedBroadcastInternal</h5><p>发送 removed 的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcastInternal</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span>  ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DATA_REMOVED, dataRemoved);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, !killApp);</span><br><span class="line">    <span class="keyword">if</span> (isUpdate || isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REMOVED_FOR_ALL_USERS, removedForAllUsers);</span><br><span class="line">    <span class="keyword">if</span> (removedPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】首先会发送 Intent.ACTION_PACKAGE_REMOVED 的广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED , removedPackage,</span><br><span class="line">                extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        <span class="comment">//【2】然后会发送 Intent.ACTION_PACKAGE_FULLY_REMOVED 的广播；</span></span><br><span class="line">        <span class="comment">// 但前提的是清楚了 data，并且本次是卸载的三方应用；</span></span><br><span class="line">        <span class="keyword">if</span> (dataRemoved &amp;&amp; !isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_FULLY_REMOVED,</span><br><span class="line">                    removedPackage, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (removedAppId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【3】最后，发送 Intent.ACTION_UID_REMOVED 广播！</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_UID_REMOVED, <span class="keyword">null</span>, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                removedUsers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不不多说了！</p><h4 id="5-2-1-3-sendSystemPackageUpdatedBroadcasts"><a href="#5-2-1-3-sendSystemPackageUpdatedBroadcasts" class="headerlink" title="5.2.1.3 sendSystemPackageUpdatedBroadcasts"></a>5.2.1.3 sendSystemPackageUpdatedBroadcasts</h4><p>发送 system app updated 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendSystemPackageUpdatedBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        <span class="comment">//【*5.2.1.3.1】发送 system app updated 广播；</span></span><br><span class="line">        sendSystemPackageUpdatedBroadcastsInternal();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (removedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (childInfo.isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">                <span class="comment">//【*5.2.1.3.1】对 child pkg 一样的处理；</span></span><br><span class="line">                childInfo.sendSystemPackageUpdatedBroadcastsInternal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑简单，不多说了！</p><h5 id="5-2-1-3-1-sendSystemPackageUpdatedBroadcastsInternal"><a href="#5-2-1-3-1-sendSystemPackageUpdatedBroadcastsInternal" class="headerlink" title="5.2.1.3.1 sendSystemPackageUpdatedBroadcastsInternal"></a>5.2.1.3.1 sendSystemPackageUpdatedBroadcastsInternal</h5><p>核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSystemPackageUpdatedBroadcastsInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span> ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】依次发送如下的三个广播；</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, removedPackage,</span><br><span class="line">            extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED, removedPackage,</span><br><span class="line">            extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_MY_PACKAGE_REPLACED, <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>, <span class="number">0</span>, removedPackage, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="5-2-1-4-sendSystemPackageAppearedBroadcasts"><a href="#5-2-1-4-sendSystemPackageAppearedBroadcasts" class="headerlink" title="5.2.1.4 sendSystemPackageAppearedBroadcasts"></a>5.2.1.4 sendSystemPackageAppearedBroadcasts</h4><p>发送 system app appeared 广播，针对于 child apk：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendSystemPackageAppearedBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> packageCount = (appearedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">            ? appearedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; packageCount; i++) &#123;</span><br><span class="line">        PackageInstalledInfo installedInfo = appearedChildPackages.valueAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> userId : installedInfo.newUsers) &#123;</span><br><span class="line">            <span class="comment">//【*5.2.1.4.1】发送 child apk appeared 的广播！</span></span><br><span class="line">            sendPackageAddedForUser(installedInfo.name, <span class="keyword">true</span>,</span><br><span class="line">                    UserHandle.getAppId(installedInfo.uid), userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-1-4-1-sendPackageAddedForUser-of-pms"><a href="#5-2-1-4-1-sendPackageAddedForUser-of-pms" class="headerlink" title="5.2.1.4.1 sendPackageAddedForUser(of pms)"></a>5.2.1.4.1 sendPackageAddedForUser(of pms)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断是否是 sys app！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem = isSystemApp(pkgSetting) || isUpdatedSystemApp(pkgSetting);</span><br><span class="line">    <span class="comment">//【*5.2.1.4.2】继续发送：</span></span><br><span class="line">    sendPackageAddedForUser(packageName, isSystem, pkgSetting.appId, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-1-4-2-sendPackageAddedForUser-of-pms"><a href="#5-2-1-4-2-sendPackageAddedForUser-of-pms" class="headerlink" title="5.2.1.4.2 sendPackageAddedForUser(of pms)"></a>5.2.1.4.2 sendPackageAddedForUser(of pms)</h5><p>核心方法，这里的 boolean isSystem 传入的是 true：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> isSystem,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> appId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, UserHandle.getUid(userId, appId));</span><br><span class="line">    <span class="comment">//【1】发送 Intent.ACTION_PACKAGE_ADDED 广播！！</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</span><br><span class="line">            packageName, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (isSystem &amp;&amp; am.isUserRunning(userId, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// The just-installed/enabled app is bundled on the system, so presumed</span></span><br><span class="line">            <span class="comment">// to be able to run automatically without needing an explicit launch.</span></span><br><span class="line">            <span class="comment">// Send it a BOOT_COMPLETED if it would ordinarily have gotten one.</span></span><br><span class="line">            Intent bcIntent = <span class="keyword">new</span> Intent(Intent.ACTION_BOOT_COMPLETED)</span><br><span class="line">                    .addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)</span><br><span class="line">                    .setPackage(packageName);</span><br><span class="line">            am.broadcastIntent(<span class="keyword">null</span>, bcIntent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                    android.app.AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// shouldn't happen</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Unable to bootstrap installed package"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-isPackageDeviceAdmin"><a href="#5-2-2-isPackageDeviceAdmin" class="headerlink" title="5.2.2 isPackageDeviceAdmin"></a>5.2.2 isPackageDeviceAdmin</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPackageDeviceAdmin</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(</span><br><span class="line">            ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dpm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ComponentName deviceOwnerComponentName = dpm.getDeviceOwnerComponent(</span><br><span class="line">                    <span class="comment">/* callingUserOnly =*/</span> <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">final</span> String deviceOwnerPackageName = deviceOwnerComponentName == <span class="keyword">null</span> ? <span class="keyword">null</span></span><br><span class="line">                    : deviceOwnerComponentName.getPackageName();</span><br><span class="line">            <span class="comment">// Does the package contains the device owner?</span></span><br><span class="line">            <span class="comment">// TODO Do we have to do it even if userId != UserHandle.USER_ALL?  Otherwise,</span></span><br><span class="line">            <span class="comment">// this check is probably not needed, since DO should be registered as a device</span></span><br><span class="line">            <span class="comment">// admin on some user too. (Original bug for this: b/17657954)</span></span><br><span class="line">            <span class="keyword">if</span> (packageName.equals(deviceOwnerPackageName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Does it contain a device admin for any user?</span></span><br><span class="line">            <span class="keyword">int</span>[] users;</span><br><span class="line">            <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">                users = sUserManager.getUserIds();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                users = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;userId&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dpm.packageHasActiveAdmins(packageName, users[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-isUpdatedSystemApp"><a href="#5-2-3-isUpdatedSystemApp" class="headerlink" title="5.2.3 isUpdatedSystemApp"></a>5.2.3 isUpdatedSystemApp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUpdatedSystemApp</span><span class="params">(PackageSetting ps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ps.pkgFlags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-freezePackageForInstall"><a href="#5-2-4-freezePackageForInstall" class="headerlink" title="5.2.4 freezePackageForInstall"></a>5.2.4 freezePackageForInstall</h3><p>进入冻结状态！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackageForInstall</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> installFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*5.2.4.1】对于卸载的情况，是进入这里的！</span></span><br><span class="line">        <span class="keyword">return</span> freezePackage(packageName, userId, killReason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-2-4-1-freezePackage"><a href="#5-2-4-1-freezePackage" class="headerlink" title="5.2.4.1 freezePackage"></a>5.2.4.1 freezePackage</h4><p>看代码是创建了一个 PackageFreezer 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackage</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.2.4.2】创建一个 PackageFreezer 实例！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer(packageName, userId, killReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-2-new-PackageFreezer"><a href="#5-2-4-2-new-PackageFreezer" class="headerlink" title="5.2.4.2 new PackageFreezer"></a>5.2.4.2 new PackageFreezer</h4><p>PackageFreezer 是一个冻结对象，在创建它的时候就会执行冻结操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageFreezer</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mPackageName; <span class="comment">// 要被冻结的 pkg</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PackageFreezer[] mChildren; <span class="comment">// 要被冻结的 child pkg</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mWeFroze;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mClosed = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloseGuard mCloseGuard = CloseGuard.get();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPackageName = <span class="keyword">null</span>;</span><br><span class="line">        mChildren = <span class="keyword">null</span>;</span><br><span class="line">        mWeFroze = <span class="keyword">false</span>;</span><br><span class="line">        mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mPackageName = packageName;</span><br><span class="line">            <span class="comment">//【1】将该 pkg 添加到 pms 的内部 mFrozenPackages 集合中！</span></span><br><span class="line">            mWeFroze = mFrozenPackages.add(mPackageName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2】返回 pkg 的安装信息，如果不会 null，那就 kill 掉该进程！</span></span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(mPackageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【2.1】kill app 进程，这里不过多关注！</span></span><br><span class="line">                killApplication(ps.name, ps.appId, userId, killReason);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3】如果该 package 有 child package，做同样的处理！</span></span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package p = mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.childPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = p.childPackages.size();</span><br><span class="line">                mChildren = <span class="keyword">new</span> PackageFreezer[N];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                    mChildren[i] = <span class="keyword">new</span> PackageFreezer(p.childPackages.get(i).packageName,</span><br><span class="line">                            userId, killReason);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChildren = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 pms 的内部，有一个集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mPackages"</span>)</span><br><span class="line"><span class="keyword">final</span> ArraySet&lt;String&gt; mFrozenPackages = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br></pre></td></tr></table></figure><p>用于保存所有的处于冻结状态的 package！</p><h2 id="5-3-deletePackageLIF"><a href="#5-3-deletePackageLIF" class="headerlink" title="5.3 deletePackageLIF"></a>5.3 deletePackageLIF</h2><p>接着进入卸载的第三个阶段，我们来回归下参数：</p><ul><li>boolean deleteCodeAndResources：表示是否删除 apk 和资源，这里传入的是 true；</li><li>int flags：卸载的 flags，传入 deleteFlags | REMOVE_CHATTY；</li><li>boolean writeSettings：是否持久化处理的数据，这里传入的是 true；</li><li>PackageParser.Package replacingPackage：用于取代的 pkg，这里传入的是 null；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deletePackageLIF</span><span class="params">(String packageName, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete null packageName."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deletePackageLI: "</span> + packageName + <span class="string">" user "</span> + user);</span><br><span class="line"></span><br><span class="line">    PackageSetting ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得上一次的安装信息！</span></span><br><span class="line">        ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Package named '"</span> + packageName + <span class="string">"' doesn't exist."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果卸载的是 child package，并且</span></span><br><span class="line">        <span class="comment">// 其不是 sys app（无 FLAG_SYSTEM 标志位），或者是 sys app，且卸载 flags 设置了 DELETE_SYSTEM_APP 位！</span></span><br><span class="line">        <span class="comment">// 那么这里立刻执行卸载！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.parentPackageName != <span class="keyword">null</span> &amp;&amp; (!isSystemApp(ps)</span><br><span class="line">                || (flags &amp; PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Uninstalled child package:"</span> + packageName + <span class="string">" for user:"</span></span><br><span class="line">                        + ((user == <span class="keyword">null</span>) ? UserHandle.USER_ALL : user));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> removedUserId = (user != <span class="keyword">null</span>) ? user.getIdentifier()</span><br><span class="line">                    : UserHandle.USER_ALL;</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//【*5.3.1】清理该 pkg 在 removedUserId 下的数据！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, removedUserId, outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*5.3.2】设置该 pkg 的使用状态信息！</span></span><br><span class="line">            markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果卸载的不是 sys app（无 FLAG_SYSTEM 标志位），或者卸载 flags 设置了 DELETE_SYSTEM_APP 位！</span></span><br><span class="line">    <span class="comment">// 同时，只是在某个用户下卸载该 apk，进入下面的逻辑</span></span><br><span class="line">    <span class="comment">// 可以看到：如果 apk 是 sys，那么还必须要设置 DELETE_SYSTEM_APP 标志位才行！</span></span><br><span class="line">    <span class="keyword">if</span> (((!isSystemApp(ps) || (flags&amp;PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>) &amp;&amp; user != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; user.getIdentifier() != UserHandle.USER_ALL)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*5.3.2】设置该 pkg 的使用状态信息！</span></span><br><span class="line">        markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2.1】如果是 data app，进入 if 分支，而 sys app 进入 else 分支！</span></span><br><span class="line">        <span class="keyword">if</span> (!isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="comment">//【*5.3.3】判断下该应用是否需要被缓存下来！！</span></span><br><span class="line">            <span class="keyword">boolean</span> keepUninstalledPackage = shouldKeepUninstalledPackageLPr(packageName);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.1.1】该 apk 在一些用户下处于 install 状态，或者该 pkg 需要被 keep！</span></span><br><span class="line">            <span class="keyword">if</span> (ps.isAnyInstalled(sUserManager.getUserIds()) || keepUninstalledPackage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Still installed by other users"</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【*5.3.1】清理该 pkg 在 user 下的数据，清楚shibai！</span></span><br><span class="line">                <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">                scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Not installed by other users, full delete"</span>);</span><br><span class="line">                <span class="comment">//【2.1.1】该 apk 没有在任何 user 下安装，同时也不需要 keep，那么这里会将其在该 user 下的</span></span><br><span class="line">                <span class="comment">// 的安装状态设置为 true，这样卸载广播就能正确的发出了（感觉像是解决一个 bug）</span></span><br><span class="line">                ps.setInstalled(<span class="keyword">true</span>, user.getIdentifier());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Deleting system app"</span>);</span><br><span class="line">            <span class="comment">//【2.2】对于 sys app，所有用户都会有该 app，所以这里我们会清楚在该 user 下的数据！</span></span><br><span class="line">            <span class="comment">//【*5.3.1】清理该 pkg 在 user 下的数据，清楚shibai！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果要卸载的 apk 是一个复合 apk，有 split apk，那么这里会对其 child pkg 做同样的处理！！</span></span><br><span class="line">    <span class="keyword">if</span> (ps.childPackageNames != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = ps.childPackageNames.size();</span><br><span class="line">            <span class="comment">//【*5.2.1】将每一个 child pkg 都封装成一个 PackageRemovedInfo 实例，并计算其 origUsers</span></span><br><span class="line">            <span class="comment">// 加到 parent pkg 的 outInfo.removedChildPackages 中！</span></span><br><span class="line">            outInfo.removedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;(childCount);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageRemovedInfo childInfo = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">                childInfo.removedPackage = childPackageName;</span><br><span class="line">                outInfo.removedChildPackages.put(childPackageName, childInfo);</span><br><span class="line">                PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.origUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【4】进入核心的卸载阶段，这个阶段在返回后，会创建一个 InstallArgs 对象！！</span></span><br><span class="line">    <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【*6.1】卸载 sys app，如果 sys app 被覆盖安装过，那么会 fall back 回 sys app！</span></span><br><span class="line">        ret = deleteSystemPackageLIF(ps.pkg, ps, allUserHandles, flags, outInfo, writeSettings);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing non-system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【*6.1】卸载 data app!</span></span><br><span class="line">        ret = deleteInstalledPackageLIF(ps, deleteCodeAndResources, flags, allUserHandles,</span><br><span class="line">                outInfo, writeSettings, replacingPackage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】这里是记录下我们是否是在所有用户下移除 pkg，对 child apk 也做同样的处理！</span></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outInfo.removedForAllUsers = mPackages.get(ps.name) == <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = outInfo.removedChildPackages.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    PackageRemovedInfo childInfo = outInfo.removedChildPackages.valueAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        childInfo.removedForAllUsers = mPackages.get(</span><br><span class="line">                                childInfo.removedPackage) == <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.1】这里对被覆盖安装过的 sys app 又做了特殊处理！！我们知道当我们删除了位于 data 的 app 数据后</span></span><br><span class="line">        <span class="comment">// 我们会恢复 sys app 的安装数据！这里主要是处理如下情况：</span></span><br><span class="line">        <span class="comment">// 如果 sys app 有 child pkg，但是可能有一些 child pkg 只申明在了 sys app 中，没有在 updated app 中</span></span><br><span class="line">        <span class="comment">// 此时我们会重新创建 child pkg 的 PackageInstalledInfo，保存到 outInfo 中！</span></span><br><span class="line">        <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                PackageSetting updatedPs = mSettings.peekPackageLPr(ps.name);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = (updatedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                        ? updatedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    String childPackageName = updatedPs.childPackageNames.get(i);</span><br><span class="line">                    <span class="comment">//【5.1.1】如果 outInfo 没有保存该 child pkg，进行以下逻辑：</span></span><br><span class="line">                    <span class="keyword">if</span> (outInfo.removedChildPackages == <span class="keyword">null</span></span><br><span class="line">                            || outInfo.removedChildPackages.indexOfKey(childPackageName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                        <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//【5.1.1】为该 child 创建一个 PackageInstalledInfo 实例，记录相关属性</span></span><br><span class="line">                        <span class="comment">// 保存到 outInfo.appearedChildPackages 集合中！</span></span><br><span class="line">                        PackageInstalledInfo installRes = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">                        installRes.name = childPackageName;</span><br><span class="line">                        installRes.newUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                        installRes.pkg = mPackages.get(childPackageName);</span><br><span class="line">                        installRes.uid = childPs.pkg.applicationInfo.uid;</span><br><span class="line">                        <span class="keyword">if</span> (outInfo.appearedChildPackages == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            outInfo.appearedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">                        &#125;</span><br><span class="line">                        outInfo.appearedChildPackages.put(childPackageName, installRes);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，这一阶段就分析结束了！</p><h3 id="5-3-1-clearPackageStateForUserLIF"><a href="#5-3-1-clearPackageStateForUserLIF" class="headerlink" title="5.3.1 clearPackageStateForUserLIF"></a>5.3.1 clearPackageStateForUserLIF</h3><p>清理数据，可以看到这个方法里面执行的操作有很多：清楚数据等等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">clearPackageStateForUserLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        pkg = mPackages.get(ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】如果是 UserHandle.USER_ALL，那么这里会返回当前的所有 user id！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (userId == UserHandle.USER_ALL) ? sUserManager.getUserIds()</span><br><span class="line">            : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】遍历执行删除操作：</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Updating package:"</span> + ps.name + <span class="string">" install state for user:"</span></span><br><span class="line">                    + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        destroyAppDataLIF(pkg, userId,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">        destroyAppProfilesLIF(pkg, userId);</span><br><span class="line">        removeKeystoreDataIfNeeded(nextUserId, ps.appId);</span><br><span class="line">        schedulePackageCleaning(ps.name, nextUserId, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clearPackagePreferredActivitiesLPw(ps.name, nextUserId)) &#123;</span><br><span class="line">                scheduleWritePackageRestrictionsLocked(nextUserId);</span><br><span class="line">            &#125;</span><br><span class="line">            resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outInfo.removedPackage = ps.name;</span><br><span class="line">        outInfo.removedAppId = ps.appId;</span><br><span class="line">        outInfo.removedUsers = userIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-markPackageUninstalledForUserLPw"><a href="#5-3-2-markPackageUninstalledForUserLPw" class="headerlink" title="5.3.2 markPackageUninstalledForUserLPw"></a>5.3.2 markPackageUninstalledForUserLPw</h3><p>修改在该 user 下的使用状态为 no install 的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markPackageUninstalledForUserLPw</span><span class="params">(PackageSetting ps, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (user == <span class="keyword">null</span> || user.getIdentifier() == UserHandle.USER_ALL)</span><br><span class="line">            ? sUserManager.getUserIds() : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;user.getIdentifier()&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Marking package:"</span> + ps.name + <span class="string">" uninstalled for user:"</span> + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】设置对应的 PackageUserState 中的状态！</span></span><br><span class="line">        ps.setUserState(nextUserId, <span class="number">0</span>, COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*installed*/</span>, <span class="keyword">true</span> <span class="comment">/*stopped*/</span>, <span class="keyword">true</span> <span class="comment">/*notLaunched*/</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*hidden*/</span>, <span class="keyword">false</span> <span class="comment">/*suspended*/</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*blockUninstall*/</span>,</span><br><span class="line">                ps.readUserState(nextUserId).domainVerificationStatus, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，就不多说了！</p><h3 id="5-3-3-shouldKeepUninstalledPackageLPr"><a href="#5-3-3-shouldKeepUninstalledPackageLPr" class="headerlink" title="5.3.3 shouldKeepUninstalledPackageLPr"></a>5.3.3 shouldKeepUninstalledPackageLPr</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldKeepUninstalledPackageLPr</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mKeepUninstalledPackages != <span class="keyword">null</span> &amp;&amp; mKeepUninstalledPackages.contains(packageName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-PackageManagerService"><a href="#6-PackageManagerService" class="headerlink" title="6 PackageManagerService"></a>6 PackageManagerService</h1><p>接下来，我们分别分析下 sys app 和 data app 的卸载过程：</p><h2 id="6-1-deleteSystemPackageLIF"><a href="#6-1-deleteSystemPackageLIF" class="headerlink" title="6.1 deleteSystemPackageLIF"></a>6.1 deleteSystemPackageLIF</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteSystemPackageLIF</span><span class="params">(PackageParser.Package deletedPkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageSetting deletedPs, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags, PackageRemovedInfo outInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deletedPs.parentPackageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete child system package "</span> + deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】判断是否考虑用户限制！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> applyUserRestrictions</span><br><span class="line">            = (allUserHandles != <span class="keyword">null</span>) &amp;&amp; (outInfo.origUsers != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> PackageSetting disabledPs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】判断该应用是否是一个被覆盖安装更新过的 sys app!!</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        disabledPs = mSettings.getDisabledSystemPkgLPr(deletedPs.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deleteSystemPackageLI: newPs="</span> + deletedPkg.packageName</span><br><span class="line">            + <span class="string">" disabledPs="</span> + disabledPs);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】只有覆盖安装过的 sys app 才能被卸载，实际上卸载的是处于 data 的那个 apk！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete unknown system package "</span>+ deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">"Deleting system pkg from data partition"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Remembering install states:"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> finstalled = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                Slog.d(TAG, <span class="string">"   u="</span> + userId + <span class="string">" inst="</span> + finstalled);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】设置 pkg 对应的 outInfo 的 isRemovedPackageSystemUpdate 为 true，表示移除的是更新！</span></span><br><span class="line">    <span class="comment">// 如果 pkg 有 child pkg，也要设置其对应的属性！</span></span><br><span class="line">    outInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (deletedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                ? deletedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            String childPackageName = deletedPs.childPackageNames.get(i);</span><br><span class="line">            <span class="keyword">if</span> (disabledPs.childPackageNames != <span class="keyword">null</span> &amp;&amp; disabledPs.childPackageNames</span><br><span class="line">                    .contains(childPackageName)) &#123;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】判断下覆盖安装前后的 versioncode，如果覆盖前的小，那么本次卸载后，数据也会被清除；</span></span><br><span class="line">    <span class="comment">// 如果相等，那么就保留数据！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs.versionCode &lt; deletedPs.versionCode) &#123;</span><br><span class="line">        flags &amp;= ~PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags |= PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2】继续处理卸载，可以看到，此时和卸载 data app 的一样的了！</span></span><br><span class="line">    <span class="keyword">boolean</span> ret = deleteInstalledPackageLIF(deletedPs, <span class="keyword">true</span>, flags, allUserHandles,</span><br><span class="line">            outInfo, writeSettings, disabledPs.pkg);</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】接着，需要恢复 sys app！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">// Reinstate the old system package</span></span><br><span class="line">        <span class="comment">//【*6.1.1】恢复 sys app 的安装数据！</span></span><br><span class="line">        enableSystemPackageLPw(disabledPs.pkg);</span><br><span class="line">        <span class="comment">//【*6.1.2】移除所有的本地库！</span></span><br><span class="line">        removeNativeBinariesLI(deletedPs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】准备重新扫描 sys app，首先会设置基本的扫描参数！</span></span><br><span class="line">    <span class="comment">// 如果是 pri app，还要设置 PARSE_IS_PRIVILEGED 标志位！</span></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Re-installing system package: "</span> + disabledPs);</span><br><span class="line">    <span class="keyword">int</span> parseFlags = mDefParseFlags</span><br><span class="line">            | PackageParser.PARSE_MUST_BE_APK</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">    <span class="comment">//【*6.1.3】判断是否是 pri app！</span></span><br><span class="line">    <span class="keyword">if</span> (locationIsPrivileged(disabledPs.codePath)) &#123;</span><br><span class="line">        parseFlags |= PackageParser.PARSE_IS_PRIVILEGED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package newPkg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【8】重新扫描 sys app，这里我们在开机扫描的时候有分析过，不多说了！！</span></span><br><span class="line">        newPkg = scanPackageTracedLI(disabledPs.codePath, parseFlags, SCAN_NO_PATHS, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to restore system package:"</span> + deletedPkg.packageName + <span class="string">": "</span></span><br><span class="line">                + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*6.1.4】更新共享库！</span></span><br><span class="line">        updateSharedLibrariesLPw(newPkg, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"updateAllSharedLibrariesLPw failed: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*6.1.5】准备应用的数据目录！</span></span><br><span class="line">    prepareAppDataAfterInstallLIF(newPkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【9】最后就是要想最新的信息持久化到本地文件：包括安装信息，偏好设置，权限等等！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【9.1】读取最新的安装信息！</span></span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(newPkg.packageName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9.2】将卸载前的权限授予信息拷贝到本次新安装的信息中！！</span></span><br><span class="line">        ps.getPermissionsState().copyFrom(deletedPs.getPermissionsState());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【9.3-review】更新权限信息，这里我们在 pms 的启动时分析过，这里就不再细说了！</span></span><br><span class="line">        <span class="comment">// 这里会更新所有应用的权限信息，移除过时的运行时权限，自动授予安装时权限等！</span></span><br><span class="line">        updatePermissionsLPw(newPkg.packageName, newPkg,</span><br><span class="line">                UPDATE_PERMISSIONS_ALL | UPDATE_PERMISSIONS_REPLACE_PKG);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【9.4】如果需要应用用户限制，会进入这个分支！</span></span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Propagating install state across reinstall"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【9.4.1】重新设置在每个用户下的 install 状态！</span></span><br><span class="line">                ps.setInstalled(installed, userId);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【9.4.2】持久化所有用户下的运行时权限信息！</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【9.4.3】持久化所有用户下的应用偏好设置！</span></span><br><span class="line">            mSettings.writeAllUsersPackageRestrictionsLPr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【9.5】持久化 Settings 中的数据，包括 packages.xml，packages.list 等等！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个逻辑很详细了，不多说了！！</p><h3 id="6-1-1-enableSystemPackageLPw"><a href="#6-1-1-enableSystemPackageLPw" class="headerlink" title="6.1.1 enableSystemPackageLPw"></a>6.1.1 enableSystemPackageLPw</h3><p>恢复 sys app 的安装信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enableSystemPackageLPw</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.1.1.1】恢复 pkg 的安装信息！</span></span><br><span class="line">    mSettings.enableSystemPackageLPw(pkg.packageName);</span><br><span class="line">    <span class="comment">//【*6.1.1.1】恢复 pkg 的 child pkg 的安装信息！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">        mSettings.enableSystemPackageLPw(childPkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="6-1-1-1-Settings-enableSystemPackageLPw"><a href="#6-1-1-1-Settings-enableSystemPackageLPw" class="headerlink" title="6.1.1.1 Settings.enableSystemPackageLPw"></a>6.1.1.1 Settings.enableSystemPackageLPw</h4><p>核心方法是在 Settings 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PackageSetting <span class="title">enableSystemPackageLPw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断下是否被覆盖安装过！</span></span><br><span class="line">    PackageSetting p = mDisabledSysPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(PackageManagerService.TAG, <span class="string">"Package "</span> + name + <span class="string">" is not disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】取消掉 FLAG_UPDATED_SYSTEM_APP 标志位！</span></span><br><span class="line">    <span class="keyword">if</span>((p.pkg != <span class="keyword">null</span>) &amp;&amp; (p.pkg.applicationInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">        p.pkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3-review】创建一个新的 PackageSetting 实例，同时将其添加到 Settings 内部的集合中！</span></span><br><span class="line">    <span class="comment">// 这个我们在 pms 开机中分析过！</span></span><br><span class="line">    PackageSetting ret = addPackageLPw(name, p.realName, p.codePath, p.resourcePath,</span><br><span class="line">            p.legacyNativeLibraryPathString, p.primaryCpuAbiString,</span><br><span class="line">            p.secondaryCpuAbiString, p.cpuAbiOverrideString,</span><br><span class="line">            p.appId, p.versionCode, p.pkgFlags, p.pkgPrivateFlags,</span><br><span class="line">            p.parentPackageName, p.childPackageNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】从 mDisabledSysPackages 删除信息！</span></span><br><span class="line">    mDisabledSysPackages.remove(name);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析！</p><h3 id="6-1-2-removeNativeBinariesLI"><a href="#6-1-2-removeNativeBinariesLI" class="headerlink" title="6.1.2 removeNativeBinariesLI"></a>6.1.2 removeNativeBinariesLI</h3><p>移除本地库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNativeBinariesLI</span><span class="params">(PackageSetting ps)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】移除 pkg 的本地库！</span></span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        NativeLibraryHelper.removeNativeBinariesLI(ps.legacyNativeLibraryPathString);</span><br><span class="line">        <span class="comment">//【1.1】移除 pkg 的 child pkg 的本地库！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>) ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageSetting childPs = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                childPs = mSettings.peekPackageLPr(ps.childPackageNames.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                NativeLibraryHelper.removeNativeBinariesLI(childPs</span><br><span class="line">                        .legacyNativeLibraryPathString);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是通过 NativeLibraryHelper 的相关接口来移除的，这里就不过多分析了！</p><h3 id="6-1-3-locationIsPrivileged"><a href="#6-1-3-locationIsPrivileged" class="headerlink" title="6.1.3 locationIsPrivileged"></a>6.1.3 locationIsPrivileged</h3><p>判断是否是 pri app：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">locationIsPrivileged</span><span class="params">(File path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>)</span><br><span class="line">                .getCanonicalPath();</span><br><span class="line">        <span class="comment">//【1】核心逻辑，是否是以 /system/priv-app 开头的！</span></span><br><span class="line">        <span class="keyword">return</span> path.getCanonicalPath().startsWith(privilegedAppDir);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Unable to access code path "</span> + path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！！</p><h3 id="6-1-4-updateSharedLibrariesLPw"><a href="#6-1-4-updateSharedLibrariesLPw" class="headerlink" title="6.1.4 updateSharedLibrariesLPw"></a>6.1.4 updateSharedLibrariesLPw</h3><p>更新共享库文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSharedLibrariesLPw</span><span class="params">(PackageParser.Package pkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package changingLib)</span> <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg.usesLibraries != <span class="keyword">null</span> || pkg.usesOptionalLibraries != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】用于手机该 pkg 需要的所有共享库！</span></span><br><span class="line">        <span class="keyword">final</span> ArraySet&lt;String&gt; usesLibraryFiles = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">//【2】处理 pkg.usesLibraries 指定依赖的库</span></span><br><span class="line">        <span class="keyword">int</span> N = pkg.usesLibraries != <span class="keyword">null</span> ? pkg.usesLibraries.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="comment">//【2.1】要尝试在系统已有的共享库中找到对应的库！</span></span><br><span class="line">            <span class="keyword">final</span> SharedLibraryEntry file = mSharedLibraries.get(pkg.usesLibraries.get(i));</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_MISSING_SHARED_LIBRARY,</span><br><span class="line">                        <span class="string">"Package "</span> + pkg.packageName + <span class="string">" requires unavailable shared library "</span></span><br><span class="line">                        + pkg.usesLibraries.get(i) + <span class="string">"; failing!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*6.1.4.1】将依赖的库加入到 usesLibraryFiles 中！</span></span><br><span class="line">            addSharedLibraryLPw(usesLibraryFiles, file, changingLib);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】处理 pkg.usesOptionalLibraries 指定依赖的库</span></span><br><span class="line">        N = pkg.usesOptionalLibraries != <span class="keyword">null</span> ? pkg.usesOptionalLibraries.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> SharedLibraryEntry file = mSharedLibraries.get(pkg.usesOptionalLibraries.get(i));</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Package "</span> + pkg.packageName</span><br><span class="line">                        + <span class="string">" desires unavailable shared library "</span></span><br><span class="line">                        + pkg.usesOptionalLibraries.get(i) + <span class="string">"; ignoring!"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.1.4.1】将依赖的库加入到 usesLibraryFiles 中！</span></span><br><span class="line">                addSharedLibraryLPw(usesLibraryFiles, file, changingLib);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】最后将收集到的共享库文件路径保存到 pkg.usesLibraryFiles 中！</span></span><br><span class="line">        N = usesLibraryFiles.size();</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pkg.usesLibraryFiles = usesLibraryFiles.toArray(<span class="keyword">new</span> String[N]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pkg.usesLibraryFiles = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageParser.Package 内有如下的集合，表示该 pkg 依赖的共享库的名称：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; usesLibraries = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; usesOptionalLibraries = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><p>同时也有下面的集合，保存了依赖的所有的共享库的路径：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] usesLibraryFiles = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><p>不多说了！</p><h4 id="6-1-4-1-addSharedLibraryLPw"><a href="#6-1-4-1-addSharedLibraryLPw" class="headerlink" title="6.1.4.1 addSharedLibraryLPw"></a>6.1.4.1 addSharedLibraryLPw</h4><p>参数 PackageParser.Package changingLib 表示我们改变了共享库的定义 apk，那么我们要将新的 apk 传进来，作为新的依赖！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSharedLibraryLPw</span><span class="params">(ArraySet&lt;String&gt; usesLibraryFiles, SharedLibraryEntry file,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package changingLib)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果共享库的 path 不为 null，那就直接加入到 usesLibraryFiles 中！</span></span><br><span class="line">    <span class="keyword">if</span> (file.path != <span class="keyword">null</span>) &#123;</span><br><span class="line">        usesLibraryFiles.add(file.path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】否则就找到定义共享库的 apk！</span></span><br><span class="line">    PackageParser.Package p = mPackages.get(file.apk);</span><br><span class="line">    <span class="keyword">if</span> (changingLib != <span class="keyword">null</span> &amp;&amp; changingLib.packageName.equals(file.apk)) &#123;</span><br><span class="line">        <span class="comment">//【2.1】如果此时 changingLib 不为 null，同时匹配，那么我们就依赖这个 changingLib！</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || p.packageName.equals(changingLib.packageName)) &#123;</span><br><span class="line">            p = changingLib;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】依赖定义 lib 的 apk！</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        usesLibraryFiles.addAll(p.getAllCodePaths());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="6-1-5-prepareAppDataAfterInstallLIF"><a href="#6-1-5-prepareAppDataAfterInstallLIF" class="headerlink" title="6.1.5 prepareAppDataAfterInstallLIF"></a>6.1.5 prepareAppDataAfterInstallLIF</h3><p>准备数据目录！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataAfterInstallLIF</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】保存 Kernel Map 数据！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">        mSettings.writeKernelMappingLPr(ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> UserManager um = mContext.getSystemService(UserManager.class);</span><br><span class="line">    UserManagerInternal umInternal = getUserManagerInternal();</span><br><span class="line">    <span class="keyword">for</span> (UserInfo user : um.getUsers()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags;</span><br><span class="line">        <span class="keyword">if</span> (umInternal.isUserUnlockingOrUnlocked(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (umInternal.isUserRunning(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果在该 user 下是安装状态，那就在该设备用户下准备数据目录！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.getInstalled(user.id)) &#123;</span><br><span class="line">            <span class="comment">//【*6.1.5.1】准备数据目录！</span></span><br><span class="line">            prepareAppDataLIF(pkg, user.id, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续分析：</p><h4 id="6-1-5-1-prepareAppDataLIF"><a href="#6-1-5-1-prepareAppDataLIF" class="headerlink" title="6.1.5.1 prepareAppDataLIF"></a>6.1.5.1 prepareAppDataLIF</h4><p>这个方法会对 pkg 以及其 child pkg 准备目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.1.5.2】准备父包的数据目录</span></span><br><span class="line">    prepareAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【*6.1.5.2】准备子包的数据目录</span></span><br><span class="line">        prepareAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="6-1-5-2-prepareAppDataLeafLIF"><a href="#6-1-5-2-prepareAppDataLeafLIF" class="headerlink" title="6.1.5.2 prepareAppDataLeafLIF"></a>6.1.5.2 prepareAppDataLeafLIF</h4><p>该方法是核心的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_APP_DATA) &#123;</span><br><span class="line">        Slog.v(TAG, <span class="string">"prepareAppData for "</span> + pkg.packageName + <span class="string">" u"</span> + userId + <span class="string">" 0x"</span></span><br><span class="line">                + Integer.toHexString(flags));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = pkg.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> String packageName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo app = pkg.applicationInfo;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> appId = UserHandle.getAppId(app.uid);</span><br><span class="line">    Preconditions.checkNotNull(app.seinfo);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】通过 installd 来准备数据目录！</span></span><br><span class="line">        mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">        <span class="comment">//【2】如果是系统应用，第一次准备失败后，还会在尝试一次！</span></span><br><span class="line">        <span class="keyword">if</span> (app.isSystemApp()) &#123;</span><br><span class="line">            logCriticalInfo(Log.ERROR, <span class="string">"Failed to create app data for "</span> + packageName</span><br><span class="line">                    + <span class="string">", but trying to recover: "</span> + e);</span><br><span class="line">            <span class="comment">//【2.1】先删除之前创建的脏目录！</span></span><br><span class="line">            destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【2.2】再次创建数据目录；</span></span><br><span class="line">                mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                        appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery succeeded!"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e2) &#123;</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery failed!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to create app data for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// CE storage is unlocked right now, so read out the inode and</span></span><br><span class="line">            <span class="comment">// remember for use later when it's locked</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> mark this structure as dirty so we persist it!</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = mInstaller.getAppDataInode(volumeUuid, packageName, userId,</span><br><span class="line">                    StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">                <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ps.setCeDataInode(ceDataInode, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to find inode for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.1.5.2】为 native libs 创建链接！</span></span><br><span class="line">    prepareAppDataContentsLeafLIF(pkg, userId, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="6-1-5-3-prepareAppDataContentsLeafLIF"><a href="#6-1-5-3-prepareAppDataContentsLeafLIF" class="headerlink" title="6.1.5.3 prepareAppDataContentsLeafLIF"></a>6.1.5.3 prepareAppDataContentsLeafLIF</h4><p>为 native libs 创建链接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataContentsLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = pkg.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> String packageName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo app = pkg.applicationInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】只为 32 位的 native libs 创建 link！</span></span><br><span class="line">        <span class="keyword">if</span> (app.primaryCpuAbi != <span class="keyword">null</span> &amp;&amp; !VMRuntime.is64BitAbi(app.primaryCpuAbi)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String nativeLibPath = app.nativeLibraryDir;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstaller.linkNativeLibraryDirectory(volumeUuid, packageName,</span><br><span class="line">                        nativeLibPath, userId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failed to link native for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析到这里！</p><h2 id="6-2-deleteInstalledPackageLIF"><a href="#6-2-deleteInstalledPackageLIF" class="headerlink" title="6.2 deleteInstalledPackageLIF"></a>6.2 deleteInstalledPackageLIF</h2><p>卸载三方应用，或者覆盖更新的 sys app，那么我们调用的是该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteInstalledPackageLIF</span><span class="params">(PackageSetting ps,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span> flags, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//【1】将要卸载的 apk 的 appid 保存到 PackageRemovedInfo 的 uid 属性中</span></span><br><span class="line">        <span class="comment">// 如果有 child pkg，对其也这样处理！</span></span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.uid = ps.appId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                    ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageSetting childPs = mSettings.mPackages.get(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.uid = childPs.appId;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2.1】删除 apk 的使用数据，如果有 child pkg，对其也这样处理！！</span></span><br><span class="line">    removePackageDataLIF(ps, allUserHandles, outInfo, flags, writeSettings);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>) ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageSetting childPs;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            childPs = mSettings.peekPackageLPr(ps.childPackageNames.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PackageRemovedInfo childOutInfo = (outInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                    ? outInfo.removedChildPackages.get(childPs.name) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//【2.1】对于 child pkg，这里的卸载 flags 比较特殊，如果 flags 设置了 DELETE_KEEP_DATA</span></span><br><span class="line">            <span class="comment">// 同时指定了 replacingPackage，而 replacingPackage 并不是其 parent pkg，这种情况，</span></span><br><span class="line">            <span class="comment">// 不需要保留数据，去掉 DELETE_KEEP_DATA 标志位；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = (flags &amp; DELETE_KEEP_DATA) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (replacingPackage != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; !replacingPackage.hasChildPackage(childPs.name))</span><br><span class="line">                    ? flags &amp; ~DELETE_KEEP_DATA : flags;</span><br><span class="line">             <span class="comment">//【*6.2.1】删除 child apk 的使用数据！</span></span><br><span class="line">            removePackageDataLIF(childPs, allUserHandles, childOutInfo,</span><br><span class="line">                    deleteFlags, writeSettings);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】只删除 pkg 的 apk 文件（child pkg 并不会被删除）</span></span><br><span class="line">    <span class="keyword">if</span> (ps.parentPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deleteCodeAndResources &amp;&amp; (outInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.2】创建一个 intallArgs，用于卸载！</span></span><br><span class="line">            outInfo.args = createInstallArgsForExisting(packageFlagsToInstallFlags(ps),</span><br><span class="line">                    ps.codePathString, ps.resourcePathString, getAppDexInstructionSets(ps));</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Slog.i(TAG, <span class="string">"args="</span> + outInfo.args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-1-removePackageDataLIF"><a href="#6-2-1-removePackageDataLIF" class="headerlink" title="6.2.1 removePackageDataLIF"></a>6.2.1 removePackageDataLIF</h3><p>删除 package 的数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removePackageDataLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    String packageName = ps.name;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"removePackageDataLI: "</span> + ps);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package deletedPkg;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting deletedPs;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得要被删除的 apk 的 PackageSetting 和 PackageParser.Package 对象！</span></span><br><span class="line">        deletedPkg = mPackages.get(packageName);</span><br><span class="line">        deletedPs = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.removedPackage = packageName;</span><br><span class="line">            outInfo.removedUsers = deletedPs != <span class="keyword">null</span></span><br><span class="line">                    ? deletedPs.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>)</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.2.1.1】第一部移除，扫描的四大组件信息！</span></span><br><span class="line">    removePackageLI(ps, (flags &amp; REMOVE_CHATTY) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】如果 flags 没有设置 DELETE_KEEP_DATA，那么会清楚 apk 的数据！！</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package resolvedPkg;</span><br><span class="line">        <span class="keyword">if</span> (deletedPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvedPkg = deletedPkg;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolvedPkg = <span class="keyword">new</span> PackageParser.Package(ps.name);</span><br><span class="line">            resolvedPkg.setVolumeUuid(ps.volumeUuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*6.2.1.2】删除 apk 的 data 数据！！</span></span><br><span class="line">        destroyAppDataLIF(resolvedPkg, UserHandle.USER_ALL,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【*6.2.1.3】删除 apk 的 profiles 数据！！</span></span><br><span class="line">        destroyAppProfilesLIF(resolvedPkg, UserHandle.USER_ALL);</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.dataRemoved = <span class="keyword">true</span>; <span class="comment">// 表示数据移除了；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*6.2.1.4】执行 package 清除！！</span></span><br><span class="line">        schedulePackageCleaning(packageName, UserHandle.USER_ALL, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】进一步处理！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deletedPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】如果 flags 没有设置 DELETE_KEEP_DATA 标志位，那么执行其他的清楚操作！</span></span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">//【3.1.1】清楚 intentfilter verify 和 默认浏览器的设置数据！</span></span><br><span class="line">                clearIntentFilterVerificationsLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">                clearDefaultBrowserIfNeeded(packageName);</span><br><span class="line">                <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【3.1.1.1】移除 key set 信息！</span></span><br><span class="line">                    mSettings.mKeySetManagerService.removeAppKeySetDataLPw(packageName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【*6.2.1.5】删除 pkg 的 PackageSetting 数据！</span></span><br><span class="line">                    outInfo.removedAppId = mSettings.removePackageLPw(packageName);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.1.2-review】更新权限信息，这里我们在 pms 的启动时分析过，这里就不再细说了！</span></span><br><span class="line">                <span class="comment">// 这里会更新所有应用的权限信息，移除过时的运行时权限，自动授予安装时权限等！</span></span><br><span class="line">                updatePermissionsLPw(deletedPs.name, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.1.3】如果该应用是共享 shared user 的，进入这里！</span></span><br><span class="line">                <span class="keyword">if</span> (deletedPs.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line">                    </span><br><span class="line">                        <span class="comment">//【3.1.3.1】更新该共享 shared uid 的权限，该 package 被移除掉，会导致和该</span></span><br><span class="line">                        <span class="comment">// 应用相关连的权限的变化，从而导致共享 shared uid 的 gids 发生变化！</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> userIdToKill = mSettings.updateSharedUserPermsLPw(deletedPs,</span><br><span class="line">                                userId);</span><br><span class="line">                                </span><br><span class="line">                        <span class="keyword">if</span> (userIdToKill == UserHandle.USER_ALL</span><br><span class="line">                                || userIdToKill &gt;= UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                            <span class="comment">//【3.1.3.1】如果共享 shared uid 的 gids 发生变化，杀掉该 uid 下的</span></span><br><span class="line">                            <span class="comment">// 所有的 app 进程！</span></span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    killApplication(deletedPs.name, deletedPs.appId,</span><br><span class="line">                                            KILL_APP_REASON_GIDS_CHANGED);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.1.4】清除默认应用的数据，先不关注；</span></span><br><span class="line">                clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.4】更新下在每个 user 下的安装状态！</span></span><br><span class="line">            <span class="keyword">if</span> (allUserHandles != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.origUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"Propagating install state across downgrade"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                        Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ps.setInstalled(installed, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.5】持久化 Settings 中的数据！！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【4】移除 key-store！</span></span><br><span class="line">        removeKeystoreDataIfNeeded(UserHandle.USER_ALL, outInfo.removedAppId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们详细的分析了整个流程！！</p><h4 id="6-2-1-1-removePackageLI"><a href="#6-2-1-1-removePackageLI" class="headerlink" title="6.2.1.1 removePackageLI"></a>6.2.1.1 removePackageLI</h4><p>移除 PackageSetting 对应的扫描数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePackageLI</span><span class="params">(PackageSetting ps, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatty)</span><br><span class="line">            Log.d(TAG, <span class="string">"Removing package "</span> + ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】移除扫描信息！</span></span><br><span class="line">        mPackages.remove(ps.name);</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = ps.pkg;</span><br><span class="line">        <span class="keyword">if</span> (pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.1.1.1】移除四大组件，共享库解析对象！</span></span><br><span class="line">            cleanPackageDataStructuresLILPw(pkg, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就不多说了！！</p><h5 id="6-2-1-1-1-cleanPackageDataStructuresLILPw"><a href="#6-2-1-1-1-cleanPackageDataStructuresLILPw" class="headerlink" title="6.2.1.1.1 cleanPackageDataStructuresLILPw"></a>6.2.1.1.1 cleanPackageDataStructuresLILPw</h5><p>用于删除 apk 的四大组件和共享库数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPackageDataStructuresLILPw</span><span class="params">(PackageParser.Package pkg, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】移除 provider！</span></span><br><span class="line">    <span class="keyword">int</span> N = pkg.providers.size();</span><br><span class="line">    StringBuilder r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Provider p = pkg.providers.get(i);</span><br><span class="line">        mProviders.removeProvider(p);</span><br><span class="line">        <span class="keyword">if</span> (p.info.authority == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1.1】表示系统之前已经有相同 authority 的 provider，那么这个应用的 provider 是不会注册的！</span></span><br><span class="line">            <span class="comment">// 对于没有注册的 provider 不处理！</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String names[] = p.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mProvidersByAuthority.get(names[j]) == p) &#123;</span><br><span class="line">                mProvidersByAuthority.remove(names[j]);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chatty)</span><br><span class="line">                        Log.d(TAG, <span class="string">"Unregistered content provider: "</span> + names[j]</span><br><span class="line">                                + <span class="string">", className = "</span> + p.info.name + <span class="string">", isSyncable = "</span></span><br><span class="line">                                + p.info.isSyncable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Providers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】移除 service！</span></span><br><span class="line">    N = pkg.services.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Service s = pkg.services.get(i);</span><br><span class="line">        mServices.removeService(s);</span><br><span class="line">        <span class="keyword">if</span> (chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(s.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Services: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】移除 receiver！</span></span><br><span class="line">    N = pkg.receivers.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.receivers.get(i);</span><br><span class="line">        mReceivers.removeActivity(a, <span class="string">"receiver"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Receivers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】移除 activity！</span></span><br><span class="line">    N = pkg.activities.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.activities.get(i);</span><br><span class="line">        mActivities.removeActivity(a, <span class="string">"activity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Activities: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】移除定义的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！</span></span><br><span class="line">    N = pkg.permissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Permission p = pkg.permissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(p.info.name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bp = mSettings.mPermissionTrees.get(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; bp.perm == p) &#123;</span><br><span class="line">            bp.perm = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r.append(<span class="string">' '</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                r.append(p.info.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((p.info.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(p.info.name);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】移除请求的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！！</span></span><br><span class="line">    N = pkg.requestedPermissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        String perm = pkg.requestedPermissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(perm);</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; (bp.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(perm);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">                <span class="keyword">if</span> (appOpPkgs.isEmpty()) &#123;</span><br><span class="line">                    mAppOpPermissionPackages.remove(perm);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】移除请求的 instrumentation！</span></span><br><span class="line">    N = pkg.instrumentation.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Instrumentation a = pkg.instrumentation.get(i);</span><br><span class="line">        mInstrumentation.remove(a.getComponentName());</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Instrumentation: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【8】移除 SharedLibraries！</span></span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pkg.applicationInfo.flags&amp;ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Only system apps can hold shared libraries.</span></span><br><span class="line">        <span class="keyword">if</span> (pkg.libraryNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pkg.libraryNames.size(); i++) &#123;</span><br><span class="line">                String name = pkg.libraryNames.get(i);</span><br><span class="line">                SharedLibraryEntry cur = mSharedLibraries.get(name);</span><br><span class="line">                <span class="keyword">if</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.apk != <span class="keyword">null</span> &amp;&amp; cur.apk.equals(pkg.packageName)) &#123;</span><br><span class="line">                    mSharedLibraries.remove(name);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            r.append(<span class="string">' '</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        r.append(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Libraries: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该阶段的逻辑比较简单，不多说了！</p><h4 id="6-2-1-2-destroyAppDataLIF-gt-Leaf"><a href="#6-2-1-2-destroyAppDataLIF-gt-Leaf" class="headerlink" title="6.2.1.2 destroyAppDataLIF -&gt;[Leaf]"></a>6.2.1.2 destroyAppDataLIF -&gt;[Leaf]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】删除父包的数据！！</span></span><br><span class="line">    destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【2】删除子包的数据！</span></span><br><span class="line">        destroyAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得该应用的安装信息 PackageSetting ！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> realUserId : resolveUserIds(userId)) &#123;</span><br><span class="line">        <span class="comment">//【2】获得要删除的状态信息目录：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = (ps != <span class="keyword">null</span>) ? ps.getCeDataInode(realUserId) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3】调用了 Installd 删除指定目录！</span></span><br><span class="line">            mInstaller.destroyAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags,</span><br><span class="line">                    ceDataInode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, String.valueOf(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里使用了 PackageSetting.getCeDataInode 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getCeDataInode</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).ceDataInode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法返回的是 PackageUserState.ceDataInode 的值！</p><h4 id="6-2-1-4-schedulePackageCleaning"><a href="#6-2-1-4-schedulePackageCleaning" class="headerlink" title="6.2.1.4 schedulePackageCleaning"></a>6.2.1.4 schedulePackageCleaning</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedulePackageCleaning</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> andCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.2.1.1.3.1】这里会发送一个 START_CLEANING_PACKAGE 的消息给 PackageHandler ！</span></span><br><span class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(START_CLEANING_PACKAGE,</span><br><span class="line">            userId, andCode ? <span class="number">1</span> : <span class="number">0</span>, packageName);</span><br><span class="line">    <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">        msg.sendToTarget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPostSystemReadyMessages == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPostSystemReadyMessages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mPostSystemReadyMessages.add(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-4-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE"><a href="#6-2-1-4-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE" class="headerlink" title="6.2.1.4.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]"></a>6.2.1.4.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> START_CLEANING_PACKAGE: &#123;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="keyword">final</span> String packageName = (String)msg.obj;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = msg.arg1;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> andCode = msg.arg2 != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] users = sUserManager.getUserIds();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">                <span class="comment">//【1】将 package 加入到 Settings 内部的 mPackagesToBeCleaned 集合中！</span></span><br><span class="line">                mSettings.addPackageToCleanLPw(</span><br><span class="line">                        <span class="keyword">new</span> PackageCleanItem(user, packageName, andCode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mSettings.addPackageToCleanLPw(</span><br><span class="line">                    <span class="keyword">new</span> PackageCleanItem(userId, packageName, andCode));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="comment">//【*6.2.1.4.2】开始清理操作！</span></span><br><span class="line">    startCleaningPackages();</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-4-2-startCleaningPackages"><a href="#6-2-1-4-2-startCleaningPackages" class="headerlink" title="6.2.1.4.2 startCleaningPackages"></a>6.2.1.4.2 startCleaningPackages</h5><p>执行扩展存储清理操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startCleaningPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">if</span> (!isExternalMediaAvailable()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mSettings.mPackagesToBeCleaned.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】发送 action PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE！</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE);</span><br><span class="line">    <span class="comment">//【2】目标组件服务：DefaultContainerService</span></span><br><span class="line">    intent.setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">    IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">    <span class="keyword">if</span> (am != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【2.1】启动服务！</span></span><br><span class="line">            am.startService(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, mContext.getOpPackageName(),</span><br><span class="line">                    UserHandle.USER_SYSTEM);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入 DefaultContainerService.onHandleIntent 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE.equals(intent.getAction())) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageManager pm = IPackageManager.Stub.asInterface(</span><br><span class="line">                ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line">        PackageCleanItem item = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((item = pm.nextPackageToClean(item)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserEnvironment userEnv = <span class="keyword">new</span> UserEnvironment(item.userId);</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppDataDirs(item.packageName));</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppMediaDirs(item.packageName));</span><br><span class="line">                <span class="keyword">if</span> (item.andCode) &#123;</span><br><span class="line">                    eraseFiles(userEnv.buildExternalStorageAppObbDirs(item.packageName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的逻辑就不多说了！</p><h4 id="6-2-1-5-Settings-removePackageLPw"><a href="#6-2-1-5-Settings-removePackageLPw" class="headerlink" title="6.2.1.5 Settings.removePackageLPw"></a>6.2.1.5 Settings.removePackageLPw</h4><p>移除该 pkg 的安装信息：PackageSetting！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removePackageLPw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting p = mPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】从 mPackages 中移除该 PackageSetting！！</span></span><br><span class="line">        mPackages .remove(name);</span><br><span class="line">        <span class="comment">//【*6.2.1.5.1】如果其实 installer，还要修改和其相关的其他 pkg 的属性！</span></span><br><span class="line">        removeInstallerPackageStatus(name);</span><br><span class="line">        <span class="comment">//【3】如果 pkg 是共享 uid，要解除相互引用！</span></span><br><span class="line">        <span class="keyword">if</span> (p.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.sharedUser.removePackage(p);</span><br><span class="line">            <span class="keyword">if</span> (p.sharedUser.packages.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                mSharedUsers.remove(p.sharedUser.name);</span><br><span class="line">                <span class="comment">//【3.1-review】从相关集合中删除该 ps！</span></span><br><span class="line">                removeUserIdLPw(p.sharedUser.userId);</span><br><span class="line">                <span class="keyword">return</span> p.sharedUser.userId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1-review】从相关集合中删除该 ps！</span></span><br><span class="line">            removeUserIdLPw(p.appId);</span><br><span class="line">            <span class="keyword">return</span> p.appId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法最后会返回 pkg 的 appID!</p><h5 id="6-2-1-5-1-Settings-removeInstallerPackageStatus"><a href="#6-2-1-5-1-Settings-removeInstallerPackageStatus" class="headerlink" title="6.2.1.5.1 Settings.removeInstallerPackageStatus"></a>6.2.1.5.1 Settings.removeInstallerPackageStatus</h5><p>如果该 pkg 是 installer，那么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeInstallerPackageStatus</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果岂不是 installer，返回！</span></span><br><span class="line">    <span class="keyword">if</span> (!mInstallerPackages.contains(packageName)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果其是 installer，那么需要找到所有由其安装的 pkg，设置其属性！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPackages.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mPackages.valueAt(i);</span><br><span class="line">        <span class="keyword">final</span> String installerPackageName = ps.getInstallerPackageName();</span><br><span class="line">        <span class="keyword">if</span> (installerPackageName != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; installerPackageName.equals(packageName)) &#123;</span><br><span class="line">            <span class="comment">//【2.1】置空其 InstallerPackageName 属性，同时设置 ps.isOrphaned 为 ture！ </span></span><br><span class="line">            ps.setInstallerPackageName(<span class="keyword">null</span>);</span><br><span class="line">            ps.isOrphaned = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】从 mInstallerPackages 中移除该 pkg！</span></span><br><span class="line">    mInstallerPackages.remove(packageName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！！</p><h3 id="6-2-2-createInstallArgsForExisting-用于卸载-apk"><a href="#6-2-2-createInstallArgsForExisting-用于卸载-apk" class="headerlink" title="6.2.2 createInstallArgsForExisting - 用于卸载 apk"></a>6.2.2 createInstallArgsForExisting - 用于卸载 apk</h3><p>这里是针对已存在的应用创建一个 InstallArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallArgs <span class="title">createInstallArgsForExisting</span><span class="params">(<span class="keyword">int</span> installFlags, String codePath,</span></span></span><br><span class="line"><span class="function"><span class="params">        String resourcePath, String[] instructionSets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isInAsec;</span><br><span class="line">    <span class="keyword">if</span> (installOnExternalAsec(installFlags)) &#123;</span><br><span class="line">        <span class="comment">//【1】如果是安装到外置的，那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installForwardLocked(installFlags)</span><br><span class="line">            &amp;&amp; !codePath.startsWith(mDrmAppPrivateInstallDir.getAbsolutePath())) &#123;</span><br><span class="line">        <span class="comment">//【2】对于 forward lock 安装，如果目录是 drm app pri</span></span><br><span class="line">        <span class="comment">// 那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isInAsec = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInAsec) &#123;</span><br><span class="line">        <span class="comment">//【3】创建 AsecInstallArgs 安装参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsecInstallArgs(codePath, instructionSets,</span><br><span class="line">                installOnExternalAsec(installFlags), installForwardLocked(installFlags));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*6.2.2.1.1】一般情况下，会创建 FileInstallArgs，这里通过 FileInstallArgs 的另一构造器</span></span><br><span class="line">        <span class="comment">// 创建了实例，描述一个已经存在的 app！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInstallArgs(codePath, resourcePath, instructionSets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又回到了 5.5.3.1 的 FileInstallArgs 的相关创建！</p><h4 id="6-2-2-1-FileInstallArgs"><a href="#6-2-2-1-FileInstallArgs" class="headerlink" title="6.2.2.1 FileInstallArgs"></a>6.2.2.1 FileInstallArgs</h4><h5 id="6-2-2-1-1-new-FileInstallArgs"><a href="#6-2-2-1-1-new-FileInstallArgs" class="headerlink" title="6.2.2.1.1 new FileInstallArgs"></a>6.2.2.1.1 new FileInstallArgs</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title">InstallArgs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File codeFile;</span><br><span class="line">    <span class="keyword">private</span> File resourceFile;</span><br><span class="line">    <span class="comment">// Example topology:</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/base.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/split_foo.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm64/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/dalvik/arm/base.apk@classes.dex</span></span><br><span class="line">    <span class="comment">//【1】安装一个新的 apk！</span></span><br><span class="line">    FileInstallArgs(InstallParams params) &#123;</span><br><span class="line">        <span class="keyword">super</span>(params.origin, params.move, params.observer, params.installFlags,</span><br><span class="line">                params.installerPackageName, params.volumeUuid,</span><br><span class="line">                params.getUser(), <span class="keyword">null</span> <span class="comment">/*instructionSets*/</span>, params.packageAbiOverride,</span><br><span class="line">                params.grantedRuntimePermissions,</span><br><span class="line">                params.traceMethod, params.traceCookie, params.certificates);</span><br><span class="line">        <span class="comment">//【1.1】这里校验了下是否是  Forward Locked 的！</span></span><br><span class="line">        <span class="keyword">if</span> (isFwdLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Forward locking only supported in ASEC"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】用于描述已存在的一个安装，显然，这里调用的是这个构造器！</span></span><br><span class="line">    FileInstallArgs(String codePath, String resourcePath, String[] instructionSets) &#123;</span><br><span class="line">        <span class="keyword">super</span>(OriginInfo.fromNothing(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, instructionSets,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span> <span class="comment">/*certificates*/</span>);</span><br><span class="line">        <span class="keyword">this</span>.codeFile = (codePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(codePath) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.resourceFile = (resourcePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(resourcePath) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 FileInstallArgs 有两个构造器！</p><p>一参数构造器用于创建安装过程中的 InstallArgs！</p><p>三参数构造器，用于描述一个已存在的安装，主要用于清除旧的安装，或者作为移动应用的时候的源数据，我们在 pms 开机初始化的过程中就已经看到过了！</p><h5 id="6-2-2-1-2-doPostDeleteLI"><a href="#6-2-2-1-2-doPostDeleteLI" class="headerlink" title="6.2.2.1.2 doPostDeleteLI"></a>6.2.2.1.2 doPostDeleteLI</h5><p>继续来看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">doPostDeleteLI</span><span class="params">(<span class="keyword">boolean</span> delete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.2.2.1.3】清楚 apk 文件 和 dex 文件！</span></span><br><span class="line">    cleanUpResourcesLI();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续分析：</p><h5 id="6-2-2-1-3-cleanUpResourcesLI"><a href="#6-2-2-1-3-cleanUpResourcesLI" class="headerlink" title="6.2.2.1.3 cleanUpResourcesLI"></a>6.2.2.1.3 cleanUpResourcesLI</h5><p>继续分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanUpResourcesLI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; allCodePaths = Collections.EMPTY_LIST;</span><br><span class="line">    <span class="keyword">if</span> (codeFile != <span class="keyword">null</span> &amp;&amp; codeFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1】收集 apk path！</span></span><br><span class="line">            <span class="keyword">final</span> PackageLite pkg = PackageParser.parsePackageLite(codeFile, <span class="number">0</span>);</span><br><span class="line">            allCodePaths = pkg.getAllCodePaths();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="comment">// Ignored; we tried our best</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】清除 apk 文件，调用 mInstaller.rmPackageDir 删除！</span></span><br><span class="line">    cleanUp();</span><br><span class="line">    <span class="comment">//【3】清除 dex files，调用 mInstaller.rmdex 删除！</span></span><br><span class="line">    removeDexFiles(allCodePaths, instructionSets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="7-remove-split-apk-移除-split（模块）apk"><a href="#7-remove-split-apk-移除-split（模块）apk" class="headerlink" title="7 remove split apk - 移除 split（模块）apk"></a>7 remove split apk - 移除 split（模块）apk</h1><p>在最上面的分析中，我们知道，如果要删除的是 split apk，那么会进入另外一个接口，这个接口和 install 的流程很类似，我们在这里做一下分析：</p><p>因为和 install 有很多相似之处，所以我省略掉一些无关紧要的代码段！！</p><h2 id="7-1-PackageInstallerService"><a href="#7-1-PackageInstallerService" class="headerlink" title="7.1 PackageInstallerService"></a>7.1 PackageInstallerService</h2><h3 id="7-1-1-createSession-Internal-创建事务"><a href="#7-1-1-createSession-Internal-创建事务" class="headerlink" title="7.1.1 createSession(Internal) - 创建事务"></a>7.1.1 createSession(Internal) - 创建事务</h3><p>创建事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】继续来看！</span></span><br><span class="line">        <span class="keyword">return</span> createSessionInternal(params, installerPackageName, userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createSession 方法调用了 createSessionInternal 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createSessionInternal</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】权限检查！</span></span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"createSession"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】用户操作检查！</span></span><br><span class="line">    <span class="keyword">if</span> (mPm.isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"User restriction prevents installing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果调用进程的 uid 是 SHELL_UID 或者 ROOT_UID，那么 installFlags 增加爱你 INSTALL_FROM_ADB</span></span><br><span class="line">    <span class="comment">// 表示通过 adb 进行安装！</span></span><br><span class="line">    <span class="keyword">if</span> ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) &#123;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_FROM_ADB;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是 shell or root，校验下 package 是否属于 uid，</span></span><br><span class="line">        mAppOps.checkPackage(callingUid, installerPackageName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取消 INSTALL_FROM_ADB 和 INSTALL_ALL_USERS 标志位，设置 INSTALL_REPLACE_EXISTING 标志位！</span></span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_FROM_ADB;</span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果 installFlags 设置了 INSTALL_GRANT_RUNTIME_PERMISSIONS 标志位，那需要判断调用者是否有 </span></span><br><span class="line">    <span class="comment">// INSTALL_GRANT_RUNTIME_PERMISSIONS 权限！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission</span><br><span class="line">            .INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"You need the "</span></span><br><span class="line">                + <span class="string">"android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission "</span></span><br><span class="line">                + <span class="string">"to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】调整应用的 icon 图标！</span></span><br><span class="line">    <span class="keyword">if</span> (params.appIcon != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityManager am = (ActivityManager) mContext.getSystemService(</span><br><span class="line">                Context.ACTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> iconSize = am.getLauncherLargeIconSize();</span><br><span class="line">        <span class="keyword">if</span> ((params.appIcon.getWidth() &gt; iconSize * <span class="number">2</span>)</span><br><span class="line">                || (params.appIcon.getHeight() &gt; iconSize * <span class="number">2</span>)) &#123;</span><br><span class="line">            params.appIcon = Bitmap.createScaledBitmap(params.appIcon, iconSize, iconSize,</span><br><span class="line">                    <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】检查 mode 取值是否正确！</span></span><br><span class="line">    <span class="keyword">switch</span> (params.mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_FULL_INSTALL:</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_INHERIT_EXISTING:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid install mode: "</span> + params.mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】根据 installFlags 设置，调整安装位置，如果用户显示设置了位置，系统会对其进行检查，否则</span></span><br><span class="line">    <span class="comment">// 系统会选择合适的位置！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.1】如果显式指定内置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnInternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable internal storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.2】如果显式指定外置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnExternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable external storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_FORCE_VOLUME_UUID) != <span class="number">0</span>) &#123;</span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【7.4】默认情况下，进入这里，setInstallFlagsInternal 方法会设置 INSTALL_INTERNAL 标志位</span></span><br><span class="line">        <span class="comment">// 取消 INSTALL_EXTERNAL 标志位！</span></span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line">        <span class="comment">// 选择最好的位置来安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            params.volumeUuid = PackageHelper.resolveInstallVolume(mContext,</span><br><span class="line">                    params.appPackageName, params.installLocation, params.sizeBytes);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId;</span><br><span class="line">    <span class="keyword">final</span> PackageInstallerSession session;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【7.5-review】判断，同一个 uid 是否有过多的正在处理的 Session，如果超过了 1024 个，那就不能安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> activeCount = getSessionCount(mSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (activeCount &gt;= MAX_ACTIVE_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many active sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同样，判断同一个 uid，是否已经提交了过多的 Session，如果超过了 1048576 个，那当前就不能执行安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> historicalCount = getSessionCount(mHistoricalSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (historicalCount &gt;= MAX_HISTORICAL_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many historical sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7.6-review】给本次安装分配一个事务 id！</span></span><br><span class="line">        sessionId = allocateSessionIdLocked();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> createdMillis = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【8】决定安装目录，因为默认是内置空间，这里会直接进入 buildStageDir 方法！</span></span><br><span class="line">    File stageDir = <span class="keyword">null</span>;</span><br><span class="line">    String stageCid = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【8.1-review】创建文件临时目录；/data/app/vmdl[sessionId].tmp！</span></span><br><span class="line">        stageDir = buildStageDir(params.volumeUuid, sessionId, isEphemeral);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是外置，会直接返回 "smdl" + sessionId + ".tmp"</span></span><br><span class="line">        stageCid = buildExternalStageCid(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.2.1-review】创建 PackageInstallerSession 对象！</span></span><br><span class="line">    session = <span class="keyword">new</span> PackageInstallerSession(mInternalCallback, mContext, mPm,</span><br><span class="line">            mInstallThread.getLooper(), sessionId, userId, installerPackageName, callingUid,</span><br><span class="line">            params, createdMillis, stageDir, stageCid, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【8】将新创建的 PackageInstallerSession 添加到 mSessions 集合中！</span></span><br><span class="line">        mSessions.put(sessionId, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*9-review】通知有新的事务创建了，这里是直接回调 Callback 的接口！！</span></span><br><span class="line">    mCallbacks.notifySessionCreated(session.sessionId, session.userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*10-review】持久化事务 Session！</span></span><br><span class="line">    writeSessionsAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程和 install 很像，我们可以大胆推测，其在移除了 split apk 后，还会把主 apk 再 install 一次！！</p><h3 id="7-1-2-openSession-获得事务"><a href="#7-1-2-openSession-获得事务" class="headerlink" title="7.1.2 openSession - 获得事务"></a>7.1.2 openSession - 获得事务</h3><p>openSession 方法可以获得 id 对应的 PackageInstallerSession！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPackageInstallerSession <span class="title">openSession</span><span class="params">(<span class="keyword">int</span> sessionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×7.1.2.1】调用另外一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> openSessionInternal(sessionId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7-1-2-1-openSessionInternal"><a href="#7-1-2-1-openSessionInternal" class="headerlink" title="7.1.2.1 openSessionInternal"></a>7.1.2.1 openSessionInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IPackageInstallerSession <span class="title">openSessionInternal</span><span class="params">(<span class="keyword">int</span> sessionId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageInstallerSession session = mSessions.get(sessionId);</span><br><span class="line">        <span class="comment">//【1-review】判断 uid 是否被允许获得该事务！</span></span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || !isCallingUidOwner(session)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Caller has no access to session "</span> + sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        session.open();</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-PackageInstallerSession"><a href="#7-2-PackageInstallerSession" class="headerlink" title="7.2 PackageInstallerSession"></a>7.2 PackageInstallerSession</h2><h3 id="7-2-1-new-PackageInstallerSession-事务实例"><a href="#7-2-1-new-PackageInstallerSession-事务实例" class="headerlink" title="7.2.1 new PackageInstallerSession - 事务实例"></a>7.2.1 new PackageInstallerSession - 事务实例</h3><p>创建 PackageInstallerSession，对前面的 SessionParams 再次封装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerSession</span> <span class="keyword">extends</span> <span class="title">IPackageInstallerSession</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerSession</span><span class="params">(PackageInstallerService.InternalCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, PackageManagerService pm, Looper looper, <span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            String installerPackageName, <span class="keyword">int</span> installerUid, SessionParams params, <span class="keyword">long</span> createdMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">            File stageDir, String stageCid, <span class="keyword">boolean</span> prepared, <span class="keyword">boolean</span> sealed)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1-review】InternalCallback 回调！</span></span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mPm = pm;</span><br><span class="line">        <span class="comment">//【2】创建 Handler 绑定到子线程 mInstallThread，该子线程是在 PackageInstallerService 构造器中创建的！</span></span><br><span class="line">        <span class="comment">//【2.1-review】这里通过 mHandlerCallback 指定了一个回调函数！</span></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler(looper, mHandlerCallback);</span><br><span class="line">        <span class="comment">//【3】基本属性保存</span></span><br><span class="line">        <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.installerPackageName = installerPackageName;</span><br><span class="line">        <span class="keyword">this</span>.installerUid = installerUid;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.createdMillis = createdMillis;</span><br><span class="line">        <span class="keyword">this</span>.stageDir = stageDir; <span class="comment">// 内置临时目录：/data/app/vmdl[sessionId].tmp；</span></span><br><span class="line">        <span class="keyword">this</span>.stageCid = stageCid; <span class="comment">// 默认为 null；</span></span><br><span class="line">        <span class="keyword">if</span> ((stageDir == <span class="keyword">null</span>) == (stageCid == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Exactly one of stageDir or stageCid stage must be set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrepared = prepared; <span class="comment">// 传入 false；</span></span><br><span class="line">        mSealed = sealed; <span class="comment">// 传入 false；</span></span><br><span class="line">        <span class="comment">//【4】获得 DevicePolicyManager 对象，用于静默安装相关的判断，如果是安装者是设备拥有者，</span></span><br><span class="line">        <span class="comment">// 可以不检查权限，直接静默安装！</span></span><br><span class="line">        DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">                Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">        <span class="comment">//【5】校验安装者 uid 是否有 INSTALL_PACKAGES 权限！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPermissionGranted =</span><br><span class="line">                (mPm.checkUidPermission(android.Manifest.permission.INSTALL_PACKAGES, installerUid)</span><br><span class="line">                        == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">        <span class="comment">//【6】安装者是否是 root 用户！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isInstallerRoot = (installerUid == Process.ROOT_UID);</span><br><span class="line">        <span class="comment">//【7】是否强制提醒！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> forcePermissionPrompt =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_FORCE_PERMISSION_PROMPT) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【8】安装者是否是设备拥有者自身！</span></span><br><span class="line">        mIsInstallerDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">                installerPackageName);</span><br><span class="line">        <span class="comment">//【8】如果 mPermissionsAccepted 为 true，那么我们就可以静默安装！</span></span><br><span class="line">        <span class="keyword">if</span> ((isPermissionGranted</span><br><span class="line">                        || isInstallerRoot</span><br><span class="line">                        || mIsInstallerDeviceOwner)</span><br><span class="line">                &amp;&amp; !forcePermissionPrompt) &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> uid = mPm.getPackageUid(PackageManagerService.DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">                    PackageManager.MATCH_SYSTEM_ONLY, UserHandle.USER_SYSTEM);</span><br><span class="line">            defaultContainerGid = UserHandle.getSharedAppGid(uid);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到 PackageInstallerSession 除了用来表示一个 Session 之外，由于继承了 IPackageInstallerSession.Stub，因此其还可以作为服务端的桩对象，进行跨进程的通信！</p><h3 id="7-2-2-removeSplit"><a href="#7-2-2-removeSplit" class="headerlink" title="7.2.2 removeSplit"></a>7.2.2 removeSplit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSplit</span><span class="params">(String splitName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先如果要卸载 split apk，必须指定 parent pkg！</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(params.appPackageName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Must specify package name to remove a split"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*7.2.3】创建一个 mark 标记，来记录那些需要被移除的 split apk！！</span></span><br><span class="line">        createRemoveSplitMarker(splitName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-3-createRemoveSplitMarker"><a href="#7-2-3-createRemoveSplitMarker" class="headerlink" title="7.2.3 createRemoveSplitMarker"></a>7.2.3 createRemoveSplitMarker</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createRemoveSplitMarker</span><span class="params">(String splitName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】创建了一个标记名称：</span></span><br><span class="line">        <span class="keyword">final</span> String markerName = splitName + REMOVE_SPLIT_MARKER_EXTENSION;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(markerName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid marker: "</span> + markerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】在临时目录下创建创建了一个 "splitName".removed 的文件！</span></span><br><span class="line">        <span class="keyword">final</span> File target = <span class="keyword">new</span> File(resolveStageDir(), markerName);</span><br><span class="line">        target.createNewFile();</span><br><span class="line">        Os.chmod(target.getAbsolutePath(), <span class="number">0</span> <span class="comment">/*mode*/</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowAsIOException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 REMOVE_SPLIT_MARKER_EXTENSION 是一个字符串后缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REMOVE_SPLIT_MARKER_EXTENSION = <span class="string">".removed"</span>;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-1-resolveStageDir"><a href="#7-2-3-1-resolveStageDir" class="headerlink" title="7.2.3.1 resolveStageDir"></a>7.2.3.1 resolveStageDir</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">resolveStageDir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mResolvedStageDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】返回的就是前面的 stageDir！</span></span><br><span class="line">                mResolvedStageDir = stageDir;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> String path = PackageHelper.getSdDir(stageCid);</span><br><span class="line">                <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mResolvedStageDir = <span class="keyword">new</span> File(path);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to resolve path to container "</span> + stageCid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mResolvedStageDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-commitLocked"><a href="#7-2-4-commitLocked" class="headerlink" title="7.2.4 commitLocked"></a>7.2.4 commitLocked</h3><p>按照流程，我们进入了 commitLocked 中：</p><p>参数 PackageInfo pkgInfo 和 ApplicationInfo appInfo 分别表示已经安装的主 apk 的信息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session not sealed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*7.2.3.1】获得 tmp 目录，也就是前面我们的 .removed 文件所在的目录；</span></span><br><span class="line">        resolveStageDir();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_CONTAINER_ERROR,</span><br><span class="line">                <span class="string">"Failed to resolve stage location"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.2.4.1】校验安装有效性！</span></span><br><span class="line">    validateInstallLocked(pkgInfo, appInfo);</span><br><span class="line"></span><br><span class="line">    Preconditions.checkNotNull(mPackageName);</span><br><span class="line">    Preconditions.checkNotNull(mSignatures);</span><br><span class="line">    Preconditions.checkNotNull(mResolvedBaseFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mPermissionsAccepted) &#123; <span class="comment">// 这里我们就跳过，不分析，install 的时候分析过！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);</span><br><span class="line">        intent.setPackage(mContext.getPackageManager().getPermissionControllerPackageName());</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mRemoteObserver.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> finalSize = calculateInstalledSize();</span><br><span class="line">        resizeContainer(stageCid, finalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果安装方式是继承已存在的 apk，那我们要尝试继承！！</span></span><br><span class="line">    <span class="comment">// 显然，对于卸载 split apk 肯定是会走这一步的！！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_INHERIT_EXISTING) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1.1】mResolvedInheritedFiles 中都是需要从之前安装的目录下继承过来的 apk 和 odex 文件；</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;File&gt; fromFiles = mResolvedInheritedFiles;</span><br><span class="line">            <span class="comment">//【1.2】这是我们本次安装的目录；</span></span><br><span class="line">            <span class="keyword">final</span> File toDir = resolveStageDir();</span><br><span class="line">            <span class="keyword">if</span> (LOGD) Slog.d(TAG, <span class="string">"Inherited files: "</span> + mResolvedInheritedFiles);</span><br><span class="line">            <span class="keyword">if</span> (!mResolvedInheritedFiles.isEmpty() &amp;&amp; mInheritedFilesBase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"mInheritedFilesBase == null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【1.3】如果可以直接建立 link 的话，不行的话，就 copy！</span></span><br><span class="line">            <span class="keyword">if</span> (isLinkPossible(fromFiles, toDir)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mResolvedInstructionSets.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(toDir, <span class="string">"oat"</span>);</span><br><span class="line">                    createOatDirs(mResolvedInstructionSets, oatDir);</span><br><span class="line">                &#125;</span><br><span class="line">                linkFiles(fromFiles, toDir, mInheritedFilesBase);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【1.4】拷贝已经安装的 apk 到新目录下！</span></span><br><span class="line">                copyFiles(fromFiles, toDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INSUFFICIENT_STORAGE,</span><br><span class="line">                    <span class="string">"Failed to inherit existing install"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mInternalProgress = <span class="number">0.5f</span>;</span><br><span class="line">    computeProgressLocked(<span class="keyword">true</span>);</span><br><span class="line">    extractNativeLibraries(mResolvedStageDir, params.abiOverride);</span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        finalizeAndFixContainer(stageCid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> IPackageInstallObserver2 localObserver = <span class="keyword">new</span> IPackageInstallObserver2.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                Bundle extras)</span> </span>&#123;；</span><br><span class="line">            destroyInternal();</span><br><span class="line">            dispatchSessionFinished(returnCode, msg, extras);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">final</span> UserHandle user;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_ALL_USERS) != <span class="number">0</span>) &#123;</span><br><span class="line">        user = UserHandle.ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = <span class="keyword">new</span> UserHandle(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    mRelinquished = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】开始安装！</span></span><br><span class="line">    mPm.installStage(mPackageName, stageDir, stageCid, localObserver, params,</span><br><span class="line">            installerPackageName, installerUid, user, mCertificates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于卸载 split apk 的情况：</p><p>可以看到和 install 是一样的，唯独不一样的是，会将之前已经安装的 /data/app/package-Name/ 中除了要卸载的 split apk 以外的其他 apk 拷贝到新创建的目录下，重新安装；</p><h4 id="7-2-4-1-validateInstallLocked"><a href="#7-2-4-1-validateInstallLocked" class="headerlink" title="7.2.4.1 validateInstallLocked"></a>7.2.4.1 validateInstallLocked</h4><p>校验安装有效性，这里的 mResolvedStageDir 就是前面的 /data/app/vmdl[sessionId].tmp 目录！</p><p>removeSplitList 用于表示要删除的 split apk 列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateInstallLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    mPackageName = <span class="keyword">null</span>;</span><br><span class="line">    mVersionCode = -<span class="number">1</span>;</span><br><span class="line">    mSignatures = <span class="keyword">null</span>;</span><br><span class="line">    mResolvedBaseFile = <span class="keyword">null</span>;</span><br><span class="line">    mResolvedStagedFiles.clear();</span><br><span class="line">    mResolvedInheritedFiles.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】返回 /data/app/vmdl[sessionId].tmp 目录下所有的 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 去除后缀，将前缀名保存到 removeSplitList！</span></span><br><span class="line">    <span class="keyword">final</span> File[] removedFiles = mResolvedStageDir.listFiles(sRemovedFilter);</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; removeSplitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!ArrayUtils.isEmpty(removedFiles)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File removedFile : removedFiles) &#123;</span><br><span class="line">            <span class="keyword">final</span> String fileName = removedFile.getName();</span><br><span class="line">            <span class="keyword">final</span> String splitName = fileName.substring(</span><br><span class="line">                    <span class="number">0</span>, fileName.length() - REMOVE_SPLIT_MARKER_EXTENSION.length());</span><br><span class="line">            removeSplitList.add(splitName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】返回 /data/app/vmdl[sessionId].tmp 目录下所有的非 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 并判断是否正常，如果该目录下没有任何 apk 和 .removed 文件，那么抛出异常！</span></span><br><span class="line">    <span class="keyword">final</span> File[] addedFiles = mResolvedStageDir.listFiles(sAddedFilter);</span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.isEmpty(addedFiles) &amp;&amp; removeSplitList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, <span class="string">"No packages staged"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】遍历该目录下的非 .removed 文件，解析其中的 apk 文件，也就是我们之前 copy 到这里的目标文件！</span></span><br><span class="line">    <span class="comment">// 对于卸载 split apk 的情况，显然这里不会进入，因为我们的目录里面只有 .removed 文件！</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;String&gt; stagedSplits = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File addedFile : addedFiles) &#123;</span><br><span class="line">        <span class="keyword">final</span> ApkLite apk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1】解析要安装的 apk，具体的流程这里就不分析了！</span></span><br><span class="line">            apk = PackageParser.parseApkLite(</span><br><span class="line">                    addedFile, PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.2】将其添加到 stagedSplits 中，注意 base.apk 的 apk.splitName 为 null！</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.add(apk.splitName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Split "</span> + apk.splitName + <span class="string">" was defined multiple times"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.3】将第一个被解析 apk 的包名，版本号，签名，证书保存下载，这个目录下的其他 apk </span></span><br><span class="line">        <span class="comment">// 的这几项要和其保持一致！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = apk.packageName;</span><br><span class="line">            mVersionCode = apk.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = apk.signatures;</span><br><span class="line">            mCertificates = apk.certificates;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.4】校验 apk 关联性，校验包名。版本号，签名；</span></span><br><span class="line">        assertApkConsistent(String.valueOf(addedFile), apk);</span><br><span class="line">        <span class="comment">//【3.5】设置 apk 文件的目标名称！</span></span><br><span class="line">        <span class="keyword">final</span> String targetName;</span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetName = <span class="string">"base.apk"</span>; <span class="comment">// 一般情况下！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetName = <span class="string">"split_"</span> + apk.splitName + <span class="string">".apk"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(targetName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Invalid filename: "</span> + targetName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.6】当 addedFile 命名不标准的话，会改名;</span></span><br><span class="line">        <span class="keyword">final</span> File targetFile = <span class="keyword">new</span> File(mResolvedStageDir, targetName);</span><br><span class="line">        <span class="keyword">if</span> (!addedFile.equals(targetFile)) &#123;</span><br><span class="line">            addedFile.renameTo(targetFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.7】找到了 base apk，将其保存到 mResolvedBaseFile！</span></span><br><span class="line">        <span class="comment">// 同时将其添加到 mResolvedStagedFiles 中！</span></span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = targetFile;</span><br><span class="line">        &#125;</span><br><span class="line">        mResolvedStagedFiles.add(targetFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】处理 .removed 文件，此时我们正在卸载 split apk，所以会进入这里！！</span></span><br><span class="line">    <span class="keyword">if</span> (removeSplitList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【4.1】如果找不到该 split apk 文件的话，抛出异常！</span></span><br><span class="line">        <span class="keyword">for</span> (String splitName : removeSplitList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ArrayUtils.contains(pkgInfo.splitNames, splitName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                        <span class="string">"Split not found: "</span> + splitName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4.2】再次获得要安装的应用的包名，版本号，签名！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = pkgInfo.packageName;</span><br><span class="line">            mVersionCode = pkgInfo.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = pkgInfo.signatures;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】处理安装模式！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_FULL_INSTALL) &#123;</span><br><span class="line">        <span class="comment">//【5.1】全量安装必须要有 base.apk</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.contains(<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Full install must include a base package"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.2】部分安装必须基于现有的安装！</span></span><br><span class="line">        <span class="keyword">if</span> (appInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Missing existing base package for "</span> + mPackageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.3】获得已存在的 apk 安装信息！</span></span><br><span class="line">        <span class="keyword">final</span> PackageLite existing;</span><br><span class="line">        <span class="keyword">final</span> ApkLite existingBase;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【5.3.1】对于安装 split apk，我们会解析下已存在的 split apk！！</span></span><br><span class="line">            existing = PackageParser.parsePackageLite(<span class="keyword">new</span> File(appInfo.getCodePath()), <span class="number">0</span>);</span><br><span class="line">            existingBase = PackageParser.parseApkLite(<span class="keyword">new</span> File(appInfo.getBaseCodePath()),</span><br><span class="line">                    PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*4.3.2.1】再次校验要本次要安装的 apk 和已存在的 apk 是有关联，包括包名，签名，版本号！</span></span><br><span class="line">        assertApkConsistent(<span class="string">"Existing base"</span>, existingBase);</span><br><span class="line">        <span class="comment">//【5.4】继承已有的 base apk，如果没有指定安装的 apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (mResolvedBaseFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = <span class="keyword">new</span> File(appInfo.getBaseCodePath());</span><br><span class="line">            mResolvedInheritedFiles.add(mResolvedBaseFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.5】继承已有的 split apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (!ArrayUtils.isEmpty(existing.splitNames)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; existing.splitNames.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> String splitName = existing.splitNames[i];</span><br><span class="line">                <span class="keyword">final</span> File splitFile = <span class="keyword">new</span> File(existing.splitCodePaths[i]);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> splitRemoved = removeSplitList.contains(splitName);</span><br><span class="line">                <span class="keyword">if</span> (!stagedSplits.contains(splitName) &amp;&amp; !splitRemoved) &#123;</span><br><span class="line">                    mResolvedInheritedFiles.add(splitFile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.6】继承已有的 oat 相关文件！！</span></span><br><span class="line">        <span class="keyword">final</span> File packageInstallDir = (<span class="keyword">new</span> File(appInfo.getBaseCodePath())).getParentFile();</span><br><span class="line">        mInheritedFilesBase = packageInstallDir;</span><br><span class="line">        <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(packageInstallDir, <span class="string">"oat"</span>);</span><br><span class="line">        <span class="keyword">if</span> (oatDir.exists()) &#123;</span><br><span class="line">            <span class="keyword">final</span> File[] archSubdirs = oatDir.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (archSubdirs != <span class="keyword">null</span> &amp;&amp; archSubdirs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String[] instructionSets = InstructionSets.getAllDexCodeInstructionSets();</span><br><span class="line">                <span class="keyword">for</span> (File archSubDir : archSubdirs) &#123;</span><br><span class="line">                    <span class="comment">// Skip any directory that isn't an ISA subdir.</span></span><br><span class="line">                    <span class="keyword">if</span> (!ArrayUtils.contains(instructionSets, archSubDir.getName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将要继承的 oat 目录文件名添加到 mResolvedInstructionSets！</span></span><br><span class="line">                    mResolvedInstructionSets.add(archSubDir.getName());</span><br><span class="line">                    List&lt;File&gt; oatFiles = Arrays.asList(archSubDir.listFiles());</span><br><span class="line">                    <span class="keyword">if</span> (!oatFiles.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">// 将要继承的 odex 相关文件添加到 mResolvedInheritedFiles！</span></span><br><span class="line">                        mResolvedInheritedFiles.addAll(oatFiles);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里，我们可以看到。对于卸载 split apk 的情况，我们会收集之前安装的目录下的所有不再 remove 列表中的 apk 文件到 mResolvedInheritedFiles 集合中！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 8 篇 - 通过 PackageInstaller 分析 Install 过程</title>
    <link href="https://coolqi.top/2018/07/23/PMS8-installThroughtPackageInstaller/"/>
    <id>https://coolqi.top/2018/07/23/PMS8-installThroughtPackageInstaller/</id>
    <published>2018-07-22T16:00:00.000Z</published>
    <updated>2018-11-20T16:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的逻辑，Android 版本虽然会不断更替，但是代码结构和思想史</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>前面总结了通过 pm install 的方式来安装一个 apk，但是这种方式用户是不经常使用的，用户使用的安装途径主要如下：</p><ul><li>通过应用商店下载 apk，进行安装；</li><li>将 apk 文件移动到关键管理器，点击触发安装；</li></ul><p>这里我们来看看第二种情况！</p><p>对于第二种中情况，当我们触发安装的时候，实际上是发送了一个 intent，这个 intent 中携带了 apk 的文件路径等参数，在 sample 给出了如下的启动安装的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OnClickListener mUnknownSourceListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_INSTALL_PACKAGE);</span><br><span class="line">        intent.setData(Uri.fromFile(prepareApk(<span class="string">"HelloActivity.apk"</span>)));</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> OnClickListener mMySourceListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_INSTALL_PACKAGE);</span><br><span class="line">        intent.setData(Uri.fromFile(prepareApk(<span class="string">"HelloActivity.apk"</span>)));</span><br><span class="line">        intent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE, <span class="keyword">true</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">true</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,</span><br><span class="line">                getApplicationInfo().packageName);</span><br><span class="line">        startActivityForResult(intent, REQUEST_INSTALL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> OnClickListener mReplaceListener = <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_INSTALL_PACKAGE);</span><br><span class="line">        intent.setData(Uri.fromFile(prepareApk(<span class="string">"HelloActivity.apk"</span>)));</span><br><span class="line">        intent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE, <span class="keyword">true</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">true</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_ALLOW_REPLACE, <span class="keyword">true</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,</span><br><span class="line">                getApplicationInfo().packageName);</span><br><span class="line">        startActivityForResult(intent, REQUEST_INSTALL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那谁来接收这个 intent 呢？显而易见，PacakgeInstaller，我们去其说明书中看看：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".PackageInstallerActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|screenSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:excludeFromRecents</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.INSTALL_PACKAGE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"content"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"application/vnd.android.package-archive"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.INSTALL_PACKAGE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"package"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.content.pm.action.CONFIRM_PERMISSIONS"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到 PackageInstallerActivity 接收了 android.intent.action.INSTALL_PACKAGE action！</p><p>下面我们来分析下整个流程：</p><h1 id="1-PackageInstallerActivity-onCreate"><a href="#1-PackageInstallerActivity-onCreate" class="headerlink" title="1 PackageInstallerActivity.onCreate"></a>1 PackageInstallerActivity.onCreate</h1><p>这里我们进入 PackageInstallerActivity，看看其做了什么处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnCancelListener</span>, <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line"></span><br><span class="line">        mPm = getPackageManager();</span><br><span class="line">        mInstaller = mPm.getPackageInstaller();</span><br><span class="line">        mUserManager = (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】获得安装传入的  Intent！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line">        mOriginatingUid = getOriginatingUid(intent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Uri packageUri;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (PackageInstaller.ACTION_CONFIRM_PERMISSIONS.equals(intent.getAction())) &#123;</span><br><span class="line">            <span class="comment">//【2】这个广播我们在 pm install 中有见过，当 install 需要确认权限信息的时候，会发送 intent</span></span><br><span class="line">            <span class="comment">// 其实是最终发送了这个 action 给 PackageInstaller 中了，同时会把 sessionId 发过来！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> sessionId = intent.getIntExtra(PackageInstaller.EXTRA_SESSION_ID, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">final</span> PackageInstaller.SessionInfo info = mInstaller.getSessionInfo(sessionId);</span><br><span class="line">            <span class="keyword">if</span> (info == <span class="keyword">null</span> || !info.sealed || info.resolvedBaseCodePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Session "</span> + mSessionId + <span class="string">" in funky state; ignoring"</span>);</span><br><span class="line">                finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mSessionId = sessionId;</span><br><span class="line">            packageUri = Uri.fromFile(<span class="keyword">new</span> File(info.resolvedBaseCodePath));</span><br><span class="line">            mOriginatingURI = <span class="keyword">null</span>;</span><br><span class="line">            mReferrerURI = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【3】对于 install package 进入这里，会通过 getData 获得 packageUri！</span></span><br><span class="line">            mSessionId = -<span class="number">1</span>;</span><br><span class="line">            packageUri = intent.getData();</span><br><span class="line">            mOriginatingURI = intent.getParcelableExtra(Intent.EXTRA_ORIGINATING_URI);</span><br><span class="line">            mReferrerURI = intent.getParcelableExtra(Intent.EXTRA_REFERRER);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】如果 packageUri 为 null，那么这里会返回结果给启动安装的界面：INVALID_URI！</span></span><br><span class="line">        <span class="keyword">if</span> (packageUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Unspecified source"</span>);</span><br><span class="line">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DeviceUtils.isWear(<span class="keyword">this</span>)) &#123; <span class="comment">// 可穿戴设备的逻辑，不关注！</span></span><br><span class="line">            showDialogInner(DLG_NOT_SUPPORTED_ON_WEAR);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】初始化界面！</span></span><br><span class="line">        setContentView(R.layout.install_start);</span><br><span class="line">        mInstallConfirm = findViewById(R.id.install_confirm_panel);</span><br><span class="line">        mInstallConfirm.setVisibility(View.INVISIBLE);</span><br><span class="line">        mOk = (Button)findViewById(R.id.ok_button);</span><br><span class="line">        mCancel = (Button)findViewById(R.id.cancel_button);</span><br><span class="line">        mOk.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mCancel.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*1.1】解析传入的 packageUri！</span></span><br><span class="line">        <span class="keyword">boolean</span> wasSetUp = processPackageUri(packageUri);</span><br><span class="line">        <span class="keyword">if</span> (!wasSetUp) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*1.2】解析传入的 packageUri！</span></span><br><span class="line">        checkIfAllowedAndInitiateInstall(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 PackageInstallerActivity 方法实现了 OnCancelListener, OnClickListener，用于响应界面事件。。。</p><h2 id="1-1-processPackageUri"><a href="#1-1-processPackageUri" class="headerlink" title="1.1 processPackageUri"></a>1.1 processPackageUri</h2><p>解析 Uri 被为要安装的 apk 设置合适的 installer，如果返回 true，表示设置成功了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processPackageUri</span><span class="params">(<span class="keyword">final</span> Uri packageUri)</span> </span>&#123;</span><br><span class="line">    mPackageURI = packageUri;</span><br><span class="line">    <span class="comment">//【1】获得 scheme 属性，对应资源使用的协议！</span></span><br><span class="line">    <span class="keyword">final</span> String scheme = packageUri.getScheme();</span><br><span class="line">    <span class="keyword">final</span> PackageUtil.AppSnippet as;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (scheme) &#123;</span><br><span class="line">        <span class="keyword">case</span> SCHEME_PACKAGE: &#123; <span class="comment">//【1.1】package 类型!！</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mPkgInfo = mPm.getPackageInfo(packageUri.getSchemeSpecificPart(),</span><br><span class="line">                        PackageManager.GET_PERMISSIONS</span><br><span class="line">                                | PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPkgInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Requested package "</span> + packageUri.getScheme()</span><br><span class="line">                        + <span class="string">" not available. Discontinuing installation"</span>);</span><br><span class="line">                <span class="comment">//【*6/3】应用包异常，提示用户！</span></span><br><span class="line">                showDialogInner(DLG_PACKAGE_ERROR);</span><br><span class="line">                setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*1.1.2.1】创建 AppSnippet 实例！</span></span><br><span class="line">            as = <span class="keyword">new</span> PackageUtil.AppSnippet(mPm.getApplicationLabel(mPkgInfo.applicationInfo),</span><br><span class="line">                    mPm.getApplicationIcon(mPkgInfo.applicationInfo));</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SCHEME_FILE: &#123; <span class="comment">//【1.2】file 类型</span></span><br><span class="line">            File sourceFile = <span class="keyword">new</span> File(packageUri.getPath());</span><br><span class="line">            <span class="comment">//【*1.1.1】对 path 指定的 apk 进行解析，其实是创建了一个 PackageParser 对象，然后扫描 apk</span></span><br><span class="line">            <span class="comment">// 将结果封装为 PackageParser.Package 并返回！</span></span><br><span class="line">            PackageParser.Package parsed = PackageUtil.getPackageInfo(sourceFile);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (parsed == <span class="keyword">null</span>) &#123; <span class="comment">// 发生了 error！</span></span><br><span class="line">                Log.w(TAG, <span class="string">"Parse error when parsing manifest. Discontinuing installation"</span>);</span><br><span class="line">                <span class="comment">//【*6/3】应用包异常，提示用户！</span></span><br><span class="line">                showDialogInner(DLG_PACKAGE_ERROR);</span><br><span class="line">                setPmResult(PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*1.1.2】将解析到的 Package 转为 PackageInfo 对象！</span></span><br><span class="line">            <span class="comment">// 除了获取到了基本信息，这里还额外指定了获取该应用的定义的权限和申请的权限信息！</span></span><br><span class="line">            mPkgInfo = PackageParser.generatePackageInfo(parsed, <span class="keyword">null</span>,</span><br><span class="line">                    PackageManager.GET_PERMISSIONS, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> PackageUserState());</span><br><span class="line">            <span class="comment">//【*1.1.3】获得 apk 的 AppSnippet 实例！</span></span><br><span class="line">            as = PackageUtil.getAppSnippet(<span class="keyword">this</span>, mPkgInfo.applicationInfo, sourceFile);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SCHEME_CONTENT: &#123; <span class="comment">//【1.3】content 类型</span></span><br><span class="line">            mStagingAsynTask = <span class="keyword">new</span> StagingAsyncTask();</span><br><span class="line">            mStagingAsynTask.execute(packageUri);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="comment">//【1.4】不支持的资源协议，默认会进入这里！</span></span><br><span class="line">            Log.w(TAG, <span class="string">"Unsupported scheme "</span> + scheme);</span><br><span class="line">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class="line">            clearCachedApkIfNeededAndFinish();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.1.4】继续处理 AppSnippet 实例！</span></span><br><span class="line">    PackageUtil.initSnippetForNewApp(<span class="keyword">this</span>, as, R.id.app_snippet);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于安装文件管理器的 apk 的方式，其 scheme 值为 file，所以这里</p><p>对于 package 的解析流程，这里就不再多说了；</p><p>而 generatePackageInfo 方法的逻辑也很简单，flags 可以通过设置指定的位来获取特定的数据！</p><h3 id="1-1-1-PackageUtil-getPackageInfo"><a href="#1-1-1-PackageUtil-getPackageInfo" class="headerlink" title="1.1.1 PackageUtil.getPackageInfo"></a>1.1.1 PackageUtil.getPackageInfo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PackageParser.<span class="function">Package <span class="title">getPackageInfo</span><span class="params">(File sourceFile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageParser parser = <span class="keyword">new</span> PackageParser();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parser.parsePackage(sourceFile, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-PackageParser-generatePackageInfo"><a href="#1-1-2-PackageParser-generatePackageInfo" class="headerlink" title="1.1.2 PackageParser.generatePackageInfo"></a>1.1.2 PackageParser.generatePackageInfo</h3><p>将解析到的 Package 封装为指定的 PackageInfo 对象，除了基本的信息之外，还有通过 flags 指定的额外信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageInfo <span class="title">generatePackageInfo</span><span class="params">(PackageParser.Package p,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> gids[], <span class="keyword">int</span> flags, <span class="keyword">long</span> firstInstallTime, <span class="keyword">long</span> lastUpdateTime,</span></span></span><br><span class="line"><span class="function"><span class="params">        Set&lt;String&gt; grantedPermissions, PackageUserState state, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkUseInstalledOrHidden(flags, state) || !p.isMatch(flags)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】创建一个 PackageInfo 实例！</span></span><br><span class="line">    PackageInfo pi = <span class="keyword">new</span> PackageInfo();</span><br><span class="line">    pi.packageName = p.packageName;</span><br><span class="line">    pi.splitNames = p.splitNames;</span><br><span class="line">    pi.versionCode = p.mVersionCode;</span><br><span class="line">    pi.baseRevisionCode = p.baseRevisionCode;</span><br><span class="line">    pi.splitRevisionCodes = p.splitRevisionCodes;</span><br><span class="line">    pi.versionName = p.mVersionName;</span><br><span class="line">    pi.sharedUserId = p.mSharedUserId;</span><br><span class="line">    pi.sharedUserLabel = p.mSharedUserLabel;</span><br><span class="line">    pi.applicationInfo = generateApplicationInfo(p, flags, state, userId);</span><br><span class="line">    pi.installLocation = p.installLocation;</span><br><span class="line">    pi.coreApp = p.coreApp;</span><br><span class="line">    <span class="keyword">if</span> ((pi.applicationInfo.flags&amp;ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span></span><br><span class="line">            || (pi.applicationInfo.flags&amp;ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>) &#123;</span><br><span class="line">        pi.requiredForAllUsers = p.mRequiredForAllUsers;</span><br><span class="line">    &#125;</span><br><span class="line">    pi.restrictedAccountType = p.mRestrictedAccountType;</span><br><span class="line">    pi.requiredAccountType = p.mRequiredAccountType;</span><br><span class="line">    pi.overlayTarget = p.mOverlayTarget;</span><br><span class="line">    pi.firstInstallTime = firstInstallTime;</span><br><span class="line">    pi.lastUpdateTime = lastUpdateTime;</span><br><span class="line"></span><br><span class="line">    ... ... ... ... <span class="comment">// 这里省略了其他的 flags 处理！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】获得应用的权限信息 GET_PERMISSIONS！</span></span><br><span class="line">    <span class="keyword">if</span> ((flags&amp;PackageManager.GET_PERMISSIONS) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【2.1】获得其定义的权限；</span></span><br><span class="line">        <span class="keyword">int</span> N = p.permissions.size();</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pi.permissions = <span class="keyword">new</span> PermissionInfo[N];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">                pi.permissions[i] = generatePermissionInfo(p.permissions.get(i), flags);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2.2】获得其申请的权限；</span></span><br><span class="line">        N = p.requestedPermissions.size();</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pi.requestedPermissions = <span class="keyword">new</span> String[N];</span><br><span class="line">            pi.requestedPermissionsFlags = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> String perm = p.requestedPermissions.get(i);</span><br><span class="line">                pi.requestedPermissions[i] = perm;</span><br><span class="line">                <span class="comment">//【2.2.1】更新申请的权限的 flags，设置 REQUESTED_PERMISSION_REQUIRED 标志位！</span></span><br><span class="line">                <span class="comment">// 如果该权限已经被授予，那么还会增加 REQUESTED_PERMISSION_GRANTED 标志位！</span></span><br><span class="line">                pi.requestedPermissionsFlags[i] |= PackageInfo.REQUESTED_PERMISSION_REQUIRED;</span><br><span class="line">                <span class="keyword">if</span> (grantedPermissions != <span class="keyword">null</span> &amp;&amp; grantedPermissions.contains(perm)) &#123;</span><br><span class="line">                    pi.requestedPermissionsFlags[i] |= PackageInfo.REQUESTED_PERMISSION_GRANTED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了几个标志位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示该权限是应用程序运行必备的，用户不能 disable！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTED_PERMISSION_REQUIRED = <span class="number">1</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 权限是否已经授予！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTED_PERMISSION_GRANTED = <span class="number">1</span>&lt;&lt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这两个标签都是在 generatePackageInfo 方法中，配合 GET_PERMISSIONS 方法使用！</p><h3 id="1-1-3-PackageUtil-getAppSnippet"><a href="#1-1-3-PackageUtil-getAppSnippet" class="headerlink" title="1.1.3 PackageUtil.getAppSnippet"></a>1.1.3 PackageUtil.getAppSnippet</h3><p>这个方法用于加载应用的 label 和 icon：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppSnippet <span class="title">getAppSnippet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Activity pContext, ApplicationInfo appInfo, File sourceFile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String archiveFilePath = sourceFile.getAbsolutePath();</span><br><span class="line">    Resources pRes = pContext.getResources();</span><br><span class="line">    AssetManager assmgr = <span class="keyword">new</span> AssetManager();</span><br><span class="line">    <span class="comment">//【1】设置资源加载路径！</span></span><br><span class="line">    assmgr.addAssetPath(archiveFilePath);</span><br><span class="line">    Resources res = <span class="keyword">new</span> Resources(assmgr, pRes.getDisplayMetrics(), pRes.getConfiguration());</span><br><span class="line">    CharSequence label = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】尝试先从资源文件中加载 label！</span></span><br><span class="line">    <span class="keyword">if</span> (appInfo.labelRes != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            label = res.getText(appInfo.labelRes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Resources.NotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果没有显式定义的话，那么就会使用包名；</span></span><br><span class="line">    <span class="keyword">if</span> (label == <span class="keyword">null</span>) &#123;</span><br><span class="line">        label = (appInfo.nonLocalizedLabel != <span class="keyword">null</span>) ?</span><br><span class="line">                appInfo.nonLocalizedLabel : appInfo.packageName;</span><br><span class="line">    &#125;</span><br><span class="line">    Drawable icon = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//【4】尝试从资源文件获取图标，如果没有定义，那么我们会从系统中获取默认图标！</span></span><br><span class="line">    <span class="keyword">if</span> (appInfo.icon != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            icon = res.getDrawable(appInfo.icon);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Resources.NotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (icon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        icon = pContext.getPackageManager().getDefaultActivityIcon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*1.1.2.1】创建了一个 AppSnippet 对象！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PackageUtil.AppSnippet(label, icon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-1-new-AppSnippet"><a href="#1-1-2-1-new-AppSnippet" class="headerlink" title="1.1.2.1 new AppSnippet"></a>1.1.2.1 new AppSnippet</h4><p>AppSnippet 用于保存 apk 的 label 和 icon：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSnippet</span> </span>&#123;</span><br><span class="line">    CharSequence label;</span><br><span class="line">    Drawable icon;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppSnippet</span><span class="params">(CharSequence label, Drawable icon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">        <span class="keyword">this</span>.icon = icon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-PackageUtil-initSnippetForNewApp"><a href="#1-1-4-PackageUtil-initSnippetForNewApp" class="headerlink" title="1.1.4 PackageUtil.initSnippetForNewApp"></a>1.1.4 PackageUtil.initSnippetForNewApp</h3><p>根据返回的 AppSnippet，初始化界面，显示应用的名称和 label：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> View <span class="title">initSnippetForNewApp</span><span class="params">(Activity pContext, AppSnippet as,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> snippetId)</span> </span>&#123;</span><br><span class="line">    View appSnippet = pContext.findViewById(snippetId);</span><br><span class="line">    ((ImageView)appSnippet.findViewById(R.id.app_icon)).setImageDrawable(as.icon);</span><br><span class="line">    ((TextView)appSnippet.findViewById(R.id.app_name)).setText(as.label);</span><br><span class="line">    <span class="keyword">return</span> appSnippet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-checkIfAllowedAndInitiateInstall"><a href="#1-2-checkIfAllowedAndInitiateInstall" class="headerlink" title="1.2 checkIfAllowedAndInitiateInstall"></a>1.2 checkIfAllowedAndInitiateInstall</h2><p>用于判断是否允许安装，如果允许安装，那就进行初始化；否则会弹出提示框，参数 ignoreUnknownSourcesSettings 表示是否忽视未知来源安装，这里我们传入的是 false；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkIfAllowedAndInitiateInstall</span><span class="params">(<span class="keyword">boolean</span> ignoreUnknownSourcesSettings)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*1.2.1】判断本次安装是否是来自未知来源！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> requestFromUnknownSource = isInstallRequestFromUnknownSource(getIntent());</span><br><span class="line">    <span class="keyword">if</span> (!requestFromUnknownSource) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.6】如果是特权应用发送的安装，那么就初始化安装！</span></span><br><span class="line">        initiateInstall();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】判断当前所在 user 是否是在另外一个 user 的 profile 中！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isManagedProfile = mUserManager.isManagedProfile();</span><br><span class="line">    <span class="comment">//【*1.2.2】判断当前用户是否设置了不允许位置来源的用户限制！</span></span><br><span class="line">    <span class="keyword">if</span> (isUnknownSourcesDisallowed()) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((mUserManager.getUserRestrictionSource(UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES,</span><br><span class="line">                Process.myUserHandle()) &amp; UserManager.RESTRICTION_SOURCE_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ignoreUnknownSourcesSettings) &#123;</span><br><span class="line">                <span class="comment">//【*1.2.6】如果忽视未知来源，初始化安装！</span></span><br><span class="line">                initiateInstall();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*6/1】显示 DLG_UNKNOWN_SOURCES 弹窗！</span></span><br><span class="line">                showDialogInner(DLG_UNKNOWN_SOURCES);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(Settings.ACTION_SHOW_ADMIN_SUPPORT_DETAILS));</span><br><span class="line">            clearCachedApkIfNeededAndFinish();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isUnknownSourcesEnabled() &amp;&amp; isManagedProfile) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.3】如果没有设置用户限制，但是用户关闭了设置中的可未知来源安装</span></span><br><span class="line">        <span class="comment">// 同时当前用户是在另外用户的 profile 中！</span></span><br><span class="line">        <span class="comment">// 显示 DLG_ADMIN_RESTRICTS_UNKNOWN_SOURCES 弹窗！</span></span><br><span class="line">        <span class="comment">//【*6/2】提示用户！</span></span><br><span class="line">        showDialogInner(DLG_ADMIN_RESTRICTS_UNKNOWN_SOURCES);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isUnknownSourcesEnabled()) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.3】如果用户关闭了设置中的可未知来源安装，并且我们忽视位置来源</span></span><br><span class="line">        <span class="comment">// 那么就立刻初始化！</span></span><br><span class="line">        <span class="keyword">if</span> (ignoreUnknownSourcesSettings) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.6】初始化安装！</span></span><br><span class="line">            initiateInstall();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*6/1】显示 DLG_UNKNOWN_SOURCES 弹窗！</span></span><br><span class="line">            showDialogInner(DLG_UNKNOWN_SOURCES);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*1.2.6】如果不是来自未知来源的安装，那么就初始化安装！</span></span><br><span class="line">        initiateInstall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-isInstallRequestFromUnknownSource"><a href="#1-2-1-isInstallRequestFromUnknownSource" class="headerlink" title="1.2.1 isInstallRequestFromUnknownSource"></a>1.2.1 isInstallRequestFromUnknownSource</h3><p>判断本次安装是否来自未知来源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInstallRequestFromUnknownSource</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    String callerPackage = getCallingPackage();</span><br><span class="line">    <span class="comment">//【1】判断 intent 是否设置 EXTRA_NOT_UNKNOWN_SOURCE 为 true！</span></span><br><span class="line">    <span class="keyword">if</span> (callerPackage != <span class="keyword">null</span> &amp;&amp; intent.getBooleanExtra(</span><br><span class="line">            Intent.EXTRA_NOT_UNKNOWN_SOURCE, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mSourceInfo = mPm.getApplicationInfo(callerPackage, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (mSourceInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((mSourceInfo.privateFlags &amp; ApplicationInfo.PRIVATE_FLAG_PRIVILEGED)</span><br><span class="line">                        != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1.1】如果设置了为 true，只有特权应用发起安装时才不会视为未知来源；</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】其他情况，无论你是否设置，都会视为未知来源！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-isUnknownSourcesDisallowed"><a href="#1-2-2-isUnknownSourcesDisallowed" class="headerlink" title="1.2.2 isUnknownSourcesDisallowed"></a>1.2.2 isUnknownSourcesDisallowed</h3><p>判断下当前设备用户是否限制来自未知来源的安装，也就是是否设置了 DISALLOW_INSTALL_UNKNOWN_SOURCES 用户限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnknownSourcesDisallowed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mUserManager.hasUserRestriction(UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-isUnknownSourcesEnabled"><a href="#1-2-3-isUnknownSourcesEnabled" class="headerlink" title="1.2.3 isUnknownSourcesEnabled"></a>1.2.3 isUnknownSourcesEnabled</h3><p>判断用户是否在设置中打开了位置来源限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnknownSourcesEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Settings.Secure.getInt(getContentResolver(),</span><br><span class="line">            Settings.Secure.INSTALL_NON_MARKET_APPS, <span class="number">0</span>) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-6-initiateInstall"><a href="#1-2-6-initiateInstall" class="headerlink" title="1.2.6 initiateInstall"></a>1.2.6 initiateInstall</h3><p>初始化安装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initiateInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得要安装的应用包名！</span></span><br><span class="line">    String pkgName = mPkgInfo.packageName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】判断下系统中是否存在该 pkg，但是被改为了其他名称，如果有，这里要调整下！</span></span><br><span class="line">    String[] oldName = mPm.canonicalToCurrentPackageNames(<span class="keyword">new</span> String[] &#123; pkgName &#125;);</span><br><span class="line">    <span class="keyword">if</span> (oldName != <span class="keyword">null</span> &amp;&amp; oldName.length &gt; <span class="number">0</span> &amp;&amp; oldName[<span class="number">0</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pkgName = oldName[<span class="number">0</span>];</span><br><span class="line">        mPkgInfo.packageName = pkgName;</span><br><span class="line">        mPkgInfo.applicationInfo.packageName = pkgName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】判断该 pkg 是否已经安装过，如果是，弹出 replace 的弹窗；</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3.1】这里通过 GET_UNINSTALLED_PACKAGES 标志为获得该应用的安装信息</span></span><br><span class="line">        <span class="comment">// 如果该应用在系统中只有 data 数据，我们也会将其视为已经安装！</span></span><br><span class="line">        mAppInfo = mPm.getApplicationInfo(pkgName,</span><br><span class="line">                PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">        <span class="comment">//【3.2】判断是否有 FLAG_INSTALLED 标志为，如果没有，那就是没有安装过！</span></span><br><span class="line">        <span class="keyword">if</span> ((mAppInfo.flags&amp;ApplicationInfo.FLAG_INSTALLED) == <span class="number">0</span>) &#123;</span><br><span class="line">            mAppInfo = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">        mAppInfo = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2】继续处理：</span></span><br><span class="line">    startInstallConfirm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-PackageInstallerActivity-startInstallConfirm"><a href="#2-PackageInstallerActivity-startInstallConfirm" class="headerlink" title="2 PackageInstallerActivity.startInstallConfirm"></a>2 PackageInstallerActivity.startInstallConfirm</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startInstallConfirm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】初始化界面；</span></span><br><span class="line">    ((TextView) findViewById(R.id.install_confirm_question))</span><br><span class="line">            .setText(R.string.install_confirm_question);</span><br><span class="line">    findViewById(R.id.spacer).setVisibility(View.GONE);</span><br><span class="line">    TabHost tabHost = (TabHost)findViewById(android.R.id.tabhost);</span><br><span class="line">    tabHost.setup();</span><br><span class="line">    tabHost.setVisibility(View.VISIBLE);</span><br><span class="line">    ViewPager viewPager = (ViewPager)findViewById(R.id.pager);</span><br><span class="line">    TabsAdapter adapter = <span class="keyword">new</span> TabsAdapter(<span class="keyword">this</span>, tabHost, viewPager);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】判断应用是否支持运行时权限！</span></span><br><span class="line">    <span class="keyword">boolean</span> supportsRuntimePermissions = mPkgInfo.applicationInfo.targetSdkVersion</span><br><span class="line">            &gt;= Build.VERSION_CODES.M;</span><br><span class="line">    <span class="keyword">boolean</span> permVisible = <span class="keyword">false</span>;</span><br><span class="line">    mScrollView = <span class="keyword">null</span>;</span><br><span class="line">    mOkCanInstall = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> msg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*2.1】创建了一个 AppSecurityPermissions 实例，封装 apk 的权限</span></span><br><span class="line">    AppSecurityPermissions perms = <span class="keyword">new</span> AppSecurityPermissions(<span class="keyword">this</span>, mPkgInfo);</span><br><span class="line">    <span class="comment">//【*2.2】获得应用的申请的所有权限数量！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = perms.getPermissionCount(AppSecurityPermissions.WHICH_ALL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】初始化界面，这里会用 mScrollView 来显示所有的权限信息，mAppInfo 不为 null，说明应用</span></span><br><span class="line">    <span class="comment">// 之前安装过！</span></span><br><span class="line">    <span class="keyword">if</span> (mAppInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        msg = (mAppInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span></span><br><span class="line">                ? R.string.install_confirm_question_update_system</span><br><span class="line">                : R.string.install_confirm_question_update;</span><br><span class="line">        mScrollView = <span class="keyword">new</span> CaffeinatedScrollView(<span class="keyword">this</span>);</span><br><span class="line">        mScrollView.setFillViewport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> newPermissionsFound = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.1】不支持运行时权限，这里会尝试先获取该应用的一些新的权限；</span></span><br><span class="line">        <span class="keyword">if</span> (!supportsRuntimePermissions) &#123;</span><br><span class="line">             <span class="comment">//【*2.2】获得应用的申请的所有被视为新的权限的数量！</span></span><br><span class="line">            newPermissionsFound =</span><br><span class="line">                    (perms.getPermissionCount(AppSecurityPermissions.WHICH_NEW) &gt; <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (newPermissionsFound) &#123;</span><br><span class="line">                permVisible = <span class="keyword">true</span>;</span><br><span class="line">                mScrollView.addView(perms.getPermissionsView(</span><br><span class="line">                        AppSecurityPermissions.WHICH_NEW));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.2】不支持运行时权限，同时没有新的申请的权限；</span></span><br><span class="line">        <span class="keyword">if</span> (!supportsRuntimePermissions &amp;&amp; !newPermissionsFound) &#123;</span><br><span class="line">            LayoutInflater inflater = (LayoutInflater)getSystemService(</span><br><span class="line">                    Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">            TextView label = (TextView)inflater.inflate(R.layout.label, <span class="keyword">null</span>);</span><br><span class="line">            label.setText(R.string.no_new_perms);</span><br><span class="line">            mScrollView.addView(label);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.3】这里会通过 tabHost 新增一个页面，用于显示申请的新增权限！</span></span><br><span class="line">        adapter.addTab(tabHost.newTabSpec(TAB_ID_NEW).setIndicator(</span><br><span class="line">                getText(R.string.newPerms)), mScrollView);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        findViewById(R.id.tabscontainer).setVisibility(View.GONE);</span><br><span class="line">        findViewById(R.id.spacer).setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】如果不支持运行时权限，那么这里会处理申请的所有的权限！</span></span><br><span class="line">    <span class="keyword">if</span> (!supportsRuntimePermissions &amp;&amp; N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        permVisible = <span class="keyword">true</span>;</span><br><span class="line">        LayoutInflater inflater = (LayoutInflater)getSystemService(</span><br><span class="line">                Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">        View root = inflater.inflate(R.layout.permissions_list, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mScrollView = (CaffeinatedScrollView)root.findViewById(R.id.scrollview);</span><br><span class="line">        &#125;</span><br><span class="line">        ((ViewGroup)root.findViewById(R.id.permission_list)).addView(</span><br><span class="line">                    perms.getPermissionsView(AppSecurityPermissions.WHICH_ALL));</span><br><span class="line">        <span class="comment">//【4】这里会通过 tabHost 新增一个页面，用于显示申请的所有的权限！</span></span><br><span class="line">        adapter.addTab(tabHost.newTabSpec(TAB_ID_ALL).setIndicator(</span><br><span class="line">                getText(R.string.allPerms)), root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】如果 permVisible 说明该应用没有要显示给用户的权限；</span></span><br><span class="line">    <span class="keyword">if</span> (!permVisible) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mAppInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【4.1】处理应用覆盖安装的情况，设置 msg 为没有 update_system_no_perms 或 update_no_perms！</span></span><br><span class="line">            <span class="comment">// 这是资源 id，会在界面显示！</span></span><br><span class="line">            msg = (mAppInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span></span><br><span class="line">                    ? R.string.install_confirm_question_update_system_no_perms</span><br><span class="line">                    : R.string.install_confirm_question_update_no_perms;</span><br><span class="line"></span><br><span class="line">            findViewById(R.id.spacer).setVisibility(View.VISIBLE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4.1】处理应用全新安装的情况，设置 msg 为 no_perms，同上！</span></span><br><span class="line">            msg = R.string.install_confirm_question_no_perms;</span><br><span class="line">        &#125;</span><br><span class="line">        tabHost.setVisibility(View.INVISIBLE);</span><br><span class="line">        mScrollView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg != <span class="number">0</span>) &#123;</span><br><span class="line">        ((TextView)findViewById(R.id.install_confirm_question)).setText(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    mInstallConfirm.setVisibility(View.VISIBLE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【6】设置安装 button 可以点击！</span></span><br><span class="line">    mOk.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【6.1】如果不需要用 mScrollView 显示内容，那就直接显示安装</span></span><br><span class="line">        mOk.setText(R.string.install);</span><br><span class="line">        mOkCanInstall = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【6.2】如果要显示权限信息，那么需要用户滚动界面，看完所有的权限信息</span></span><br><span class="line">        <span class="comment">// 安装 button 才可用！</span></span><br><span class="line">        mScrollView.setFullScrollAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mOk.setText(R.string.install);</span><br><span class="line">                mOkCanInstall = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了，继续看！</p><h2 id="2-1-new-AppSecurityPermissions"><a href="#2-1-new-AppSecurityPermissions" class="headerlink" title="2.1 new AppSecurityPermissions"></a>2.1 new AppSecurityPermissions</h2><p>AppSecurityPermissions 有多个构造器，这里调用了 AppSecurityPermissions 的双参构造函数，同时 AppSecurityPermissions 内部也有很多的成员变量，我们来分析下：</p><p>这里的 PackageInfo info 表示的是本次要安装的应用程序的 PackageInfo 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSecurityPermissions</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppSecurityPermissions</span><span class="params">(Context context, PackageInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context);</span><br><span class="line">        <span class="comment">//【1】创建了一个 Set 集合用于收集权限</span></span><br><span class="line">        Set&lt;MyPermissionInfo&gt; permSet = <span class="keyword">new</span> HashSet&lt;MyPermissionInfo&gt;();</span><br><span class="line">        <span class="keyword">if</span>(info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mPackageName = info.packageName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】用于保存已经安装的相同包名应用的信息！</span></span><br><span class="line">        PackageInfo installedPkgInfo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】如果应用有申请权限，那么就查询已经安装的同名应用（如果有）</span></span><br><span class="line">        <span class="comment">// 对应的权限信息，收集到 installedPkgInfo 中！</span></span><br><span class="line">        <span class="keyword">if</span> (info.requestedPermissions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                installedPkgInfo = mPm.getPackageInfo(info.packageName,</span><br><span class="line">                        PackageManager.GET_PERMISSIONS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*2.1.1】这里会比较本次安装的应用和已经安装的旧应用（如果有）的权限，做相应处理</span></span><br><span class="line">            <span class="comment">// 最后将权限保存到 permSet 集合中！</span></span><br><span class="line">            extractPerms(info, permSet, installedPkgInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】如果其是共享 uid 的，那么就要获得该 uid 的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (info.sharedUserId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sharedUid;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sharedUid = mPm.getUidForSharedUser(info.sharedUserId);</span><br><span class="line">                <span class="comment">//【*2.1.2】获得该 shared uid 的权限信息！</span></span><br><span class="line">                getAllUsedPermissions(sharedUid, permSet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Couldn't retrieve shared user id for: "</span> + info.packageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】将搜集到的权限 set 集合加到 mPermsList 中！</span></span><br><span class="line">        mPermsList.addAll(permSet);</span><br><span class="line">        <span class="comment">//【*2.1.3】进一步设置权限！</span></span><br><span class="line">        setPermissions(mPermsList);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppSecurityPermissions 中有如下重要变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】所属的所有的权限组，组名和 MyPermissionGroupInfo 的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MyPermissionGroupInfo&gt; mPermGroups</span><br><span class="line">        = <span class="keyword">new</span> HashMap&lt;String, MyPermissionGroupInfo&gt;();</span><br><span class="line"><span class="comment">//【2】所属的所有的权限组；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;MyPermissionGroupInfo&gt; mPermGroupsList</span><br><span class="line">        = <span class="keyword">new</span> ArrayList&lt;MyPermissionGroupInfo&gt;();</span><br><span class="line"><span class="comment">//【3】用于给权限组排序；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PermissionGroupInfoComparator mPermGroupComparator =</span><br><span class="line">        <span class="keyword">new</span> PermissionGroupInfoComparator();</span><br><span class="line"><span class="comment">//【4】用于给权限排序；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PermissionInfoComparator mPermComparator = <span class="keyword">new</span> PermissionInfoComparator();</span><br><span class="line"><span class="comment">//【5】应用请求的权限信息！</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;MyPermissionInfo&gt; mPermsList = <span class="keyword">new</span> ArrayList&lt;MyPermissionInfo&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CharSequence mNewPermPrefix;</span><br><span class="line"><span class="keyword">private</span> String mPackageName;</span><br></pre></td></tr></table></figure><p>我们后面分析的时候会遇到！</p><h3 id="2-1-1-AppSecurityPermissions-extractPerms"><a href="#2-1-1-AppSecurityPermissions-extractPerms" class="headerlink" title="2.1.1 AppSecurityPermissions.extractPerms"></a>2.1.1 AppSecurityPermissions.extractPerms</h3><p>这里会比较本次安装的应用和已经安装的旧应用（如果有）的权限，做相应处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">extractPerms</span><span class="params">(PackageInfo info, Set&lt;MyPermissionInfo&gt; permSet,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageInfo installedPkgInfo)</span> </span>&#123;</span><br><span class="line">    String[] strList = info.requestedPermissions;</span><br><span class="line">    <span class="keyword">int</span>[] flagsList = info.requestedPermissionsFlags;</span><br><span class="line">    <span class="keyword">if</span> ((strList == <span class="keyword">null</span>) || (strList.length == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】遍历处理权限！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;strList.length; i++) &#123;</span><br><span class="line">        String permName = strList[i];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1.1】获得权限对应的 PermissionInfo 对象 tmpPermInfo，如果为 null 跳过！</span></span><br><span class="line">            PermissionInfo tmpPermInfo = mPm.getPermissionInfo(permName, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmpPermInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【1.2】判断新安装的应用的权限在已经安装的应用（如果有）中是否存在，如果有 existingIndex 不为 -1；</span></span><br><span class="line">            <span class="comment">// existingIndex 为其在已经安装的应用的权限列表中的下标！</span></span><br><span class="line">            <span class="keyword">int</span> existingIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (installedPkgInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; installedPkgInfo.requestedPermissions != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;installedPkgInfo.requestedPermissions.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (permName.equals(installedPkgInfo.requestedPermissions[j])) &#123;</span><br><span class="line">                        existingIndex = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【1.3】判断下该权限在已经安装的应用中的权限标志位；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> existingFlags = existingIndex &gt;= <span class="number">0</span> ?</span><br><span class="line">                    installedPkgInfo.requestedPermissionsFlags[existingIndex] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*2.1.1.1】判断该权限是否需要在界面给用户显示出来，不需要的话那就跳过该权限；</span></span><br><span class="line">            <span class="keyword">if</span> (!isDisplayablePermission(tmpPermInfo, flagsList[i], existingFlags)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【1.4】处理权限组名，默认为包名！</span></span><br><span class="line">            <span class="keyword">final</span> String origGroupName = tmpPermInfo.group;</span><br><span class="line">            String groupName = origGroupName;</span><br><span class="line">            <span class="keyword">if</span> (groupName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                groupName = tmpPermInfo.packageName;</span><br><span class="line">                tmpPermInfo.group = groupName;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【1.5】获得/创建权限所属的权限组！</span></span><br><span class="line">            MyPermissionGroupInfo group = mPermGroups.get(groupName);</span><br><span class="line">            <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">                PermissionGroupInfo grp = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (origGroupName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    grp = mPm.getPermissionGroupInfo(origGroupName, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1.5.1】如果权限指定了所属的组，那么我们就查询组信息</span></span><br><span class="line">                    <span class="comment">// 然后创建 MyPermissionGroupInfo 实例，祖名为定义权限的包名！！</span></span><br><span class="line">                    group = <span class="keyword">new</span> MyPermissionGroupInfo(grp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【1.5.2】如果权限没有指定所属的组，或者组无法查到，那么我们就</span></span><br><span class="line">                    <span class="comment">// 新建 MyPermissionGroupInfo 实例.，默认权限组名为权限定义的包名！</span></span><br><span class="line">                    tmpPermInfo.group = tmpPermInfo.packageName;</span><br><span class="line">                    group = mPermGroups.get(tmpPermInfo.group);</span><br><span class="line">                    <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        group = <span class="keyword">new</span> MyPermissionGroupInfo(tmpPermInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                    group = <span class="keyword">new</span> MyPermissionGroupInfo(tmpPermInfo);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.5.3】将该组加入到内部集合 mPermGroups 中！</span></span><br><span class="line">                mPermGroups.put(tmpPermInfo.group, group);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【1.6】判断该权限是否是一个新的权限，如果应用已经被安装了，同时并没有被授予该权限！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> newPerm = installedPkgInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (existingFlags&amp;PackageInfo.REQUESTED_PERMISSION_GRANTED) == <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×2.1.1.3】创建一个 MyPermissionInfo 对象，封装该权限信息；</span></span><br><span class="line">            MyPermissionInfo myPerm = <span class="keyword">new</span> MyPermissionInfo(tmpPermInfo);</span><br><span class="line">            myPerm.mNewReqFlags = flagsList[i];</span><br><span class="line">            myPerm.mExistingReqFlags = existingFlags;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This is a new permission if the app is already installed and</span></span><br><span class="line">            <span class="comment">// doesn't currently hold this permission.</span></span><br><span class="line">            myPerm.mNew = newPerm;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【1.7】将该权限加入到内部集合 permSet 中；</span></span><br><span class="line">            permSet.add(myPerm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Ignoring unknown permission:"</span>+permName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。。</p><h4 id="2-1-1-1-AppSecurityPermissions-isDisplayablePermission"><a href="#2-1-1-1-AppSecurityPermissions-isDisplayablePermission" class="headerlink" title="2.1.1.1 AppSecurityPermissions.isDisplayablePermission"></a>2.1.1.1 AppSecurityPermissions.isDisplayablePermission</h4><p>isDisplayablePermission 用于判断哪些权限会在界面中显示，那些不显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDisplayablePermission</span><span class="params">(PermissionInfo pInfo, <span class="keyword">int</span> newReqFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> existingReqFlags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得基本权限类型；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> base = pInfo.protectionLevel &amp; PermissionInfo.PROTECTION_MASK_BASE;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isNormal = (base == PermissionInfo.PROTECTION_NORMAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果是 normal 权限类型，那么我们不会在界面显示，返回 false；</span></span><br><span class="line">    <span class="keyword">if</span> (isNormal) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】新应用的该权限是否是 dangerous 类型的权限；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isDangerous = (base == PermissionInfo.PROTECTION_DANGEROUS)</span><br><span class="line">            || ((pInfo.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_PRE23) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//【3】新应用的该权限是否是运行必须的；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isRequired =</span><br><span class="line">            ((newReqFlags&amp;PackageInfo.REQUESTED_PERMISSION_REQUIRED) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//【4】新应用的该权限是否是 development 的签名权限！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isDevelopment =</span><br><span class="line">            ((pInfo.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_DEVELOPMENT) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//【5】已存在的应用的该权限是否是被授予的！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasGranted =</span><br><span class="line">            ((existingReqFlags&amp;PackageInfo.REQUESTED_PERMISSION_GRANTED) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//【6】新应用的该权限是否是授予的！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isGranted =</span><br><span class="line">            ((newReqFlags&amp;PackageInfo.REQUESTED_PERMISSION_GRANTED) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】如果该权限是 dangerous 的，那必须给用户显示出来！！</span></span><br><span class="line">    <span class="keyword">if</span> (isDangerous &amp;&amp; (isRequired || wasGranted || isGranted)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【8】如果 development 的权限，并且已存在的应用的该权限是被授予的，</span></span><br><span class="line">    <span class="comment">// 那么我们会给用户显示出来！</span></span><br><span class="line">    <span class="keyword">if</span> (isDevelopment &amp;&amp; wasGranted) &#123;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Log.i(TAG, <span class="string">"Special perm "</span> + pInfo.name</span><br><span class="line">                + <span class="string">": protlevel=0x"</span> + Integer.toHexString(pInfo.protectionLevel));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="2-1-1-2-new-MyPermissionGroupInfo"><a href="#2-1-1-2-new-MyPermissionGroupInfo" class="headerlink" title="2.1.1.2 new MyPermissionGroupInfo"></a>2.1.1.2 new MyPermissionGroupInfo</h4><p>创建一个权限组对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPermissionGroupInfo</span> <span class="keyword">extends</span> <span class="title">PermissionGroupInfo</span> </span>&#123;</span><br><span class="line">    CharSequence mLabel;</span><br><span class="line">    <span class="comment">// 所有属于该权限组的该应用申请的被视为新的权限（很绕口我知道。。）</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;MyPermissionInfo&gt; mNewPermissions = <span class="keyword">new</span> ArrayList&lt;MyPermissionInfo&gt;();</span><br><span class="line">    <span class="comment">// 所有属于该权限组的该应用申请的权限</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;MyPermissionInfo&gt; mAllPermissions = <span class="keyword">new</span> ArrayList&lt;MyPermissionInfo&gt;();</span><br><span class="line"></span><br><span class="line">    MyPermissionGroupInfo(PermissionInfo perm) &#123;</span><br><span class="line">        name = perm.packageName; <span class="comment">// 权限组名；</span></span><br><span class="line">        packageName = perm.packageName; <span class="comment">// 所属包名；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyPermissionGroupInfo(PermissionGroupInfo info) &#123;</span><br><span class="line">        <span class="keyword">super</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">loadGroupIcon</span><span class="params">(Context context, PackageManager pm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (icon != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadUnbadgedIcon(pm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> context.getDrawable(R.drawable.ic_perm_device_info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-3-new-MyPermissionInfo"><a href="#2-1-1-3-new-MyPermissionInfo" class="headerlink" title="2.1.1.3 new MyPermissionInfo"></a>2.1.1.3 new MyPermissionInfo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPermissionInfo</span> <span class="keyword">extends</span> <span class="title">PermissionInfo</span> </span>&#123;</span><br><span class="line">    CharSequence mLabel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新安装的应用的该权限标志位，值来自 requestedPermissionsFlags</span></span><br><span class="line">    <span class="keyword">int</span> mNewReqFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经被安装的应用（如果有）的该权限标志位，值来自 requestedPermissionsFlags</span></span><br><span class="line">    <span class="keyword">int</span> mExistingReqFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断该应用是否被视为一个新的权限！</span></span><br><span class="line">    <span class="keyword">boolean</span> mNew;</span><br><span class="line"></span><br><span class="line">    MyPermissionInfo(PermissionInfo info) &#123;</span><br><span class="line">        <span class="keyword">super</span>(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-AppSecurityPermissions-getAllUsedPermissions"><a href="#2-1-2-AppSecurityPermissions-getAllUsedPermissions" class="headerlink" title="2.1.2 AppSecurityPermissions.getAllUsedPermissions"></a>2.1.2 AppSecurityPermissions.getAllUsedPermissions</h3><p>获得共享 uid 的权限！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAllUsedPermissions</span><span class="params">(<span class="keyword">int</span> sharedUid, Set&lt;MyPermissionInfo&gt; permSet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得所有共享了该 uid 的 pkg！</span></span><br><span class="line">    String sharedPkgList[] = mPm.getPackagesForUid(sharedUid);</span><br><span class="line">    <span class="keyword">if</span>(sharedPkgList == <span class="keyword">null</span> || (sharedPkgList.length == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.1.2.1】获得其 request 的权限！</span></span><br><span class="line">    <span class="keyword">for</span>(String sharedPkg : sharedPkgList) &#123;</span><br><span class="line">        getPermissionsForPackage(sharedPkg, permSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-1-AppSecurityPermissions-getPermissionsForPackage"><a href="#2-1-2-1-AppSecurityPermissions-getPermissionsForPackage" class="headerlink" title="2.1.2.1 AppSecurityPermissions.getPermissionsForPackage"></a>2.1.2.1 AppSecurityPermissions.getPermissionsForPackage</h4><p>继续处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getPermissionsForPackage</span><span class="params">(String packageName, Set&lt;MyPermissionInfo&gt; permSet)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得该 packageName 对应的应用程序！</span></span><br><span class="line">        PackageInfo pkgInfo = mPm.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);</span><br><span class="line">        <span class="comment">//【*2.1.1】又调用了 extractPerms 方法！</span></span><br><span class="line">        extractPerms(pkgInfo, permSet, pkgInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Couldn't retrieve permissions for package: "</span> + packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="2-1-3-AppSecurityPermissions-setPermissions"><a href="#2-1-3-AppSecurityPermissions-setPermissions" class="headerlink" title="2.1.3 AppSecurityPermissions.setPermissions"></a>2.1.3 AppSecurityPermissions.setPermissions</h3><p>设置权限，将权限设置到对应的权限组中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPermissions</span><span class="params">(List&lt;MyPermissionInfo&gt; permList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】将申请的权限加入对应的 group 中！</span></span><br><span class="line">    <span class="keyword">if</span> (permList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MyPermissionInfo pInfo : permList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(localLOGV) Log.i(TAG, <span class="string">"Processing permission:"</span>+pInfo.name);</span><br><span class="line">            <span class="comment">//【*2.1.1.1】调用 isDisplayablePermission 判断权限是否不用显示给用户！</span></span><br><span class="line">            <span class="keyword">if</span>(!isDisplayablePermission(pInfo, pInfo.mNewReqFlags, pInfo.mExistingReqFlags)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(localLOGV) Log.i(TAG, <span class="string">"Permission:"</span>+pInfo.name+<span class="string">" is not displayable"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【1.2】将要申请的权限加入到对应的权限中！</span></span><br><span class="line">            MyPermissionGroupInfo group = mPermGroups.get(pInfo.group);</span><br><span class="line">            <span class="keyword">if</span> (group != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pInfo.mLabel = pInfo.loadLabel(mPm);</span><br><span class="line">                <span class="comment">//【*2.1.3.1】添加到 group.mAllPermissions 内部集合中；</span></span><br><span class="line">                addPermToList(group.mAllPermissions, pInfo);</span><br><span class="line">                <span class="keyword">if</span> (pInfo.mNew) &#123;</span><br><span class="line">                    <span class="comment">//【*2.1.3.1】添加到 group.mNewPermissions 内部集合中；</span></span><br><span class="line">                    addPermToList(group.mNewPermissions, pInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】设置每个权限组的 label！</span></span><br><span class="line">    <span class="keyword">for</span> (MyPermissionGroupInfo pgrp : mPermGroups.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pgrp.labelRes != <span class="number">0</span> || pgrp.nonLocalizedLabel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pgrp.mLabel = pgrp.loadLabel(mPm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ApplicationInfo app;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                app = mPm.getApplicationInfo(pgrp.packageName, <span class="number">0</span>);</span><br><span class="line">                pgrp.mLabel = app.loadLabel(mPm);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">                pgrp.mLabel = pgrp.loadLabel(mPm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2.1】将权限添加到 mPermGroupsList 中！</span></span><br><span class="line">        mPermGroupsList.add(pgrp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对权限组进行排序！</span></span><br><span class="line">    Collections.sort(mPermGroupsList, mPermGroupComparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-1-AppSecurityPermissions-setPermissions"><a href="#2-1-3-1-AppSecurityPermissions-setPermissions" class="headerlink" title="2.1.3.1 AppSecurityPermissions.setPermissions"></a>2.1.3.1 AppSecurityPermissions.setPermissions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPermToList</span><span class="params">(List&lt;MyPermissionInfo&gt; permList,</span></span></span><br><span class="line"><span class="function"><span class="params">        MyPermissionInfo pInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pInfo.mLabel == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pInfo.mLabel = pInfo.loadLabel(mPm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】这里会使用排序方式找到合适的位置，使用比较器是 mPermComparator！</span></span><br><span class="line">    <span class="keyword">int</span> idx = Collections.binarySearch(permList, pInfo, mPermComparator);</span><br><span class="line">    <span class="keyword">if</span>(localLOGV) Log.i(TAG, <span class="string">"idx="</span>+idx+<span class="string">", list.size="</span>+permList.size());</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        idx = -idx-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//【1.1】插入到 permList 列表中；</span></span><br><span class="line">        permList.add(idx, pInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-AppSecurityPermissions-getPermissionCount"><a href="#2-2-AppSecurityPermissions-getPermissionCount" class="headerlink" title="2.2 AppSecurityPermissions.getPermissionCount"></a>2.2 AppSecurityPermissions.getPermissionCount</h2><p>获得权限的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionCount</span><span class="params">(<span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mPermGroupsList.size(); i++) &#123;</span><br><span class="line">        <span class="comment">//【*2.2.1】返回每个 group 的权限个数！</span></span><br><span class="line">        N += getPermissionList(mPermGroupsList.get(i), which).size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="2-2-1-AppSecurityPermissions-getPermissionList"><a href="#2-2-1-AppSecurityPermissions-getPermissionList" class="headerlink" title="2.2.1 AppSecurityPermissions.getPermissionList"></a>2.2.1 AppSecurityPermissions.getPermissionList</h3><p>根据 which 指定的标志，返回 grp.mNewPermissions 或者 grp.mAllPermissions<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MyPermissionInfo&gt; <span class="title">getPermissionList</span><span class="params">(MyPermissionGroupInfo grp, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (which == WHICH_NEW) &#123;</span><br><span class="line">        <span class="keyword">return</span> grp.mNewPermissions;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grp.mAllPermissions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的意思很简单了，就不多说了！</p><h1 id="3-onClick-gt-trigger-to-install"><a href="#3-onClick-gt-trigger-to-install" class="headerlink" title="3 onClick -&gt; trigger to install"></a>3 onClick -&gt; trigger to install</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == mOk) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mOkCanInstall || mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】这里对应的是 onCreate 中的 confirm permission 的广播</span></span><br><span class="line">                <span class="comment">// 这里会进入系统进程，通知权限确认完成，继续下一阶段安装！</span></span><br><span class="line">                <span class="comment">//【*3.1】通知 PackageInstallerService 权限确认完成！</span></span><br><span class="line">                mInstaller.setPermissionsResult(mSessionId, <span class="keyword">true</span>);</span><br><span class="line">                clearCachedApkIfNeededAndFinish();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*4】正常情况会进入 startInstall 阶段！</span></span><br><span class="line">                startInstall();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】强制滚动，让用户看完权限信息；</span></span><br><span class="line">            mScrollView.pageScroll(View.FOCUS_DOWN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == mCancel) &#123;</span><br><span class="line">        <span class="comment">//【3】当然，如果用户点击了取消，如果 mSessionId 不为 -1，</span></span><br><span class="line">        <span class="comment">// 那么也需要进入系统进程，通知系统无需继续安装！</span></span><br><span class="line">        setResult(RESULT_CANCELED);</span><br><span class="line">        <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//【*3.1】通知 PackageInstallerService 权限确认完成！</span></span><br><span class="line">            mInstaller.setPermissionsResult(mSessionId, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clearCachedApkIfNeededAndFinish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-PackageInstallerService-setPermissionsResult"><a href="#3-1-PackageInstallerService-setPermissionsResult" class="headerlink" title="3.1 PackageInstallerService.setPermissionsResult"></a>3.1 PackageInstallerService.setPermissionsResult</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPermissionsResult</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> accepted)</span> </span>&#123;</span><br><span class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES, TAG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        PackageInstallerSession session = mSessions.get(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【*3.2】根据指定的 sessionId，找到对应的 PackageInstallerSession</span></span><br><span class="line">            session.setPermissionsResult(accepted);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-PackageInstallerSession-setPermissionsResult"><a href="#3-2-PackageInstallerSession-setPermissionsResult" class="headerlink" title="3.2 PackageInstallerSession.setPermissionsResult"></a>3.2 PackageInstallerSession.setPermissionsResult</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPermissionsResult</span><span class="params">(<span class="keyword">boolean</span> accepted)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Must be sealed to accept permissions"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (accepted) &#123;</span><br><span class="line">        <span class="comment">//【1】这里设置了 mPermissionsAccepted 为 true，这样在下面的继续安装中，就不会重复确权了！</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】发送 MSG_COMMIT 消息，继续安装！</span></span><br><span class="line">        mHandler.obtainMessage(MSG_COMMIT).sendToTarget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        destroyInternal();</span><br><span class="line">        dispatchSessionFinished(INSTALL_FAILED_ABORTED, <span class="string">"User rejected permissions"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们继续看 startInstall 方法：</p><h1 id="4-PackageInstallerActivity-startInstall"><a href="#4-PackageInstallerActivity-startInstall" class="headerlink" title="4 PackageInstallerActivity.startInstall"></a>4 PackageInstallerActivity.startInstall</h1><p>继续分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建了一个 intent，封装要安装的应用程序！</span></span><br><span class="line">    Intent newIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【2】传递要安装的应用程序的 ApplicationInfo 实例；</span></span><br><span class="line">    newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO,</span><br><span class="line">            mPkgInfo.applicationInfo);</span><br><span class="line">    newIntent.setData(mPackageURI);</span><br><span class="line">    <span class="comment">//【2】目标组件 InstallAppProgress！</span></span><br><span class="line">    newIntent.setClass(<span class="keyword">this</span>, InstallAppProgress.class);</span><br><span class="line">    String installerPackageName = getIntent().getStringExtra(</span><br><span class="line">            Intent.EXTRA_INSTALLER_PACKAGE_NAME);</span><br><span class="line">    <span class="keyword">if</span> (mOriginatingURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_ORIGINATING_URI, mOriginatingURI);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mReferrerURI != <span class="keyword">null</span>) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_REFERRER, mReferrerURI);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mOriginatingUid != VerificationParams.NO_UID) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_ORIGINATING_UID, mOriginatingUid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (installerPackageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_INSTALLER_PACKAGE_NAME,</span><br><span class="line">                installerPackageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果安装的启动者 start 的时候，指定了接收返回结果，此时我们启动了一个新的 activity</span></span><br><span class="line">    <span class="comment">// InstallAppProgress，所以这里指定 InstallAppProgress 会将安装结果返回给启动者！</span></span><br><span class="line">    <span class="comment">// 而不是启动 InstallAppProgress 的界面！</span></span><br><span class="line">    <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//【3.1】这种效果是通过 FLAG_ACTIVITY_FORWARD_RESULT 标志位实现的！</span></span><br><span class="line">        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(localLOGV) Log.i(TAG, <span class="string">"downloaded app uri="</span>+mPackageURI);</span><br><span class="line">    startActivity(newIntent);</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 start activity，我们有在 ams 的相关内容中看到！</p><h1 id="5-InstallAppProgress"><a href="#5-InstallAppProgress" class="headerlink" title="5 InstallAppProgress"></a>5 InstallAppProgress</h1><h2 id="5-1-onCreate"><a href="#5-1-onCreate" class="headerlink" title="5.1 onCreate"></a>5.1 onCreate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    mAppInfo = intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class="line">    mPackageURI = intent.getData();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String scheme = mPackageURI.getScheme();</span><br><span class="line">    <span class="keyword">if</span> (scheme != <span class="keyword">null</span> &amp;&amp; !<span class="string">"file"</span>.equals(scheme) &amp;&amp; !<span class="string">"package"</span>.equals(scheme)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"unexpected scheme "</span> + scheme);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】启动了一个 HandlerThread 用于安装；</span></span><br><span class="line">    mInstallThread = <span class="keyword">new</span> HandlerThread(<span class="string">"InstallThread"</span>);</span><br><span class="line">    mInstallThread.start();</span><br><span class="line">    mInstallHandler = <span class="keyword">new</span> Handler(mInstallThread.getLooper());</span><br><span class="line"></span><br><span class="line">    IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    intentFilter.addAction(BROADCAST_ACTION);</span><br><span class="line">    <span class="comment">//【*5.1.1】动态注册了一个广播接收者，监听 ACTION_INSTALL_COMMIT 广播！</span></span><br><span class="line">    registerReceiver(</span><br><span class="line">            mBroadcastReceiver, intentFilter, BROADCAST_SENDER_PERMISSION, <span class="keyword">null</span> <span class="comment">/*scheduler*/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.2】初始化界面！</span></span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InstallAppProgress 显示后，会注册一个接收者，监听下面的广播：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROADCAST_ACTION =</span><br><span class="line">        <span class="string">"com.android.packageinstaller.ACTION_INSTALL_COMMIT"</span>;</span><br></pre></td></tr></table></figure></p><p>并且发送者要具有这样的权限：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROADCAST_SENDER_PERMISSION =</span><br><span class="line">        <span class="string">"android.permission.INSTALL_PACKAGES"</span>;</span><br></pre></td></tr></table></figure></p><h3 id="5-1-1-new-BroadcastReceiver"><a href="#5-1-1-new-BroadcastReceiver" class="headerlink" title="5.1.1 new BroadcastReceiver"></a>5.1.1 new BroadcastReceiver</h3><p>用于接收 com.android.packageinstaller.ACTION_INSTALL_COMMIT 广播！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver mBroadcastReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> statusCode = intent.getIntExtra(</span><br><span class="line">                PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_FAILURE);</span><br><span class="line">        <span class="keyword">if</span> (statusCode == PackageInstaller.STATUS_PENDING_USER_ACTION) &#123;</span><br><span class="line">            context.startActivity((Intent)intent.getParcelableExtra(Intent.EXTRA_INTENT));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onPackageInstalled(statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们在分析 pm install 的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】mPermissionsAccepted 为 true，那么用户就可以静默安装了，如果为 false，那么就需要用户确认权限！！</span></span><br><span class="line"><span class="keyword">if</span> (!mPermissionsAccepted) &#123;</span><br><span class="line">    <span class="comment">//【1.1】这里会创建一个 intent， action 为 PackageInstaller.ACTION_CONFIRM_PERMISSIONS</span></span><br><span class="line">    <span class="comment">// 目标应用是 PackageInstaller，这里会先进入 packageinstaller 中确认权限信息！</span></span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);</span><br><span class="line">    intent.setPackage(mContext.getPackageManager().getPermissionControllerPackageName());</span><br><span class="line">    intent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId); <span class="comment">// 事务 id 也要从传递过去！</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.1.1】回调了 PackageInstallObserverAdapter 的 onUserActionRequired 接口</span></span><br><span class="line">        <span class="comment">// 将 intent 传递过去！</span></span><br><span class="line">        mRemoteObserver.onUserActionRequired(intent);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*4.3.3】关闭该事务，使其从 active 变为 idle 状态！！</span></span><br><span class="line">    close();</span><br><span class="line">    <span class="comment">// 停止安装，等待用户确认权限，用户在 PackageInstaller 点击安装，安装会继续！！</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要用户确认权限的时候，会创建一个 intent，action 为 ACTION_CONFIRM_PERMISSIONS，这里的逻辑，然后会掉</p><p>RemoteObserver.onUserActionRequired 方法！</p><h2 id="5-2-initView"><a href="#5-2-initView" class="headerlink" title="5.2 initView"></a>5.2 initView</h2><p>继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setContentView(R.layout.op_progress);</span><br><span class="line">    <span class="comment">//【1】这里有要创建一个 AppSnippet 实例！</span></span><br><span class="line">    <span class="keyword">final</span> PackageUtil.AppSnippet as;</span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = getPackageManager();</span><br><span class="line">    <span class="comment">//【*5.2.1】解析安装标志位， 主要作用是指定安装方式，是取代已经存在的，还是全新安装！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> installFlags = getInstallFlags(mAppInfo.packageName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING )!= <span class="number">0</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Replacing package:"</span> + mAppInfo.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">        <span class="comment">//【*1.1.2.1】又创建了一个 AppSnippet 实例！</span></span><br><span class="line">        as = <span class="keyword">new</span> PackageUtil.AppSnippet(pm.getApplicationLabel(mAppInfo),</span><br><span class="line">                pm.getApplicationIcon(mAppInfo));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*1.1.3】又创建了一个 AppSnippet 实例！</span></span><br><span class="line">        <span class="keyword">final</span> File sourceFile = <span class="keyword">new</span> File(mPackageURI.getPath());</span><br><span class="line">        as = PackageUtil.getAppSnippet(<span class="keyword">this</span>, mAppInfo, sourceFile);</span><br><span class="line">    &#125;</span><br><span class="line">    mLabel = as.label;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*1.1.4】初始化 AppSnippet 的相关属性，icon 等等！</span></span><br><span class="line">    PackageUtil.initSnippetForNewApp(<span class="keyword">this</span>, as, R.id.app_snippet);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】初始化界面！</span></span><br><span class="line">    mStatusTextView = (TextView)findViewById(R.id.center_text);</span><br><span class="line">    mExplanationTextView = (TextView) findViewById(R.id.explanation);</span><br><span class="line">    mProgressBar = (ProgressBar) findViewById(R.id.progress_bar);</span><br><span class="line">    mProgressBar.setIndeterminate(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// Hide button till progress is being displayed</span></span><br><span class="line">    mOkPanel = findViewById(R.id.buttons_panel);</span><br><span class="line">    mDoneButton = (Button)findViewById(R.id.done_button);</span><br><span class="line">    mLaunchButton = (Button)findViewById(R.id.launch_button);</span><br><span class="line">    mOkPanel.setVisibility(View.INVISIBLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 scheme 指定的是 package，这种情况是安装一个已经存在的 pkg，会进入 if 分支！</span></span><br><span class="line">    <span class="comment">// 如果是 file 类型，进入 else！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【×5.2.2】调用 pms 的 installExistingPackage 方法执行安装！</span></span><br><span class="line">            pm.installExistingPackage(mAppInfo.packageName);</span><br><span class="line">            <span class="comment">//【×5.2.3】通知安装结果！</span></span><br><span class="line">            onPackageInstalled(PackageInstaller.STATUS_SUCCESS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            onPackageInstalled(PackageInstaller.STATUS_FAILURE_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【4】这里会创建一个 SessionParams 封装事务参数，这里在 pm install 中有讲过！</span></span><br><span class="line">        <span class="keyword">final</span> PackageInstaller.SessionParams params = <span class="keyword">new</span> PackageInstaller.SessionParams(</span><br><span class="line">                PackageInstaller.SessionParams.MODE_FULL_INSTALL);</span><br><span class="line">        params.referrerUri = getIntent().getParcelableExtra(Intent.EXTRA_REFERRER);</span><br><span class="line">        params.originatingUri = getIntent().getParcelableExtra(Intent.EXTRA_ORIGINATING_URI);</span><br><span class="line">        params.originatingUid = getIntent().getIntExtra(Intent.EXTRA_ORIGINATING_UID,</span><br><span class="line">                UID_UNKNOWN);</span><br><span class="line">        <span class="comment">//【5】创建一个 File 对象，指向 apk 的路径！</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(mPackageURI.getPath());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【6】解析 package，获得 PackageLite 对象，parsePackageLite 我们在开机启动中有讲过，这里就不多说了！</span></span><br><span class="line">            PackageLite pkg = PackageParser.parsePackageLite(file, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//【7】设置包名，安装路径，大小到 SessionParams 中！</span></span><br><span class="line">            params.setAppPackageName(pkg.packageName);</span><br><span class="line">            params.setInstallLocation(pkg.installLocation);</span><br><span class="line">            params.setSize(</span><br><span class="line">                PackageHelper.calculateInstalledSize(pkg, <span class="keyword">false</span>, params.abiOverride));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParser.PackageParserException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Cannot parse package "</span> + file + <span class="string">". Assuming defaults."</span>);</span><br><span class="line">            Log.e(TAG, <span class="string">"Cannot calculate installed size "</span> + file + <span class="string">". Try only apk size."</span>);</span><br><span class="line">            params.setSize(file.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Cannot calculate installed size "</span> + file + <span class="string">". Try only apk size."</span>);</span><br><span class="line">            params.setSize(file.length());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【8】在子线程中，执行安装！</span></span><br><span class="line">        mInstallHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【×5.3】触发安装！</span></span><br><span class="line">                doPackageStage(pm, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-1-getInstallFlags"><a href="#5-2-1-getInstallFlags" class="headerlink" title="5.2.1 getInstallFlags"></a>5.2.1 getInstallFlags</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getInstallFlags</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    PackageManager pm = getPackageManager();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】尝试获得包名为本次要安装的应用的安装信息!</span></span><br><span class="line">        PackageInfo pi =</span><br><span class="line">                pm.getPackageInfo(packageName, PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">        <span class="keyword">if</span> (pi != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2】如果已经安装了，那么会返回 INSTALL_REPLACE_EXISTING！</span></span><br><span class="line">            <span class="keyword">return</span> PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-PackageManagerService-installExistingPackage"><a href="#5-2-2-PackageManagerService-installExistingPackage" class="headerlink" title="5.2.2 PackageManagerService.installExistingPackage"></a>5.2.2 PackageManagerService.installExistingPackage</h3><p>安装一个系统中已存在的包，这是一个 hide 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">installExistingPackageAsUser</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,</span><br><span class="line">            <span class="keyword">null</span>);</span><br><span class="line">    PackageSetting pkgSetting;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】校验权限！</span></span><br><span class="line">    enforceCrossUserPermission(uid, userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"installExistingPackage for user "</span> + userId);</span><br><span class="line">    <span class="comment">//【2】如果设置了不能安装应用的用户限制；</span></span><br><span class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_FAILED_USER_RESTRICTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> installed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">//【3】判断该应用是否存在，不存在的话，返回 INSTALL_FAILED_INVALID_URI！</span></span><br><span class="line">            pkgSetting = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (pkgSetting == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】更新 pkg 的 install 状态为 true，hide 状态为 false，并更新偏好设置！</span></span><br><span class="line">            <span class="keyword">if</span> (!pkgSetting.getInstalled(userId)) &#123;</span><br><span class="line">                pkgSetting.setInstalled(<span class="keyword">true</span>, userId);</span><br><span class="line">                pkgSetting.setHidden(<span class="keyword">false</span>, userId);</span><br><span class="line">                mSettings.writePackageRestrictionsLPr(userId);</span><br><span class="line">                installed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (installed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pkgSetting.pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                    <span class="comment">//【4】准备数据目录！</span></span><br><span class="line">                    prepareAppDataAfterInstallLIF(pkgSetting.pkg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】发送 Intent.ACTION_PACKAGE_ADDED 给所有的设备用户！！</span></span><br><span class="line">            sendPackageAddedForUser(packageName, pkgSetting, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="5-2-3-onPackageInstalled"><a href="#5-2-3-onPackageInstalled" class="headerlink" title="5.2.3 onPackageInstalled"></a>5.2.3 onPackageInstalled</h3><p>发送 INSTALL_COMPLETE 消息给主线程的 Handler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(<span class="keyword">int</span> statusCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.2.3.1】进入主线程的 handler！</span></span><br><span class="line">    Message msg = mHandler.obtainMessage(INSTALL_COMPLETE);</span><br><span class="line">    msg.arg1 = statusCode;</span><br><span class="line">    mHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-1-Handler-handleMessage-INSTALL-COMPLETE"><a href="#5-2-3-1-Handler-handleMessage-INSTALL-COMPLETE" class="headerlink" title="5.2.3.1 Handler.handleMessage[INSTALL_COMPLETE]"></a>5.2.3.1 Handler.handleMessage[INSTALL_COMPLETE]</h4><p>主要根据安装的结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> INSTALL_COMPLETE:</span><br><span class="line">                <span class="comment">//【1】判断下本次安装是否需要返回结果给启动安装的程序，如果需要，那就返回结果！</span></span><br><span class="line">                <span class="comment">// 返回！</span></span><br><span class="line">                <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                    Intent result = <span class="keyword">new</span> Intent();</span><br><span class="line">                    result.putExtra(Intent.EXTRA_INSTALL_RESULT, msg.arg1);</span><br><span class="line">                    setResult(msg.arg1 == PackageInstaller.STATUS_SUCCESS</span><br><span class="line">                            ? Activity.RESULT_OK : Activity.RESULT_FIRST_USER,</span><br><span class="line">                                    result);</span><br><span class="line">                    clearCachedApkIfNeededAndFinish();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2】更新界面显示！</span></span><br><span class="line">                mProgressBar.setVisibility(View.GONE);</span><br><span class="line">                <span class="comment">// Show the ok button</span></span><br><span class="line">                <span class="keyword">int</span> centerTextLabel;</span><br><span class="line">                <span class="keyword">int</span> centerExplanationLabel = -<span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3】处理返回结果码！</span></span><br><span class="line">                <span class="keyword">if</span> (msg.arg1 == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">                    <span class="comment">//【3.1】安装成功的情况！</span></span><br><span class="line">                    mLaunchButton.setVisibility(View.VISIBLE);</span><br><span class="line">                    ((ImageView)findViewById(R.id.center_icon))</span><br><span class="line">                            .setImageDrawable(getDrawable(R.drawable.ic_done_92));</span><br><span class="line">                    centerTextLabel = R.string.install_done;</span><br><span class="line">                    <span class="comment">// Enable or disable launch button</span></span><br><span class="line">                    mLaunchIntent = getPackageManager().getLaunchIntentForPackage(</span><br><span class="line">                            mAppInfo.packageName);</span><br><span class="line">                    <span class="keyword">boolean</span> enabled = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(mLaunchIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        List&lt;ResolveInfo&gt; list = getPackageManager().</span><br><span class="line">                                queryIntentActivities(mLaunchIntent, <span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            enabled = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (enabled) &#123;</span><br><span class="line">                        mLaunchButton.setOnClickListener(InstallAppProgress.<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mLaunchButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg.arg1 == PackageInstaller.STATUS_FAILURE_STORAGE)&#123;</span><br><span class="line">                    <span class="comment">//【3.2】空间不足安装失败！</span></span><br><span class="line">                    showDialogInner(DLG_OUT_OF_SPACE);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.2】空间不足安装失败！</span></span><br><span class="line">                    ((ImageView)findViewById(R.id.center_icon))</span><br><span class="line">                            .setImageDrawable(getDrawable(R.drawable.ic_report_problem_92));</span><br><span class="line">                    centerExplanationLabel = getExplanationFromErrorCode(msg.arg1);</span><br><span class="line">                    centerTextLabel = R.string.install_failed;</span><br><span class="line">                    mLaunchButton.setVisibility(View.GONE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (centerExplanationLabel != -<span class="number">1</span>) &#123;</span><br><span class="line">                    mExplanationTextView.setText(centerExplanationLabel);</span><br><span class="line">                    findViewById(R.id.center_view).setVisibility(View.GONE);</span><br><span class="line">                    ((TextView)findViewById(R.id.explanation_status)).setText(centerTextLabel);</span><br><span class="line">                    findViewById(R.id.explanation_view).setVisibility(View.VISIBLE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ((TextView)findViewById(R.id.center_text)).setText(centerTextLabel);</span><br><span class="line">                    findViewById(R.id.center_view).setVisibility(View.VISIBLE);</span><br><span class="line">                    findViewById(R.id.explanation_view).setVisibility(View.GONE);</span><br><span class="line">                &#125;</span><br><span class="line">                mDoneButton.setOnClickListener(InstallAppProgress.<span class="keyword">this</span>);</span><br><span class="line">                mOkPanel.setVisibility(View.VISIBLE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="5-3-doPackageStage"><a href="#5-3-doPackageStage" class="headerlink" title="5.3 doPackageStage"></a>5.3 doPackageStage</h2><p>到这里，已经和 pm install 中很类似了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doPackageStage</span><span class="params">(PackageManager pm, PackageInstaller.SessionParams params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageInstaller packageInstaller = pm.getPackageInstaller();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String packageLocation = mPackageURI.getPath();</span><br><span class="line">        <span class="keyword">final</span> File file = <span class="keyword">new</span> File(packageLocation);</span><br><span class="line">        <span class="comment">//【1】这里奉陪了一个 sessionid 给本次安装，这个方法我们在 pm install 中分析过！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sessionId = packageInstaller.createSession(params);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">65536</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【2】这里根据上面分配的 sessionid，创建了一个 Session，这个方法我们在 pm install 中分析过！</span></span><br><span class="line">        session = packageInstaller.openSession(sessionId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> InputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> sizeBytes = file.length();</span><br><span class="line">        <span class="keyword">final</span> OutputStream out = session.openWrite(<span class="string">"PackageInstaller"</span>, <span class="number">0</span>, sizeBytes);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line">                <span class="keyword">if</span> (sizeBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> fraction = ((<span class="keyword">float</span>) c / (<span class="keyword">float</span>) sizeBytes);</span><br><span class="line">                    session.addProgress(fraction);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            session.fsync(out);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtils.closeQuietly(in);</span><br><span class="line">            IoUtils.closeQuietly(out);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】创建了一个 PendingIntent 封装了上面的 action： com.android.packageinstaller.ACTION_INSTALL_COMMIT</span></span><br><span class="line">        Intent broadcastIntent = <span class="keyword">new</span> Intent(BROADCAST_ACTION);</span><br><span class="line">        PendingIntent pendingIntent = PendingIntent.getBroadcast(</span><br><span class="line">                InstallAppProgress.<span class="keyword">this</span> <span class="comment">/*context*/</span>,</span><br><span class="line">                sessionId,</span><br><span class="line">                broadcastIntent,</span><br><span class="line">                PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】提交事务，触发安装，这个方法我们在 pm install 中分析过！</span></span><br><span class="line">        <span class="comment">// 这里将 PendingIntent 的 IntentSender 传递给了系统进程，后续系统进程会通过 binder 通信触发 intent！</span></span><br><span class="line">        session.commit(pendingIntent.getIntentSender());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">//【*5.2.3】异常情况，回调并结束！！</span></span><br><span class="line">        onPackageInstalled(PackageInstaller.STATUS_FAILURE);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照结束后，pendingIntent 会被触发，然后发送 com.android.packageinstaller.ACTION_INSTALL_COMMIT 广播！</p><h1 id="6-onCreateDialog-gt-notify-user"><a href="#6-onCreateDialog-gt-notify-user" class="headerlink" title="6 onCreateDialog -&gt; notify user"></a>6 onCreateDialog -&gt; notify user</h1><p>下面我们来看下 onCreateDialog 的函数逻辑，这个会在安装过程中提示用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(<span class="keyword">int</span> id, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (id) &#123;</span><br><span class="line">    <span class="comment">//【1】提示本次安装了来自位置来源！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_UNKNOWN_SOURCES:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setMessage(R.string.unknown_apps_dlg_text)</span><br><span class="line">                .setNegativeButton(R.string.cancel, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"Finishing off activity so that user can navigate to settings manually"</span>);</span><br><span class="line">                        finishAffinity();</span><br><span class="line">                    &#125;&#125;)</span><br><span class="line">                .setPositiveButton(R.string.settings, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"Launching settings"</span>);</span><br><span class="line">                        <span class="comment">//【6.1】设置未知来源开关！</span></span><br><span class="line">                        launchSecuritySettings();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">                .create();</span><br><span class="line">                </span><br><span class="line">    <span class="comment">//【2】当前用户是在另外用户的 profile 中，同时用户关闭了未知来源设置</span></span><br><span class="line">    <span class="comment">// 此时不能继续安装！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_ADMIN_RESTRICTS_UNKNOWN_SOURCES:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setMessage(R.string.unknown_apps_admin_dlg_text)</span><br><span class="line">                .setPositiveButton(android.R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">                .create();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】当前用户是在另外用户的 profile 中，同时用户关闭了未知来源设置</span></span><br><span class="line">    <span class="comment">// 此时不能继续安装！！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_PACKAGE_ERROR :</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setMessage(R.string.Parse_error_dlg_text)</span><br><span class="line">                .setPositiveButton(R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">                .create();</span><br><span class="line">                </span><br><span class="line">    <span class="comment">//【4】安装空间不足，此时不能继续安装！！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_OUT_OF_SPACE:</span><br><span class="line">        CharSequence appTitle = mPm.getApplicationLabel(mPkgInfo.applicationInfo);</span><br><span class="line">        String dlgText = getString(R.string.out_of_space_dlg_text,</span><br><span class="line">                appTitle.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setMessage(dlgText)</span><br><span class="line">                .setPositiveButton(R.string.manage_applications, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//【4.1】进入空间管理界面，用户可以选择释放空间！</span></span><br><span class="line">                        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MANAGE_PACKAGE_STORAGE"</span>);</span><br><span class="line">                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">                        startActivity(intent);</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setNegativeButton(R.string.cancel, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"Canceling installation"</span>);</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">              .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">              .create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】安装失败！！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_INSTALL_ERROR :</span><br><span class="line">        CharSequence appTitle1 = mPm.getApplicationLabel(mPkgInfo.applicationInfo);</span><br><span class="line">        String dlgText1 = getString(R.string.install_failed_msg,</span><br><span class="line">                appTitle1.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setNeutralButton(R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setMessage(dlgText1)</span><br><span class="line">                .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">                .create();</span><br><span class="line">                </span><br><span class="line">    <span class="comment">//【6】这个是 WEAR 可穿戴设备上的逻辑，这里不关注！</span></span><br><span class="line">    <span class="keyword">case</span> DLG_NOT_SUPPORTED_ON_WEAR:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">                .setMessage(R.string.wear_not_allowed_dlg_text)</span><br><span class="line">                .setPositiveButton(R.string.ok, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        setResult(RESULT_OK);</span><br><span class="line">                        clearCachedApkIfNeededAndFinish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .setOnCancelListener(<span class="keyword">this</span>)</span><br><span class="line">                .create();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="6-1-launchSecuritySettings"><a href="#6-1-launchSecuritySettings" class="headerlink" title="6.1 launchSecuritySettings"></a>6.1 launchSecuritySettings</h2><p>进入设置，让用户选择是否打开未知来源设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">launchSecuritySettings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent launchSettingsIntent = <span class="keyword">new</span> Intent(Settings.ACTION_SECURITY_SETTINGS);</span><br><span class="line">    startActivityForResult(launchSettingsIntent, REQUEST_ENABLE_UNKNOWN_SOURCES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的逻辑，Android 版本虽然会不断更替，但是代码结构和思想史&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 7 篇 - 通过 pm 指令分析 Install 过程</title>
    <link href="https://coolqi.top/2018/05/03/PMS7-installThroughAdb/"/>
    <id>https://coolqi.top/2018/05/03/PMS7-installThroughAdb/</id>
    <published>2018-05-02T16:00:00.000Z</published>
    <updated>2018-11-20T15:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本篇文章总结下 install package 的过程，在 Abdroid 7.1.1 上安装一个应用有如下的方式：</p><ul><li>adb install（根据情况转为 cmd package install 或者 pm install）</li><li>adb shell cmd package install（目前都是优先使用）</li><li>adb shell pm install;</li><li>拷贝 apk 到文件管理器中触发安装；</li><li>通过应用商店安装；</li></ul><p>这里我们先从 adb install 入手，对于其他的安装方式，我们后面再分析！</p><h1 id="1-adb-install-commandline-adb-commandline"><a href="#1-adb-install-commandline-adb-commandline" class="headerlink" title="1 adb install - commandline::adb_commandline"></a>1 adb install - commandline::adb_commandline</h1><p>adb install 的执行从 system/core/adb/commandline.cpp 开始：</p><p>adb_commandline 中会涉及到大量的 adb 指令的处理，这里我们只关注 adb install 的处理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adb_commandline</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"push"</span>)) &#123; <span class="comment">// adb push 命令！</span></span><br><span class="line">        <span class="keyword">bool</span> copy_attrs = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt; srcs;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* dst = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        parse_push_pull_args(&amp;argv[<span class="number">1</span>], argc - <span class="number">1</span>, &amp;srcs, &amp;dst, &amp;copy_attrs);</span><br><span class="line">        <span class="keyword">if</span> (srcs.empty() || !dst) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">return</span> do_sync_push(srcs, dst) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... ... ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"install"</span>)) &#123; <span class="comment">//【1.2】adb install 命令！</span></span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">if</span> (_use_legacy_install()) &#123;</span><br><span class="line">            <span class="comment">//【1.2】正常情况下调用 install_app_legacy！</span></span><br><span class="line">            <span class="keyword">return</span> install_app_legacy(transport_type, serial, argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果支持 FeatureCmd，那就调用 install_app</span></span><br><span class="line">        <span class="keyword">return</span> install_app(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"install-multiple"</span>)) &#123; <span class="comment">// adb install-multiple 命令</span></span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">return</span> install_multiple_app(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"uninstall"</span>)) &#123; <span class="comment">// adb uninstall 命令</span></span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">if</span> (_use_legacy_install()) &#123;</span><br><span class="line">            <span class="keyword">return</span> uninstall_app_legacy(transport_type, serial, argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uninstall_app(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    usage();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到：</p><ul><li>如果支持 cmd 命令的情况下，会调用 install_app；</li><li>如果不支持，执行 install_app_legacy 方法！</li></ul><h2 id="1-1-cmd-install-支持-cmd-指令"><a href="#1-1-cmd-install-支持-cmd-指令" class="headerlink" title="1.1 cmd install - 支持 cmd 指令"></a>1.1 cmd install - 支持 cmd 指令</h2><h3 id="1-1-1-commandline-install-app"><a href="#1-1-1-commandline-install-app" class="headerlink" title="1.1.1 commandline::install_app"></a>1.1.1 commandline::install_app</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The last argument must be the APK file</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* file = argv[argc - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* dot = strrchr(file, <span class="string">'.'</span>);</span><br><span class="line">    bool found_apk = <span class="keyword">false</span>;</span><br><span class="line">    struct stat sb;</span><br><span class="line">    <span class="keyword">if</span> (dot &amp;&amp; !strcasecmp(dot, <span class="string">".apk"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stat(file, &amp;sb) == -<span class="number">1</span> || !S_ISREG(sb.st_mode)) &#123;</span><br><span class="line">            fprintf(stderr, <span class="string">"Invalid APK file: %s\n"</span>, file);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        found_apk = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!found_apk) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">"Missing APK file\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> localFd = adb_open(file, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (localFd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">"Failed to open %s: %s\n"</span>, file, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::string error;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】使用 cmd package 命令！</span></span><br><span class="line">    std::string cmd = <span class="string">"exec:cmd package"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// don't copy the APK name, but, copy the rest of the arguments as-is</span></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(std::string(*argv++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add size parameter [required for streaming installs]</span></span><br><span class="line">    <span class="comment">// do last to override any user specified value</span></span><br><span class="line">    cmd += <span class="string">" "</span> + android::base::StringPrintf(<span class="string">"-S %"</span> PRIu64, static_cast&lt;uint64_t&gt;(sb.st_size));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> remoteFd = adb_connect(cmd, &amp;error);</span><br><span class="line">    <span class="keyword">if</span> (remoteFd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">"Connect error for write: %s\n"</span>, error.c_str());</span><br><span class="line">        adb_close(localFd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line">    copy_to_file(localFd, remoteFd);</span><br><span class="line">    read_status_line(remoteFd, buf, sizeof(buf));</span><br><span class="line"></span><br><span class="line">    adb_close(localFd);</span><br><span class="line">    adb_close(remoteFd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strncmp(<span class="string">"Success"</span>, buf, <span class="number">7</span>)) &#123;</span><br><span class="line">        fprintf(stderr, <span class="string">"Failed to install %s: %s"</span>, file, buf);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fputs(buf, stderr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-5-new-PackageManagerShellCommand"><a href="#1-1-5-new-PackageManagerShellCommand" class="headerlink" title="1.1.5 new PackageManagerShellCommand"></a>1.1.5 new PackageManagerShellCommand</h3><h4 id="1-1-5-1-onCommand"><a href="#1-1-5-1-onCommand" class="headerlink" title="1.1.5.1 onCommand"></a>1.1.5.1 onCommand</h4><p>最终，会调用 PackageManagerShellCommand 的 onCommand 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageManagerShellCommand</span> <span class="keyword">extends</span> <span class="title">ShellCommand</span> </span>&#123;</span><br><span class="line">    ... ... ... ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onCommand</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleDefaultCommands(cmd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install"</span>: </span><br><span class="line">                    <span class="comment">//【*1.1.5.2】对于 install 调用，调用 runInstall 方法：</span></span><br><span class="line">                    <span class="keyword">return</span> runInstall();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-abandon"</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-destroy"</span>:</span><br><span class="line">                    <span class="keyword">return</span> runInstallAbandon();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-commit"</span>:</span><br><span class="line">                    <span class="keyword">return</span> runInstallCommit();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-create"</span>:</span><br><span class="line">                    <span class="keyword">return</span> runInstallCreate();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-remove"</span>:</span><br><span class="line">                    <span class="keyword">return</span> runInstallRemove();</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"install-write"</span>:</span><br><span class="line">                    <span class="keyword">return</span> runInstallWrite();</span><br><span class="line">                ... ... ...</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> handleDefaultCommands(cmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            pw.println(<span class="string">"Remote exception: "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先看 runInstall，其他指令相对于 runInstall 简单了不少！</p><h4 id="1-1-5-2-runInstall"><a href="#1-1-5-2-runInstall" class="headerlink" title="1.1.5.2 runInstall"></a>1.1.5.2 runInstall</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runInstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="comment">//【*1.1.5.2.1】这个和 pm install 的流程是一样的，虽然这个同名方法是在 PackageManagerShellCommand 中，但实际上</span></span><br><span class="line">    <span class="comment">// 两个方法的代码一模一样，大家可以参考【*2.9.1】</span></span><br><span class="line">    <span class="keyword">final</span> InstallParams params = makeInstallParams();</span><br><span class="line">    <span class="keyword">final</span> String inPath = getNextArg(); <span class="comment">// 获得安装包的 path！</span></span><br><span class="line">    <span class="keyword">boolean</span> installExternal =</span><br><span class="line">            (params.sessionParams.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (params.sessionParams.sizeBytes &lt; <span class="number">0</span> &amp;&amp; inPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(inPath);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (installExternal) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【1】解析 apk，用于计算 apk 大小！！</span></span><br><span class="line">                    ApkLite baseApk = PackageParser.parseApkLite(file, <span class="number">0</span>);</span><br><span class="line">                    PackageLite pkgLite = <span class="keyword">new</span> PackageLite(<span class="keyword">null</span>, baseApk, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//【*4.2.3.4.1】调用 PackageHelper 计算空间大小；</span></span><br><span class="line">                    params.sessionParams.setSize(</span><br><span class="line">                            PackageHelper.calculateInstalledSize(pkgLite, <span class="keyword">false</span>,</span><br><span class="line">                                    params.sessionParams.abiOverride));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageParserException | IOException e) &#123;</span><br><span class="line">                    pw.println(<span class="string">"Error: Failed to parse APK file : "</span> + e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.sessionParams.setSize(file.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.1.5.2.2】创建安装事务，返回事务 id！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = doCreateSession(params.sessionParams,</span><br><span class="line">            params.installerPackageName, params.userId);</span><br><span class="line">    <span class="keyword">boolean</span> abandonSession = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inPath == <span class="keyword">null</span> &amp;&amp; params.sessionParams.sizeBytes == <span class="number">0</span>) &#123;</span><br><span class="line">            pw.println(<span class="string">"Error: must either specify a package size or an APK file"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*1.1.5.2.3】进一步处理事务，我们可以看到，这种方法只能装 base apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (doWriteSplit(sessionId, inPath, params.sessionParams.sizeBytes, <span class="string">"base.apk"</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>) != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*1.1.5.2.4】提交事务！！</span></span><br><span class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        abandonSession = <span class="keyword">false</span>;</span><br><span class="line">        pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (abandonSession) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doAbandonSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-5-2-1-makeInstallParams"><a href="#1-1-5-2-1-makeInstallParams" class="headerlink" title="1.1.5.2.1 makeInstallParams"></a>1.1.5.2.1 makeInstallParams</h5><p>这个和 pm install 的流程是一样的，虽然这个同名方法是在 PackageManagerShellCommand 中，但实际上两个方法的代码一模一样，大家可以参考【*2.9.1】!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallParams <span class="title">makeInstallParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这个 InstallParams 也是内部类，但是和 pm install 中的代码是一样的！</span></span><br><span class="line">    <span class="keyword">final</span> SessionParams sessionParams = <span class="keyword">new</span> SessionParams(SessionParams.MODE_FULL_INSTALL);</span><br><span class="line">    <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams();</span><br><span class="line">    params.sessionParams = sessionParams;</span><br><span class="line">    String opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getNextOption()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-l"</span>:</span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_FORWARD_LOCK;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-r"</span>:</span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ... ... ...</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown option "</span> + opt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h5 id="1-1-5-2-2-doCreateSession"><a href="#1-1-5-2-2-doCreateSession" class="headerlink" title="1.1.5.2.2 doCreateSession"></a>1.1.5.2.2 doCreateSession</h5><p>这个和 pm install 的流程是一样的，虽然这个同名方法是在 PackageManagerShellCommand 中，但实际上两个方法的代码几乎一模一样，大家可以参考【*2.9.2】!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCreateSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runInstallCreate"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1】调用 PackageInstallerService 的 createSession 方法，创建实例！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = mInterface.getPackageInstaller()</span><br><span class="line">            .createSession(params, installerPackageName, userId);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 mInterface 是 PMS 的代理对象，通过 getPackageInstaller 获得了 PackageInstallerService 实例！</p><h5 id="1-1-5-2-3-doWriteSplit"><a href="#1-1-5-2-3-doWriteSplit" class="headerlink" title="1.1.5.2.3 doWriteSplit"></a>1.1.5.2.3 doWriteSplit</h5><p>doWriteSplit 方法和 2.9.3 Pm.doWriteSession 是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doWriteSplit</span><span class="params">(<span class="keyword">int</span> sessionId, String inPath, <span class="keyword">long</span> sizeBytes, String splitName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="keyword">if</span> (sizeBytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: must specify a APK size"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inPath != <span class="keyword">null</span> &amp;&amp; !<span class="string">"-"</span>.equals(inPath)) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: APK content must be streamed"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inPath = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.3.2】根据前面创建的 Session id，获得本次安装事务对象！</span></span><br><span class="line">    <span class="keyword">final</span> SessionInfo info = mInterface.getPackageInstaller().getSessionInfo(sessionId);</span><br><span class="line"></span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.2.1】通过 PackageInstallerService.openSession 获得对应的 PackageInstallerSession 对象！</span></span><br><span class="line">        <span class="comment">//【*2.9.3.1】封装成 Session 实例！</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(inPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> SizedInputStream(getRawInputStream(), sizeBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【*2.9.3.1.1】定义输出流对象，指向待安装 APK 对应文件的源地址！</span></span><br><span class="line">        out = session.openWrite(splitName, <span class="number">0</span>, sizeBytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">65536</span>];</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            total += c;</span><br><span class="line">            <span class="comment">//【1】拷贝文件到 /data/app/ 目标目录！</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (info.sizeBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> fraction = ((<span class="keyword">float</span>) c / (<span class="keyword">float</span>) info.sizeBytes);</span><br><span class="line">                <span class="comment">//【2】同时更新进度！</span></span><br><span class="line">                session.addProgress(fraction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        session.fsync(out);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">            pw.println(<span class="string">"Success: streamed "</span> + total + <span class="string">" bytes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: failed to write; "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(out);</span><br><span class="line">        IoUtils.closeQuietly(in);</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h5 id="1-1-5-2-4-doCommitSession"><a href="#1-1-5-2-4-doCommitSession" class="headerlink" title="1.1.5.2.4 doCommitSession"></a>1.1.5.2.4 doCommitSession</h5><p>doWriteSplit 方法和 2.9.4 Pm.doCommitSession 是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCommitSession</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×2.9.3.1】和前面一样，重新获得一个 Session 对象！</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line">        <span class="comment">//【×2.9.4.1】创建了一个 LocalIntentReceiver！</span></span><br><span class="line">        <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line">        <span class="comment">//【×2.9.4.2】将 receiver.getIntentSender() 传递给 pms，用户客户端进程获得安装结果</span></span><br><span class="line">        <span class="comment">//【×2.9.4.3】调用 PackageInstallerSession 的 commit 方法，提交事务！</span></span><br><span class="line">        session.commit(receiver.getIntentSender());</span><br><span class="line">        <span class="comment">//【×2.9.4.4】处理返回结果！</span></span><br><span class="line">        <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">                PackageInstaller.STATUS_FAILURE);</span><br><span class="line">        <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">                pw.println(<span class="string">"Success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pw.println(<span class="string">"Failure ["</span></span><br><span class="line">                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-pm-install-不支持-cmd-指令"><a href="#1-2-pm-install-不支持-cmd-指令" class="headerlink" title="1.2 pm install - 不支持 cmd 指令"></a>1.2 pm install - 不支持 cmd 指令</h2><h3 id="1-2-1-commandline-install-app-legacy"><a href="#1-2-1-commandline-install-app-legacy" class="headerlink" title="1.2.1 commandline::install_app_legacy"></a>1.2.1 commandline::install_app_legacy</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app_legacy</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时我们需要先将 apk 将拷贝到手机的指定目录下！</span></span><br><span class="line">    <span class="comment">//【1】如果是要安装到内部存储，目标路径是 DATA_DEST，如果是存储则是 SD_DEST！</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> DATA_DEST = <span class="string">"/data/local/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> SD_DEST = <span class="string">"/sdcard/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* where = DATA_DEST;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    <span class="comment">//【2】如果 adb 指令设置了 -s 参数，那就安装到外置存储，默认是内置存储！</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[i], <span class="string">"-s"</span>)) &#123;</span><br><span class="line">            where = SD_DEST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】判断是否有 apk 文件参数！</span></span><br><span class="line">    <span class="keyword">int</span> last_apk = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = argc - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* file = argv[i];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* dot = <span class="built_in">strrchr</span>(file, <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (dot &amp;&amp; !strcasecmp(dot, <span class="string">".apk"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stat(file, &amp;sb) == <span class="number">-1</span> || !S_ISREG(sb.st_mode)) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Invalid APK file: %s\n"</span>, file);</span><br><span class="line">                <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            last_apk = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (last_apk == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Missing APK file\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt; apk_file = &#123;argv[last_apk]&#125;;</span><br><span class="line">    <span class="comment">//【4】计算目标位置，将要安装的 apk 拷贝到目标缓存位置</span></span><br><span class="line">    <span class="comment">// 同时将 adb 命令的最后一个参数改为 apk 拷贝后的目标缓存位置！</span></span><br><span class="line">    <span class="comment">// 目标位置：/data/local/tmp/name.apk!</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> apk_dest = android::base::StringPrintf(</span><br><span class="line">        where, adb_basename(argv[last_apk]).c_str());、</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do_sync_push 将此 apk 文件传输到目标路径，失败的话将跳转到 clenaup_apk</span></span><br><span class="line">    <span class="keyword">if</span> (!do_sync_push(apk_file, apk_dest.c_str())) <span class="keyword">goto</span> cleanup_apk;</span><br><span class="line">    <span class="comment">// 设置新位置！</span></span><br><span class="line">    argv[last_apk] = apk_dest.c_str();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*1.2.2】执行安装</span></span><br><span class="line">    result = pm_command(transport, serial, argc, argv);</span><br><span class="line"></span><br><span class="line">cleanup_apk:</span><br><span class="line">    <span class="comment">// 删除目标缓存 apk 文件，PMS 会把该 apk 拷贝到 /data/app 目录下，所以这个缓存中的 apk 没用了！</span></span><br><span class="line">    delete_file(transport, serial, apk_dest);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实整个过程很简单，不多说了！</p><h3 id="1-2-2-commandline-pm-command"><a href="#1-2-2-commandline-pm-command" class="headerlink" title="1.2.2 commandline::pm_command"></a>1.2.2 commandline::pm_command</h3><p>我们继续来分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pm_command</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 我们看到，这里会将 adb install 命令和参数，转为 pm 指令！</span></span><br><span class="line">    std::string cmd = <span class="string">"pm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.3】继续调用 send_shell_command 方法！</span></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-2-3-commandline-send-shell-command"><a href="#1-2-3-commandline-send-shell-command" class="headerlink" title="1.2.3 commandline::send_shell_command"></a>1.2.3 commandline::send_shell_command</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send_shell_command</span><span class="params">(TransportType transport_type, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; command,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">bool</span> disable_shell_protocol, StandardStreamsCallbackInterface* callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">bool</span> use_shell_protocol = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">bool</span> attempt_connection = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 使用 shell protocol</span></span><br><span class="line">        <span class="keyword">if</span> (!disable_shell_protocol) &#123;</span><br><span class="line">            FeatureSet features;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> error;</span><br><span class="line">            <span class="keyword">if</span> (adb_get_feature_set(&amp;features, &amp;error)) &#123;</span><br><span class="line">                <span class="comment">// 如果定义了 feature，则替换 shell protocol!</span></span><br><span class="line">                use_shell_protocol = CanUseFeature(features, kFeatureShell2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                attempt_connection = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attempt_connection) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> error;</span><br><span class="line">            <span class="comment">// 此时 command 中携带的就是以 pm 开头的命令</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> service_string = ShellServiceString(use_shell_protocol, <span class="string">""</span>, command);</span><br><span class="line">            <span class="comment">// 向 shell protocol 发送命令</span></span><br><span class="line">            fd = adb_connect(service_string, &amp;error);</span><br><span class="line">            <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"- waiting for device -\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!wait_for_device(<span class="string">"wait-for-device"</span>, transport_type, serial)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理命令执行结果！</span></span><br><span class="line">    <span class="keyword">int</span> exit_code = read_and_dump(fd, use_shell_protocol, callback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (adb_close(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PLOG(ERROR) &lt;&lt; <span class="string">"failure closing FD "</span> &lt;&lt; fd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们知道，最后其实是向 shell 服务发送 pm 命令，触发 apk 的安装！</p><h1 id="2-pm-install"><a href="#2-pm-install" class="headerlink" title="2 pm install"></a>2 pm install</h1><p>cmd 的调用上面已经分析了，其实和 pm install 没有区别！</p><p>这里我们来看下 pm 命令的主要用法，通过 pm install 继续分析安装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">usage: pm path [--user USER_ID] PACKAGE</span><br><span class="line">       pm dump PACKAGE</span><br><span class="line">       pm install [-lrtsfd] [-i PACKAGE] [--user USER_ID] [PATH]</span><br><span class="line">       pm install-create [-lrtsfdp] [-i PACKAGE] [-S BYTES]</span><br><span class="line">               [--install-location <span class="number">0</span>/<span class="number">1</span>/<span class="number">2</span>]</span><br><span class="line">               [--force-uuid internal|UUID]</span><br><span class="line">       pm install-write [-S BYTES] SESSION_ID SPLIT_NAME [PATH]</span><br><span class="line">       pm install-commit SESSION_ID</span><br><span class="line">       pm install-abandon SESSION_ID</span><br><span class="line">       pm uninstall [-k] [--user USER_ID] [--versionCode VERSION_CODE] PACKAGE</span><br><span class="line">       pm set-installer PACKAGE INSTALLER</span><br><span class="line">       pm move-<span class="keyword">package</span> PACKAGE [internal|UUID]</span><br><span class="line">       pm move-primary-storage [internal|UUID]</span><br><span class="line">       pm clear [--user USER_ID] PACKAGE</span><br><span class="line">       pm enable [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm disable [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm disable-user [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm disable-until-used [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm <span class="keyword">default</span>-state [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm set-user-restriction [--user USER_ID] RESTRICTION VALUE</span><br><span class="line">       pm hide [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm unhide [--user USER_ID] PACKAGE_OR_COMPONENT</span><br><span class="line">       pm grant [--user USER_ID] PACKAGE PERMISSION</span><br><span class="line">       pm revoke [--user USER_ID] PACKAGE PERMISSION</span><br><span class="line">       pm reset-permissions</span><br><span class="line">       pm set-app-link [--user USER_ID] PACKAGE &#123;always|ask|never|undefined&#125;</span><br><span class="line">       pm get-app-link [--user USER_ID] PACKAGE</span><br><span class="line">       pm set-install-location [<span class="number">0</span>/auto] [<span class="number">1</span>/internal] [<span class="number">2</span>/external]</span><br><span class="line">       pm get-install-location</span><br><span class="line">       pm set-permission-enforced PERMISSION [<span class="keyword">true</span>|<span class="keyword">false</span>]</span><br><span class="line">       pm trim-caches DESIRED_FREE_SPACE [internal|UUID]</span><br><span class="line">       pm create-user [--profileOf USER_ID] [--managed] [--restricted] [--ephemeral] [--guest] USER_NAME</span><br><span class="line">       pm remove-user USER_ID</span><br><span class="line">       pm get-max-users</span><br></pre></td></tr></table></figure><p>pm 命令的源码位于 frameworks/base/cmds/pm 中，我们直接去看下目录结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Android.mk</span><br><span class="line">├── MODULE_LICENSE_APACHE2</span><br><span class="line">├── NOTICE</span><br><span class="line">├── pm</span><br><span class="line">└── src</span><br><span class="line">    └── com</span><br><span class="line">        └── android</span><br><span class="line">            └── commands</span><br><span class="line">                └── pm</span><br><span class="line">                    └── Pm.java</span><br></pre></td></tr></table></figure><p>我们先来看看 Android.mk 中的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2007 The Android Open Source Project</span><br><span class="line">#</span><br><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</span><br><span class="line">LOCAL_MODULE := pm</span><br><span class="line">include $(BUILD_JAVA_LIBRARY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">ALL_PREBUILT += $(TARGET_OUT)/bin/pm</span><br><span class="line">$(TARGET_OUT)/bin/pm : $(LOCAL_PATH)/pm | $(ACP)</span><br><span class="line">$(transform-prebuilt-to-target)</span><br></pre></td></tr></table></figure><p>可以看到，编译期间，编译系统会将 pm 脚本放置到 /system/bin/ 目录下。</p><p>接着，来看看 pm 脚本的内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Script to start "pm" on the device, which has a very rudimentary</span><br><span class="line"># shell.</span><br><span class="line">#</span><br><span class="line">base=/system</span><br><span class="line">export CLASSPATH=$base/framework/pm.jar</span><br><span class="line">exec app_process $base/bin com.android.commands.pm.Pm "$@"</span><br></pre></td></tr></table></figure></p><p>该脚本的作用是通过 app_process 启动 pm java 进程！</p><h2 id="2-1-app-process-main"><a href="#2-1-app-process-main" class="headerlink" title="2.1 app_process::main"></a>2.1 app_process::main</h2><p>app_process 其实就是 Zygote 的源码，在开机篇我们已经分析过了 Zygote 的启动，这里略过和 Zygote 相关的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    ++i;  <span class="comment">// Skip unused "parent dir" argument.</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--zygote"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--start-system-server"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">"--application"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">"--nice-name="</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            niceName.setTo(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">"--"</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【1】获得要启动的 java 进程的 className</span></span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Vector&lt;String8&gt; args;</span><br><span class="line">    <span class="keyword">if</span> (!className.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//【2】根据 application 的取值，判断我们启动的是应用类型进程，还是工具类型进程！</span></span><br><span class="line">        args.add(application ? String8(<span class="string">"application"</span>) : String8(<span class="string">"tool"</span>));</span><br><span class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ... ... ...<span class="comment">// zygote 启动才会进入！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!niceName.isEmpty()) &#123;</span><br><span class="line">        runtime.setArgv0(niceName.<span class="built_in">string</span>());</span><br><span class="line">        set_process_name(niceName.<span class="built_in">string</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        <span class="comment">//【2.2】非 Zygote 进程的启动方式如下</span></span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，会进入 AndroidRuntime 中去！！</p><h2 id="2-2-AndroidRuntime-start"><a href="#2-2-AndroidRuntime-start" class="headerlink" title="2.2 AndroidRuntime::start"></a>2.2 AndroidRuntime::start</h2><p>这里的 className 传入的值为 com.android.internal.os.RuntimeInit！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, bool zygote)</span><br><span class="line">&#123;</span><br><span class="line">    ALOGD(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt; START %s uid %d &lt;&lt;&lt;&lt;&lt;&lt;\n"</span>,</span><br><span class="line">            className != NULL ? className : <span class="string">"(unknown)"</span>, getuid());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">const</span> String8 <span class="title">startSystemServer</span><span class="params">(<span class="string">"start-system-server"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options[i] == startSystemServer) &#123;</span><br><span class="line">           <span class="comment">/* track our progress through the boot sequence */</span></span><br><span class="line">           <span class="keyword">const</span> <span class="keyword">int</span> LOG_BOOT_PROGRESS_START = <span class="number">3000</span>;</span><br><span class="line">           LOG_EVENT_LONG(LOG_BOOT_PROGRESS_START,  ns2ms(systemTime(SYSTEM_TIME_MONOTONIC)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* rootDir = getenv(<span class="string">"ANDROID_ROOT"</span>);</span><br><span class="line">    <span class="keyword">if</span> (rootDir == NULL) &#123;</span><br><span class="line">        rootDir = <span class="string">"/system"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!hasDir(<span class="string">"/system"</span>)) &#123;</span><br><span class="line">            LOG_FATAL(<span class="string">"No root directory specified, and /android does not exist."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setenv(<span class="string">"ANDROID_ROOT"</span>, rootDir, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const char* kernelHack = getenv("LD_ASSUME_KERNEL");</span></span><br><span class="line">    <span class="comment">//ALOGD("Found LD_ASSUME_KERNEL='%s'\n", kernelHack);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】启动虚拟机！</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.Init(NULL);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onVmCreated(env);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】注册 Android 函数！</span></span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】创建一个 String 数组来保存传递进来的参数！</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"></span><br><span class="line">    stringClass = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</span><br><span class="line">    <span class="keyword">assert</span>(stringClass != NULL);</span><br><span class="line">    strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, NULL);</span><br><span class="line">    <span class="keyword">assert</span>(strArray != NULL);</span><br><span class="line">    classNameStr = env-&gt;NewStringUTF(className);</span><br><span class="line">    <span class="keyword">assert</span>(classNameStr != NULL);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, <span class="number">0</span>, classNameStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).string());</span><br><span class="line">        <span class="keyword">assert</span>(optionsStr != NULL);</span><br><span class="line">        env-&gt;SetObjectArrayElement(strArray, i + <span class="number">1</span>, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】启动虚拟机的主线程，该主线程不会退出，直到虚拟机退出！</span></span><br><span class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == NULL) &#123;</span><br><span class="line">        ALOGE(<span class="string">"JavaVM unable to locate class '%s'\n"</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2.3】反射调用 RuntimeInit.main 函数，从 native 层进入 java 世界！</span></span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == NULL) &#123;</span><br><span class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line">#if 0</span><br><span class="line">            <span class="keyword">if</span> (env-&gt;ExceptionCheck())</span><br><span class="line">                threadExitUncaughtException(env);</span><br><span class="line">#endif</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(slashClassName);</span><br><span class="line"></span><br><span class="line">    ALOGD(<span class="string">"Shutting down VM\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DetachCurrentThread() != JNI_OK)</span><br><span class="line">        ALOGW(<span class="string">"Warning: unable to detach main thread\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DestroyJavaVM() != <span class="number">0</span>)</span><br><span class="line">        ALOGW(<span class="string">"Warning: VM did not shut down cleanly\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射，进入 RuntimeInit 中！</p><h2 id="2-3-RuntimeInit-main"><a href="#2-3-RuntimeInit-main" class="headerlink" title="2.3 RuntimeInit.main"></a>2.3 RuntimeInit.main</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">    enableDdms();</span><br><span class="line">    <span class="keyword">if</span> (argv.length == <span class="number">2</span> &amp;&amp; argv[<span class="number">1</span>].equals(<span class="string">"application"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"RuntimeInit: Starting application"</span>);</span><br><span class="line">        redirectLogStreams();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"RuntimeInit: Starting tool"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】进程一些初始化的操作，比如设置线程的默认异常处理 Handler，设置 Log 系统等等，在进程的启动时，我们分析过！！</span></span><br><span class="line">    commonInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2.4】这里的关键点在这里！</span></span><br><span class="line">    nativeFinishInit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"Leaving RuntimeInit!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nativeFinishInit 调用的是 native 方法，位于 AndroidRuntime.cpp 文件中！</p><h2 id="2-4-AR-com-android-internal-os-RuntimeInit-nativeFinishInit"><a href="#2-4-AR-com-android-internal-os-RuntimeInit-nativeFinishInit" class="headerlink" title="2.4 AR::com_android_internal_os_RuntimeInit_nativeFinishInit"></a>2.4 AR::com_android_internal_os_RuntimeInit_nativeFinishInit</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">com_android_internal_os_RuntimeInit_nativeFinishInit</span><span class="params">(JNIEnv* env, jobject clazz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//【2.5】gCurRuntime 是 AndroidRuntime 子类 AppRuntime 的实例！</span></span><br><span class="line">    gCurRuntime-&gt;onStarted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上 AndroidRuntime 并没有实现 onStarted 方法，真正是实现是在 App_main.cpp 中的 AppRuntime 类中，他是 AndroidRuntime 的子类！</p><h2 id="2-5-AppRuntime-onStarted"><a href="#2-5-AppRuntime-onStarted" class="headerlink" title="2.5 AppRuntime::onStarted"></a>2.5 AppRuntime::onStarted</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">virtual <span class="keyword">void</span> <span class="title">onStarted</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;ProcessState&gt; proc = ProcessState::self();</span><br><span class="line">    ALOGV(<span class="string">"App process: starting thread pool.\n"</span>);</span><br><span class="line">    proc-&gt;startThreadPool();</span><br><span class="line">    <span class="comment">//【2.6】执行 AndroidRuntime 的 callMain 方法！</span></span><br><span class="line">    AndroidRuntime* ar = AndroidRuntime::getRuntime();</span><br><span class="line">    ar-&gt;callMain(mClassName, mClass, mArgs);</span><br><span class="line"></span><br><span class="line">    IPCThreadState::self()-&gt;stopProcess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-AndroidRuntime-callMain"><a href="#2-6-AndroidRuntime-callMain" class="headerlink" title="2.6 AndroidRuntime::callMain"></a>2.6 AndroidRuntime::callMain</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">status_t AndroidRuntime::callMain(<span class="keyword">const</span> String8&amp; className, jclass clazz,</span><br><span class="line">    <span class="keyword">const</span> Vector&lt;String8&gt;&amp; args)</span><br><span class="line">&#123;</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    jmethodID methodId;</span><br><span class="line"></span><br><span class="line">    ALOGD(<span class="string">"Calling main entry %s"</span>, className.string());</span><br><span class="line"></span><br><span class="line">    env = getJNIEnv();</span><br><span class="line">    <span class="keyword">if</span> (clazz == NULL || env == NULL) &#123;</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    methodId = env-&gt;GetStaticMethodID(clazz, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (methodId == NULL) &#123;</span><br><span class="line">        ALOGE(<span class="string">"ERROR: could not find method %s.main(String[])\n"</span>, className.string());</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】创建一个 String 数组来封装参数！</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> size_t numArgs = args.size();</span><br><span class="line">    stringClass = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</span><br><span class="line">    strArray = env-&gt;NewObjectArray(numArgs, stringClass, NULL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; numArgs; i++) &#123;</span><br><span class="line">        jstring argStr = env-&gt;NewStringUTF(args[i].string());</span><br><span class="line">        env-&gt;SetObjectArrayElement(strArray, i, argStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.7】最终反射调用了 Pm.main 方法！</span></span><br><span class="line">    env-&gt;CallStaticVoidMethod(clazz, methodId, strArray);</span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-Pm-main"><a href="#2-7-Pm-main" class="headerlink" title="2.7 Pm.main"></a>2.7 Pm.main</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exitCode = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.8】执行 Pm.run f方法！</span></span><br><span class="line">        exitCode = <span class="keyword">new</span> Pm().run(args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"Error"</span>, e);</span><br><span class="line">        System.err.println(<span class="string">"Error: "</span> + e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RemoteException) &#123;</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.exit(exitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-Pm-run"><a href="#2-8-Pm-run" class="headerlink" title="2.8 Pm.run"></a>2.8 Pm.run</h2><p>run 方法中涉及到的命令有很多，这里我们重点关注和 install 相关的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validCommand = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    <span class="comment">//【1】获得 PacakgeManager 对象！</span></span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得 PackageInstallerService 代理对象！</span></span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    String op = args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*2.9】runInstall 方法，执行执行安装！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"install"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="keyword">return</span> runInstall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].equalsIgnoreCase(<span class="string">"-l"</span>)) &#123;</span><br><span class="line">                validCommand = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> runShellCommand(<span class="string">"package"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"list"</span>, <span class="string">"package"</span> &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>].equalsIgnoreCase(<span class="string">"-lf"</span>)) &#123;</span><br><span class="line">                validCommand = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> runShellCommand(<span class="string">"package"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"list"</span>, <span class="string">"package"</span>, <span class="string">"-f"</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].equalsIgnoreCase(<span class="string">"-p"</span>)) &#123;</span><br><span class="line">                validCommand = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> displayPackageFilePath(args[<span class="number">1</span>], UserHandle.USER_SYSTEM);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (validCommand == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (op != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.err.println(<span class="string">"Error: unknown command '"</span> + op + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            showUsage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看！</p><h2 id="2-9-Pm-runInstall"><a href="#2-9-Pm-runInstall" class="headerlink" title="2.9 Pm.runInstall"></a>2.9 Pm.runInstall</h2><p>我们继续分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runInstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.9.1】创建安装参数</span></span><br><span class="line">    <span class="keyword">final</span> InstallParams params = makeInstallParams();</span><br><span class="line">    <span class="keyword">final</span> String inPath = nextArg(); <span class="comment">// 获得安装 apk 的路径！</span></span><br><span class="line">    <span class="keyword">boolean</span> installExternal =</span><br><span class="line">            (params.sessionParams.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (params.sessionParams.sizeBytes &lt; <span class="number">0</span> &amp;&amp; inPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(inPath);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (installExternal) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【1】解析 apk，用于计算 apk 大小！</span></span><br><span class="line">                    ApkLite baseApk = PackageParser.parseApkLite(file, <span class="number">0</span>);</span><br><span class="line">                    PackageLite pkgLite = <span class="keyword">new</span> PackageLite(<span class="keyword">null</span>, baseApk, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    params.sessionParams.setSize(</span><br><span class="line">                            PackageHelper.calculateInstalledSize(pkgLite, <span class="keyword">false</span>,</span><br><span class="line">                                    params.sessionParams.abiOverride));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageParserException | IOException e) &#123;</span><br><span class="line">                    System.err.println(<span class="string">"Error: Failed to parse APK file : "</span> + e);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.sessionParams.setSize(file.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.9.2】创建安装 Session！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = doCreateSession(params.sessionParams,</span><br><span class="line">            params.installerPackageName, params.userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inPath == <span class="keyword">null</span> &amp;&amp; params.sessionParams.sizeBytes == <span class="number">0</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Error: must either specify a package size or an APK file"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*2.9.3】该过程其实是将 inPath 指向的 apk 写入到 .tmp 目录下，指定了文件名是 "base.apk"</span></span><br><span class="line">        <span class="keyword">if</span> (doWriteSession(sessionId, inPath, params.sessionParams.sizeBytes, <span class="string">"base.apk"</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>) != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*2.9.4】提交 Session 触发安装！</span></span><br><span class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.9.5】如果安装异常，忽视本次事务！</span></span><br><span class="line">            mInstaller.abandonSession(sessionId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-1-Pm-makeInstallParams-创建事务参数"><a href="#2-9-1-Pm-makeInstallParams-创建事务参数" class="headerlink" title="2.9.1 Pm.makeInstallParams - 创建事务参数"></a>2.9.1 Pm.makeInstallParams - 创建事务参数</h3><p>Pm 中会根据传入的安装参数，创建 InstallParams，封装安装参数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallParams <span class="title">makeInstallParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.9.1.1】创建 SessionParams 实例，封装安装参数！</span></span><br><span class="line">    <span class="keyword">final</span> SessionParams sessionParams = <span class="keyword">new</span> SessionParams(SessionParams.MODE_FULL_INSTALL);</span><br><span class="line">    <span class="comment">//【*2.9.1.2】创建 InstallParams，解耦合！</span></span><br><span class="line">    <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams();</span><br><span class="line">    params.sessionParams = sessionParams; <span class="comment">// 设置引用关系！</span></span><br><span class="line">    String opt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】根据额外的参数，设置安装参数！</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = nextOption()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-l"</span>: </span><br><span class="line">                <span class="comment">//【1.1】该应用以 forward locked 方式安装，在该模式下，只有应用自己能够访问自己的代码</span></span><br><span class="line">                <span class="comment">// 和非资源文件！ </span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_FORWARD_LOCK;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-r"</span>: <span class="comment">//【1.2】替换已存在的 apk</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-i"</span>: <span class="comment">// 显式指定安装器</span></span><br><span class="line">                params.installerPackageName = nextArg();</span><br><span class="line">                <span class="keyword">if</span> (params.installerPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Missing installer package"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-t"</span>: <span class="comment">// 允许测试应用安装（设置了 android:testOnly）</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_ALLOW_TEST;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-s"</span>: <span class="comment">// 安装到外置存储</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-f"</span>: <span class="comment">// 安装到内置存储</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_INTERNAL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-d"</span>: <span class="comment">//【1.3】允许降级安装！</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_ALLOW_DOWNGRADE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-g"</span>: <span class="comment">//【1.4】授予运行时权限</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--dont-kill"</span>: <span class="comment">// 安装不会杀 app 进程</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_DONT_KILL_APP;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--originating-uri"</span>:</span><br><span class="line">                sessionParams.originatingUri = Uri.parse(nextOptionData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--referrer"</span>:</span><br><span class="line">                sessionParams.referrerUri = Uri.parse(nextOptionData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-p"</span>: <span class="comment">//【1.5】继承已存在的 apk，appPackageName 用以保存要继承的包名，也就是主 apk 的报名！</span></span><br><span class="line">                sessionParams.mode = SessionParams.MODE_INHERIT_EXISTING;</span><br><span class="line">                sessionParams.appPackageName = nextOptionData();</span><br><span class="line">                <span class="keyword">if</span> (sessionParams.appPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Missing inherit package name"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-S"</span>: <span class="comment">// 显式指定应用的大小</span></span><br><span class="line">                sessionParams.setSize(Long.parseLong(nextOptionData()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--abi"</span>: <span class="comment">// 显式指定 abi</span></span><br><span class="line">                sessionParams.abiOverride = checkAbiArgument(nextOptionData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--ephemeral"</span>: <span class="comment">// 作为一个 lightweight "ephemeral" 应用！</span></span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_EPHEMERAL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--user"</span>: <span class="comment">// 指定安装的 userId</span></span><br><span class="line">                params.userId = UserHandle.parseUserArg(nextOptionData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--install-location"</span>: <span class="comment">// 指定安装位置</span></span><br><span class="line">                sessionParams.installLocation = Integer.parseInt(nextOptionData());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--force-uuid"</span>:</span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_FORCE_VOLUME_UUID;</span><br><span class="line">                sessionParams.volumeUuid = nextOptionData();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"internal"</span>.equals(sessionParams.volumeUuid)) &#123;</span><br><span class="line">                    sessionParams.volumeUuid = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--force-sdk"</span>:</span><br><span class="line">                sessionParams.installFlags |= PackageManager.INSTALL_FORCE_SDK;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown option "</span> + opt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外的参数很多，根据额外的参数，对 SessionParams 进行了属性设置！</p><p>sessionParams.installFlags 会根据不同的额外参数，设置不同的二进制位，具体的含义我上面也简单的注释了下。大家可以自己去看源码！</p><p>这里我们要注意下：</p><ul><li>如果我们安装的是 split apk 的话，那么我们可以指定 -p 参数，后面指定主 apk 的包名，后面我们会分析其作用！</li></ul><h4 id="2-9-1-1-new-SessionParams"><a href="#2-9-1-1-new-SessionParams" class="headerlink" title="2.9.1.1 new SessionParams"></a>2.9.1.1 new SessionParams</h4><p>SessionParams 定义在 PackageInstaller.java 文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mode = MODE_INVALID;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installFlags;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installLocation = PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY; <span class="comment">// 默认为仅内置</span></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sizeBytes = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String appPackageName; <span class="comment">// 要继承的主 apk 的包名；</span></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> Bitmap appIcon;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String appLabel;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> appIconLastModified = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> Uri originatingUri;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> originatingUid = UID_UNKNOWN;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> Uri referrerUri;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String abiOverride;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String volumeUuid;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String[] grantedRuntimePermissions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionParams</span><span class="params">(<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mode = mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionParams</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">        mode = source.readInt();</span><br><span class="line">        installFlags = source.readInt();</span><br><span class="line">        installLocation = source.readInt();</span><br><span class="line">        sizeBytes = source.readLong();</span><br><span class="line">        appPackageName = source.readString();</span><br><span class="line">        appIcon = source.readParcelable(<span class="keyword">null</span>);</span><br><span class="line">        appLabel = source.readString();</span><br><span class="line">        originatingUri = source.readParcelable(<span class="keyword">null</span>);</span><br><span class="line">        originatingUid = source.readInt();</span><br><span class="line">        referrerUri = source.readParcelable(<span class="keyword">null</span>);</span><br><span class="line">        abiOverride = source.readString();</span><br><span class="line">        volumeUuid = source.readString();</span><br><span class="line">        grantedRuntimePermissions = source.readStringArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们来说下 mode 属性，它可以取三个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_INVALID = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示：完全替换已存在的 apk</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_FULL_INSTALL = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示：会继承已存在的 apk，可以用于给 apk 添加 split APKS，如果没有已存在的 apk，</span></span><br><span class="line"><span class="comment">// 效果和 MODE_FULL_INSTALL 是一样的！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_INHERIT_EXISTING = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>我们省略掉暂时用不到的一些接口，后面有机会再分析！</p><h4 id="2-9-1-2-new-Pm-InstallParams"><a href="#2-9-1-2-new-Pm-InstallParams" class="headerlink" title="2.9.1.2 new Pm.InstallParams"></a>2.9.1.2 new Pm.InstallParams</h4><p>InstallParams 类很简单，内部有一个 SessionParams 实例变量，封装安装参数！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstallParams</span> </span>&#123;</span><br><span class="line">    SessionParams sessionParams;</span><br><span class="line">    String installerPackageName; <span class="comment">// 安装器的名字！</span></span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_ALL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-9-2-Pm-doCreateSession-创建事务"><a href="#2-9-2-Pm-doCreateSession-创建事务" class="headerlink" title="2.9.2 Pm.doCreateSession - 创建事务"></a>2.9.2 Pm.doCreateSession - 创建事务</h3><p>创建 install Session 对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCreateSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runInstallCreate"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1】进入 PackageInstallerService！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = mInstaller.createSession(params, installerPackageName, userId);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入了 PackageInstallerService 服务，创建 Session 对象！</p><h3 id="2-9-3-Pm-doWriteSession-写入事务（实际上是拷贝文件）"><a href="#2-9-3-Pm-doWriteSession-写入事务（实际上是拷贝文件）" class="headerlink" title="2.9.3 Pm.doWriteSession - 写入事务（实际上是拷贝文件）"></a>2.9.3 Pm.doWriteSession - 写入事务（实际上是拷贝文件）</h3><p>回顾下参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【*2.9.3】将安装 Session 持久化到本地文件！</span></span><br><span class="line"><span class="keyword">if</span> (doWriteSession(sessionId, inPath, params.sessionParams.sizeBytes, <span class="string">"base.apk"</span>,...))</span><br></pre></td></tr></table></figure><p>这里的 splitName 值为 “base.apk”；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doWriteSession</span><span class="params">(<span class="keyword">int</span> sessionId, String inPath, <span class="keyword">long</span> sizeBytes, String splitName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的 inPath 就是前面创建的 /data/local/tmp/ 目录！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"-"</span>.equals(inPath)) &#123;</span><br><span class="line">        inPath = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> File file = <span class="keyword">new</span> File(inPath);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            sizeBytes = file.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.3.2】根据前面创建的 Session id，获得本次安装事务对象！</span></span><br><span class="line">    <span class="keyword">final</span> SessionInfo info = mInstaller.getSessionInfo(sessionId);</span><br><span class="line"></span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.2.1】通过 PackageInstallerService.openSession 获得对应的 PackageInstallerSession 对象！</span></span><br><span class="line">        <span class="comment">//【*2.9.3.1】封装成 Session 实例！</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInstaller.openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】 定义输入流对象，指向待安装 APK 对应文件的源地址！</span></span><br><span class="line">        <span class="keyword">if</span> (inPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(inPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> SizedInputStream(System.in, sizeBytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*2.9.3.1.1】 定义输出流对象，指向待安装 APK 对应文件的源地址！</span></span><br><span class="line">        out = session.openWrite(splitName, <span class="number">0</span>, sizeBytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">65536</span>];</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            total += c;</span><br><span class="line">            <span class="comment">//【5】拷贝文件到 /data/app/vmdl[sessionId].tmp 目标目录！</span></span><br><span class="line">            out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (info.sizeBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> fraction = ((<span class="keyword">float</span>) c / (<span class="keyword">float</span>) info.sizeBytes);</span><br><span class="line">                <span class="comment">//【6】同时更新拷贝进度</span></span><br><span class="line">                session.addProgress(fraction);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        session.fsync(out);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Success: streamed "</span> + total + <span class="string">" bytes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】拷贝完成，返回 STATUS_SUCCESS！</span></span><br><span class="line">        <span class="keyword">return</span> PackageInstaller.STATUS_SUCCESS;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Error: failed to write; "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> PackageInstaller.STATUS_FAILURE;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(out);</span><br><span class="line">        IoUtils.closeQuietly(in);</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doWriteSession 整个流程其实就是进行 apk 的拷贝操作！ </p><h4 id="2-9-3-1-new-PackageInstaller-Session"><a href="#2-9-3-1-new-PackageInstaller-Session" class="headerlink" title="2.9.3.1 new PackageInstaller.Session"></a>2.9.3.1 new PackageInstaller.Session</h4><p>Session 是对 PackageInstallerSession 的简单封装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IPackageInstallerSession mSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Session</span><span class="params">(IPackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        mSession = session;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>mSession 指向了对应的 PackageInstallerSession 实例！</p><p>同时其还提供了很多借口，来操作 PackageInstallerSession，这里我们用一张图先简单的看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Session.setProgress  -&gt;  PackageInstallerSession.setClientProgress</span><br><span class="line">Session.setStagingProgress  -&gt;  PackageInstallerSession.setClientProgress</span><br><span class="line">Session.addProgress  -&gt;  PackageInstallerSession.addClientProgress</span><br><span class="line"></span><br><span class="line">Session.openWrite  -&gt;  PackageInstallerSession.openWrite</span><br><span class="line">Session.openRead  -&gt;  PackageInstallerSession.openRead</span><br><span class="line"></span><br><span class="line">Session.commit  -&gt;  PackageInstallerSession.commit</span><br><span class="line">Session.abandon  -&gt;  PackageInstallerSession.abandon</span><br><span class="line">... ... ...</span><br></pre></td></tr></table></figure><p>这里我们先来看目前已经涉及到的一些重要方法：</p><h5 id="2-9-3-1-1-Session-openWrite"><a href="#2-9-3-1-1-Session-openWrite" class="headerlink" title="2.9.3.1.1 Session.openWrite"></a>2.9.3.1.1 Session.openWrite</h5><p>这里的 name 传入的是 base.apk：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">OutputStream <span class="title">openWrite</span><span class="params">(@NonNull String name, <span class="keyword">long</span> offsetBytes,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">long</span> lengthBytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.1】这里会调用 PackageInstallerSession 的 openWrite 方法</span></span><br><span class="line">        <span class="comment">// 将前面创建 Session 的文件目录 /data/app/vmdl[sessionId].tmp 封装成一个文件描述符对象！  </span></span><br><span class="line">        <span class="keyword">final</span> ParcelFileDescriptor clientSocket = mSession.openWrite(name,</span><br><span class="line">                offsetBytes, lengthBytes);</span><br><span class="line">        <span class="comment">//【2】获得该文件描述符输出流！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileBridge.FileBridgeOutputStream(clientSocket);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        ExceptionUtils.maybeUnwrapIOException(e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mSession.openWrite 方法涉及到了文件相关处理，这里就不过多关注！</p><h5 id="2-9-3-1-2-Session-addProgress"><a href="#2-9-3-1-2-Session-addProgress" class="headerlink" title="2.9.3.1.2 Session.addProgress"></a>2.9.3.1.2 Session.addProgress</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.9.3.1.2.1】这里会调用 PackageInstallerSession 的 addClientProgress 方法</span></span><br><span class="line">        <span class="comment">// 更新文件读写进度！</span></span><br><span class="line">        mSession.addClientProgress(progress);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h6 id="2-9-3-1-2-1-PackageInstallerSession-addClientProgress"><a href="#2-9-3-1-2-1-PackageInstallerSession-addClientProgress" class="headerlink" title="2.9.3.1.2.1 PackageInstallerSession.addClientProgress"></a>2.9.3.1.2.1 PackageInstallerSession.addClientProgress</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClientProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">//【*2.9.3.1.2.2】调用了 setClientProgress 方法！</span></span><br><span class="line">        setClientProgress(mClientProgress + progress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-9-3-1-2-2-PackageInstallerSession-setClientProgress"><a href="#2-9-3-1-2-2-PackageInstallerSession-setClientProgress" class="headerlink" title="2.9.3.1.2.2 PackageInstallerSession.setClientProgress"></a>2.9.3.1.2.2 PackageInstallerSession.setClientProgress</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClientProgress</span><span class="params">(<span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">//【1】用于第一次更新进度！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> forcePublish = (mClientProgress == <span class="number">0</span>);</span><br><span class="line">        mClientProgress = progress;</span><br><span class="line">        <span class="comment">//【*2.9.3.1.2.3】最终，调用 computeProgressLocked 方法！</span></span><br><span class="line">        computeProgressLocked(forcePublish);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-9-3-1-2-3-PackageInstallerSession-computeProgressLocked"><a href="#2-9-3-1-2-3-PackageInstallerSession-computeProgressLocked" class="headerlink" title="2.9.3.1.2.3 PackageInstallerSession.computeProgressLocked"></a>2.9.3.1.2.3 PackageInstallerSession.computeProgressLocked</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeProgressLocked</span><span class="params">(<span class="keyword">boolean</span> forcePublish)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】计算进度！</span></span><br><span class="line">    mProgress = MathUtils.constrain(mClientProgress * <span class="number">0.8f</span>, <span class="number">0f</span>, <span class="number">0.8f</span>)</span><br><span class="line">            + MathUtils.constrain(mInternalProgress * <span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>);</span><br><span class="line">    <span class="comment">//【2】更新进度</span></span><br><span class="line">    <span class="keyword">if</span> (forcePublish || Math.abs(mProgress - mReportedProgress) &gt;= <span class="number">0.01</span>) &#123;</span><br><span class="line">        mReportedProgress = mProgress;</span><br><span class="line">        <span class="comment">//【*3.1.4.2】同时通知事务观察者，进度的变化！</span></span><br><span class="line">        mCallback.onSessionProgressChanged(<span class="keyword">this</span>, mProgress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，这里就不多说了！</p><h3 id="2-9-4-Pm-doCommitSession-提交事务"><a href="#2-9-4-Pm-doCommitSession-提交事务" class="headerlink" title="2.9.4 Pm.doCommitSession - 提交事务"></a>2.9.4 Pm.doCommitSession - 提交事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCommitSession</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.9.3.1】获得前面创建的 Session 对象！</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInstaller.openSession(sessionId));</span><br><span class="line">        <span class="comment">//【*2.9.4.1】创建了一个 LocalIntentReceiver！</span></span><br><span class="line">        <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*2.9.4.2】将 receiver.getIntentSender() 传递给 pms，用户客户端进程获得安装结果</span></span><br><span class="line">        <span class="comment">//【*2.9.4.3】调用 PackageInstallerSession 的 commit 方法，提交事务！</span></span><br><span class="line">        session.commit(receiver.getIntentSender());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*2.9.4.4】处理返回结果！</span></span><br><span class="line">        <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">                PackageInstaller.STATUS_FAILURE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"Failure ["</span></span><br><span class="line">                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，提交过程就结束了，最终的逻辑是在 PackageInstallerService 中实现！</p><h4 id="2-9-4-1-new-LocalIntentReceiver-跨进程返回结果"><a href="#2-9-4-1-new-LocalIntentReceiver-跨进程返回结果" class="headerlink" title="2.9.4.1 new LocalIntentReceiver - 跨进程返回结果"></a>2.9.4.1 new LocalIntentReceiver - 跨进程返回结果</h4><p>LocalIntentReceiver 用来接收安装结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalIntentReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】以 Intent 的方式保存安装结果！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SynchronousQueue&lt;Intent&gt; mResult = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IIntentSender.Stub mLocalSender = <span class="keyword">new</span> IIntentSender.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> code, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">                IIntentReceiver finishedReceiver, String requiredPermission, Bundle options)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1.1】将结果保存到 mResult 中！</span></span><br><span class="line">                mResult.offer(intent, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ... ... ...</span><br></pre></td></tr></table></figure><p>LocalIntentReceiver 有一个内部成员 mLocalSender，实现了 IIntentSender.Stub，用于跨进程通信！</p><p>系统进程会持有 mLocalSender 对应的代理对象，通过 send 方法，将安装的状态或者结果返回保存到 mResult 中！</p><h4 id="2-9-4-2-LocalIntentReceiver-getIntentSender"><a href="#2-9-4-2-LocalIntentReceiver-getIntentSender" class="headerlink" title="2.9.4.2 LocalIntentReceiver.getIntentSender"></a>2.9.4.2 LocalIntentReceiver.getIntentSender</h4><p>getIntentSender 将 getIntentSender 封装到 IntentSender 中，由于 IntentSender 实现了 Parcelable，所以可以跨进程传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IntentSender <span class="title">getIntentSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IntentSender((IIntentSender) mLocalSender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-9-4-3-Session-commit"><a href="#2-9-4-3-Session-commit" class="headerlink" title="2.9.4.3 Session.commit"></a>2.9.4.3 Session.commit</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(@NonNull IntentSender statusReceiver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.2】最终，调用了 PackageInstallerSession 的 commit 方法，进入系统进程！</span></span><br><span class="line">        mSession.commit(statusReceiver);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h4 id="2-9-4-4-LocalIntentReceiver-getResult"><a href="#2-9-4-4-LocalIntentReceiver-getResult" class="headerlink" title="2.9.4.4 LocalIntentReceiver.getResult"></a>2.9.4.4 LocalIntentReceiver.getResult</h4><p>getResult 用于获得安装结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】返回安装结果！</span></span><br><span class="line">        <span class="keyword">return</span> mResult.take();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就先分析到这里：</p><p>#3 PackageInstallerService</p><p>下面来分析下 PackageInstallerService 中的逻辑，我们先来看看 PackageInstallerService 的创建，当然，这部分的逻辑是在开机的时候，这里我们再回顾下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerService</span><span class="params">(Context context, PackageManagerService pm)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mPm = pm;</span><br><span class="line">    <span class="comment">//【1】启动了一个 HandlerThread 线程！</span></span><br><span class="line">    mInstallThread = <span class="keyword">new</span> HandlerThread(TAG);</span><br><span class="line">    mInstallThread.start();</span><br><span class="line">    <span class="comment">//【2】创建了 mInstallThread 对应的 Handler；</span></span><br><span class="line">    mInstallHandler = <span class="keyword">new</span> Handler(mInstallThread.getLooper());</span><br><span class="line">    <span class="comment">//【*3.1.4.1】创建了 Callbacks 实例，用于处理安装回调，传入了子线程的 Loopder！</span></span><br><span class="line">    mCallbacks = <span class="keyword">new</span> Callbacks(mInstallThread.getLooper());</span><br><span class="line">    <span class="comment">//【3】创建了 sessions 本地持久化文件和目录对象！</span></span><br><span class="line">    mSessionsFile = <span class="keyword">new</span> AtomicFile(</span><br><span class="line">            <span class="keyword">new</span> File(Environment.getDataSystemDirectory(), <span class="string">"install_sessions.xml"</span>));</span><br><span class="line">    mSessionsDir = <span class="keyword">new</span> File(Environment.getDataSystemDirectory(), <span class="string">"install_sessions"</span>);</span><br><span class="line">    mSessionsDir.mkdirs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【4】读取本次持久化文件中的事务，创建对应的 PackageInstallerSession 实例！</span></span><br><span class="line">        readSessionsLocked();</span><br><span class="line">        <span class="comment">//【5】解决临时拷贝目录和持久化事务的冲突，过程很简单，移除那些没有持久化事务的临时拷贝文件！</span></span><br><span class="line">        reconcileStagesLocked(StorageManager.UUID_PRIVATE_INTERNAL, <span class="keyword">false</span> <span class="comment">/*isEphemeral*/</span>);</span><br><span class="line">        reconcileStagesLocked(StorageManager.UUID_PRIVATE_INTERNAL, <span class="keyword">true</span> <span class="comment">/*isEphemeral*/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArraySet&lt;File&gt; unclaimedIcons = newArraySet(</span><br><span class="line">                mSessionsDir.listFiles());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSessions.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageInstallerSession session = mSessions.valueAt(i);</span><br><span class="line">            unclaimedIcons.remove(buildAppIconFile(session.sessionId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File icon : unclaimedIcons) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Deleting orphan icon "</span> + icon);</span><br><span class="line">            icon.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 PackageInstallerService 这里就不在过多分析，我们继续看！！</p><h2 id="3-1-PackageInstallerS-createSession-Internal-创建事务"><a href="#3-1-PackageInstallerS-createSession-Internal-创建事务" class="headerlink" title="3.1 PackageInstallerS.createSession(Internal) - 创建事务"></a>3.1 PackageInstallerS.createSession(Internal) - 创建事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】继续来看！</span></span><br><span class="line">        <span class="keyword">return</span> createSessionInternal(params, installerPackageName, userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createSession 方法调用了 createSessionInternal 方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createSessionInternal</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】权限检查！</span></span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"createSession"</span>);</span><br><span class="line">    <span class="comment">//【2】用户操作检查！</span></span><br><span class="line">    <span class="keyword">if</span> (mPm.isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"User restriction prevents installing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果调用进程的 uid 是 SHELL_UID 或者 ROOT_UID，那么 installFlags 增加爱你 INSTALL_FROM_ADB</span></span><br><span class="line">    <span class="comment">// 表示通过 adb 进行安装！</span></span><br><span class="line">    <span class="keyword">if</span> ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) &#123;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_FROM_ADB;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是 shell or root，校验下 package 是否属于 uid，</span></span><br><span class="line">        mAppOps.checkPackage(callingUid, installerPackageName);</span><br><span class="line">        <span class="comment">// 取消 INSTALL_FROM_ADB 和 INSTALL_ALL_USERS 标志位，设置 INSTALL_REPLACE_EXISTING 标志位！</span></span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_FROM_ADB;</span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果 installFlags 设置了 INSTALL_GRANT_RUNTIME_PERMISSIONS 标志位，那需要判断调用者是否有 </span></span><br><span class="line">    <span class="comment">// INSTALL_GRANT_RUNTIME_PERMISSIONS 权限！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission</span><br><span class="line">            .INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"You need the "</span></span><br><span class="line">                + <span class="string">"android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission "</span></span><br><span class="line">                + <span class="string">"to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】调整应用的 icon 图标！</span></span><br><span class="line">    <span class="keyword">if</span> (params.appIcon != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityManager am = (ActivityManager) mContext.getSystemService(</span><br><span class="line">                Context.ACTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> iconSize = am.getLauncherLargeIconSize();</span><br><span class="line">        <span class="keyword">if</span> ((params.appIcon.getWidth() &gt; iconSize * <span class="number">2</span>)</span><br><span class="line">                || (params.appIcon.getHeight() &gt; iconSize * <span class="number">2</span>)) &#123;</span><br><span class="line">            params.appIcon = Bitmap.createScaledBitmap(params.appIcon, iconSize, iconSize,</span><br><span class="line">                    <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】检查 mode 取值是否正确！</span></span><br><span class="line">    <span class="keyword">switch</span> (params.mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_FULL_INSTALL:</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_INHERIT_EXISTING:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid install mode: "</span> + params.mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】根据 installFlags 设置，调整安装位置，如果用户显示设置了位置，系统会对其进行检查，否则</span></span><br><span class="line">    <span class="comment">// 系统会选择合适的位置！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.1】如果显式指定内置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnInternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable internal storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.2】如果显式指定外置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnExternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable external storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_FORCE_VOLUME_UUID) != <span class="number">0</span>) &#123;</span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【7.4】默认情况下，进入这里，setInstallFlagsInternal 方法会设置 INSTALL_INTERNAL 标志位</span></span><br><span class="line">        <span class="comment">// 取消 INSTALL_EXTERNAL 标志位！</span></span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择最好的位置来安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            params.volumeUuid = PackageHelper.resolveInstallVolume(mContext,</span><br><span class="line">                    params.appPackageName, params.installLocation, params.sizeBytes);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId;</span><br><span class="line">    <span class="keyword">final</span> PackageInstallerSession session;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【*3.1.1】判断，同一个 uid 是否有过多的正在处理的 Session，如果超过了 1024 个，那当前就不能执行安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> activeCount = getSessionCount(mSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (activeCount &gt;= MAX_ACTIVE_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many active sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同样。判断同一个 uid，是否已经提交了过多的 Session，如果超过了 1048576 个，那当前就不能执行安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> historicalCount = getSessionCount(mHistoricalSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (historicalCount &gt;= MAX_HISTORICAL_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many historical sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*3.1.2】给本次安装分配一个事务 id！</span></span><br><span class="line">        sessionId = allocateSessionIdLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> createdMillis = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【8】决定安装目录，因为默认是内置空间，这里会直接进入 buildStageDir 方法！</span></span><br><span class="line">    File stageDir = <span class="keyword">null</span>;</span><br><span class="line">    String stageCid = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【*3.1.3】创建文件临时目录；/data/app/vmdl[sessionId].tmp！</span></span><br><span class="line">        stageDir = buildStageDir(params.volumeUuid, sessionId, isEphemeral);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是外置，会直接返回 "smdl" + sessionId + ".tmp"</span></span><br><span class="line">        stageCid = buildExternalStageCid(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.1.4】创建 PackageInstallerSession 对象！</span></span><br><span class="line">    session = <span class="keyword">new</span> PackageInstallerSession(mInternalCallback, mContext, mPm,</span><br><span class="line">            mInstallThread.getLooper(), sessionId, userId, installerPackageName, callingUid,</span><br><span class="line">            params, createdMillis, stageDir, stageCid, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【9】将新创建的 PackageInstallerSession 添加到 mSessions 集合中！</span></span><br><span class="line">        mSessions.put(sessionId, session);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.1.4.2】通知有新的事务创建了，这里是直接回调 Callback 的接口！！</span></span><br><span class="line">    mCallbacks.notifySessionCreated(session.sessionId, session.userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.1.6】持久化事务 Session！</span></span><br><span class="line">    writeSessionsAsync();</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-PackageInstallerS-getSessionCount"><a href="#3-1-1-PackageInstallerS-getSessionCount" class="headerlink" title="3.1.1 PackageInstallerS.getSessionCount"></a>3.1.1 PackageInstallerS.getSessionCount</h3><p>获得 installerUid 创建的 Session 总数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSessionCount</span><span class="params">(SparseArray&lt;PackageInstallerSession&gt; sessions,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> installerUid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = sessions.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageInstallerSession session = sessions.valueAt(i);</span><br><span class="line">        <span class="comment">//【1】匹配创建者的 uid！</span></span><br><span class="line">        <span class="keyword">if</span> (session.installerUid == installerUid) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageInstallerService 有两个 SparseBooleanArray 成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;PackageInstallerSession&gt; mSessions = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br></pre></td></tr></table></figure><p>mSessions 保存了所有正在处理的 Session 实例，下标为创建事务的 uid，值为 PackageInstallerSession 是对 Session 的封装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Historical sessions kept around for debugging purposes */</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;PackageInstallerSession&gt; mHistoricalSessions = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br></pre></td></tr></table></figure><p>mHistoricalSessions 保存了所有已经处理的 Session 实例，下标为创建事务的 uid，值为 PackageInstallerSession 是对 Session 的封装！</p><p>###3.1.2 PackageInstallerS.allocateSessionIdLocked</p><p>allocateSessionIdLocked 方法用于给新的 Session 分配 id！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">allocateSessionIdLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sessionId;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sessionId = mRandom.nextInt(Integer.MAX_VALUE - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!mAllocatedSessions.get(sessionId, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            mAllocatedSessions.put(sessionId, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> sessionId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (n++ &lt; <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to allocate session ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageInstallerService 还有一个 SparseBooleanArray 成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** All sessions allocated */</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseBooleanArray mAllocatedSessions = <span class="keyword">new</span> SparseBooleanArray();</span><br></pre></td></tr></table></figure><p>mAllocatedSessions 保存了所有的 Session 实例，包括正在处理和已经处理的（mSessions 和 mHistoricalSessions），下标为创建事务的 uid，值为 PackageInstallerSession 是对 Session 的封装！</p><h3 id="3-1-3-PackageInstallerS-buildStageDir"><a href="#3-1-3-PackageInstallerS-buildStageDir" class="headerlink" title="3.1.3 PackageInstallerS.buildStageDir"></a>3.1.3 PackageInstallerS.buildStageDir</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">buildStageDir</span><span class="params">(String volumeUuid, <span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> isEphemeral)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> File stagingDir = buildStagingDir(volumeUuid, isEphemeral);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(stagingDir, <span class="string">"vmdl"</span> + sessionId + <span class="string">".tmp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在安装时，创建的临时文件目录是 /data/app/vmdl[sessionId].tmp！！</p><h4 id="3-1-3-1-PackageInstallerS-buildStagingDir"><a href="#3-1-3-1-PackageInstallerS-buildStagingDir" class="headerlink" title="3.1.3.1 PackageInstallerS.buildStagingDir"></a>3.1.3.1 PackageInstallerS.buildStagingDir</h4><p>buildStagingDir 用于返回文件根目录！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">buildStagingDir</span><span class="params">(String volumeUuid, <span class="keyword">boolean</span> isEphemeral)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEphemeral) &#123;</span><br><span class="line">        <span class="comment">// 如果显示指定了 ephemeral 参数的话，返回的是 /data/app-ephemeral 目录！</span></span><br><span class="line">        <span class="keyword">return</span> Environment.getDataAppEphemeralDirectory(volumeUuid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】默认情况，返回的是 /data/app 目录！</span></span><br><span class="line">    <span class="keyword">return</span> Environment.getDataAppDirectory(volumeUuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-4-new-PackageInstallerSession-事务实例"><a href="#3-1-4-new-PackageInstallerSession-事务实例" class="headerlink" title="3.1.4 new PackageInstallerSession - 事务实例"></a>3.1.4 new PackageInstallerSession - 事务实例</h3><p>创建 PackageInstallerSession，对前面的 SessionParams 再次封装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerSession</span> <span class="keyword">extends</span> <span class="title">IPackageInstallerSession</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerSession</span><span class="params">(PackageInstallerService.InternalCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, PackageManagerService pm, Looper looper, <span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            String installerPackageName, <span class="keyword">int</span> installerUid, SessionParams params, <span class="keyword">long</span> createdMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">            File stageDir, String stageCid, <span class="keyword">boolean</span> prepared, <span class="keyword">boolean</span> sealed)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【×3.1.4.1】InternalCallback 回调！</span></span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mPm = pm;</span><br><span class="line">        <span class="comment">//【2】创建 Handler 绑定到子线程 mInstallThread，该子线程是在 PackageInstallerService 构造器中创建的！</span></span><br><span class="line">        <span class="comment">//【*4.2】这里通过 mHandlerCallback 指定了一个回调函数！</span></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler(looper, mHandlerCallback);</span><br><span class="line">        <span class="comment">//【3】基本属性保存</span></span><br><span class="line">        <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.installerPackageName = installerPackageName;</span><br><span class="line">        <span class="keyword">this</span>.installerUid = installerUid;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.createdMillis = createdMillis;</span><br><span class="line">        <span class="keyword">this</span>.stageDir = stageDir; <span class="comment">// 内置临时目录：/data/app/vmdl[sessionId].tmp；</span></span><br><span class="line">        <span class="keyword">this</span>.stageCid = stageCid; <span class="comment">// 默认为 null；</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((stageDir == <span class="keyword">null</span>) == (stageCid == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Exactly one of stageDir or stageCid stage must be set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPrepared = prepared; <span class="comment">// 传入 false；</span></span><br><span class="line">        mSealed = sealed; <span class="comment">// 传入 false；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】获得 DevicePolicyManager 对象，用于静默安装相关的判断，如果是安装者是设备拥有者，</span></span><br><span class="line">        <span class="comment">// 可以不检查权限，直接静默安装！</span></span><br><span class="line">        DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">                Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">        <span class="comment">//【5】校验安装者 uid 是否有 INSTALL_PACKAGES 权限！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPermissionGranted =</span><br><span class="line">                (mPm.checkUidPermission(android.Manifest.permission.INSTALL_PACKAGES, installerUid)</span><br><span class="line">                        == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">        <span class="comment">//【6】安装者是否是 root 用户！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isInstallerRoot = (installerUid == Process.ROOT_UID);</span><br><span class="line">        <span class="comment">//【7】是否强制提醒！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> forcePermissionPrompt =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_FORCE_PERMISSION_PROMPT) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【8】安装者是否是设备拥有者自身！</span></span><br><span class="line">        mIsInstallerDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">                installerPackageName);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【8】如果 mPermissionsAccepted 为 true，那么我们就可以静默安装！</span></span><br><span class="line">        <span class="keyword">if</span> ((isPermissionGranted</span><br><span class="line">                        || isInstallerRoot</span><br><span class="line">                        || mIsInstallerDeviceOwner)</span><br><span class="line">                &amp;&amp; !forcePermissionPrompt) &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1】获得 container 的 uid 和 gid！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> uid = mPm.getPackageUid(PackageManagerService.DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">                    PackageManager.MATCH_SYSTEM_ONLY, UserHandle.USER_SYSTEM);</span><br><span class="line">            defaultContainerGid = UserHandle.getSharedAppGid(uid);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到 PackageInstallerSession 除了用来表示一个 Session 之外，由于继承了 IPackageInstallerSession.Stub，因此其还可以作为服务端的桩对象，进行跨进程的通信！</p><p>这里的 DEFAULT_CONTAINER_PACKAGE 是一个字符串常量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTAINER_PACKAGE = <span class="string">"com.android.defcontainer"</span>;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-4-1-new-InternalCallback"><a href="#3-1-4-1-new-InternalCallback" class="headerlink" title="3.1.4.1 new InternalCallback"></a>3.1.4.1 new InternalCallback</h4><p>在创建 PackageInstallerSession 时，我们传入了一个回调对象 InternalCallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InternalCallback mInternalCallback = <span class="keyword">new</span> InternalCallback();</span><br></pre></td></tr></table></figure><p>InternalCallback 类定义在 PackageInstallerService 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InternalCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionBadgingChanged</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionBadgingChanged(session.sessionId, session.userId);</span><br><span class="line">        <span class="comment">//【*3.1.6】更新持久化文件</span></span><br><span class="line">        writeSessionsAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】当 Session 的活跃状态发生变化时，回调触发！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionActiveChanged</span><span class="params">(PackageInstallerSession session, <span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionActiveChanged(session.sessionId, session.userId, active);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】当 Session 的进度发生了变化，会触发该方法！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionProgressChanged</span><span class="params">(PackageInstallerSession session, <span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionProgressChanged(session.sessionId, session.userId, progress);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】当 Session 完成后，会触发该方法！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionFinished</span><span class="params">(<span class="keyword">final</span> PackageInstallerSession session, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionFinished(session.sessionId, session.userId, success);</span><br><span class="line"></span><br><span class="line">        mInstallHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">                    mSessions.remove(session.sessionId);</span><br><span class="line">                    mHistoricalSessions.put(session.sessionId, session);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> File appIconFile = buildAppIconFile(session.sessionId);</span><br><span class="line">                    <span class="keyword">if</span> (appIconFile.exists()) &#123;</span><br><span class="line">                        appIconFile.delete();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【*3.1.6.1】更新持久化文件</span></span><br><span class="line">                    writeSessionsLocked();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionPrepared</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【*3.1.6】更新持久化文件</span></span><br><span class="line">        writeSessionsAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionSealedBlocking</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">            <span class="comment">//【*3.1.6.1】更新持久化文件</span></span><br><span class="line">            writeSessionsLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当 Session 的状态发生变化后，InternalCallback 回调会触发！</p><p>同时会回调 mCallbacks 的一些接口，而 mCallbacks 是在 PackageInstallerService 中创建的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerService</span><span class="params">(Context context, PackageManagerService pm)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="comment">//【*3.1.4.1.1】初始化 Callbacks！</span></span><br><span class="line">    mCallbacks = <span class="keyword">new</span> Callbacks(mInstallThread.getLooper());</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下 Callbacks 的逻辑！</p><h5 id="3-1-4-1-1-new-Callbacks"><a href="#3-1-4-1-1-new-Callbacks" class="headerlink" title="3.1.4.1.1 new Callbacks"></a>3.1.4.1.1 new Callbacks</h5><p>Callbacks 是 Handler 的子类，持有子线程 mInstallThread 的 looper，Callbacks 是在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callbacks</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callbacks</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">     <span class="comment">//【1】内部会处理的消息！</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_CREATED = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_BADGING_CHANGED = <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_ACTIVE_CHANGED = <span class="number">3</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_PROGRESS_CHANGED = <span class="number">4</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_FINISHED = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//【2】监听安装状态的观察者 list</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> RemoteCallbackList&lt;IPackageInstallerCallback&gt;</span><br><span class="line">             mCallbacks = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Callbacks</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(looper);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>Callbacks 内部有一个 list，保存了所有监听 Session 状态变化的观察者，同时提供了 register 接口，动态注册观察者！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(IPackageInstallerCallback callback, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    mCallbacks.register(callback, <span class="keyword">new</span> UserHandle(userId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(IPackageInstallerCallback callback)</span> </span>&#123;</span><br><span class="line">    mCallbacks.unregister(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Callbacks 内部有如下的 notify 接口，来通知 Session 的状态变化！</p><h5 id="3-1-4-1-2-Callbacks-notifySessionXXXX"><a href="#3-1-4-1-2-Callbacks-notifySessionXXXX" class="headerlink" title="3.1.4.1.2 Callbacks.notifySessionXXXX"></a>3.1.4.1.2 Callbacks.notifySessionXXXX</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionCreated</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        obtainMessage(MSG_SESSION_CREATED, sessionId, userId).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionBadgingChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        obtainMessage(MSG_SESSION_BADGING_CHANGED, sessionId, userId).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionActiveChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        obtainMessage(MSG_SESSION_ACTIVE_CHANGED, sessionId, userId, active).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionProgressChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">        obtainMessage(MSG_SESSION_PROGRESS_CHANGED, sessionId, userId, progress).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifySessionFinished</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        obtainMessage(MSG_SESSION_FINISHED, sessionId, userId, success).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上是发送不同的 msg，下面来看看：</p><h5 id="3-1-4-1-3-Callbacks-handleMessage"><a href="#3-1-4-1-3-Callbacks-handleMessage" class="headerlink" title="3.1.4.1.3 Callbacks.handleMessage"></a>3.1.4.1.3 Callbacks.handleMessage</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = msg.arg2;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> n = mCallbacks.beginBroadcast();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//【1】遍历所有的观察者</span></span><br><span class="line">        <span class="keyword">final</span> IPackageInstallerCallback callback = mCallbacks.getBroadcastItem(i);</span><br><span class="line">        <span class="keyword">final</span> UserHandle user = (UserHandle) mCallbacks.getBroadcastCookie(i);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> dispatch notifications for slave profiles</span></span><br><span class="line">        <span class="keyword">if</span> (userId == user.getIdentifier()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*3.1.4.1.3】分发 Session 消息给观察者！</span></span><br><span class="line">                invokeCallback(callback, msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mCallbacks.finishBroadcast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用了 invokeCallback，其实可以看到 IPackageInstallerCallback 针对于不同的消息也有不同的接口：</p><h5 id="3-1-4-1-4-Callbacks-invokeCallback"><a href="#3-1-4-1-4-Callbacks-invokeCallback" class="headerlink" title="3.1.4.1.4 Callbacks.invokeCallback"></a>3.1.4.1.4 Callbacks.invokeCallback</h5><p>继续分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeCallback</span><span class="params">(IPackageInstallerCallback callback, Message msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = msg.arg1;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_CREATED:</span><br><span class="line">            callback.onSessionCreated(sessionId);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_BADGING_CHANGED:</span><br><span class="line">            callback.onSessionBadgingChanged(sessionId);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_ACTIVE_CHANGED:</span><br><span class="line">            callback.onSessionActiveChanged(sessionId, (<span class="keyword">boolean</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_PROGRESS_CHANGED:</span><br><span class="line">            callback.onSessionProgressChanged(sessionId, (<span class="keyword">float</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_FINISHED:</span><br><span class="line">            callback.onSessionFinished(sessionId, (<span class="keyword">boolean</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们先分析到这里！</p><h3 id="3-1-6-PackageInstallerS-writeSessionsAsync-持久化事务"><a href="#3-1-6-PackageInstallerS-writeSessionsAsync-持久化事务" class="headerlink" title="3.1.6 PackageInstallerS.writeSessionsAsync - 持久化事务"></a>3.1.6 PackageInstallerS.writeSessionsAsync - 持久化事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSessionsAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IoThread.getHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">                <span class="comment">//【*3.1.6.1】将事务记录到 mSessionsFile 文件中！</span></span><br><span class="line">                writeSessionsLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-6-1-PackageInstallerS-writeSessionsLocked"><a href="#3-1-6-1-PackageInstallerS-writeSessionsLocked" class="headerlink" title="3.1.6.1 PackageInstallerS.writeSessionsLocked"></a>3.1.6.1 PackageInstallerS.writeSessionsLocked</h4><p>mSessionsFile 在 PackageInstallerService 构造器中有见过：/data/system/install_sessions.xml！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSessionsLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGD) Slog.v(TAG, <span class="string">"writeSessionsLocked()"</span>);</span><br><span class="line"></span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fos = mSessionsFile.startWrite();</span><br><span class="line"></span><br><span class="line">        XmlSerializer out = <span class="keyword">new</span> FastXmlSerializer();</span><br><span class="line">        out.setOutput(fos, StandardCharsets.UTF_8.name());</span><br><span class="line">        out.startDocument(<span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        out.startTag(<span class="keyword">null</span>, TAG_SESSIONS); <span class="comment">//【1】写入 sessions 标签！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = mSessions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageInstallerSession session = mSessions.valueAt(i);</span><br><span class="line">            <span class="comment">//【*3.1.6.2】写入所有的 Sessions！！</span></span><br><span class="line">            writeSessionLocked(out, session);</span><br><span class="line">        &#125;</span><br><span class="line">        out.endTag(<span class="keyword">null</span>, TAG_SESSIONS);</span><br><span class="line">        out.endDocument();</span><br><span class="line"></span><br><span class="line">        mSessionsFile.finishWrite(fos);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSessionsFile.failWrite(fos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-6-2-PackageInstallerS-writeSessionLocked"><a href="#3-1-6-2-PackageInstallerS-writeSessionLocked" class="headerlink" title="3.1.6.2 PackageInstallerS.writeSessionLocked"></a>3.1.6.2 PackageInstallerS.writeSessionLocked</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSessionLocked</span><span class="params">(XmlSerializer out, PackageInstallerSession session)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SessionParams params = session.params;</span><br><span class="line"></span><br><span class="line">    out.startTag(<span class="keyword">null</span>, TAG_SESSION); <span class="comment">// 写入 session 标签</span></span><br><span class="line"></span><br><span class="line">    writeIntAttribute(out, ATTR_SESSION_ID, session.sessionId); <span class="comment">// 写入 sessionId 属性</span></span><br><span class="line">    writeIntAttribute(out, ATTR_USER_ID, session.userId); <span class="comment">// 写入 userId 属性</span></span><br><span class="line">    writeStringAttribute(out, ATTR_INSTALLER_PACKAGE_NAME, <span class="comment">// 写入 installerPackageName 属性</span></span><br><span class="line">            session.installerPackageName);</span><br><span class="line">    writeIntAttribute(out, ATTR_INSTALLER_UID, session.installerUid); <span class="comment">// 写入 installerUid 属性</span></span><br><span class="line">    writeLongAttribute(out, ATTR_CREATED_MILLIS, session.createdMillis);  <span class="comment">// 写入 createdMillis 属性</span></span><br><span class="line">    <span class="keyword">if</span> (session.stageDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">        writeStringAttribute(out, ATTR_SESSION_STAGE_DIR, <span class="comment">// 写入 sessionStageDir 属性</span></span><br><span class="line">                session.stageDir.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (session.stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        writeStringAttribute(out, ATTR_SESSION_STAGE_CID, session.stageCid); <span class="comment">// 写入 sessionStageCid 属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    writeBooleanAttribute(out, ATTR_PREPARED, session.isPrepared()); <span class="comment">// 写入 prepared 属性</span></span><br><span class="line">    writeBooleanAttribute(out, ATTR_SEALED, session.isSealed()); <span class="comment">// 写入 sealed 属性</span></span><br><span class="line"></span><br><span class="line">    writeIntAttribute(out, ATTR_MODE, params.mode); <span class="comment">// 写入 mode 子标签</span></span><br><span class="line">    writeIntAttribute(out, ATTR_INSTALL_FLAGS, params.installFlags); <span class="comment">// 写入 installFlags 属性</span></span><br><span class="line">    writeIntAttribute(out, ATTR_INSTALL_LOCATION, params.installLocation); <span class="comment">// 写入 installLocation 属性</span></span><br><span class="line">    writeLongAttribute(out, ATTR_SIZE_BYTES, params.sizeBytes); <span class="comment">// 写入 sizeBytes 属性</span></span><br><span class="line">    writeStringAttribute(out, ATTR_APP_PACKAGE_NAME, params.appPackageName); <span class="comment">// 写入 appPackageName 属性</span></span><br><span class="line">    writeStringAttribute(out, ATTR_APP_LABEL, params.appLabel); <span class="comment">// 写入 appLabel 属性</span></span><br><span class="line">    writeUriAttribute(out, ATTR_ORIGINATING_URI, params.originatingUri); <span class="comment">// 写入 originatingUri 属性</span></span><br><span class="line">    writeIntAttribute(out, ATTR_ORIGINATING_UID, params.originatingUid); <span class="comment">// 写入 originatingUid 属性</span></span><br><span class="line">    writeUriAttribute(out, ATTR_REFERRER_URI, params.referrerUri); <span class="comment">// 写入 referrerUri 属性</span></span><br><span class="line">    writeStringAttribute(out, ATTR_ABI_OVERRIDE, params.abiOverride); <span class="comment">// 写入 abiOverride 属性</span></span><br><span class="line">    writeStringAttribute(out, ATTR_VOLUME_UUID, params.volumeUuid); <span class="comment">// 写入 volumeUuid 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Persist app icon if changed since last written</span></span><br><span class="line">    <span class="keyword">final</span> File appIconFile = buildAppIconFile(session.sessionId);</span><br><span class="line">    <span class="keyword">if</span> (params.appIcon == <span class="keyword">null</span> &amp;&amp; appIconFile.exists()) &#123;</span><br><span class="line">        appIconFile.delete();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params.appIcon != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; appIconFile.lastModified() != params.appIconLastModified) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOGD) Slog.w(TAG, <span class="string">"Writing changed icon "</span> + appIconFile);</span><br><span class="line">        FileOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(appIconFile);</span><br><span class="line">            params.appIcon.compress(CompressFormat.PNG, <span class="number">90</span>, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to write icon "</span> + appIconFile + <span class="string">": "</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtils.closeQuietly(os);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        params.appIconLastModified = appIconFile.lastModified();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1.6.3】将要在安装时授予的运行时权限集合写入到持久化文件中！</span></span><br><span class="line">    writeGrantedRuntimePermissions(out, params.grantedRuntimePermissions);</span><br><span class="line"></span><br><span class="line">    out.endTag(<span class="keyword">null</span>, TAG_SESSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-6-3-PackageInstallerS-writeGrantedRuntimePermissions"><a href="#3-1-6-3-PackageInstallerS-writeGrantedRuntimePermissions" class="headerlink" title="3.1.6.3 PackageInstallerS.writeGrantedRuntimePermissions"></a>3.1.6.3 PackageInstallerS.writeGrantedRuntimePermissions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeGrantedRuntimePermissions</span><span class="params">(XmlSerializer out,</span></span></span><br><span class="line"><span class="function"><span class="params">        String[] grantedRuntimePermissions)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (grantedRuntimePermissions != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String permission : grantedRuntimePermissions) &#123;</span><br><span class="line">            out.startTag(<span class="keyword">null</span>, TAG_GRANTED_RUNTIME_PERMISSION); <span class="comment">// 写入 granted-runtime-permission 子标签</span></span><br><span class="line">            writeStringAttribute(out, ATTR_NAME, permission); <span class="comment">// 写入 name 属性！</span></span><br><span class="line">            out.endTag(<span class="keyword">null</span>, TAG_GRANTED_RUNTIME_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-PackageInstallerS-openSession-获得事务"><a href="#3-2-PackageInstallerS-openSession-获得事务" class="headerlink" title="3.2 PackageInstallerS.openSession - 获得事务"></a>3.2 PackageInstallerS.openSession - 获得事务</h2><p>openSession 方法可以获得 id 对应的 PackageInstallerSession！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPackageInstallerSession <span class="title">openSession</span><span class="params">(<span class="keyword">int</span> sessionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.2.1】调用另外一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> openSessionInternal(sessionId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-PackageInstallerS-openSessionInternal"><a href="#3-2-1-PackageInstallerS-openSessionInternal" class="headerlink" title="3.2.1 PackageInstallerS.openSessionInternal"></a>3.2.1 PackageInstallerS.openSessionInternal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IPackageInstallerSession <span class="title">openSessionInternal</span><span class="params">(<span class="keyword">int</span> sessionId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageInstallerSession session = mSessions.get(sessionId);</span><br><span class="line">        <span class="comment">//【*3.2.2】判断 uid 是否被允许获得该事务！</span></span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || !isCallingUidOwner(session)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Caller has no access to session "</span> + sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        session.open();</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-PackageInstallerS-isCallingUidOwner"><a href="#3-2-2-PackageInstallerS-isCallingUidOwner" class="headerlink" title="3.2.2 PackageInstallerS.isCallingUidOwner"></a>3.2.2 PackageInstallerS.isCallingUidOwner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCallingUidOwner</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">if</span> (callingUid == Process.ROOT_UID) &#123;</span><br><span class="line">        <span class="comment">//【1】要么是 root 用户！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】要么调用者的 uid 必须是事务的创建者 uid！</span></span><br><span class="line">        <span class="keyword">return</span> (session != <span class="keyword">null</span>) &amp;&amp; (callingUid == session.installerUid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-PackageInstallerS-getSessionInfo-获得事务"><a href="#3-3-PackageInstallerS-getSessionInfo-获得事务" class="headerlink" title="3.3 PackageInstallerS.getSessionInfo - 获得事务"></a>3.3 PackageInstallerS.getSessionInfo - 获得事务</h2><p>getSessionInfo 方法也是获得 id 对应的 Session 实例，但是封装的结果不同！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionInfo <span class="title">getSessionInfo</span><span class="params">(<span class="keyword">int</span> sessionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageInstallerSession session = mSessions.get(sessionId);</span><br><span class="line">        <span class="comment">//【*3.3.1】调用 PackageInstallerSession 的 generateInfo 方法！</span></span><br><span class="line">        <span class="keyword">return</span> session != <span class="keyword">null</span> ? session.generateInfo() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-PackageInstallerSession-generateInfo"><a href="#3-3-1-PackageInstallerSession-generateInfo" class="headerlink" title="3.3.1 PackageInstallerSession.generateInfo"></a>3.3.1 PackageInstallerSession.generateInfo</h3><p>PackageInstallerSession 会返回一个 SessionInfo 对象！用于保存 Session 的一些细节信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SessionInfo <span class="title">generateInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SessionInfo info = <span class="keyword">new</span> SessionInfo();</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        info.sessionId = sessionId;</span><br><span class="line">        info.installerPackageName = installerPackageName;</span><br><span class="line">        info.resolvedBaseCodePath = (mResolvedBaseFile != <span class="keyword">null</span>) ?</span><br><span class="line">                mResolvedBaseFile.getAbsolutePath() : <span class="keyword">null</span>;</span><br><span class="line">        info.progress = mProgress;</span><br><span class="line">        info.sealed = mSealed;</span><br><span class="line">        info.active = mActiveCount.get() &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        info.mode = params.mode;</span><br><span class="line">        info.sizeBytes = params.sizeBytes;</span><br><span class="line">        info.appPackageName = params.appPackageName;</span><br><span class="line">        info.appIcon = params.appIcon;</span><br><span class="line">        info.appLabel = params.appLabel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-new-PackageInstaller-SessionInfo"><a href="#3-3-2-new-PackageInstaller-SessionInfo" class="headerlink" title="3.3.2 new PackageInstaller.SessionInfo"></a>3.3.2 new PackageInstaller.SessionInfo</h3><p>SessionInfo 定义在 PackageInstaller.java 中，用于保存 Session 的信息，这里我们简单的分析下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionInfo</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sessionId;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String installerPackageName;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String resolvedBaseCodePath;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> progress;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> sealed;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> active;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mode;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sizeBytes;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> String appPackageName;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> Bitmap appIcon;</span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="keyword">public</span> CharSequence appLabel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionInfo</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">        sessionId = source.readInt();</span><br><span class="line">        installerPackageName = source.readString();</span><br><span class="line">        resolvedBaseCodePath = source.readString();</span><br><span class="line">        progress = source.readFloat();</span><br><span class="line">        sealed = source.readInt() != <span class="number">0</span>;</span><br><span class="line">        active = source.readInt() != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        mode = source.readInt();</span><br><span class="line">        sizeBytes = source.readLong();</span><br><span class="line">        appPackageName = source.readString();</span><br><span class="line">        appIcon = source.readParcelable(<span class="keyword">null</span>);</span><br><span class="line">        appLabel = source.readString();</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-PackageInstallerSession"><a href="#4-PackageInstallerSession" class="headerlink" title="4 PackageInstallerSession"></a>4 PackageInstallerSession</h1><h2 id="4-1-openWrite"><a href="#4-1-openWrite" class="headerlink" title="4.1 openWrite"></a>4.1 openWrite</h2><p>这里的 name 传入的是 base.apk</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">openWrite</span><span class="params">(String name, <span class="keyword">long</span> offsetBytes, <span class="keyword">long</span> lengthBytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.1.1】继续调用 openWriteInternal 方法处理；</span></span><br><span class="line">        <span class="keyword">return</span> openWriteInternal(name, offsetBytes, lengthBytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-1-openWriteInternal"><a href="#4-1-1-openWriteInternal" class="headerlink" title="4.1.1 openWriteInternal"></a>4.1.1 openWriteInternal</h3><p>继续来看，这里的参数 name 传入的是 “base.apk”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ParcelFileDescriptor <span class="title">openWriteInternal</span><span class="params">(String name, <span class="keyword">long</span> offsetBytes, <span class="keyword">long</span> lengthBytes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> FileBridge bridge;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        assertPreparedAndNotSealed(<span class="string">"openWrite"</span>);</span><br><span class="line"></span><br><span class="line">        bridge = <span class="keyword">new</span> FileBridge();</span><br><span class="line">        mBridges.add(bridge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid name: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> File target;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1】创建 /data/app/vmdl[sessionId].tmp/base.apk 对应的文件对象！</span></span><br><span class="line">            target = <span class="keyword">new</span> File(resolveStageDir(), name);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】返回其文件描述符；</span></span><br><span class="line">        <span class="keyword">final</span> FileDescriptor targetFd = Libcore.os.open(target.getAbsolutePath(),</span><br><span class="line">                O_CREAT | O_WRONLY, <span class="number">0644</span>);</span><br><span class="line">        Os.chmod(target.getAbsolutePath(), <span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】如果指定了大小，那么这里会做一次空间回收！</span></span><br><span class="line">        <span class="keyword">if</span> (lengthBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> StructStat stat = Libcore.os.fstat(targetFd);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> deltaBytes = lengthBytes - stat.st_size;</span><br><span class="line">            <span class="comment">//【3.1】回收空间；</span></span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="keyword">null</span> &amp;&amp; deltaBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                mPm.freeStorage(params.volumeUuid, deltaBytes);</span><br><span class="line">            &#125;</span><br><span class="line">            Libcore.os.posix_fallocate(targetFd, <span class="number">0</span>, lengthBytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (offsetBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Libcore.os.lseek(targetFd, offsetBytes, OsConstants.SEEK_SET);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】使用 FileBridge 封装文件描述符！</span></span><br><span class="line">        bridge.setTargetFile(targetFd);</span><br><span class="line">        bridge.start();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParcelFileDescriptor(bridge.getClientSocket());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowAsIOException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法很简单，不多说了！</p><h2 id="4-2-commit-提交事务核心入口"><a href="#4-2-commit-提交事务核心入口" class="headerlink" title="4.2 commit - 提交事务核心入口"></a>4.2 commit - 提交事务核心入口</h2><p>在上面我们分析到，会进入 PackageInstallerSession.commit 提交事务。下面我们继续来分析！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(IntentSender statusReceiver)</span> </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(statusReceiver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> wasSealed;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        wasSealed = mSealed;</span><br><span class="line">        <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">            <span class="comment">// 校验所有的写操作都已经完成了，正常情况下，是肯定完成了的！</span></span><br><span class="line">            <span class="keyword">for</span> (FileBridge bridge : mBridges) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!bridge.isClosed()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Files still open"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mSealed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】由于此时文件已经拷贝完成，这里更新进度为完成！</span></span><br><span class="line">        mClientProgress = <span class="number">1f</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【*4.2.3.5】通知结果！</span></span><br><span class="line">        computeProgressLocked(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!wasSealed) &#123;</span><br><span class="line">        <span class="comment">// Persist the fact that we've sealed ourselves to prevent</span></span><br><span class="line">        <span class="comment">// mutations of any hard links we create. We do this without holding</span></span><br><span class="line">        <span class="comment">// the session lock, since otherwise it's a lock inversion.</span></span><br><span class="line">        mCallback.onSessionSealedBlocking(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】活跃计数 +1，表示该 Session 处于活跃状态；</span></span><br><span class="line">    mActiveCount.incrementAndGet();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.2.1】创建了一个 PackageInstallObserverAdapter 实例！</span></span><br><span class="line">    <span class="comment">// 会将前面创建的 IntentSender 实例，作为参数传入！</span></span><br><span class="line">    <span class="keyword">final</span> PackageInstallObserverAdapter adapter = <span class="keyword">new</span> PackageInstallObserverAdapter(mContext,</span><br><span class="line">            statusReceiver, sessionId, mIsInstallerDeviceOwner, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.2.2】发送 MSG_COMMIT 消息</span></span><br><span class="line">    mHandler.obtainMessage(MSG_COMMIT, adapter.getBinder()).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mActiveCount 加 1，表示该事务处于活跃状态，直到安装完成！</p><p>这里的 PackageInstallObserverAdapter.getBinder() 返回是一个服务端 Stub 桩对象！</p><p>整个流程很清晰，我们继续看：</p><h3 id="4-2-1-new-PackageInstallObserverAdapter"><a href="#4-2-1-new-PackageInstallObserverAdapter" class="headerlink" title="4.2.1 new PackageInstallObserverAdapter"></a>4.2.1 new PackageInstallObserverAdapter</h3><p>PackageInstallObserverAdapter 定义在 PackageInstallService 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallObserverAdapter</span> <span class="keyword">extends</span> <span class="title">PackageInstallObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext; <span class="comment">// 系统进程的上下文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntentSender mTarget; <span class="comment">// 前面创建的 IntentSender 实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mSessionId; <span class="comment">// 事务的 id！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mShowNotification; <span class="comment">// 是否显示通知，取决于安装者是否是设备用户！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mUserId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageInstallObserverAdapter</span><span class="params">(Context context, IntentSender target, <span class="keyword">int</span> sessionId,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> showNotification, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mTarget = target;</span><br><span class="line">        mSessionId = sessionId;</span><br><span class="line">        mShowNotification = showNotification; </span><br><span class="line">        mUserId = userId;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PackageInstallObserverAdapter 继承了 PackageInstallObserver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallObserver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】服务端桩对象！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IPackageInstallObserver2.Stub mBinder = <span class="keyword">new</span> IPackageInstallObserver2.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//【1.1】调用子类的 onUserActionRequired 方法！</span></span><br><span class="line">            PackageInstallObserver.<span class="keyword">this</span>.onUserActionRequired(intent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode,</span></span></span><br><span class="line"><span class="function"><span class="params">                String msg, Bundle extras)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//【1.2】调用子类的 onPackageInstalled 方法！</span></span><br><span class="line">            PackageInstallObserver.<span class="keyword">this</span>.onPackageInstalled(basePackageName, returnCode, msg,</span><br><span class="line">                    extras);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPackageInstallObserver2 <span class="title">getBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【2】用于返回服务端桩对象！</span></span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageInstallObserverAdapter 继承了 PackageInstallObserver，并覆写了以下两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onUserActionRequired</span><br><span class="line">onPackageInstalled</span><br></pre></td></tr></table></figure><h4 id="4-2-1-1-PackageInstallObserverAdapter-onUserActionRequired"><a href="#4-2-1-1-PackageInstallObserverAdapter-onUserActionRequired" class="headerlink" title="4.2.1.1 PackageInstallObserverAdapter.onUserActionRequired"></a>4.2.1.1 PackageInstallObserverAdapter.onUserActionRequired</h4><p>覆写 onUserActionRequired，当安装过程需要用户参与授权时，会回调该接口，此时会中断安装，事务从 active 变为 idle 状态！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【1】事务 id！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_SESSION_ID, mSessionId);</span><br><span class="line">    <span class="comment">//【2】当前的状态：PackageInstaller.STATUS_PENDING_USER_ACTION！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageInstaller.STATUS_PENDING_USER_ACTION);</span><br><span class="line">    fillIn.putExtra(Intent.EXTRA_INTENT, intent); <span class="comment">// 额外的 intent</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.9.4.1】发送 intent，其实，这里我们知道，该 intent 会发送到前面的 LocalIntentReceiver!</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个额外的 Intent，我们后面会看到！</p><h4 id="4-1-1-2-PackageInstallObserverAdapter-onPackageInstalled"><a href="#4-1-1-2-PackageInstallObserverAdapter-onPackageInstalled" class="headerlink" title="4.1.1.2 PackageInstallObserverAdapter.onPackageInstalled"></a>4.1.1.2 PackageInstallObserverAdapter.onPackageInstalled</h4><p>覆写 onPackageInstalled，当安装完成后，会回调该接口！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">        Bundle extras)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】当安装成功，并且需要弹出通知时，会在这里显示通知！</span></span><br><span class="line">    <span class="keyword">if</span> (PackageManager.INSTALL_SUCCEEDED == returnCode &amp;&amp; mShowNotification) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> update = (extras != <span class="keyword">null</span>) &amp;&amp; extras.getBoolean(Intent.EXTRA_REPLACING);</span><br><span class="line">        Notification notification = buildSuccessNotification(mContext,</span><br><span class="line">                mContext.getResources()</span><br><span class="line">                        .getString(update ? R.string.package_updated_device_owner :</span><br><span class="line">                                R.string.package_installed_device_owner),</span><br><span class="line">                basePackageName,</span><br><span class="line">                mUserId);</span><br><span class="line">        <span class="keyword">if</span> (notification != <span class="keyword">null</span>) &#123;</span><br><span class="line">            NotificationManager notificationManager = (NotificationManager)</span><br><span class="line">                    mContext.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">            notificationManager.notify(basePackageName, <span class="number">0</span>, notification);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】创建一个 intent，保存了安装结果等信息！</span></span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, basePackageName);</span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_SESSION_ID, mSessionId);</span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageManager.installStatusToPublicStatus(returnCode));</span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS_MESSAGE,</span><br><span class="line">            PackageManager.installStatusToString(returnCode, msg));</span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_LEGACY_STATUS, returnCode);</span><br><span class="line">    <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> String existing = extras.getString(</span><br><span class="line">                PackageManager.EXTRA_FAILURE_EXISTING_PACKAGE);</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(existing)) &#123;</span><br><span class="line">            fillIn.putExtra(PackageInstaller.EXTRA_OTHER_PACKAGE_NAME, existing);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.9.4.1】发送 intent，其实，这里我们知道，该 intent 会发送到前面的 LocalIntentReceiver</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续分析！</p><h3 id="4-2-2-send-MSG-COMMIT"><a href="#4-2-2-send-MSG-COMMIT" class="headerlink" title="4.2.2 send MSG_COMMIT"></a>4.2.2 send MSG_COMMIT</h3><p>代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【*4.2.2.1】发送 MSG_COMMIT 消息</span></span><br><span class="line">mHandler.obtainMessage(MSG_COMMIT, adapter.getBinder()).sendToTarget();</span><br></pre></td></tr></table></figure><p>mHandler 的初始化是在 PackageInstallerSession 的构造器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerSession</span><span class="params">(PackageInstallerService.InternalCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, PackageManagerService pm, Looper looper, <span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        String installerPackageName, <span class="keyword">int</span> installerUid, SessionParams params, <span class="keyword">long</span> createdMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">        File stageDir, String stageCid, <span class="keyword">boolean</span> prepared, <span class="keyword">boolean</span> sealed)</span> </span>&#123;</span><br><span class="line">    mCallback = callback;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mPm = pm;</span><br><span class="line">    <span class="comment">//【*4.2.1】handler 会处理该消息，我们看到，其传入了一个 mHandlerCallback 回调！</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(looper, mHandlerCallback);</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们直接发送 MSG_COMMIT 消息，回调 mHandlerCallback 会立刻触发：</p><h4 id="4-2-2-1-Handler-Callback-handleMessage-MSG-COMMIT"><a href="#4-2-2-1-Handler-Callback-handleMessage-MSG-COMMIT" class="headerlink" title="4.2.2.1 Handler.Callback.handleMessage[MSG_COMMIT]"></a>4.2.2.1 Handler.Callback.handleMessage[MSG_COMMIT]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler.Callback mHandlerCallback = <span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】获得要安装的应用的信息，如果是第一次安装的话，那么二者返回的均为 null！</span></span><br><span class="line">        <span class="keyword">final</span> PackageInfo pkgInfo = mPm.getPackageInfo(</span><br><span class="line">                params.appPackageName, PackageManager.GET_SIGNATURES <span class="comment">/*flags*/</span>, userId);</span><br><span class="line">        <span class="keyword">final</span> ApplicationInfo appInfo = mPm.getApplicationInfo(</span><br><span class="line">                params.appPackageName, <span class="number">0</span>, userId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【2】获得前面 PackageInstallObserverAdapter 内部的 PackageInstallObserver2 桩对象！</span></span><br><span class="line">                <span class="comment">// 保存到了 mRemoteObserver 中！</span></span><br><span class="line">                mRemoteObserver = (IPackageInstallObserver2) msg.obj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*4.2.3】调用 commitLocked 继续处理！</span></span><br><span class="line">                commitLocked(pkgInfo, appInfo);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                <span class="keyword">final</span> String completeMsg = ExceptionUtils.getCompleteMessage(e);</span><br><span class="line">                Slog.e(TAG, <span class="string">"Commit of session "</span> + sessionId + <span class="string">" failed: "</span> + completeMsg);</span><br><span class="line">                destroyInternal();</span><br><span class="line">                dispatchSessionFinished(e.error, completeMsg, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PackageInstallerSession 内部有一个 mRemoteObserver 成员变量，后面我们会见到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mLock"</span>)</span><br><span class="line"><span class="keyword">private</span> IPackageInstallObserver2 mRemoteObserver;</span><br></pre></td></tr></table></figure><p>接下来，进入了 commitLocked 方法！</p><h3 id="4-2-3-commitLocked"><a href="#4-2-3-commitLocked" class="headerlink" title="4.2.3 commitLocked"></a>4.2.3 commitLocked</h3><p>继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session not sealed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.2.3.1】解析安装地址，即前文APK文件copy后的目的地址</span></span><br><span class="line">        resolveStageDir();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_CONTAINER_ERROR,</span><br><span class="line">                <span class="string">"Failed to resolve stage location"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.2.3.2】校验安装有效性！</span></span><br><span class="line">    validateInstallLocked(pkgInfo, appInfo);</span><br><span class="line"></span><br><span class="line">    Preconditions.checkNotNull(mPackageName); <span class="comment">// 非 null 校验！</span></span><br><span class="line">    Preconditions.checkNotNull(mSignatures);</span><br><span class="line">    Preconditions.checkNotNull(mResolvedBaseFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】mPermissionsAccepted 为 true，那么用户就可以静默安装了，如果为 false，那么就需要用户确认权限！！</span></span><br><span class="line">    <span class="keyword">if</span> (!mPermissionsAccepted) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.1】这里会创建一个 intent， action 为 PackageInstaller.ACTION_CONFIRM_PERMISSIONS</span></span><br><span class="line">        <span class="comment">// 目标应用是 PackageInstaller，这里会先进入 packageinstaller 中确认权限信息！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);</span><br><span class="line">        intent.setPackage(mContext.getPackageManager().getPermissionControllerPackageName());</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId); <span class="comment">// 事务 id 也要从传递过去！</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*4.2.1.1】回调了 PackageInstallObserverAdapter 的 onUserActionRequired 接口</span></span><br><span class="line">            <span class="comment">// 将 intent 传递过去！</span></span><br><span class="line">            mRemoteObserver.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.2.3.3】关闭该事务，使其从 active 变为 idle 状态！！</span></span><br><span class="line">        close();</span><br><span class="line">        <span class="comment">// 停止安装，等待用户确认权限，用户在 PackageInstaller 点击安装，安装会继续！！</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】安装到外置时，计算最终安装大小！</span></span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【*4.2.3.4】计算大小</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> finalSize = calculateInstalledSize();</span><br><span class="line">        resizeContainer(stageCid, finalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果安装方式是继承已存在的 apk，那我们就要尝试基于已有的安装进行安装，这个一般用于安装和卸载 split apk！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_INHERIT_EXISTING) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;File&gt; fromFiles = mResolvedInheritedFiles;</span><br><span class="line">            <span class="keyword">final</span> File toDir = resolveStageDir(); <span class="comment">// 这是我们本次安装的目录</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (LOGD) Slog.d(TAG, <span class="string">"Inherited files: "</span> + mResolvedInheritedFiles);</span><br><span class="line">            <span class="keyword">if</span> (!mResolvedInheritedFiles.isEmpty() &amp;&amp; mInheritedFilesBase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"mInheritedFilesBase == null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.1】如果可以直接建立 link 的话，不行的话，就 copy！</span></span><br><span class="line">            <span class="keyword">if</span> (isLinkPossible(fromFiles, toDir)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mResolvedInstructionSets.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(toDir, <span class="string">"oat"</span>);</span><br><span class="line">                    createOatDirs(mResolvedInstructionSets, oatDir);</span><br><span class="line">                &#125;</span><br><span class="line">                linkFiles(fromFiles, toDir, mInheritedFilesBase);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【3.2】执行拷贝，其实是将已经存在的目录的 apk，oat 文件拷贝到了这个目录！</span></span><br><span class="line">                <span class="comment">// 对于要 remove 的文件，则会跳过拷贝！</span></span><br><span class="line">                copyFiles(fromFiles, toDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INSUFFICIENT_STORAGE,</span><br><span class="line">                    <span class="string">"Failed to inherit existing install"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】更新进度！</span></span><br><span class="line">    mInternalProgress = <span class="number">0.5f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.2.3.5】通知结果！</span></span><br><span class="line">    computeProgressLocked(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.2.3.6】提取 lib 库文件到目录中！</span></span><br><span class="line">    extractNativeLibraries(mResolvedStageDir, params.abiOverride);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果安装到外置，释放 Container</span></span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        finalizeAndFixContainer(stageCid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】创建一个本地的安装观察者，监听安装结果！</span></span><br><span class="line">    <span class="keyword">final</span> IPackageInstallObserver2 localObserver = <span class="keyword">new</span> IPackageInstallObserver2.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                Bundle extras)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//【*5.8.2.1】删除目录文件；</span></span><br><span class="line">            destroyInternal();</span><br><span class="line">            <span class="comment">//【*5.8.2.2】处理回调，通知监听者！</span></span><br><span class="line">            dispatchSessionFinished(returnCode, msg, extras);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【6】处理要安装的目标设别用户</span></span><br><span class="line">    <span class="keyword">final</span> UserHandle user;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_ALL_USERS) != <span class="number">0</span>) &#123;</span><br><span class="line">        user = UserHandle.ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = <span class="keyword">new</span> UserHandle(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mRelinquished = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×5.1】然后继续安装！</span></span><br><span class="line">    mPm.installStage(mPackageName, stageDir, stageCid, localObserver, params,</span><br><span class="line">            installerPackageName, installerUid, user, mCertificates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="4-2-3-1-resolveStageDir"><a href="#4-2-3-1-resolveStageDir" class="headerlink" title="4.2.3.1 resolveStageDir"></a>4.2.3.1 resolveStageDir</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">resolveStageDir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">//【1】将之前保存的目录 stageDir 值赋给 mResolvedStageDir 并返回！</span></span><br><span class="line">        <span class="keyword">if</span> (mResolvedStageDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mResolvedStageDir = stageDir;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> String path = PackageHelper.getSdDir(stageCid);</span><br><span class="line">                <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mResolvedStageDir = <span class="keyword">new</span> File(path);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to resolve path to container "</span> + stageCid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mResolvedStageDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，不多说了！</p><h4 id="4-2-3-2-validateInstallLocked"><a href="#4-2-3-2-validateInstallLocked" class="headerlink" title="4.2.3.2 validateInstallLocked"></a>4.2.3.2 validateInstallLocked</h4><p>校验安装有效性，这里的 mResolvedStageDir 就是前面的 /data/app/vmdl[sessionId].tmp 目录！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateInstallLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    mPackageName = <span class="keyword">null</span>;</span><br><span class="line">    mVersionCode = -<span class="number">1</span>;</span><br><span class="line">    mSignatures = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    mResolvedBaseFile = <span class="keyword">null</span>;</span><br><span class="line">    mResolvedStagedFiles.clear();</span><br><span class="line">    mResolvedInheritedFiles.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】返回 /data/app/vmdl[sessionId].tmp 目录下所有的 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 去除后缀，将前缀名保存到 removeSplitList！</span></span><br><span class="line">    <span class="keyword">final</span> File[] removedFiles = mResolvedStageDir.listFiles(sRemovedFilter);</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; removeSplitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!ArrayUtils.isEmpty(removedFiles)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File removedFile : removedFiles) &#123;</span><br><span class="line">            <span class="keyword">final</span> String fileName = removedFile.getName();</span><br><span class="line">            <span class="keyword">final</span> String splitName = fileName.substring(</span><br><span class="line">                    <span class="number">0</span>, fileName.length() - REMOVE_SPLIT_MARKER_EXTENSION.length());</span><br><span class="line">            removeSplitList.add(splitName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】返回 /data/app/vmdl[sessionId].tmp 目录下所有的非 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 并判断是否正常，如果该目录下没有任何 apk 和 .removed 文件，那么抛出异常！！</span></span><br><span class="line">    <span class="keyword">final</span> File[] addedFiles = mResolvedStageDir.listFiles(sAddedFilter);</span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.isEmpty(addedFiles) &amp;&amp; removeSplitList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, <span class="string">"No packages staged"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】遍历该目录下的非 .removed 文件，解析其中的 apk 文件，也就是我们之前 copy 到这里的目标文件！</span></span><br><span class="line">    <span class="comment">// 卸载和安装 split 都会进入这里！</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;String&gt; stagedSplits = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File addedFile : addedFiles) &#123;</span><br><span class="line">        <span class="keyword">final</span> ApkLite apk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1】解析要安装的 apk，具体的流程这里就不分析了！</span></span><br><span class="line">            apk = PackageParser.parseApkLite(</span><br><span class="line">                    addedFile, PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.2】将其添加到 stagedSplits 中，注意 base.apk 的 apk.splitName 为 null！</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.add(apk.splitName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Split "</span> + apk.splitName + <span class="string">" was defined multiple times"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.3】将第一个被解析 apk 的包名，版本号，签名，证书保存下载，这个目录下的其他 apk </span></span><br><span class="line">        <span class="comment">// 的这几项要和其保持一致！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = apk.packageName;</span><br><span class="line">            mVersionCode = apk.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = apk.signatures;</span><br><span class="line">            mCertificates = apk.certificates;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.3.2.1】校验 apk 关联性！</span></span><br><span class="line">        assertApkConsistent(String.valueOf(addedFile), apk);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.4】设置 apk 文件的目标名称！</span></span><br><span class="line">        <span class="keyword">final</span> String targetName;</span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetName = <span class="string">"base.apk"</span>; <span class="comment">// 一般情况下，我们只装 base apk！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetName = <span class="string">"split_"</span> + apk.splitName + <span class="string">".apk"</span>; <span class="comment">// 对于 split apk 名称是这样的！！</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(targetName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Invalid filename: "</span> + targetName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【3.5】当 addedFile 命名不标准的话，会改名;</span></span><br><span class="line">        <span class="keyword">final</span> File targetFile = <span class="keyword">new</span> File(mResolvedStageDir, targetName);</span><br><span class="line">        <span class="keyword">if</span> (!addedFile.equals(targetFile)) &#123;</span><br><span class="line">            addedFile.renameTo(targetFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.6】找到了 base apk，将其保存到 mResolvedBaseFile，同时将其添加到 mResolvedStagedFiles 中！</span></span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = targetFile;</span><br><span class="line">        &#125;</span><br><span class="line">        mResolvedStagedFiles.add(targetFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】处理 .removed 文件（卸载 split apk，才会进入这里）</span></span><br><span class="line">    <span class="keyword">if</span> (removeSplitList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【4.1】找不到 split apk，抛出异常！</span></span><br><span class="line">        <span class="keyword">for</span> (String splitName : removeSplitList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ArrayUtils.contains(pkgInfo.splitNames, splitName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                        <span class="string">"Split not found: "</span> + splitName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次获得要安装的应用的包名，版本号，签名；</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = pkgInfo.packageName;</span><br><span class="line">            mVersionCode = pkgInfo.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = pkgInfo.signatures;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】处理安装模式！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_FULL_INSTALL) &#123;</span><br><span class="line">        <span class="comment">//【5.1】全量安装必须要有 base.apk；</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.contains(<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Full install must include a base package"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.2】部分安装必须基于现有的安装（卸载和安装 split apk 也会进入这里）！</span></span><br><span class="line">        <span class="keyword">if</span> (appInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Missing existing base package for "</span> + mPackageName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.3】获得已存在的 apk 安装信息，这里会解析主 apk 的安装信息！</span></span><br><span class="line">        <span class="keyword">final</span> PackageLite existing;</span><br><span class="line">        <span class="keyword">final</span> ApkLite existingBase;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            existing = PackageParser.parsePackageLite(<span class="keyword">new</span> File(appInfo.getCodePath()), <span class="number">0</span>);</span><br><span class="line">            existingBase = PackageParser.parseApkLite(<span class="keyword">new</span> File(appInfo.getBaseCodePath()),</span><br><span class="line">                    PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.3.2.1】再次校验要本次要安装的 apk 和已存在的 apk 是有关联，包括包名，签名，版本号！</span></span><br><span class="line">        assertApkConsistent(<span class="string">"Existing base"</span>, existingBase);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.4】继承已有的 base apk，如果没有指定安装的 apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (mResolvedBaseFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = <span class="keyword">new</span> File(appInfo.getBaseCodePath());</span><br><span class="line">            mResolvedInheritedFiles.add(mResolvedBaseFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.5】继承已有的 split apk，要继承的 split apk 不能是在 removeSplitList 列表中！！</span></span><br><span class="line">        <span class="keyword">if</span> (!ArrayUtils.isEmpty(existing.splitNames)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; existing.splitNames.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> String splitName = existing.splitNames[i];</span><br><span class="line">                <span class="keyword">final</span> File splitFile = <span class="keyword">new</span> File(existing.splitCodePaths[i]);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> splitRemoved = removeSplitList.contains(splitName);</span><br><span class="line">                <span class="keyword">if</span> (!stagedSplits.contains(splitName) &amp;&amp; !splitRemoved) &#123;</span><br><span class="line">                    mResolvedInheritedFiles.add(splitFile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.6】继承已有的 oat 相关文件！！</span></span><br><span class="line">        <span class="keyword">final</span> File packageInstallDir = (<span class="keyword">new</span> File(appInfo.getBaseCodePath())).getParentFile();</span><br><span class="line">        mInheritedFilesBase = packageInstallDir;</span><br><span class="line">        <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(packageInstallDir, <span class="string">"oat"</span>);</span><br><span class="line">        <span class="keyword">if</span> (oatDir.exists()) &#123;</span><br><span class="line">            <span class="keyword">final</span> File[] archSubdirs = oatDir.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (archSubdirs != <span class="keyword">null</span> &amp;&amp; archSubdirs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String[] instructionSets = InstructionSets.getAllDexCodeInstructionSets();</span><br><span class="line">                <span class="keyword">for</span> (File archSubDir : archSubdirs) &#123;</span><br><span class="line">                    <span class="comment">// Skip any directory that isn't an ISA subdir.</span></span><br><span class="line">                    <span class="keyword">if</span> (!ArrayUtils.contains(instructionSets, archSubDir.getName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将要继承的 oat 目录文件名添加到 mResolvedInstructionSets！</span></span><br><span class="line">                    mResolvedInstructionSets.add(archSubDir.getName());</span><br><span class="line">                    List&lt;File&gt; oatFiles = Arrays.asList(archSubDir.listFiles());</span><br><span class="line">                    <span class="keyword">if</span> (!oatFiles.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">// 将要继承的 odex 相关文件添加到 mResolvedInheritedFiles！</span></span><br><span class="line">                        mResolvedInheritedFiles.addAll(oatFiles);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结下：</p><p>1、返回 /data/app/vmdl[sessionId].tmp 目录下所有的 .removed 文件，去除后缀，将前缀名保存到 removeSplitList；<br>2、/data/app/vmdl[sessionId].tmp 目录下必须要有 apk 文件或者 .removed 文件；<br>3、遍历该目录下的非 .removed 文件，对其 packagename versionCode 和签名做关联校验；<br>4、stagedSplits 用于保存该目录下的所有 apk 的 splitName，base apk 的 splitName 为 null；<br>5、mResolvedBaseFile 用于保存 base apk；<br>6、mResolvedStagedFiles 用于保存目录下所有的 apk；</p><p>7、removeSplitList 大于 0，说明有要移除的 split apk，前提是主 apk 要有 split apk！</p><p>8、对于 MODE_FULL_INSTALL，全量安装，必须要有 base apk！<br>9、对于 MODE_INHERIT_EXISTING，继承安装，会再次解析主 apk，收集那些不在 removeSplitList 列表中的 splitApk 路径到 mResolvedInheritedFiles 中；</p><h5 id="4-2-3-2-1-assertApkConsistent"><a href="#4-2-3-2-1-assertApkConsistent" class="headerlink" title="4.2.3.2.1 assertApkConsistent"></a>4.2.3.2.1 assertApkConsistent</h5><p>校验 apk 的一致性，ApkLite apk 为扫描到的文件！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertApkConsistent</span><span class="params">(String tag, ApkLite apk)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】扫描到的 apk 的包名必须和该目录下第一个被扫描到的 apk 包名保持一致！</span></span><br><span class="line">    <span class="keyword">if</span> (!mPackageName.equals(apk.packageName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, tag + <span class="string">" package "</span></span><br><span class="line">                + apk.packageName + <span class="string">" inconsistent with "</span> + mPackageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果是要继承已安装的 apk，那么包名要一样！</span></span><br><span class="line">    <span class="keyword">if</span> (params.appPackageName != <span class="keyword">null</span> &amp;&amp; !params.appPackageName.equals(apk.packageName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, tag</span><br><span class="line">                + <span class="string">" specified package "</span> + params.appPackageName</span><br><span class="line">                + <span class="string">" inconsistent with "</span> + apk.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】扫描到的 apk 的版本号必须和该目录下第一个被扫描到的 apk 版本号保持一致！</span></span><br><span class="line">    <span class="keyword">if</span> (mVersionCode != apk.versionCode) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, tag</span><br><span class="line">                + <span class="string">" version code "</span> + apk.versionCode + <span class="string">" inconsistent with "</span></span><br><span class="line">                + mVersionCode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】扫描到的 apk 的签名必须和该目录下第一个被扫描到的 apk 签名保持一致！</span></span><br><span class="line">    <span class="keyword">if</span> (!Signature.areExactMatch(mSignatures, apk.signatures)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                tag + <span class="string">" signatures are inconsistent"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p><h4 id="4-2-3-3-close"><a href="#4-2-3-3-close" class="headerlink" title="4.2.3.3 close"></a>4.2.3.3 close</h4><p>close 方法很简单，将事务的 mActiveCount 引用计数自减 1，同时回调 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】引用计数减去 1；</span></span><br><span class="line">    <span class="keyword">if</span> (mActiveCount.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.1.4.2】反馈事务状态！</span></span><br><span class="line">        mCallback.onSessionActiveChanged(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-4-calculateInstalledSize"><a href="#4-2-3-4-calculateInstalledSize" class="headerlink" title="4.2.3.4 calculateInstalledSize"></a>4.2.3.4 calculateInstalledSize</h4><p>用于计算最终的安装大小！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">calculateInstalledSize</span><span class="params">()</span> <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    Preconditions.checkNotNull(mResolvedBaseFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ApkLite baseApk;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】解析要安装的 apk 的数据信息！</span></span><br><span class="line">        baseApk = PackageParser.parseApkLite(mResolvedBaseFile, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得其 split apk 的文件路径！</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; splitPaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File file : mResolvedStagedFiles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mResolvedBaseFile.equals(file)) <span class="keyword">continue</span>;</span><br><span class="line">        splitPaths.add(file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】获得其要继承的 apk 的文件路径！</span></span><br><span class="line">    <span class="keyword">for</span> (File file : mResolvedInheritedFiles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mResolvedBaseFile.equals(file)) <span class="keyword">continue</span>;</span><br><span class="line">        splitPaths.add(file.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】创建一个 PackageLite 对象！</span></span><br><span class="line">    <span class="keyword">final</span> PackageLite pkg = <span class="keyword">new</span> PackageLite(<span class="keyword">null</span>, baseApk, <span class="keyword">null</span>,</span><br><span class="line">            splitPaths.toArray(<span class="keyword">new</span> String[splitPaths.size()]), <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isForwardLocked =</span><br><span class="line">            (params.installFlags &amp; PackageManager.INSTALL_FORWARD_LOCK) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*4.2.3.4.1】调用 PackageHelper 计算空间大小！</span></span><br><span class="line">        <span class="keyword">return</span> PackageHelper.calculateInstalledSize(pkg, isForwardLocked, params.abiOverride);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                <span class="string">"Failed to calculate install size"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去 PackageHelper.calculateInstalledSize 方法中去看看：</p><h5 id="4-2-3-4-1-calculateInstalledSize"><a href="#4-2-3-4-1-calculateInstalledSize" class="headerlink" title="4.2.3.4.1 calculateInstalledSize"></a>4.2.3.4.1 calculateInstalledSize</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calculateInstalledSize</span><span class="params">(PackageLite pkg, <span class="keyword">boolean</span> isForwardLocked,</span></span></span><br><span class="line"><span class="function"><span class="params">        String abiOverride)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    NativeLibraryHelper.Handle handle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        handle = NativeLibraryHelper.Handle.create(pkg);</span><br><span class="line">        <span class="keyword">return</span> calculateInstalledSize(pkg, handle, isForwardLocked, abiOverride);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calculateInstalledSize</span><span class="params">(PackageLite pkg, NativeLibraryHelper.Handle handle,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> isForwardLocked, String abiOverride)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> sizeBytes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】包括 apk 集合其他的一些资源！</span></span><br><span class="line">    <span class="keyword">for</span> (String codePath : pkg.getAllCodePaths()) &#123;</span><br><span class="line">        <span class="keyword">final</span> File codeFile = <span class="keyword">new</span> File(codePath);</span><br><span class="line">        sizeBytes += codeFile.length();</span><br><span class="line">        <span class="comment">//【2】如果是 forward lock 模式，还要加入一些公共资源！</span></span><br><span class="line">        <span class="keyword">if</span> (isForwardLocked) &#123;</span><br><span class="line">            sizeBytes += PackageHelper.extractPublicFiles(codeFile, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】加入 native code 的大小！</span></span><br><span class="line">    sizeBytes += NativeLibraryHelper.sumNativeBinariesWithOverride(handle, abiOverride);</span><br><span class="line">    <span class="comment">//【4】返回最终大小！</span></span><br><span class="line">    <span class="keyword">return</span> sizeBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就分析到这里！</p><h4 id="4-2-3-5-computeProgressLocked"><a href="#4-2-3-5-computeProgressLocked" class="headerlink" title="4.2.3.5 computeProgressLocked"></a>4.2.3.5 computeProgressLocked</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeProgressLocked</span><span class="params">(<span class="keyword">boolean</span> forcePublish)</span> </span>&#123;</span><br><span class="line">    mProgress = MathUtils.constrain(mClientProgress * <span class="number">0.8f</span>, <span class="number">0f</span>, <span class="number">0.8f</span>)</span><br><span class="line">            + MathUtils.constrain(mInternalProgress * <span class="number">0.2f</span>, <span class="number">0f</span>, <span class="number">0.2f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only publish when meaningful change</span></span><br><span class="line">    <span class="keyword">if</span> (forcePublish || Math.abs(mProgress - mReportedProgress) &gt;= <span class="number">0.01</span>) &#123;</span><br><span class="line">        mReportedProgress = mProgress;</span><br><span class="line">        <span class="comment">//【3.1.4.1】调用 InternalCallback 回调！</span></span><br><span class="line">        mCallback.onSessionProgressChanged(<span class="keyword">this</span>, mProgress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-6-extractNativeLibraries"><a href="#4-2-3-6-extractNativeLibraries" class="headerlink" title="4.2.3.6 extractNativeLibraries"></a>4.2.3.6 extractNativeLibraries</h4><p>提取本地的 lib 库文件！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extractNativeLibraries</span><span class="params">(File packageDir, String abiOverride)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】libDir 指向 /data/app/vmdl[id].tmp/lib 目录，这里是删除目录下存在的 lib 库文件！</span></span><br><span class="line">    <span class="keyword">final</span> File libDir = <span class="keyword">new</span> File(packageDir, NativeLibraryHelper.LIB_DIR_NAME);</span><br><span class="line">    NativeLibraryHelper.removeNativeBinariesFromDirLI(libDir, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    NativeLibraryHelper.Handle handle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【2】创建 lib 子目录，并将应用程序中的 lib 库拷贝到该目录下！</span></span><br><span class="line">        handle = NativeLibraryHelper.Handle.create(packageDir);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> res = NativeLibraryHelper.copyNativeBinariesWithOverride(handle, libDir,</span><br><span class="line">                abiOverride);</span><br><span class="line">        <span class="keyword">if</span> (res != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(res,</span><br><span class="line">                    <span class="string">"Failed to extract native libraries, res="</span> + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR,</span><br><span class="line">                <span class="string">"Failed to extract native libraries"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 lib 的提取，这里涉及到了 NativeLibraryHelper，我们先不过多关注其实现！</p><h1 id="5-PackageManagerService"><a href="#5-PackageManagerService" class="headerlink" title="5 PackageManagerService"></a>5 PackageManagerService</h1><h2 id="5-1-PackageManagerService-installStage"><a href="#5-1-PackageManagerService-installStage" class="headerlink" title="5.1 PackageManagerService.installStage"></a>5.1 PackageManagerService.installStage</h2><p>接下来，进入 PackageManagerService 阶段。</p><p>这里的 IPackageInstallObserver2 observer 是前面创建的本次 localObserver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">installStage</span><span class="params">(String packageName, File stagedDir, String stagedCid,</span></span></span><br><span class="line"><span class="function"><span class="params">         IPackageInstallObserver2 observer, PackageInstaller.SessionParams sessionParams,</span></span></span><br><span class="line"><span class="function"><span class="params">         String installerPackageName, <span class="keyword">int</span> installerUid, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">         Certificate[][] certificates)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">         <span class="keyword">if</span> ((sessionParams.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</span><br><span class="line">             Slog.d(TAG, <span class="string">"Ephemeral install of "</span> + packageName);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//【5.1.1】创建一个 VerificationInfo 对象，用于校验</span></span><br><span class="line">     <span class="keyword">final</span> VerificationInfo verificationInfo = <span class="keyword">new</span> VerificationInfo(</span><br><span class="line">             sessionParams.originatingUri, sessionParams.referrerUri,</span><br><span class="line">             sessionParams.originatingUid, installerUid);</span><br><span class="line">     <span class="comment">//【5.1.2】创建了一个 OriginInfo 对象！</span></span><br><span class="line">     <span class="keyword">final</span> OriginInfo origin;</span><br><span class="line">     <span class="keyword">if</span> (stagedDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">         origin = OriginInfo.fromStagedFile(stagedDir);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         origin = OriginInfo.fromStagedContainer(stagedCid);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//【1】创建了一个 INIT_COPY 消息！</span></span><br><span class="line">     <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</span><br><span class="line">     <span class="comment">//【5.1.3】创建一个 InstallParams 安装参数对象！</span></span><br><span class="line">     <span class="keyword">final</span> InstallParams params = <span class="keyword">new</span> InstallParams(origin, <span class="keyword">null</span>, observer,</span><br><span class="line">             sessionParams.installFlags, installerPackageName, sessionParams.volumeUuid,</span><br><span class="line">             verificationInfo, user, sessionParams.abiOverride,</span><br><span class="line">             sessionParams.grantedRuntimePermissions, certificates);</span><br><span class="line">     params.setTraceMethod(<span class="string">"installStage"</span>).setTraceCookie(System.identityHashCode(params));</span><br><span class="line">     msg.obj = params;</span><br><span class="line"></span><br><span class="line">     Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installStage"</span>,</span><br><span class="line">             System.identityHashCode(msg.obj));</span><br><span class="line">     Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">             System.identityHashCode(msg.obj));</span><br><span class="line">             </span><br><span class="line">     <span class="comment">//【5.2】发送 INIT_COPY 消息！</span></span><br><span class="line">     mHandler.sendMessage(msg);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里的 mHandler 是在 PackageManagerService 的构造器中创建的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mHandlerThread = <span class="keyword">new</span> ServiceThread(TAG,</span><br><span class="line">        Process.THREAD_PRIORITY_BACKGROUND, <span class="keyword">true</span> <span class="comment">/*allowIo*/</span>);</span><br><span class="line">mHandlerThread.start();</span><br><span class="line">mHandler = <span class="keyword">new</span> PackageHandler(mHandlerThread.getLooper());</span><br></pre></td></tr></table></figure><p>是一个 PackageHandler 实例，其绑定了一个子线程 ServiceThread！</p><h3 id="5-1-1-new-VerificationInfo"><a href="#5-1-1-new-VerificationInfo" class="headerlink" title="5.1.1 new VerificationInfo"></a>5.1.1 new VerificationInfo</h3><p>VerificationInfo 类定义在 PackageManagerService 中，用于信息校验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** A constant used to indicate that a uid value is not present. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_UID = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** URI referencing where the package was downloaded from. */</span></span><br><span class="line">    <span class="keyword">final</span> Uri originatingUri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** HTTP referrer URI associated with the originatingURI. */</span></span><br><span class="line">    <span class="keyword">final</span> Uri referrer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** UID of the application that the install request originated from. */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> originatingUid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> installerUid; <span class="comment">// 安装者应用的 uid！</span></span><br><span class="line"></span><br><span class="line">    VerificationInfo(Uri originatingUri, Uri referrer, <span class="keyword">int</span> originatingUid, <span class="keyword">int</span> installerUid) &#123;</span><br><span class="line">        <span class="keyword">this</span>.originatingUri = originatingUri;</span><br><span class="line">        <span class="keyword">this</span>.referrer = referrer;</span><br><span class="line">        <span class="keyword">this</span>.originatingUid = originatingUid;</span><br><span class="line">        <span class="keyword">this</span>.installerUid = installerUid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-new-OriginInfo"><a href="#5-1-2-new-OriginInfo" class="headerlink" title="5.1.2 new OriginInfo"></a>5.1.2 new OriginInfo</h3><p>这里创建了一个 OriginInfo 实例，封装安装目录相关信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OriginInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> File file; <span class="comment">// 安装到内置存储，不为 null</span></span><br><span class="line">    <span class="keyword">final</span> String cid; <span class="comment">// 安装到内置存储，为 null</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> staged;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> existing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String resolvedPath;</span><br><span class="line">    <span class="keyword">final</span> File resolvedFile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> OriginInfo <span class="title">fromNothing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OriginInfo(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> OriginInfo <span class="title">fromUntrustedFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OriginInfo(file, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> OriginInfo <span class="title">fromExistingFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OriginInfo(file, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> OriginInfo <span class="title">fromStagedFile</span><span class="params">(File file)</span> </span>&#123; <span class="comment">//【1】安装到内置存储会调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OriginInfo(file, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> OriginInfo <span class="title">fromStagedContainer</span><span class="params">(String cid)</span> </span>&#123; <span class="comment">//【2】安装到外置存储会调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OriginInfo(<span class="keyword">null</span>, cid, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OriginInfo</span><span class="params">(File file, String cid, <span class="keyword">boolean</span> staged, <span class="keyword">boolean</span> existing)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.file = file; <span class="comment">// 内置时为：/data/app/vmdl[sessionId].tmp</span></span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">        <span class="keyword">this</span>.staged = staged; <span class="comment">// 安装到内置存储时为 true。</span></span><br><span class="line">        <span class="keyword">this</span>.existing = existing; <span class="comment">// 安装到内置存储时为 false。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cid != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvedPath = PackageHelper.getSdDir(cid);</span><br><span class="line">            resolvedFile = <span class="keyword">new</span> File(resolvedPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvedPath = file.getAbsolutePath();</span><br><span class="line">            resolvedFile = file;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolvedPath = <span class="keyword">null</span>;</span><br><span class="line">            resolvedFile = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先关注安装到内置存储中的逻辑！</p><h3 id="5-1-3-new-PMS-InstallParams"><a href="#5-1-3-new-PMS-InstallParams" class="headerlink" title="5.1.3 new PMS.InstallParams"></a>5.1.3 new PMS.InstallParams</h3><p>InstallParams  类定义在 PackageManagerService 中，封装了安装参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstallParams</span> <span class="keyword">extends</span> <span class="title">HandlerParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> OriginInfo origin;</span><br><span class="line">    <span class="keyword">final</span> MoveInfo move; <span class="comment">// move package 才会传入，安装时为 null！</span></span><br><span class="line">    <span class="keyword">final</span> IPackageInstallObserver2 observer; <span class="comment">// 本地传观察者；</span></span><br><span class="line">    <span class="keyword">int</span> installFlags;</span><br><span class="line">    <span class="keyword">final</span> String installerPackageName;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid;</span><br><span class="line">    <span class="keyword">private</span> InstallArgs mArgs;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRet;</span><br><span class="line">    <span class="keyword">final</span> String packageAbiOverride;</span><br><span class="line">    <span class="keyword">final</span> String[] grantedRuntimePermissions; <span class="comment">// 安装时授予的运行时权限列表；</span></span><br><span class="line">    <span class="keyword">final</span> VerificationInfo verificationInfo;</span><br><span class="line">    <span class="keyword">final</span> Certificate[][] certificates;</span><br><span class="line"></span><br><span class="line">    InstallParams(OriginInfo origin, MoveInfo move, IPackageInstallObserver2 observer,</span><br><span class="line">            <span class="keyword">int</span> installFlags, String installerPackageName, String volumeUuid,</span><br><span class="line">            VerificationInfo verificationInfo, UserHandle user, String packageAbiOverride,</span><br><span class="line">            String[] grantedPermissions, Certificate[][] certificates) &#123;</span><br><span class="line">        <span class="keyword">super</span>(user);</span><br><span class="line">        <span class="keyword">this</span>.origin = origin;</span><br><span class="line">        <span class="keyword">this</span>.move = move;</span><br><span class="line">        <span class="keyword">this</span>.observer = observer;</span><br><span class="line">        <span class="keyword">this</span>.installFlags = installFlags;</span><br><span class="line">        <span class="keyword">this</span>.installerPackageName = installerPackageName;</span><br><span class="line">        <span class="keyword">this</span>.volumeUuid = volumeUuid;</span><br><span class="line">        <span class="keyword">this</span>.verificationInfo = verificationInfo;</span><br><span class="line">        <span class="keyword">this</span>.packageAbiOverride = packageAbiOverride;</span><br><span class="line">        <span class="keyword">this</span>.grantedRuntimePermissions = grantedPermissions;</span><br><span class="line">        <span class="keyword">this</span>.certificates = certificates;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InstallParams 继承了 HandlerParams！</p><p>这里涉及到一个 MoveInfo move，在 movePackageInternal 也就是移动 package 时才会调用，这里是安装，我们先不关注！</p><h2 id="5-2-PackageHandler-doHandleMessage-INIT-COPY"><a href="#5-2-PackageHandler-doHandleMessage-INIT-COPY" class="headerlink" title="5.2 PackageHandler.doHandleMessage[INIT_COPY]"></a>5.2 PackageHandler.doHandleMessage[INIT_COPY]</h2><p>PackageHandler 会在子线程中处理 INIT_COPY 消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> INIT_COPY: &#123;</span><br><span class="line">    <span class="comment">//【1】取出 InstallParams！</span></span><br><span class="line">    HandlerParams params = (HandlerParams) msg.obj;</span><br><span class="line">    <span class="comment">// mPendingInstalls 中会保存所有正在等待的安装！</span></span><br><span class="line">    <span class="keyword">int</span> idx = mPendingInstalls.size();</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"init_copy idx="</span> + idx + <span class="string">": "</span> + params);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】mBound 用来判断是否已经绑定到了 DefaultContainerService，该服务用于安装！</span></span><br><span class="line">    <span class="keyword">if</span> (!mBound) &#123;</span><br><span class="line">        Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                System.identityHashCode(mHandler));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.2.1】尝试去 bind 服务，bind 成功后，mBound 置为 true！</span></span><br><span class="line">        <span class="keyword">if</span> (!connectToService()) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to bind to media container service"</span>);</span><br><span class="line">            <span class="comment">//【5.2.2】如果不能 bind 成功，那就触发 HandlerParams 的 serviceError 方法！</span></span><br><span class="line">            params.serviceError();</span><br><span class="line">            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                    System.identityHashCode(mHandler));</span><br><span class="line">            <span class="keyword">if</span> (params.traceMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, params.traceMethod,</span><br><span class="line">                        params.traceCookie);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【3】将本次的安装参数添加到等待集合中！！</span></span><br><span class="line">            mPendingInstalls.add(idx, params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【4】如果之前已经 bind 了，那就直接将安装参数添加到等待集合中！！</span></span><br><span class="line">        mPendingInstalls.add(idx, params);</span><br><span class="line">        <span class="comment">//【5.3】如果是第一次添加，发送 MCS_BOUND 消息！</span></span><br><span class="line">        <span class="keyword">if</span> (idx == <span class="number">0</span>) &#123;</span><br><span class="line">            mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里逻辑很清晰了，我们继续看！</p><h3 id="5-2-1-PackageHandler-connectToService"><a href="#5-2-1-PackageHandler-connectToService" class="headerlink" title="5.2.1 PackageHandler.connectToService"></a>5.2.1 PackageHandler.connectToService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connectToService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"Trying to bind to"</span> +</span><br><span class="line">            <span class="string">" DefaultContainerService"</span>);</span><br><span class="line">    Intent service = <span class="keyword">new</span> Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="comment">//【1】开始 bind 服务，传入了 mDefContainerConn 对象！</span></span><br><span class="line">    <span class="keyword">if</span> (mContext.bindServiceAsUser(service, mDefContainerConn,</span><br><span class="line">            Context.BIND_AUTO_CREATE, UserHandle.SYSTEM)) &#123;</span><br><span class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">        mBound = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 bind 的服务是 DefaultContainerService！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ComponentName DEFAULT_CONTAINER_COMPONENT = <span class="keyword">new</span> ComponentName(</span><br><span class="line">        DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">        <span class="string">"com.android.defcontainer.DefaultContainerService"</span>);</span><br></pre></td></tr></table></figure></p><p>PackageManagerService 内部持有一个 DefaultContainerConnection 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> DefaultContainerConnection mDefContainerConn =</span><br><span class="line">        <span class="keyword">new</span> DefaultContainerConnection();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultContainerConnection</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"onServiceConnected"</span>);</span><br><span class="line">        <span class="comment">//【1】获得 DefaultContainerConnection 代理对象！</span></span><br><span class="line">        IMediaContainerService imcs =</span><br><span class="line">            IMediaContainerService.Stub.asInterface(service);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.3】发送 MCS_BOUND 消息！</span></span><br><span class="line">        mHandler.sendMessage(mHandler.obtainMessage(MCS_BOUND, imcs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG, <span class="string">"onServiceDisconnected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后会发送 MCS_BOUND 消息给 PackageHandler 对象！</p><h3 id="5-2-2-InstallParams-serviceError"><a href="#5-2-2-InstallParams-serviceError" class="headerlink" title="5.2.2 InstallParams.serviceError"></a>5.2.2 InstallParams.serviceError</h3><p>serviceError 方法是从 HandlerParams 中继承到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">serviceError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"serviceError"</span>);</span><br><span class="line">    <span class="comment">//【5.4.2】安装异常，保存结果</span></span><br><span class="line">    handleServiceError();</span><br><span class="line">    <span class="comment">//【5.4.4】处理结果！</span></span><br><span class="line">    handleReturnCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleServiceError 方法和 handleReturnCode 方法的最终实现也是在 InstallParams 中！</p><h2 id="5-3-PackageHandler-doHandleMessage-MCS-BOUND-绑定服务"><a href="#5-3-PackageHandler-doHandleMessage-MCS-BOUND-绑定服务" class="headerlink" title="5.3 PackageHandler.doHandleMessage[MCS_BOUND] - 绑定服务"></a>5.3 PackageHandler.doHandleMessage[MCS_BOUND] - 绑定服务</h2><p>继续来看下 PackageHandler 对 MCS_BOUND 的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MCS_BOUND: &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"mcs_bound"</span>);</span><br><span class="line">    <span class="comment">//【1】这里的 msg.obj 是前面 bind 获得的代理对象，将其保存到 mContainerService 中！ </span></span><br><span class="line">    <span class="keyword">if</span> (msg.obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContainerService = (IMediaContainerService) msg.obj;</span><br><span class="line">        Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"bindingMCS"</span>,</span><br><span class="line">                System.identityHashCode(mHandler));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】异常处理，如果 mContainerService 为 null，且 mBound 为 ture，那么这种情况是异常！</span></span><br><span class="line">    <span class="keyword">if</span> (mContainerService == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mBound) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Cannot bind to media container service"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.1】遍历所有的 HandlerParams 安装参数，回调 serviceError！</span></span><br><span class="line">            <span class="keyword">for</span> (HandlerParams params : mPendingInstalls) &#123;</span><br><span class="line">                params.serviceError();</span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                        System.identityHashCode(params));</span><br><span class="line">                <span class="keyword">if</span> (params.traceMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER,</span><br><span class="line">                            params.traceMethod, params.traceCookie);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.2】清空 mPendingInstalls 集合！</span></span><br><span class="line">            mPendingInstalls.clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Waiting to connect to media container service"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【3】正常情况下，bind 是有效的，那么会进入这里！</span></span><br><span class="line">        HandlerParams params = mPendingInstalls.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                    System.identityHashCode(params));</span><br><span class="line">            Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"startCopy"</span>);</span><br><span class="line">            <span class="comment">//【5.4】调用了 HandlerParams 的 startCopy 方法！</span></span><br><span class="line">            <span class="keyword">if</span> (params.startCopy()) &#123;</span><br><span class="line">                <span class="comment">// We are done...  look for more work or to</span></span><br><span class="line">                <span class="comment">// go idle.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                        <span class="string">"Checking for more work or unbind..."</span>);</span><br><span class="line">                <span class="comment">//【3.1】本次安装完成，删除本次处理的安装参数！</span></span><br><span class="line">                <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    mPendingInstalls.remove(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mPendingInstalls.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//【3.2】如果所有的安装参数都处理玩了，unbind 服务！</span></span><br><span class="line">                    <span class="comment">// 这里的 unbind 延迟了 10s</span></span><br><span class="line">                    <span class="keyword">if</span> (mBound) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                                <span class="string">"Posting delayed MCS_UNBIND"</span>);</span><br><span class="line">                        removeMessages(MCS_UNBIND);</span><br><span class="line">                        Message ubmsg = obtainMessage(MCS_UNBIND);</span><br><span class="line">                        sendMessageDelayed(ubmsg, <span class="number">10000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.3】在安装队列中有其他的安装项，我们发送 MCS_BOUND 消息继续处理！</span></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_SD_INSTALL) Log.i(TAG,</span><br><span class="line">                            <span class="string">"Posting MCS_BOUND for next work"</span>);</span><br><span class="line">                    mHandler.sendEmptyMessage(MCS_BOUND);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Should never happen ideally.</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Empty queue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-InstallParams-startCopy"><a href="#5-4-InstallParams-startCopy" class="headerlink" title="5.4 InstallParams.startCopy"></a>5.4 InstallParams.startCopy</h2><p>InstallParams 继承了 HandlerParams：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> res;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"startCopy "</span> + mUser + <span class="string">": "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//【1】如果重试次数大于 4 ，那么就放弃本次安装！</span></span><br><span class="line">        <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to invoke remote methods on default container service. Giving up"</span>);</span><br><span class="line">            <span class="comment">//【5.4.1】发送 MCS_GIVE_UP 消息！</span></span><br><span class="line">            mHandler.sendEmptyMessage(MCS_GIVE_UP);</span><br><span class="line">            <span class="comment">//【5.4.2】处理失败结果</span></span><br><span class="line">            handleServiceError();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.5】继续安装！</span></span><br><span class="line">            handleStartCopy();</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Posting install MCS_RECONNECT"</span>);</span><br><span class="line">        <span class="comment">//【5.4.3】发送 MCS_RECONNECT 消息！</span></span><br><span class="line">        mHandler.sendEmptyMessage(MCS_RECONNECT);</span><br><span class="line">        res = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5.4.4】处理返回码！</span></span><br><span class="line">    handleReturnCode();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义了安装尝试次数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES = <span class="number">4</span>;</span><br></pre></td></tr></table></figure></p><h3 id="5-4-1-PackageHandler-doHandleMessage-MCS-GIVE-UP-放弃安装"><a href="#5-4-1-PackageHandler-doHandleMessage-MCS-GIVE-UP-放弃安装" class="headerlink" title="5.4.1 PackageHandler.doHandleMessage[MCS_GIVE_UP] - 放弃安装"></a>5.4.1 PackageHandler.doHandleMessage[MCS_GIVE_UP] - 放弃安装</h3><p>重试次数大于 4 ，那么就放弃本次安装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MCS_GIVE_UP: &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"mcs_giveup too many retries"</span>);</span><br><span class="line">    <span class="comment">//【1】移除这个安装参数。</span></span><br><span class="line">    HandlerParams params = mPendingInstalls.remove(<span class="number">0</span>);</span><br><span class="line">    Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">            System.identityHashCode(params));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-InstallParams-handleServiceError"><a href="#5-4-2-InstallParams-handleServiceError" class="headerlink" title="5.4.2 InstallParams.handleServiceError"></a>5.4.2 InstallParams.handleServiceError</h3><p>处理本次安装失败的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleServiceError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【5.2.3】创建安装参数 InstallArgs！</span></span><br><span class="line">    mArgs = createInstallArgs(<span class="keyword">this</span>);</span><br><span class="line">    mRet = PackageManager.INSTALL_FAILED_INTERNAL_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 createInstallArgs 方法我们后面再分析！</p><h3 id="5-4-3-PackageHandler-doHandleMessage-MCS-RECONNECT-重连服务"><a href="#5-4-3-PackageHandler-doHandleMessage-MCS-RECONNECT-重连服务" class="headerlink" title="5.4.3 PackageHandler.doHandleMessage[MCS_RECONNECT] - 重连服务"></a>5.4.3 PackageHandler.doHandleMessage[MCS_RECONNECT] - 重连服务</h3><p>MCS_RECONNECT 消息会尝试重连服务！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> MCS_RECONNECT: &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"mcs_reconnect"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mPendingInstalls.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】如果 mBound 为 true，先尝试断开连接！</span></span><br><span class="line">        <span class="keyword">if</span> (mBound) &#123;</span><br><span class="line">            disconnectService();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】开始重新连接服务！</span></span><br><span class="line">        <span class="keyword">if</span> (!connectToService()) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to bind to media container service"</span>);</span><br><span class="line">            <span class="keyword">for</span> (HandlerParams params : mPendingInstalls) &#123;</span><br><span class="line">                <span class="comment">//【5.2.2】返回安装异常！</span></span><br><span class="line">                params.serviceError();</span><br><span class="line">                Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"queueInstall"</span>,</span><br><span class="line">                        System.identityHashCode(params));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3】清空 mPendingInstalls 集合！</span></span><br><span class="line">            mPendingInstalls.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p><h3 id="5-4-4-InstallParams-handleReturnCode"><a href="#5-4-4-InstallParams-handleReturnCode" class="headerlink" title="5.4.4 InstallParams.handleReturnCode"></a>5.4.4 InstallParams.handleReturnCode</h3><p>当 mArgs 为 null 的时候，此时该 package 正在被校验，所以需要等到校验成功后才能安装，所以不会进入这里！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleReturnCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 mArgs 这里为 null，可能是不需要校验！</span></span><br><span class="line">    <span class="keyword">if</span> (mArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【5.7】继续安装！</span></span><br><span class="line">        processPendingInstall(mArgs, mRet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续看！</p><h2 id="5-5-InstallParams-handleStartCopy"><a href="#5-5-InstallParams-handleStartCopy" class="headerlink" title="5.5 InstallParams.handleStartCopy"></a>5.5 InstallParams.handleStartCopy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStartCopy</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】保存安装结果，默认为成功！</span></span><br><span class="line">    <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】我们知道 origin 中存储了安装目录相关的信息！</span></span><br><span class="line">    <span class="keyword">if</span> (origin.staged) &#123;</span><br><span class="line">        <span class="keyword">if</span> (origin.file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.1】安装到内置存储中！</span></span><br><span class="line">            installFlags |= PackageManager.INSTALL_INTERNAL;</span><br><span class="line">            installFlags &amp;= ~PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (origin.cid != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.2】这里是安装到外置存储中的逻辑！</span></span><br><span class="line">            installFlags |= PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">            installFlags &amp;= ~PackageManager.INSTALL_INTERNAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid stage location"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】判断安装位置！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> onSd = (installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> onInt = (installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> ephemeral = (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">    PackageInfoLite pkgLite = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】判断安装位置是否满足条件！</span></span><br><span class="line">    <span class="keyword">if</span> (onInt &amp;&amp; onSd) &#123;</span><br><span class="line">        <span class="comment">//【4.1】不能同时设置安装在 sd 和内置中！</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Conflicting flags specified for installing on both internal and external"</span>);</span><br><span class="line">        ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onSd &amp;&amp; ephemeral) &#123;</span><br><span class="line">        Slog.w(TAG,  <span class="string">"Conflicting flags specified for installing ephemeral on external"</span>);</span><br><span class="line">        <span class="comment">//【4.2】不能设置短暂安装在 sd 中！</span></span><br><span class="line">        ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.5.1】利用 ContainerService 获取 PackageInfoLite，同时判断空间是否合适！</span></span><br><span class="line">        pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath, installFlags,</span><br><span class="line">                packageAbiOverride);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_EPHEMERAL &amp;&amp; ephemeral) &#123;</span><br><span class="line">            Slog.v(TAG, <span class="string">"pkgLite for install: "</span> + pkgLite);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.3】空间不足，尝试释放空尽！</span></span><br><span class="line">        <span class="keyword">if</span> (!origin.staged &amp;&amp; pkgLite.recommendedInstallLocation</span><br><span class="line">                == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> focus freeing disk space on the target device</span></span><br><span class="line">            <span class="keyword">final</span> StorageManager storage = StorageManager.from(mContext);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> lowThreshold = storage.getStorageLowBytes(</span><br><span class="line">                    Environment.getDataDirectory());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> sizeBytes = mContainerService.calculateInstalledSize(</span><br><span class="line">                    origin.resolvedPath, isForwardLocked(), packageAbiOverride);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【4.4】通过 installd 释放存储！</span></span><br><span class="line">                mInstaller.freeCache(<span class="keyword">null</span>, sizeBytes + lowThreshold);</span><br><span class="line">                <span class="comment">//【5.5.1】再次利用 ContainerService 获取 PackageInfoLite，同时判断空间是否合适！</span></span><br><span class="line">                pkgLite = mContainerService.getMinimalPackageInfo(origin.resolvedPath,</span><br><span class="line">                        installFlags, packageAbiOverride);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Failed to free cache"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4.5】依然无法安装，设置结果为 RECOMMEND_FAILED_INSUFFICIENT_STORAGE！</span></span><br><span class="line">            <span class="keyword">if</span> (pkgLite.recommendedInstallLocation</span><br><span class="line">                    == PackageHelper.RECOMMEND_FAILED_INVALID_URI) &#123;</span><br><span class="line">                pkgLite.recommendedInstallLocation</span><br><span class="line">                    = PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】处理前面的空间判断后的结果！</span></span><br><span class="line">    <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="keyword">int</span> loc = pkgLite.recommendedInstallLocation;</span><br><span class="line">        <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INVALID_INSTALL_LOCATION;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_ALREADY_EXISTS;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_APK) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INVALID_APK;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_INVALID_URI) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_MEDIA_UNAVAILABLE) &#123;</span><br><span class="line">            ret = PackageManager.INSTALL_FAILED_MEDIA_UNAVAILABLE;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.5.2】调用 installLocationPolicy 方法，针对于降级安装和替换安装做处理！</span></span><br><span class="line">            loc = installLocationPolicy(pkgLite);</span><br><span class="line">            <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_FAILED_VERSION_DOWNGRADE) &#123;</span><br><span class="line">                <span class="comment">// 处理无法降级的结果！</span></span><br><span class="line">                ret = PackageManager.INSTALL_FAILED_VERSION_DOWNGRADE;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!onSd &amp;&amp; !onInt) &#123;</span><br><span class="line">                <span class="comment">// 如果 flags 没有指定内置还是外置，那么由 installLocationPolicy 的返回值指定！</span></span><br><span class="line">                <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_INSTALL_EXTERNAL) &#123;</span><br><span class="line">                    installFlags |= PackageManager.INSTALL_EXTERNAL; <span class="comment">// 外置</span></span><br><span class="line">                    installFlags &amp;= ~PackageManager.INSTALL_INTERNAL;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loc == PackageHelper.RECOMMEND_INSTALL_EPHEMERAL) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">                        Slog.v(TAG, <span class="string">"...setting INSTALL_EPHEMERAL install flag"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    installFlags |= PackageManager.INSTALL_EPHEMERAL; <span class="comment">// 内置并且是短暂安装！</span></span><br><span class="line">                    installFlags &amp;= ~(PackageManager.INSTALL_EXTERNAL</span><br><span class="line">                            |PackageManager.INSTALL_INTERNAL);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    installFlags |= PackageManager.INSTALL_INTERNAL; <span class="comment">// 内置</span></span><br><span class="line">                    installFlags &amp;= ~PackageManager.INSTALL_EXTERNAL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5.5.3】创建一个 InstallArgs 对象，和 InstallParams 相互引用！</span></span><br><span class="line">    <span class="keyword">final</span> InstallArgs args = createInstallArgs(<span class="keyword">this</span>);</span><br><span class="line">    mArgs = args;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> http://b/22976637</span></span><br><span class="line">        <span class="comment">//【6】如果该应用是安装给 all users 的，那么需要校验应用！</span></span><br><span class="line">        UserHandle verifierUser = getUser();</span><br><span class="line">        <span class="keyword">if</span> (verifierUser == UserHandle.ALL) &#123;</span><br><span class="line">            verifierUser = UserHandle.SYSTEM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】尝试找到系统中安装的 pacakge 校验器，如果可以找到，那就要做校验啦！</span></span><br><span class="line">        <span class="comment">//【7.1】获得校验器的 uid！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> requiredUid = mRequiredVerifierPackage == <span class="keyword">null</span> ? -<span class="number">1</span></span><br><span class="line">                : getPackageUid(mRequiredVerifierPackage, MATCH_DEBUG_TRIAGED_MISSING,</span><br><span class="line">                        verifierUser.getIdentifier());</span><br><span class="line">        <span class="comment">//【7.1】如果是安装到内置存储（existing 为 true），并且系统中有校验器，并且系统打开了校验功能，那么就尝试校验！</span></span><br><span class="line">        <span class="comment">//【5.5.4】通过 isVerificationEnabled 判断是否打开校验功能！</span></span><br><span class="line">        <span class="keyword">if</span> (!origin.existing &amp;&amp; requiredUid != -<span class="number">1</span></span><br><span class="line">                &amp;&amp; isVerificationEnabled(verifierUser.getIdentifier(), installFlags)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【7.1.1】准备发送校验广播</span></span><br><span class="line">            <span class="keyword">final</span> Intent verification = <span class="keyword">new</span> Intent(</span><br><span class="line">                    Intent.ACTION_PACKAGE_NEEDS_VERIFICATION);</span><br><span class="line">            verification.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);</span><br><span class="line">            verification.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(origin.resolvedPath)),</span><br><span class="line">                    PACKAGE_MIME_TYPE); <span class="comment">// 设置 DataAndType 属性，包含了 apk 路径对应的 uri</span></span><br><span class="line">            verification.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class="comment">// 增加了临时的权限授予！</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【7.1.2】查询校验器！</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;ResolveInfo&gt; receivers = queryIntentReceiversInternal(verification,</span><br><span class="line">                    PACKAGE_MIME_TYPE, <span class="number">0</span>, verifierUser.getIdentifier());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_VERIFY) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Found "</span> + receivers.size() + <span class="string">" verifiers for intent "</span></span><br><span class="line">                        + verification.toString() + <span class="string">" with "</span> + pkgLite.verifiers.length</span><br><span class="line">                        + <span class="string">" optional verifiers"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> verificationId = mPendingVerificationToken++; <span class="comment">// 计算本次校验的唯一标识 token</span></span><br><span class="line">            verification.putExtra(PackageManager.EXTRA_VERIFICATION_ID, verificationId);</span><br><span class="line">            verification.putExtra(PackageManager.EXTRA_VERIFICATION_INSTALLER_PACKAGE,</span><br><span class="line">                    installerPackageName); <span class="comment">// 安装器（packageInstaller）</span></span><br><span class="line">            verification.putExtra(PackageManager.EXTRA_VERIFICATION_INSTALL_FLAGS,</span><br><span class="line">                    installFlags); <span class="comment">// 本次安装的 installFlags</span></span><br><span class="line">            verification.putExtra(PackageManager.EXTRA_VERIFICATION_PACKAGE_NAME,</span><br><span class="line">                    pkgLite.packageName); <span class="comment">// 要校验的应用</span></span><br><span class="line">            verification.putExtra(PackageManager.EXTRA_VERIFICATION_VERSION_CODE,</span><br><span class="line">                    pkgLite.versionCode); <span class="comment">// 版本号</span></span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span> (verificationInfo != <span class="keyword">null</span>) &#123; <span class="comment">// 如果指定了校验信息，将其写入 intent！</span></span><br><span class="line">                <span class="keyword">if</span> (verificationInfo.originatingUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    verification.putExtra(Intent.EXTRA_ORIGINATING_URI,</span><br><span class="line">                            verificationInfo.originatingUri);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (verificationInfo.referrer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    verification.putExtra(Intent.EXTRA_REFERRER,</span><br><span class="line">                            verificationInfo.referrer);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (verificationInfo.originatingUid &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    verification.putExtra(Intent.EXTRA_ORIGINATING_UID,</span><br><span class="line">                            verificationInfo.originatingUid);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (verificationInfo.installerUid &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    verification.putExtra(PackageManager.EXTRA_VERIFICATION_INSTALLER_UID,</span><br><span class="line">                            verificationInfo.installerUid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.5.5】创建一个 PackageVerificationState 对象，用于保存应用校验状态，同时将创建的</span></span><br><span class="line">            <span class="comment">// installArgs 作为参数传入，并加入 mPendingVerification 集合中！！</span></span><br><span class="line">            <span class="keyword">final</span> PackageVerificationState verificationState = <span class="keyword">new</span> PackageVerificationState(</span><br><span class="line">                    requiredUid, args);</span><br><span class="line">            mPendingVerification.append(verificationId, verificationState);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【7.1.3】如果应用指定了校验者，那么我们要尝试先用指定的校验器校验！</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;ComponentName&gt; sufficientVerifiers = matchVerifiers(pkgLite,</span><br><span class="line">                    receivers, verificationState);</span><br><span class="line">            <span class="keyword">if</span> (sufficientVerifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = sufficientVerifiers.size();</span><br><span class="line">                <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">                    Slog.i(TAG, <span class="string">"Additional verifiers required, but none installed."</span>);</span><br><span class="line">                    ret = PackageManager.INSTALL_FAILED_VERIFICATION_FAILURE;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> ComponentName verifierComponent = sufficientVerifiers.get(i);</span><br><span class="line">                        <span class="comment">// 使用前面创建的 verification 意图，再创建一个 intent！</span></span><br><span class="line">                        <span class="comment">// 指定组件为应用指定的校验器，并发送广播！</span></span><br><span class="line">                        <span class="keyword">final</span> Intent sufficientIntent = <span class="keyword">new</span> Intent(verification);</span><br><span class="line">                        sufficientIntent.setComponent(verifierComponent);</span><br><span class="line">                        mContext.sendBroadcastAsUser(sufficientIntent, verifierUser);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【7.1.4】找到和 mRequiredVerifierPackage（系统指定的默认校验器）匹配的接收者！</span></span><br><span class="line">            <span class="keyword">final</span> ComponentName requiredVerifierComponent = matchComponentForVerifier(</span><br><span class="line">                    mRequiredVerifierPackage, receivers);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ret == PackageManager.INSTALL_SUCCEEDED</span><br><span class="line">                    &amp;&amp; mRequiredVerifierPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Trace.asyncTraceBegin(</span><br><span class="line">                        TRACE_TAG_PACKAGE_MANAGER, <span class="string">"verification"</span>, verificationId);</span><br><span class="line">                <span class="comment">//【7.1.5】指定目标应用为 mRequiredVerifierPackage 的内部组件！</span></span><br><span class="line">                <span class="comment">// 发送 verification 意图！</span></span><br><span class="line">                verification.setComponent(requiredVerifierComponent);</span><br><span class="line">                mContext.sendOrderedBroadcastAsUser(verification, verifierUser,</span><br><span class="line">                        android.Manifest.permission.PACKAGE_VERIFICATION_AGENT,</span><br><span class="line">                        <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">                                <span class="comment">//【7.1.6】当 mRequiredVerifierPackage 接收到广播后，会回调</span></span><br><span class="line">                                <span class="comment">// 该 BroadcastReceiver 的 onReceive 方法！</span></span><br><span class="line">                                <span class="comment">//【5.6】此时校验完成，这里会发送 CHECK_PENDING_VERIFICATION 给 PackageHandler</span></span><br><span class="line">                                <span class="comment">// 携带校验标识符！</span></span><br><span class="line">                                <span class="keyword">final</span> Message msg = mHandler</span><br><span class="line">                                        .obtainMessage(CHECK_PENDING_VERIFICATION);</span><br><span class="line">                                msg.arg1 = verificationId;</span><br><span class="line">                                mHandler.sendMessageDelayed(msg, getVerificationTimeout());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * We don't want the copy to proceed until verification</span></span><br><span class="line"><span class="comment">                 * succeeds, so null out this field.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                mArgs = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.7】没有合适的校验器，那么会调用 InstallArgs 的 copyApk 方法！</span></span><br><span class="line">            ret = args.copyApk(mContainerService, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mRet = ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接可以看到，最终</p><h3 id="5-5-1-DefaultContainerService-getMinimalPackageInfo"><a href="#5-5-1-DefaultContainerService-getMinimalPackageInfo" class="headerlink" title="5.5.1 DefaultContainerService.getMinimalPackageInfo"></a>5.5.1 DefaultContainerService.getMinimalPackageInfo</h3><p>getMinimalPackageInfo 方法会解析 apk，返回 apk 的解析信息，同时判断空间状态！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PackageInfoLite <span class="title">getMinimalPackageInfo</span><span class="params">(String packagePath, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">        String abiOverride)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context context = DefaultContainerService.<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isForwardLocked = (flags &amp; PackageManager.INSTALL_FORWARD_LOCK) != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//【5.5.1.1】创建了一个 PackageInfoLite 实例！</span></span><br><span class="line">    PackageInfoLite ret = <span class="keyword">new</span> PackageInfoLite();</span><br><span class="line">    <span class="keyword">if</span> (packagePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">"Invalid package file "</span> + packagePath);</span><br><span class="line">        ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_APK; <span class="comment">// 该 apk 无效</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> File packageFile = <span class="keyword">new</span> File(packagePath);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.PackageLite pkg;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> sizeBytes;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【2】解析 apk，获得其 PackageLite 对象，并计算安装所需空间！</span></span><br><span class="line">        pkg = PackageParser.parsePackageLite(packageFile, <span class="number">0</span>);</span><br><span class="line">        sizeBytes = PackageHelper.calculateInstalledSize(pkg, isForwardLocked, abiOverride);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException | IOException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to parse package at "</span> + packagePath + <span class="string">": "</span> + e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!packageFile.exists()) &#123;</span><br><span class="line">            ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_URI; <span class="comment">// 该 apk 无效</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ret.recommendedInstallLocation = PackageHelper.RECOMMEND_FAILED_INVALID_APK; <span class="comment">// 该 apk 无效</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】将解析到的参数保存到 PackageInfoLite 中！</span></span><br><span class="line">    ret.packageName = pkg.packageName;</span><br><span class="line">    ret.splitNames = pkg.splitNames;</span><br><span class="line">    ret.versionCode = pkg.versionCode;</span><br><span class="line">    ret.baseRevisionCode = pkg.baseRevisionCode;</span><br><span class="line">    ret.splitRevisionCodes = pkg.splitRevisionCodes;</span><br><span class="line">    ret.installLocation = pkg.installLocation;</span><br><span class="line">    ret.verifiers = pkg.verifiers;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5.5.1.2】解析安装位置状态信息！</span></span><br><span class="line">    ret.recommendedInstallLocation = PackageHelper.resolveInstallLocation(context,</span><br><span class="line">            pkg.packageName, pkg.installLocation, sizeBytes, flags);</span><br><span class="line">    ret.multiArch = pkg.multiArch;</span><br><span class="line">    <span class="comment">//【4】返回该 PackageInfoLite 实例！</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-1-1-new-PackageInfoLite"><a href="#5-5-1-1-new-PackageInfoLite" class="headerlink" title="5.5.1.1 new PackageInfoLite"></a>5.5.1.1 new PackageInfoLite</h4><p>PackageInfoLite 用来保存解析到的 apk 的一些信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInfoLite</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String packageName; <span class="comment">// 应用包名；</span></span><br><span class="line">    <span class="keyword">public</span> String[] splitNames; <span class="comment">// split apk 的名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> versionCode; <span class="comment">// 版本号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> baseRevisionCode;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] splitRevisionCodes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The android:multiArch flag from the package manifest. If set,</span></span><br><span class="line"><span class="comment">     * we will extract all native libraries for the given app, not just those</span></span><br><span class="line"><span class="comment">     * from the preferred ABI.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> multiArch; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> recommendedInstallLocation;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installLocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> VerifierInfo[] verifiers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageInfoLite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 recommendedInstallLocation 可以取下面四个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PackageHelper.RECOMMEND_INSTALL_INTERNAL <span class="comment">// 内置</span></span><br><span class="line">PackageHelper.RECOMMEND_INSTALL_EXTERNAL <span class="comment">// 外置</span></span><br><span class="line">PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE <span class="comment">// 存储异常</span></span><br><span class="line">PackageHelper.RECOMMEND_FAILED_INVALID_APK <span class="comment">// apk解析异常</span></span><br></pre></td></tr></table></figure><h4 id="5-5-1-2-PackageHelper-resolveInstallLocation"><a href="#5-5-1-2-PackageHelper-resolveInstallLocation" class="headerlink" title="5.5.1.2 PackageHelper.resolveInstallLocation"></a>5.5.1.2 PackageHelper.resolveInstallLocation</h4><p>resolveInstallLocation 方法用于计算一个合适的安装位置给 apk！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">resolveInstallLocation</span><span class="params">(Context context, String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> installLocation, <span class="keyword">long</span> sizeBytes, <span class="keyword">int</span> installFlags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果该应用已经安装了，那么我们获得上一次安装后的信息！！</span></span><br><span class="line">    ApplicationInfo existingInfo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        existingInfo = context.getPackageManager().getApplicationInfo(packageName,</span><br><span class="line">                PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> prefer;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> checkBoth;</span><br><span class="line">    <span class="keyword">boolean</span> ephemeral = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】根据安装参数 installFlags，来选择合适的安装位置，按照优先级依次解析！</span></span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【2.1】如果指定了 PackageManager.INSTALL_EPHEMERAL，优先内置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        ephemeral = <span class="keyword">true</span>; <span class="comment">// 表示短暂安装！</span></span><br><span class="line">        checkBoth = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【2.2】如果指定了 PackageManager.INSTALL_INTERNAL，优先内置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【2.3】如果指定了 PackageManager.INSTALL_EXTERNAL，优先外置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        checkBoth = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY) &#123;</span><br><span class="line">        <span class="comment">//【2.4】如果指定了 PackageManager.INSTALL_LOCATION_INTERNAL_ONLY，优先内置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL) &#123;</span><br><span class="line">        <span class="comment">//【2.5】如果指定了 PackageManager.INSTALL_LOCATION_PREFER_EXTERNAL，优先外置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        checkBoth = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_AUTO) &#123;</span><br><span class="line">        <span class="comment">//【2.6】如果指定了 PackageManager.INSTALL_LOCATION_AUTO，那么我们自动调整！</span></span><br><span class="line">        <span class="keyword">if</span> (existingInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.6.1】如果之前已经安装过该应用，那么就和之前安装的位置保持一致！</span></span><br><span class="line">            <span class="keyword">if</span> ((existingInfo.flags &amp; ApplicationInfo.FLAG_EXTERNAL_STORAGE) != <span class="number">0</span>) &#123;</span><br><span class="line">                prefer = RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2.6.2】否则，自动安装到内置！</span></span><br><span class="line">            prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">        checkBoth = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2.7】其他情况，默认是内置！</span></span><br><span class="line">        prefer = RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        checkBoth = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】再次校验内置和外置是否合适！</span></span><br><span class="line">    <span class="keyword">boolean</span> fitsOnInternal = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkBoth || prefer == RECOMMEND_INSTALL_INTERNAL) &#123;</span><br><span class="line">        fitsOnInternal = fitsOnInternal(context, sizeBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> fitsOnExternal = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkBoth || prefer == RECOMMEND_INSTALL_EXTERNAL) &#123;</span><br><span class="line">        fitsOnExternal = fitsOnExternal(context, sizeBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】最后，返回合适的安装位置！</span></span><br><span class="line">    <span class="keyword">if</span> (prefer == RECOMMEND_INSTALL_INTERNAL) &#123;</span><br><span class="line">        <span class="comment">//【4.1】如果优先安装到内置，且内置存储是合适的，根据是否是 ephemeral 返回不同的值！</span></span><br><span class="line">        <span class="keyword">if</span> (fitsOnInternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ephemeral)</span><br><span class="line">                    ? PackageHelper.RECOMMEND_INSTALL_EPHEMERAL</span><br><span class="line">                    : PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prefer == RECOMMEND_INSTALL_EXTERNAL) &#123;</span><br><span class="line">        <span class="comment">//【4.2】如果优先安装到外置，且外置存储是合适的，返回结果！</span></span><br><span class="line">        <span class="keyword">if</span> (fitsOnExternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4.3】其他情况！</span></span><br><span class="line">    <span class="keyword">if</span> (checkBoth) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fitsOnInternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fitsOnExternal) &#123;</span><br><span class="line">            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】异常情况，返回 PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE！</span></span><br><span class="line">    <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个过程很简单，不多说了！</p><h3 id="5-5-2-PackageManagerS-installLocationPolicy"><a href="#5-5-2-PackageManagerS-installLocationPolicy" class="headerlink" title="5.5.2 PackageManagerS.installLocationPolicy"></a>5.5.2 PackageManagerS.installLocationPolicy</h3><p>PackageInfoLite pkgLite 保存了本次要安装的应用的信息！</p><p>installLocationPolicy 方法会对降级安装和替换安装做一个校验和判断！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">installLocationPolicy</span><span class="params">(PackageInfoLite pkgLite)</span> </span>&#123;</span><br><span class="line">    String packageName = pkgLite.packageName;</span><br><span class="line">    <span class="keyword">int</span> installLocation = pkgLite.installLocation;</span><br><span class="line">    <span class="keyword">boolean</span> onSd = (installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果该应用已经安装过的话，那就获得上次安装后的解析信息！</span></span><br><span class="line">        PackageParser.Package installedPkg = mPackages.get(packageName);</span><br><span class="line">        <span class="comment">// 下面这段代码主要是处理卸载但是保留了数据的情况，比如 adb uninstall -k！</span></span><br><span class="line">        PackageParser.Package dataOwnerPkg = installedPkg;</span><br><span class="line">        <span class="keyword">if</span> (dataOwnerPkg  == <span class="keyword">null</span>) &#123;</span><br><span class="line">            PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dataOwnerPkg = ps.pkg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果 dataOwnerPkg 不为 nulkl，说明之前已经安装了！</span></span><br><span class="line">        <span class="keyword">if</span> (dataOwnerPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.1】如果安装标志位设置了 INSTALL_ALLOW_DOWNGRADE，表示允许降级安装！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> downgradeRequested =</span><br><span class="line">                    (installFlags &amp; PackageManager.INSTALL_ALLOW_DOWNGRADE) != <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//【2.2】判断应用是否允许 debug！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> packageDebuggable =</span><br><span class="line">                        (dataOwnerPkg.applicationInfo.flags</span><br><span class="line">                                &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//【2.3】如果要能够降级安装，必须满足 2 个条件：1、安装标志位设置了 allow downgrade</span></span><br><span class="line">            <span class="comment">// 2、系统允许 debug 或者该应用可以 debug！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> downgradePermitted =</span><br><span class="line">                    (downgradeRequested) &amp;&amp; ((Build.IS_DEBUGGABLE) || (packageDebuggable));</span><br><span class="line">            <span class="keyword">if</span> (!downgradePermitted) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【5.5.2.1】如果，安装不允许降级，那就需要做检查！</span></span><br><span class="line">                    checkDowngrade(dataOwnerPkg, pkgLite);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Downgrade detected: "</span> + e.getMessage());</span><br><span class="line">                    <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_VERSION_DOWNGRADE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】接着处理覆盖安装的情况，即相同包名的应用已经存在！</span></span><br><span class="line">        <span class="keyword">if</span> (installedPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】覆盖安装的情况，必须携带 PackageManager.INSTALL_REPLACE_EXISTING 安装标志位！</span></span><br><span class="line">            <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((installedPkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//【3.1.1】对于系统应用，不能覆盖安装到 sd 卡上！</span></span><br><span class="line">                    <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"Cannot install update to system app on sdcard"</span>);</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_INVALID_LOCATION;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.1.2】对于非系统应用，如果是安装到 sdcard，直接返回对应值！</span></span><br><span class="line">                    <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3.1.2】对于非系统应用，如果只安装到内置，直接返回对应值！</span></span><br><span class="line">                    <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY) &#123;</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                        </span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installLocation == PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL) &#123;</span><br><span class="line">                        <span class="comment">//【3.1.3】对于非系统应用，如果优先安装到外置，那么安装位置由 </span></span><br><span class="line">                        <span class="comment">// pkgLite.recommendedInstallLocation 决定！</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//【3.1.4】对于非系统应用，其他情况进入这里！</span></span><br><span class="line">                        <span class="keyword">if</span> (isExternal(installedPkg)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_INTERNAL;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【3.2】异常情况</span></span><br><span class="line">                <span class="keyword">return</span> PackageHelper.RECOMMEND_FAILED_ALREADY_EXISTS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】如果上面的条件都不满足，并且指定了在 sdcard，那么就返回 RECOMMEND_INSTALL_EXTERNAL；</span></span><br><span class="line">    <span class="keyword">if</span> (onSd) &#123;</span><br><span class="line">        <span class="keyword">return</span> PackageHelper.RECOMMEND_INSTALL_EXTERNAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】其他情况，均由 pkgLite.recommendedInstallLocation 决定！</span></span><br><span class="line">    <span class="keyword">return</span> pkgLite.recommendedInstallLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-3-PackageManagerS-createInstallArgs"><a href="#5-5-3-PackageManagerS-createInstallArgs" class="headerlink" title="5.5.3 PackageManagerS.createInstallArgs"></a>5.5.3 PackageManagerS.createInstallArgs</h3><p>其实就是针对不同的安装方式，创建不同的 InstallArgs！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallArgs <span class="title">createInstallArgs</span><span class="params">(InstallParams params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params.move != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】如果是 move package，那么会创建 MoveInstallArgs 实例！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MoveInstallArgs(params);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installOnExternalAsec(params.installFlags) || params.isForwardLocked()) &#123;</span><br><span class="line">        <span class="comment">//【2】对于安装到外置存储，或者 forward locked 安装，会创建 AsecInstallArgs 实例！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsecInstallArgs(params);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.5.3.1】对于一般安装，创建 FileInstallArgs 实例！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInstallArgs(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先关注一般情况，即创建 FileInstallArgs 实例的情况！</p><h4 id="5-5-3-1-new-FileInstallArgs-要安装的-apk"><a href="#5-5-3-1-new-FileInstallArgs-要安装的-apk" class="headerlink" title="5.5.3.1 new FileInstallArgs - 要安装的 apk"></a>5.5.3.1 new FileInstallArgs - 要安装的 apk</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title">InstallArgs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File codeFile;</span><br><span class="line">    <span class="keyword">private</span> File resourceFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example topology:</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/base.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/split_foo.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm64/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/dalvik/arm/base.apk@classes.dex</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】安装一个新的 apk！</span></span><br><span class="line">    FileInstallArgs(InstallParams params) &#123;</span><br><span class="line">        <span class="keyword">super</span>(params.origin, params.move, params.observer, params.installFlags,</span><br><span class="line">                params.installerPackageName, params.volumeUuid,</span><br><span class="line">                params.getUser(), <span class="keyword">null</span> <span class="comment">/*instructionSets*/</span>, params.packageAbiOverride,</span><br><span class="line">                params.grantedRuntimePermissions,</span><br><span class="line">                params.traceMethod, params.traceCookie, params.certificates);</span><br><span class="line">        <span class="comment">//【1.1】这里校验了下是否是  Forward Locked 的！</span></span><br><span class="line">        <span class="keyword">if</span> (isFwdLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Forward locking only supported in ASEC"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】用于描述已存在的一个安装！</span></span><br><span class="line">    FileInstallArgs(String codePath, String resourcePath, String[] instructionSets) &#123;</span><br><span class="line">        <span class="keyword">super</span>(OriginInfo.fromNothing(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, instructionSets,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span> <span class="comment">/*certificates*/</span>);</span><br><span class="line">        <span class="keyword">this</span>.codeFile = (codePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(codePath) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.resourceFile = (resourcePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(resourcePath) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 FileInstallArgs 有两个构造器！</p><ul><li><p>一参数构造器用于创建安装过程中的 InstallArgs！</p></li><li><p>三参数构造器，用于描述一个已存在的安装，主要用于清除旧的安装，或者作为移动应用的时候的源数据，我们在 pms 开机初始化的过程中就已经看到过了！</p></li></ul><p>当然，这里我们重点关注安装过程！</p><h3 id="5-5-4-PackageManagerService-isVerificationEnabled"><a href="#5-5-4-PackageManagerService-isVerificationEnabled" class="headerlink" title="5.5.4 PackageManagerService.isVerificationEnabled"></a>5.5.4 PackageManagerService.isVerificationEnabled</h3><p>isVerificationEnabled 用于校验系统是否打开了校验功能！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVerificationEnabled</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> installFlags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!DEFAULT_VERIFY_ENABLE) &#123;<span class="comment">//【1】如果默认没有打开校验，false！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果是 INSTALL_EPHEMERAL 方式的安装，不校验，false！</span></span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"INSTALL_EPHEMERAL so skipping verification"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】判断该用户下是否允许校验应用！</span></span><br><span class="line">    <span class="keyword">boolean</span> ensureVerifyAppsEnabled = isUserRestricted(userId, UserManager.ENSURE_VERIFY_APPS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果安装指定了 INSTALL_FROM_ADB，进入这里！</span></span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_FROM_ADB) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【4.1】test harness environment 不校验！</span></span><br><span class="line">        <span class="keyword">if</span> (ActivityManager.isRunningInTestHarness()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4.2】如果同时该用户下能校验应用，返回 true！</span></span><br><span class="line">        <span class="keyword">if</span> (ensureVerifyAppsEnabled) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4.3】对于 adb install，如果系统属性 PACKAGE_VERIFIER_INCLUDE_ADB 为 0 ，那就不用校验！</span></span><br><span class="line">        <span class="keyword">if</span> (android.provider.Settings.Global.getInt(mContext.getContentResolver(),</span><br><span class="line">                android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB, <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】如果该用户下能校验应用，返回 true！</span></span><br><span class="line">    <span class="keyword">if</span> (ensureVerifyAppsEnabled) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】判断系统属性 PACKAGE_VERIFIER_ENABLE 如果为 0，那就不用校验！</span></span><br><span class="line">    <span class="keyword">return</span> android.provider.Settings.Global.getInt(mContext.getContentResolver(),</span><br><span class="line">            android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE, <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不多说了！</p><h3 id="5-5-5-new-PackageVerificationState"><a href="#5-5-5-new-PackageVerificationState" class="headerlink" title="5.5.5 new PackageVerificationState"></a>5.5.5 new PackageVerificationState</h3><p>PackageVerificationState 用于保存被安装的应用的校验状态信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageVerificationState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InstallArgs mArgs; <span class="comment">// InstallArgs 实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SparseBooleanArray mSufficientVerifierUids; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mRequiredVerifierUid; <span class="comment">// 校验者的 uid！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSufficientVerificationComplete;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSufficientVerificationPassed;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRequiredVerificationComplete;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRequiredVerificationPassed;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mExtendedTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageVerificationState</span><span class="params">(<span class="keyword">int</span> requiredVerifierUid, InstallArgs args)</span> </span>&#123;</span><br><span class="line">        mRequiredVerifierUid = requiredVerifierUid;</span><br><span class="line">        mArgs = args;</span><br><span class="line">        mSufficientVerifierUids = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line">        mExtendedTimeout = <span class="keyword">false</span>; <span class="comment">// 表示是否超时！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="5-6-PackageHandler-doHandleMessage-CHECK-PENDING-VERIFICATION-校验完成"><a href="#5-6-PackageHandler-doHandleMessage-CHECK-PENDING-VERIFICATION-校验完成" class="headerlink" title="5.6 PackageHandler.doHandleMessage[CHECK_PENDING_VERIFICATION] - 校验完成"></a>5.6 PackageHandler.doHandleMessage[CHECK_PENDING_VERIFICATION] - 校验完成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CHECK_PENDING_VERIFICATION: &#123;</span><br><span class="line">    <span class="comment">//【1】获得校验唯一标识！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> verificationId = msg.arg1;</span><br><span class="line">    <span class="comment">//【2】获得本次校验的 PackageVerificationState 实例！</span></span><br><span class="line">    <span class="keyword">final</span> PackageVerificationState state = mPendingVerification.get(verificationId);</span><br><span class="line">    <span class="keyword">if</span> ((state != <span class="keyword">null</span>) &amp;&amp; !state.timeoutExtended()) &#123;</span><br><span class="line">        <span class="comment">//【3】获得 InstallArgs 实例！</span></span><br><span class="line">        <span class="keyword">final</span> InstallArgs args = state.getInstallArgs();</span><br><span class="line">        <span class="keyword">final</span> Uri originUri = Uri.fromFile(args.origin.resolvedFile);</span><br><span class="line"></span><br><span class="line">        Slog.i(TAG, <span class="string">"Verification timed out for "</span> + originUri);</span><br><span class="line">        <span class="comment">//【4】从 mPendingVerification 中移除校验状态对象！</span></span><br><span class="line">        mPendingVerification.remove(verificationId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = PackageManager.INSTALL_FAILED_VERIFICATION_FAILURE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【5】处理校验结果！</span></span><br><span class="line">        <span class="keyword">if</span> (getDefaultVerificationResponse() == PackageManager.VERIFICATION_ALLOW) &#123;</span><br><span class="line">            <span class="comment">//【5.1】校验成功</span></span><br><span class="line">            Slog.i(TAG, <span class="string">"Continuing with installation of "</span> + originUri);</span><br><span class="line">            state.setVerifierResponse(Binder.getCallingUid(),</span><br><span class="line">                    PackageManager.VERIFICATION_ALLOW_WITHOUT_SUFFICIENT);</span><br><span class="line">            <span class="comment">//【5.6.1】发送 Intent.ACTION_PACKAGE_VERIFIED 广播</span></span><br><span class="line">            broadcastPackageVerified(verificationId, originUri,</span><br><span class="line">                    PackageManager.VERIFICATION_ALLOW,</span><br><span class="line">                    state.getInstallArgs().getUser());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【5.6.2】校验成功后，调用 installArgs.copyApk 继续处理！</span></span><br><span class="line">                ret = args.copyApk(mContainerService, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Could not contact the ContainerService"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.6.1】校验失败，发送 Intent.ACTION_PACKAGE_VERIFIED 广播</span></span><br><span class="line">            broadcastPackageVerified(verificationId, originUri,</span><br><span class="line">                    PackageManager.VERIFICATION_REJECT,</span><br><span class="line">                    state.getInstallArgs().getUser());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Trace.asyncTraceEnd(</span><br><span class="line">                TRACE_TAG_PACKAGE_MANAGER, <span class="string">"verification"</span>, verificationId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【5.7】继续安装！</span></span><br><span class="line">        processPendingInstall(args, ret);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 安装过程结束，发送 MCS_UNBIND 消息！</span></span><br><span class="line">        mHandler.sendEmptyMessage(MCS_UNBIND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们通过 getDefaultVerificationResponse 方法返回校验结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDefaultVerificationResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> android.provider.Settings.Global.getInt(mContext.getContentResolver(),</span><br><span class="line">            android.provider.Settings.Global.PACKAGE_VERIFIER_DEFAULT_RESPONSE,</span><br><span class="line">            DEFAULT_VERIFICATION_RESPONSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认返回的是 PackageManager.VERIFICATION_ALLOW，比如在校验超时的情况下！</p><h3 id="5-6-1-PackageManagerS-broadcastPackageVerified"><a href="#5-6-1-PackageManagerS-broadcastPackageVerified" class="headerlink" title="5.6.1 PackageManagerS.broadcastPackageVerified"></a>5.6.1 PackageManagerS.broadcastPackageVerified</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">broadcastPackageVerified</span><span class="params">(<span class="keyword">int</span> verificationId, Uri packageUri,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> verificationCode, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PACKAGE_VERIFIED);</span><br><span class="line">    intent.setDataAndType(packageUri, PACKAGE_MIME_TYPE);</span><br><span class="line">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">    intent.putExtra(PackageManager.EXTRA_VERIFICATION_ID, verificationId);</span><br><span class="line">    intent.putExtra(PackageManager.EXTRA_VERIFICATION_RESULT, verificationCode);</span><br><span class="line"></span><br><span class="line">    mContext.sendBroadcastAsUser(intent, user,</span><br><span class="line">            android.Manifest.permission.PACKAGE_VERIFICATION_AGENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-2-FileInstallArgs-do-copyApk"><a href="#5-6-2-FileInstallArgs-do-copyApk" class="headerlink" title="5.6.2 FileInstallArgs.(do)copyApk"></a>5.6.2 FileInstallArgs.(do)copyApk</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyApk</span><span class="params">(IMediaContainerService imcs, <span class="keyword">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"copyApk"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doCopyApk(imcs, temp);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>copyApk 调用了 doCopyApk 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCopyApk</span><span class="params">(IMediaContainerService imcs, <span class="keyword">boolean</span> temp)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 origin.staged 为 true，那么说明应用已经 copy 到目标目录了，</span></span><br><span class="line">    <span class="comment">// 那就直接返回 PackageManager.INSTALL_SUCCEEDED！</span></span><br><span class="line">    <span class="keyword">if</span> (origin.staged) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, origin.file + <span class="string">" already staged; skipping copy"</span>);</span><br><span class="line">        <span class="comment">//【1.1】设置 FileInstallArgs 的 codeFile 属性！</span></span><br><span class="line">        codeFile = origin.file;</span><br><span class="line">        resourceFile = origin.file;</span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】如果 origin.staged 为 false，说明应用没有拷贝到目标目录！</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral = (installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【5.6.2.1】获得要拷贝的目标目录！</span></span><br><span class="line">        <span class="keyword">final</span> File tempDir =</span><br><span class="line">                mInstallerService.allocateStageDirLegacy(volumeUuid, isEphemeral);</span><br><span class="line">        codeFile = tempDir;</span><br><span class="line">        resourceFile = tempDir;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to create copy file: "</span> + e);</span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】回调接口！</span></span><br><span class="line">    <span class="keyword">final</span> IParcelFileDescriptorFactory target = <span class="keyword">new</span> IParcelFileDescriptorFactory.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">open</span><span class="params">(String name, <span class="keyword">int</span> mode)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!FileUtils.isValidExtFilename(name)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid filename: "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【3.1】访问 codeFile 目录下的 name 文件，设置权限，并返回其文件描述符！</span></span><br><span class="line">                <span class="keyword">final</span> File file = <span class="keyword">new</span> File(codeFile, name);</span><br><span class="line">                <span class="keyword">final</span> FileDescriptor fd = Os.open(file.getAbsolutePath(),</span><br><span class="line">                        O_RDWR | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">                Os.chmod(file.getAbsolutePath(), <span class="number">0644</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ParcelFileDescriptor(fd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException(<span class="string">"Failed to open: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">    <span class="comment">//【5.6.2.2】将应用程序拷贝到目标目录！</span></span><br><span class="line">    ret = imcs.copyPackage(origin.file.getAbsolutePath(), target);</span><br><span class="line">    <span class="keyword">if</span> (ret != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Failed to copy package"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】解压本地 lib 库文件！</span></span><br><span class="line">    <span class="keyword">final</span> File libraryRoot = <span class="keyword">new</span> File(codeFile, LIB_DIR_NAME);</span><br><span class="line">    NativeLibraryHelper.Handle handle = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        handle = NativeLibraryHelper.Handle.create(codeFile);</span><br><span class="line">        ret = NativeLibraryHelper.copyNativeBinariesWithOverride(handle, libraryRoot,</span><br><span class="line">                abiOverride);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Copying native libraries failed"</span>, e);</span><br><span class="line">        ret = PackageManager.INSTALL_FAILED_INTERNAL_ERROR;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据前面创建 OriginInfo 时知道：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stagedDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">    origin = OriginInfo.fromStagedFile(stagedDir);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    origin = OriginInfo.fromStagedContainer(stagedCid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 adb 安装时，安装到内置存储，会调用 OriginInfo.fromStagedFile 方法，此时 OriginInfo.staged 为 true，安装到外置存储时， OriginInfo.staged 也会为 true。</p><p>这是因为在进行 adb install 过程中时，我们通过 Session，已经拷贝到目标目录了：/data/app/vml[sessionId].tmp/，所以这里 doCopyApk 无需在继续进行下去！！</p><p>对于其他的安装方式，OriginInfo.staged 为 false 的，那么会进入 doCopyApk 的下一步！</p><h4 id="5-6-2-1-PackageInstallerService-allocateStageDirLegacy"><a href="#5-6-2-1-PackageInstallerService-allocateStageDirLegacy" class="headerlink" title="5.6.2.1 PackageInstallerService.allocateStageDirLegacy"></a>5.6.2.1 PackageInstallerService.allocateStageDirLegacy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">allocateStageDirLegacy</span><span class="params">(String volumeUuid, <span class="keyword">boolean</span> isEphemeral)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1.2】分配一个 sessionId，保存到 mLegacySessions 中！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> sessionId = allocateSessionIdLocked();</span><br><span class="line">            mLegacySessions.put(sessionId, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//【3.1.2】创建目标目录！</span></span><br><span class="line">            <span class="keyword">final</span> File stageDir = buildStageDir(volumeUuid, sessionId, isEphemeral);</span><br><span class="line">            <span class="comment">//【2】创建目录，设置权限！</span></span><br><span class="line">            prepareStageDir(stageDir);</span><br><span class="line">            <span class="keyword">return</span> stageDir;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，前面分析过，这里就不多说了！</p><h4 id="5-6-2-2-DefaultContainerService-copyPackage-Inner"><a href="#5-6-2-2-DefaultContainerService-copyPackage-Inner" class="headerlink" title="5.6.2.2 DefaultContainerService.copyPackage(Inner)"></a>5.6.2.2 DefaultContainerService.copyPackage(Inner)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">copyPackage</span><span class="params">(String packagePath, IParcelFileDescriptorFactory target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (packagePath == <span class="keyword">null</span> || target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INVALID_URI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageLite pkg = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> File packageFile = <span class="keyword">new</span> File(packagePath);</span><br><span class="line">        <span class="comment">//【1】解析应用！</span></span><br><span class="line">        pkg = PackageParser.parsePackageLite(packageFile, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//【2】继续处理 copyPackageInner</span></span><br><span class="line">        <span class="keyword">return</span> copyPackageInner(pkg, target);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException | IOException | RemoteException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to copy package at "</span> + packagePath + <span class="string">": "</span> + e);</span><br><span class="line">        <span class="keyword">return</span> PackageManager.INSTALL_FAILED_INSUFFICIENT_STORAGE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里继续调用了 copyPackageInner 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">copyPackageInner</span><span class="params">(PackageLite pkg, IParcelFileDescriptorFactory target)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】对 base apk 和 split apk 分别执行 copy！</span></span><br><span class="line">    copyFile(pkg.baseCodePath, target, <span class="string">"base.apk"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ArrayUtils.isEmpty(pkg.splitNames)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pkg.splitNames.length; i++) &#123;</span><br><span class="line">            copyFile(pkg.splitCodePaths[i], target, <span class="string">"split_"</span> + pkg.splitNames[i] + <span class="string">".apk"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PackageManager.INSTALL_SUCCEEDED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终，调用了 copyFile 执行 copy！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String sourcePath, IParcelFileDescriptorFactory target, String targetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, RemoteException </span>&#123;</span><br><span class="line">    Slog.d(TAG, <span class="string">"Copying "</span> + sourcePath + <span class="string">" to "</span> + targetName);</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = <span class="keyword">new</span> FileInputStream(sourcePath);</span><br><span class="line">        out = <span class="keyword">new</span> ParcelFileDescriptor.AutoCloseOutputStream(</span><br><span class="line">                target.open(targetName, ParcelFileDescriptor.MODE_READ_WRITE));</span><br><span class="line">        Streams.copy(in, out);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(out);</span><br><span class="line">        IoUtils.closeQuietly(in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就结束了！</p><h2 id="5-7-PackageManagerS-processPendingInstall"><a href="#5-7-PackageManagerS-processPendingInstall" class="headerlink" title="5.7 PackageManagerS.processPendingInstall"></a>5.7 PackageManagerS.processPendingInstall</h2><p>processPendingInstall 用于继续安装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processPendingInstall</span><span class="params">(<span class="keyword">final</span> InstallArgs args, <span class="keyword">final</span> <span class="keyword">int</span> currentStatus)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Queue up an async operation since the package installation may take a little while.</span></span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.7.1】创建 PackageInstalledInfo 实例，封装安装结果！</span></span><br><span class="line">            PackageInstalledInfo res = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">            res.setReturnCode(currentStatus); <span class="comment">// 保存当前的返回码</span></span><br><span class="line">            res.uid = -<span class="number">1</span>;</span><br><span class="line">            res.pkg = <span class="keyword">null</span>;</span><br><span class="line">            res.removedInfo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1】如果返回码为 PackageManager.INSTALL_SUCCEEDED！</span></span><br><span class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                <span class="comment">//【×5.7.2】安装前处理；</span></span><br><span class="line">                args.doPreInstall(res.returnCode);</span><br><span class="line">                <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                    <span class="comment">//【×5.7.3】执行安装！</span></span><br><span class="line">                    installPackageTracedLI(args, res);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【×5.7.4】安装后处理；</span></span><br><span class="line">                args.doPostInstall(res.returnCode, res.uid);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2】判断是否执行备份，要备份必须满足 3 个条件！</span></span><br><span class="line">            <span class="comment">// 1、安装正常；2、本次安装并不是更新操作！3、应用允许备份</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> update = res.removedInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; res.removedInfo.removedPackage != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flags = (res.pkg == <span class="keyword">null</span>) ? <span class="number">0</span> : res.pkg.applicationInfo.flags;</span><br><span class="line">            <span class="keyword">boolean</span> doRestore = !update</span><br><span class="line">                    &amp;&amp; ((flags &amp; ApplicationInfo.FLAG_ALLOW_BACKUP) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3】计算本次安装的 token</span></span><br><span class="line">            <span class="keyword">int</span> token;</span><br><span class="line">            <span class="keyword">if</span> (mNextInstallToken &lt; <span class="number">0</span>) mNextInstallToken = <span class="number">1</span>;</span><br><span class="line">            token = mNextInstallToken++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*5.7.5】创建一个 PostInstallData 对象，并将其加入 mRunningInstalls 中！</span></span><br><span class="line">            PostInstallData data = <span class="keyword">new</span> PostInstallData(args, res);</span><br><span class="line">            mRunningInstalls.put(token, data);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">"+ starting restore round-trip "</span> + token);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED &amp;&amp; doRestore) &#123;</span><br><span class="line">                <span class="comment">//【4】如果安装成功，并且需要备份，那就获得 BackupManager 执行备份！</span></span><br><span class="line">                IBackupManager bm = IBackupManager.Stub.asInterface(</span><br><span class="line">                        ServiceManager.getService(Context.BACKUP_SERVICE));</span><br><span class="line">                <span class="keyword">if</span> (bm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">"token "</span> + token</span><br><span class="line">                            + <span class="string">" to BM for possible restore"</span>);</span><br><span class="line">                    Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"restore"</span>, token);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> http://b/22388012</span></span><br><span class="line">                        <span class="keyword">if</span> (bm.isBackupServiceActive(UserHandle.USER_SYSTEM)) &#123;</span><br><span class="line">                            bm.restoreAtInstall(res.pkg.applicationInfo.packageName, token);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            doRestore = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        <span class="comment">// can't happen; the backup manager is local</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        Slog.e(TAG, <span class="string">"Exception trying to enqueue restore"</span>, e);</span><br><span class="line">                        doRestore = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">"Backup Manager not found!"</span>);</span><br><span class="line">                    doRestore = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】如果备份失败或者不需要备份，那就进入这个阶段！</span></span><br><span class="line">            <span class="keyword">if</span> (!doRestore) &#123;</span><br><span class="line">                <span class="comment">// No restore possible, or the Backup Manager was mysteriously not</span></span><br><span class="line">                <span class="comment">// available -- just fire the post-install work request directly.</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">"No restore - queue post-install for "</span> + token);</span><br><span class="line"></span><br><span class="line">                Trace.asyncTraceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"postInstall"</span>, token);</span><br><span class="line"></span><br><span class="line">                Message msg = mHandler.obtainMessage(POST_INSTALL, token, <span class="number">0</span>);</span><br><span class="line">                mHandler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-1-new-PackageInstalledInfo"><a href="#5-7-1-new-PackageInstalledInfo" class="headerlink" title="5.7.1 new PackageInstalledInfo"></a>5.7.1 new PackageInstalledInfo</h3><p>PackageInstalledInfo 用于保存该应用的安装结果信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstalledInfo</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">int</span>[] origUsers; <span class="comment">// 该 pacakge 之前安装后所属的 user</span></span><br><span class="line">    <span class="keyword">int</span>[] newUsers; <span class="comment">// 该 pacakge 现在安装后所属的 user</span></span><br><span class="line">    PackageParser.Package pkg;</span><br><span class="line">    <span class="keyword">int</span> returnCode; <span class="comment">// 返回码</span></span><br><span class="line">    String returnMsg;</span><br><span class="line">    <span class="comment">//【7.7.1.1】用于封装要移除的 apk 的信息！</span></span><br><span class="line">    PackageRemovedInfo removedInfo;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; addedChildPackages; <span class="comment">// split apk 的安装结果信息！</span></span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// In some error cases we want to convey more info back to the observer</span></span><br><span class="line">    String origPackage;</span><br><span class="line">    String origPermission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看到这里！</p><h4 id="5-7-1-1-new-PackageRemovedInfo"><a href="#5-7-1-1-new-PackageRemovedInfo" class="headerlink" title="5.7.1.1 new PackageRemovedInfo"></a>5.7.1.1 new PackageRemovedInfo</h4><p>封装要移除的 apk 的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageRemovedInfo</span> </span>&#123;</span><br><span class="line">    String removedPackage;</span><br><span class="line">    <span class="keyword">int</span> uid = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> removedAppId = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] origUsers;</span><br><span class="line">    <span class="keyword">int</span>[] removedUsers = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isRemovedPackageSystemUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isUpdate;</span><br><span class="line">    <span class="keyword">boolean</span> dataRemoved;</span><br><span class="line">    <span class="keyword">boolean</span> removedForAllUsers;</span><br><span class="line">    <span class="comment">//【1】InstallArgs 用于清除 apk 的相关数据，后面会看到！</span></span><br><span class="line">    InstallArgs args = <span class="keyword">null</span>;</span><br><span class="line">    ArrayMap&lt;String, PackageRemovedInfo&gt; removedChildPackages;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; appearedChildPackages;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-2-FileInstallArgs-doPreInstall"><a href="#5-7-2-FileInstallArgs-doPreInstall" class="headerlink" title="5.7.2 FileInstallArgs.doPreInstall"></a>5.7.2 FileInstallArgs.doPreInstall</h3><p>安装前执行清理操作，正常情况不会触发！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doPreInstall</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果安装前的状态不是 PackageManager.INSTALL_SUCCEEDED</span></span><br><span class="line">    <span class="keyword">if</span> (status != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">//【5.7.2.1】执行清理操作！</span></span><br><span class="line">        cleanUp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-7-2-1-FileInstallArgs-cleanUp-ResourcesLI"><a href="#5-7-2-1-FileInstallArgs-cleanUp-ResourcesLI" class="headerlink" title="5.7.2.1 FileInstallArgs.cleanUp(ResourcesLI)"></a>5.7.2.1 FileInstallArgs.cleanUp(ResourcesLI)</h4><p>清理操作！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (codeFile == <span class="keyword">null</span> || !codeFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】删除目标目录下的所有文件！</span></span><br><span class="line">    removeCodePathLI(codeFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (resourceFile != <span class="keyword">null</span> &amp;&amp; !FileUtils.contains(codeFile, resourceFile)) &#123;</span><br><span class="line">        resourceFile.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，最后调用了 removeCodePathLI 方法！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeCodePathLI</span><span class="params">(File codePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (codePath.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstaller.rmPackageDir(codePath.getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to remove code path"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        codePath.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-7-3-PackageManagerS-installPackageTracedLI-核心安装入口"><a href="#5-7-3-PackageManagerS-installPackageTracedLI-核心安装入口" class="headerlink" title="5.7.3 PackageManagerS.installPackageTracedLI - 核心安装入口"></a>5.7.3 PackageManagerS.installPackageTracedLI - 核心安装入口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageTracedLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installPackage"</span>);</span><br><span class="line">        <span class="comment">//【1】调用了 installPackageLI 方法！</span></span><br><span class="line">        installPackageLI(args, res);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了 installPackageLI 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得安装时传入的参数和标志位！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> installFlags = args.installFlags;</span><br><span class="line">    <span class="keyword">final</span> String installerPackageName = args.installerPackageName;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = args.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> File tmpPackageFile = <span class="keyword">new</span> File(args.getCodePath());</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forwardLocked = ((installFlags &amp; PackageManager.INSTALL_FORWARD_LOCK) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> onExternal = (((installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>)</span><br><span class="line">            || (args.volumeUuid != <span class="keyword">null</span>));</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> ephemeral = ((installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forceSdk = ((installFlags &amp; PackageManager.INSTALL_FORCE_SDK) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">boolean</span> replace = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】重新设置扫描参数</span></span><br><span class="line">    <span class="keyword">int</span> scanFlags = SCAN_NEW_INSTALL | SCAN_UPDATE_SIGNATURE;</span><br><span class="line">    <span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【2.1】如果 args.move 不为 null，表示正在移动一个 app，我们会对其进行一个初始化的扫描</span></span><br><span class="line">        <span class="comment">// 增加 SCAN_INITIAL 位！</span></span><br><span class="line">        scanFlags |= SCAN_INITIAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="comment">//【2.2】如果安装参数指定了 INSTALL_DONT_KILL_APP，那么增加 SCAN_DONT_KILL_APP 位！</span></span><br><span class="line">        scanFlags |= SCAN_DONT_KILL_APP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】更新结果码！</span></span><br><span class="line">    res.setReturnCode(PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"installPackageLI: path="</span> + tmpPackageFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】检查 ephemeral 是否和 forwardLocked/onExternal 共存，共存则报错！</span></span><br><span class="line">    <span class="keyword">if</span> (ephemeral &amp;&amp; (forwardLocked || onExternal)) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">"Incompatible ephemeral install; fwdLocked="</span> + forwardLocked</span><br><span class="line">                + <span class="string">" external="</span> + onExternal);</span><br><span class="line">        res.setReturnCode(PackageManager.INSTALL_FAILED_EPHEMERAL_INVALID);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】设置解析参数 parseFlags</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parseFlags = mDefParseFlags | PackageParser.PARSE_CHATTY</span><br><span class="line">            | PackageParser.PARSE_ENFORCE_CODE</span><br><span class="line">            | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>)</span><br><span class="line">            | (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>)</span><br><span class="line">            | (ephemeral ? PackageParser.PARSE_IS_EPHEMERAL : <span class="number">0</span>)</span><br><span class="line">            | (forceSdk ? PackageParser.PARSE_FORCE_SDK : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】创建解析对象！</span></span><br><span class="line">    PackageParser pp = <span class="keyword">new</span> PackageParser();</span><br><span class="line">    pp.setSeparateProcesses(mSeparateProcesses);</span><br><span class="line">    pp.setDisplayMetrics(mMetrics);</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"parsePackage"</span>);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*5.7.3.1】解析 apk，获得其对应的 Package 对象！</span></span><br><span class="line">        pkg = pp.parsePackage(tmpPackageFile, parseFlags);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">        res.setError(<span class="string">"Failed parse during installPackageLI"</span>, e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】如果该应用有子包的话，那么对于每个子包，也会创建安装结果对象！！</span></span><br><span class="line">    <span class="keyword">if</span> (pkg.childPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = pkg.childPackages.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">                <span class="comment">//【*5.7.1】针对子包，创建 PackageInstalledInfo 对象!</span></span><br><span class="line">                <span class="comment">// 设置返回码，子包包名！</span></span><br><span class="line">                PackageInstalledInfo childRes = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">                childRes.setReturnCode(PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">                childRes.pkg = childPkg;</span><br><span class="line">                childRes.name = childPkg.packageName;</span><br><span class="line">                <span class="comment">//【7.1】获得子包的源 user!</span></span><br><span class="line">                PackageSetting childPs = mSettings.peekPackageLPr(childPkg.packageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childRes.origUsers = childPs.queryInstalledUsers(</span><br><span class="line">                            sUserManager.getUserIds(), <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【7.2】如果子包之前被扫描到了（安装过），创建 PackageRemovedInfo 对象！</span></span><br><span class="line">                <span class="keyword">if</span> ((mPackages.containsKey(childPkg.packageName))) &#123;</span><br><span class="line">                    childRes.removedInfo = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">                    childRes.removedInfo.removedPackage = childPkg.packageName;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res.addedChildPackages == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    res.addedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【7.3】将子包的安装结果对象保存到 base apk 的信息中！</span></span><br><span class="line">                res.addedChildPackages.put(childPkg.packageName, childRes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果应用没有指定 abi，我们通过安装参数指定！</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(pkg.cpuAbiOverride)) &#123;</span><br><span class="line">        pkg.cpuAbiOverride = args.abiOverride;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果应用指定了 ApplicationInfo.FLAG_TEST_ONLY，那么安装参数也需要指定这个参数！</span></span><br><span class="line">    String pkgName = res.name = pkg.packageName;</span><br><span class="line">    <span class="keyword">if</span> ((pkg.applicationInfo.flags&amp;ApplicationInfo.FLAG_TEST_ONLY) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_ALLOW_TEST) == <span class="number">0</span>) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_TEST_ONLY, <span class="string">"installPackageLI"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【8】收集证书信息！</span></span><br><span class="line">        <span class="keyword">if</span> (args.certificates != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PackageParser.populateCertificates(pkg, args.certificates);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">                PackageParser.collectCertificates(pkg, parseFlags);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            PackageParser.collectCertificates(pkg, parseFlags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">        res.setError(<span class="string">"Failed collect during installPackageLI"</span>, e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get rid of all references to package scan path via parser.</span></span><br><span class="line">    pp = <span class="keyword">null</span>;</span><br><span class="line">    String oldCodePath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> systemApp = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【9】如果安装参数指定了 INSTALL_REPLACE_EXISTING，那么我们要尝试判断是否存在已安装的应用！</span></span><br><span class="line">        <span class="comment">// 如果存在，那就要 replace！</span></span><br><span class="line">        <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_REPLACE_EXISTING) != <span class="number">0</span>) &#123;</span><br><span class="line">            String oldName = mSettings.mRenamedPackages.get(pkgName); <span class="comment">// 判断该应用是否重命名过！</span></span><br><span class="line">            <span class="keyword">if</span> (pkg.mOriginalPackages != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; pkg.mOriginalPackages.contains(oldName)</span><br><span class="line">                    &amp;&amp; mPackages.containsKey(oldName)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【9.1】如果有源包（系统应用才会有），要命名为源包，replace 为 true！</span></span><br><span class="line">                pkg.setPackageName(oldName);</span><br><span class="line">                pkgName = pkg.packageName;</span><br><span class="line">                replace = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Replacing existing renamed package: oldName="</span></span><br><span class="line">                        + oldName + <span class="string">" pkgName="</span> + pkgName);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</span><br><span class="line">                <span class="comment">//【9.2】如果没有源包（系统应用才会有），但是已经有相同包名的应用存在，replace 为 true！</span></span><br><span class="line">                replace = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Replace existing pacakge: "</span> + pkgName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【9.2】对于子包，只能通过父包更新，这里不处理子包的 replace！</span></span><br><span class="line">            <span class="keyword">if</span> (pkg.parentPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.setError(PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME,</span><br><span class="line">                        <span class="string">"Package "</span> + pkg.packageName + <span class="string">" is child of package "</span></span><br><span class="line">                                + pkg.parentPackage.parentPackage + <span class="string">". Child packages "</span></span><br><span class="line">                                + <span class="string">"can be updated only through the parent package."</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【9.3】如果需要替换已存在的 apk，那么需要做 sdk 的校验！</span></span><br><span class="line">            <span class="comment">// 如果旧应用支持运行时，不允许新的应用不支持运行时！</span></span><br><span class="line">            <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">                PackageParser.Package oldPackage = mPackages.get(pkgName);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> oldTargetSdk = oldPackage.applicationInfo.targetSdkVersion;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> newTargetSdk = pkg.applicationInfo.targetSdkVersion;</span><br><span class="line">                <span class="keyword">if</span> (oldTargetSdk &gt; Build.VERSION_CODES.LOLLIPOP_MR1</span><br><span class="line">                        &amp;&amp; newTargetSdk &lt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">                    res.setError(PackageManager.INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE,</span><br><span class="line">                            <span class="string">"Package "</span> + pkg.packageName + <span class="string">" new target SDK "</span> + newTargetSdk</span><br><span class="line">                                    + <span class="string">" doesn't support runtime permissions but the old"</span></span><br><span class="line">                                    + <span class="string">" target SDK "</span> + oldTargetSdk + <span class="string">" does."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【9.4】如果旧包也是子包，也不安装！</span></span><br><span class="line">                <span class="keyword">if</span> (oldPackage.parentPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    res.setError(PackageManager.INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME,</span><br><span class="line">                            <span class="string">"Package "</span> + pkg.packageName + <span class="string">" is child of package "</span></span><br><span class="line">                                    + oldPackage.parentPackage + <span class="string">". Child packages "</span></span><br><span class="line">                                    + <span class="string">"can be updated only through the parent package."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【10】获得上一次的安装数据！</span></span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Existing package: "</span> + ps);</span><br><span class="line">            <span class="comment">//【10.1】如果安装过旧版本，那就要校验签名！</span></span><br><span class="line">            <span class="comment">//【×5.3.7.2】shouldCheckUpgradeKeySetLP 用于判断是否检查签名更新；</span></span><br><span class="line">            <span class="keyword">if</span> (shouldCheckUpgradeKeySetLP(ps, scanFlags)) &#123;</span><br><span class="line">                <span class="comment">//【×5.3.7.3】checkUpgradeKeySetLP 用于检查签名更新；</span></span><br><span class="line">                <span class="keyword">if</span> (!checkUpgradeKeySetLP(ps, pkg)) &#123;</span><br><span class="line">                    res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE, <span class="string">"Package "</span></span><br><span class="line">                            + pkg.packageName + <span class="string">" upgrade keys do not match the "</span></span><br><span class="line">                            + <span class="string">"previously installed version"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【×5.3.7.4】校验签名，如果签名不相等，那就禁止安装！</span></span><br><span class="line">                    verifySignaturesLP(ps, pkg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                    res.setError(e.error, e.getMessage());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【10.2】获得旧的 apk 的路径，判断旧应用是否是系统应用！</span></span><br><span class="line">            oldCodePath = mSettings.mPackages.get(pkgName).codePathString;</span><br><span class="line">            <span class="keyword">if</span> (ps.pkg != <span class="keyword">null</span> &amp;&amp; ps.pkg.applicationInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                systemApp = (ps.pkg.applicationInfo.flags &amp;</span><br><span class="line">                        ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.origUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【11】检查权限是否被重新定义，如果重新定义，那就要校验权限！</span></span><br><span class="line">        <span class="keyword">int</span> N = pkg.permissions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//【11.1】获得该应用定义的权限</span></span><br><span class="line">            PackageParser.Permission perm = pkg.permissions.get(i);</span><br><span class="line">            <span class="comment">//【11.2】尝试从系统中获得该权限已有的信息！</span></span><br><span class="line">            BasePermission bp = mSettings.mPermissions.get(perm.info.name);</span><br><span class="line">            <span class="keyword">if</span> (bp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【11.3】如果该权限已经被定义过了，那就要校验下签名！</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> sigsOk;</span><br><span class="line">                <span class="keyword">if</span> (bp.sourcePackage.equals(pkg.packageName)</span><br><span class="line">                        &amp;&amp; (bp.packageSetting <span class="keyword">instanceof</span> PackageSetting)</span><br><span class="line">                        &amp;&amp; (shouldCheckUpgradeKeySetLP((PackageSetting) bp.packageSetting,</span><br><span class="line">                                scanFlags))) &#123;</span><br><span class="line">                    <span class="comment">//【11.3.1】检查签名更新！</span></span><br><span class="line">                    sigsOk = checkUpgradeKeySetLP((PackageSetting) bp.packageSetting, pkg);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【11.3.2】如果不检查签名更新，那就直接比较签名！</span></span><br><span class="line">                    sigsOk = compareSignatures(bp.packageSetting.signatures.mSignatures,</span><br><span class="line">                            pkg.mSignatures) == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【11.4】如果签名发生了变化！</span></span><br><span class="line">                <span class="keyword">if</span> (!sigsOk) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!bp.sourcePackage.equals(<span class="string">"android"</span>)) &#123;</span><br><span class="line">                        <span class="comment">//【11.4.1】如果权限的定义者不是系统，那么不允许重新定义，同时不允许继续安装！</span></span><br><span class="line">                        res.setError(INSTALL_FAILED_DUPLICATE_PERMISSION, <span class="string">"Package "</span></span><br><span class="line">                                + pkg.packageName + <span class="string">" attempting to redeclare permission "</span></span><br><span class="line">                                + perm.info.name + <span class="string">" already owned by "</span> + bp.sourcePackage);</span><br><span class="line">                        res.origPermission = perm.info.name;</span><br><span class="line">                        res.origPackage = bp.sourcePackage;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//【11.4.2】如果权限的定义不是系统，那么允许安装，但是会忽视掉新的定义！</span></span><br><span class="line">                        Slog.w(TAG, <span class="string">"Package "</span> + pkg.packageName</span><br><span class="line">                                + <span class="string">" attempting to redeclare system permission "</span></span><br><span class="line">                                + perm.info.name + <span class="string">"; ignoring new declaration"</span>);</span><br><span class="line">                        pkg.permissions.remove(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【12】如果覆盖更新的是系统应用，要针对安装位置做判断！</span></span><br><span class="line">    <span class="comment">// 新的 apk 不能是 onExternal / ephemeral！</span></span><br><span class="line">    <span class="keyword">if</span> (systemApp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (onExternal) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_INVALID_INSTALL_LOCATION,</span><br><span class="line">                    <span class="string">"Cannot install updates to system apps on sdcard"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ephemeral) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_EPHEMERAL_INVALID,</span><br><span class="line">                    <span class="string">"Cannot update a system app with an ephemeral app"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【13】根据安装参数做不同的处理！</span></span><br><span class="line">    <span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【13.1】如果是 move package，进入这里！</span></span><br><span class="line">        scanFlags |= SCAN_NO_DEX; <span class="comment">// 设置以下标签，无需做 odex，我们需要已有的移动过去即可！</span></span><br><span class="line">        scanFlags |= SCAN_MOVE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">            <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.setError(INSTALL_FAILED_INTERNAL_ERROR,</span><br><span class="line">                        <span class="string">"Missing settings for moved package "</span> + pkgName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【13.1.1】对于 abi，和移动前的保持一致！</span></span><br><span class="line">            pkg.applicationInfo.primaryCpuAbi = ps.primaryCpuAbiString;</span><br><span class="line">            pkg.applicationInfo.secondaryCpuAbi = ps.secondaryCpuAbiString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!forwardLocked &amp;&amp; !pkg.applicationInfo.isExternalAsec()) &#123;</span><br><span class="line">        <span class="comment">//【13.2】如果不是 forward lock 模式安装且没有安装到外置存储上，进入这里！</span></span><br><span class="line">        scanFlags |= SCAN_NO_DEX; <span class="comment">// 扫描参数设置 SCAN_NO_DEX，意味着后面不做 odex，因为这里会做！</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String abiOverride = (TextUtils.isEmpty(pkg.cpuAbiOverride) ?</span><br><span class="line">                args.abiOverride : pkg.cpuAbiOverride);</span><br><span class="line">            derivePackageAbi(pkg, <span class="keyword">new</span> File(pkg.codePath), abiOverride,</span><br><span class="line">                    <span class="keyword">true</span> <span class="comment">/* extract libs */</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException pme) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Error deriving application ABI"</span>, pme);</span><br><span class="line">            res.setError(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Error deriving application ABI"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【13.2.1】更新共享库文件！！</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                updateSharedLibrariesLPw(pkg, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"updateSharedLibrariesLPw failed: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"dexopt"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【13.2.2】执行 odex 优化</span></span><br><span class="line">        mPackageDexOptimizer.performDexOpt(pkg, pkg.usesLibraryFiles,</span><br><span class="line">                <span class="keyword">null</span> <span class="comment">/* instructionSets */</span>, <span class="keyword">false</span> <span class="comment">/* checkProfiles */</span>,</span><br><span class="line">                getCompilerFilterForReason(REASON_INSTALL),</span><br><span class="line">                getOrCreateCompilerPackageStats(pkg));</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【13.2.3】将该应用从 odex fail list 中删除！</span></span><br><span class="line">        BackgroundDexOptService.notifyPackageChanged(pkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×5.7.3.5】重命名文件目录，此时文件目录由 /data/app/tmpl[SessionId].tmp 变为 /data/app/packageName-X！</span></span><br><span class="line">    <span class="comment">// 如果 X 存在，那么会 X + 1;</span></span><br><span class="line">    <span class="keyword">if</span> (!args.doRename(res.returnCode, pkg, oldCodePath)) &#123;</span><br><span class="line">        res.setError(INSTALL_FAILED_INSUFFICIENT_STORAGE, <span class="string">"Failed rename"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.7.3.6】开始 intentFilter 校验！</span></span><br><span class="line">    startIntentFilterVerifications(args.user.getIdentifier(), replace, pkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.7.3.7】冻结应用！</span></span><br><span class="line">    <span class="keyword">try</span> (PackageFreezer freezer = freezePackageForInstall(pkgName, installFlags,</span><br><span class="line">            <span class="string">"installPackageLI"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">            <span class="comment">//【*6】如果是覆盖安装，进入这里！</span></span><br><span class="line">            replacePackageLIF(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</span><br><span class="line">                    installerPackageName, res);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*7】如果是全新安装，进入这里！</span></span><br><span class="line">            installNewPackageLIF(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</span><br><span class="line">                    args.user, installerPackageName, volumeUuid, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【14】为本次安装的 apk 更新目标用户信息！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.newUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">            PackageInstalledInfo childRes = res.addedChildPackages.get(childPkg.packageName);</span><br><span class="line">            PackageSetting childPs = mSettings.peekPackageLPr(childPkg.packageName);</span><br><span class="line">            <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                childRes.newUsers = childPs.queryInstalledUsers(</span><br><span class="line">                        sUserManager.getUserIds(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-7-3-1-PackageParser-parsePackage"><a href="#5-7-3-1-PackageParser-parsePackage" class="headerlink" title="5.7.3.1 PackageParser.parsePackage"></a>5.7.3.1 PackageParser.parsePackage</h4><p>PackageParser.parsePackage 其实我们在 PMS 启动扫描的过程中已经分析过了，这里我们重点关注其对 installFlags 的处理！</p><h4 id="5-7-3-2-shouldCheckUpgradeKeySetLP"><a href="#5-7-3-2-shouldCheckUpgradeKeySetLP" class="headerlink" title="5.7.3.2 shouldCheckUpgradeKeySetLP"></a>5.7.3.2 shouldCheckUpgradeKeySetLP</h4><p>判断是否应该检查签名更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldCheckUpgradeKeySetLP</span><span class="params">(PackageSetting oldPs, <span class="keyword">int</span> scanFlags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】以下情况无需检查签名更新：</span></span><br><span class="line">    <span class="comment">// 1、本次是全新安装；2、扫描设置了 SCAN_INITIAL(move pkg)；3、本次是覆盖安装，但是应用是 sharedUser 的！</span></span><br><span class="line">    <span class="comment">// 4、应用不使用 upgradeKeySets！</span></span><br><span class="line">    <span class="keyword">if</span> (oldPs == <span class="keyword">null</span> || (scanFlags &amp; SCAN_INITIAL) != <span class="number">0</span> || oldPs.sharedUser != <span class="keyword">null</span></span><br><span class="line">            || !oldPs.keySetData.isUsingUpgradeKeySets()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果应用是覆盖安装，且不是 move pkg，且不是共享 uid 的，且使用 upgradeKeySets，那么就要检查</span></span><br><span class="line">    <span class="comment">// upgradeKeySets 有效性，只有有效的 upgradeKeySets 才能检查更新！</span></span><br><span class="line">    KeySetManagerService ksms = mSettings.mKeySetManagerService;</span><br><span class="line">    <span class="keyword">long</span>[] upgradeKeySets = oldPs.keySetData.getUpgradeKeySets();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; upgradeKeySets.length; i++) &#123;</span><br><span class="line">        <span class="comment">//【2.1】判断 upgradeKeySets 是否有效！</span></span><br><span class="line">        <span class="keyword">if</span> (!ksms.isIdValidKeySetId(upgradeKeySets[i])) &#123;</span><br><span class="line">            Slog.wtf(TAG, <span class="string">"Package "</span></span><br><span class="line">                     + (oldPs.name != <span class="keyword">null</span> ? oldPs.name : <span class="string">"&lt;null&gt;"</span>)</span><br><span class="line">                     + <span class="string">" contains upgrade-key-set reference to unknown key-set: "</span></span><br><span class="line">                     + upgradeKeySets[i]</span><br><span class="line">                     + <span class="string">" reverting to signatures check."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析到这里！</p><h4 id="5-7-3-3-checkUpgradeKeySetLP"><a href="#5-7-3-3-checkUpgradeKeySetLP" class="headerlink" title="5.7.3.3 checkUpgradeKeySetLP"></a>5.7.3.3 checkUpgradeKeySetLP</h4><p>进行签名更新检查：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkUpgradeKeySetLP</span><span class="params">(PackageSetting oldPS, PackageParser.Package newPkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】检查 key set 更新，更新有效的前提是新的 apk 持有的 keyset 至少包含旧应用的 keyset！</span></span><br><span class="line">    <span class="keyword">long</span>[] upgradeKeySets = oldPS.keySetData.getUpgradeKeySets();</span><br><span class="line">    KeySetManagerService ksms = mSettings.mKeySetManagerService;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; upgradeKeySets.length; i++) &#123;</span><br><span class="line">        Set&lt;PublicKey&gt; upgradeSet = ksms.getPublicKeysFromKeySetLPr(upgradeKeySets[i]);</span><br><span class="line">        <span class="keyword">if</span> (upgradeSet != <span class="keyword">null</span> &amp;&amp; newPkg.mSigningKeys.containsAll(upgradeSet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-7-3-4-verifySignaturesLP"><a href="#5-7-3-4-verifySignaturesLP" class="headerlink" title="5.7.3.4 verifySignaturesLP"></a>5.7.3.4 verifySignaturesLP</h4><p>校验签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifySignaturesLP</span><span class="params">(PackageSetting pkgSetting, PackageParser.Package pkg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkgSetting.signatures.mSignatures != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Already existing package. Make sure signatures match</span></span><br><span class="line">        <span class="keyword">boolean</span> match = compareSignatures(pkgSetting.signatures.mSignatures, pkg.mSignatures)</span><br><span class="line">                == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            match = compareSignaturesCompat(pkgSetting.signatures, pkg)</span><br><span class="line">                    == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            match = compareSignaturesRecover(pkgSetting.signatures, pkg)</span><br><span class="line">                    == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_UPDATE_INCOMPATIBLE, <span class="string">"Package "</span></span><br><span class="line">                    + pkg.packageName + <span class="string">" signatures do not match the "</span></span><br><span class="line">                    + <span class="string">"previously installed version; ignoring!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for shared user signatures</span></span><br><span class="line">    <span class="keyword">if</span> (pkgSetting.sharedUser != <span class="keyword">null</span> &amp;&amp; pkgSetting.sharedUser.signatures.mSignatures != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Already existing package. Make sure signatures match</span></span><br><span class="line">        <span class="keyword">boolean</span> match = compareSignatures(pkgSetting.sharedUser.signatures.mSignatures,</span><br><span class="line">                pkg.mSignatures) == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            match = compareSignaturesCompat(pkgSetting.sharedUser.signatures, pkg)</span><br><span class="line">                    == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            match = compareSignaturesRecover(pkgSetting.sharedUser.signatures, pkg)</span><br><span class="line">                    == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,</span><br><span class="line">                    <span class="string">"Package "</span> + pkg.packageName</span><br><span class="line">                    + <span class="string">" has no signatures that match those in shared user "</span></span><br><span class="line">                    + pkgSetting.sharedUser.name + <span class="string">"; ignoring!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-7-3-5-FileInstallArgs-doRename-重命名临时目录"><a href="#5-7-3-5-FileInstallArgs-doRename-重命名临时目录" class="headerlink" title="5.7.3.5 FileInstallArgs.doRename - 重命名临时目录"></a>5.7.3.5 FileInstallArgs.doRename - 重命名临时目录</h4><p>doRename 重命名文件！之前我们的临时目录为 /data/app/tmpl[SessionId].tmp，这里会将其重命名为 /data/app/packageName-X！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">doRename</span><span class="params">(<span class="keyword">int</span> status, PackageParser.Package pkg, String oldCodePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        cleanUp();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】获得改名前的临时目录 targetDir 就是 /data/app/tmpl[SessionId].tmp！</span></span><br><span class="line">    <span class="keyword">final</span> File targetDir = codeFile.getParentFile();</span><br><span class="line">    <span class="keyword">final</span> File beforeCodeFile = codeFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5.7.3.5.1】获得改名后的目录：/data/app/packageName-X，策略取决为 getNextCodePath！</span></span><br><span class="line">    <span class="keyword">final</span> File afterCodeFile = getNextCodePath(targetDir, pkg.packageName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Renaming "</span> + beforeCodeFile + <span class="string">" to "</span> + afterCodeFile);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Os.rename(beforeCodeFile.getAbsolutePath(), afterCodeFile.getAbsolutePath());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to rename"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】恢复默认的安全上下文！</span></span><br><span class="line">    <span class="keyword">if</span> (!SELinux.restoreconRecursive(afterCodeFile)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to restorecon"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】更新 FileInstallArgs 的目录为最终目录！</span></span><br><span class="line">    codeFile = afterCodeFile;</span><br><span class="line">    resourceFile = afterCodeFile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】更新扫描到的应用的 Package 中的目录数据！</span></span><br><span class="line">    <span class="comment">// 以及 Application 中的数据！</span></span><br><span class="line">    pkg.setCodePath(afterCodeFile.getAbsolutePath());</span><br><span class="line">    pkg.setBaseCodePath(FileUtils.rewriteAfterRename(beforeCodeFile,</span><br><span class="line">            afterCodeFile, pkg.baseCodePath));</span><br><span class="line">    pkg.setSplitCodePaths(FileUtils.rewriteAfterRename(beforeCodeFile,</span><br><span class="line">            afterCodeFile, pkg.splitCodePaths));</span><br><span class="line"></span><br><span class="line">    pkg.setApplicationVolumeUuid(pkg.volumeUuid);</span><br><span class="line">    pkg.setApplicationInfoCodePath(pkg.codePath);</span><br><span class="line">    pkg.setApplicationInfoBaseCodePath(pkg.baseCodePath);</span><br><span class="line">    pkg.setApplicationInfoSplitCodePaths(pkg.splitCodePaths);</span><br><span class="line">    pkg.setApplicationInfoResourcePath(pkg.codePath);</span><br><span class="line">    pkg.setApplicationInfoBaseResourcePath(pkg.baseCodePath);</span><br><span class="line">    pkg.setApplicationInfoSplitResourcePaths(pkg.splitCodePaths);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p><h5 id="5-7-3-5-1-getNextCodePath"><a href="#5-7-3-5-1-getNextCodePath" class="headerlink" title="5.7.3.5.1 getNextCodePath"></a>5.7.3.5.1 getNextCodePath</h5><p>getNextCodePath 方法用于获得最终的目录！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">getNextCodePath</span><span class="params">(File targetDir, String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> suffix = <span class="number">1</span>;</span><br><span class="line">    File result;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//【1】最终目录为 /data/app/packageName-X(X=1,2,3...)</span></span><br><span class="line">        <span class="comment">// suffix 从 1 开始，如果 suffix 已存在，那就 +1;</span></span><br><span class="line">        result = <span class="keyword">new</span> File(targetDir, packageName + <span class="string">"-"</span> + suffix);</span><br><span class="line">        suffix++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (result.exists());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，不多说了！</p><h4 id="5-7-3-7-freezePackageForInstall-冻结应用"><a href="#5-7-3-7-freezePackageForInstall-冻结应用" class="headerlink" title="5.7.3.7 freezePackageForInstall - 冻结应用"></a>5.7.3.7 freezePackageForInstall - 冻结应用</h4><p>该方法用于冻结应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackageForInstall</span><span class="params">(String packageName, <span class="keyword">int</span> installFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> freezePackageForInstall(packageName, UserHandle.USER_ALL, installFlags, killReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackageForInstall</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> installFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】如果指定了卸载时不 kill app，就用默认的参数（卸载时才会进入）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】默认是需要 kill app 的，调用 freezePackage！</span></span><br><span class="line">        <span class="keyword">return</span> freezePackage(packageName, userId, killReason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续调用 freezePackage 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackage</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×5.7.3.7.1】创建了一个 PackageFreezer 实例！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer(packageName, userId, killReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-7-3-7-1-new-PackageFreezer"><a href="#5-7-3-7-1-new-PackageFreezer" class="headerlink" title="5.7.3.7.1 new PackageFreezer"></a>5.7.3.7.1 new PackageFreezer</h5><p>如果不杀进程，那就只创建一个 PackageFreezer 实例，并返回，不做任何事情！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mPackageName = <span class="keyword">null</span>;</span><br><span class="line">    mChildren = <span class="keyword">null</span>;</span><br><span class="line">    mWeFroze = <span class="keyword">false</span>;</span><br><span class="line">    mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要 kill app，那么会创建 PackageFreezer（父包和子包），并且会杀掉进程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        mPackageName = packageName;</span><br><span class="line">        mWeFroze = mFrozenPackages.add(mPackageName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(mPackageName);</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1】杀掉父包的进程!</span></span><br><span class="line">            killApplication(ps.name, ps.appId, userId, killReason);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package p = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.childPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = p.childPackages.size();</span><br><span class="line">            mChildren = <span class="keyword">new</span> PackageFreezer[N];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="comment">//【2】为子包创建 PackageFreezer，并杀掉子包的进程！</span></span><br><span class="line">                mChildren[i] = <span class="keyword">new</span> PackageFreezer(p.childPackages.get(i).packageName,</span><br><span class="line">                        userId, killReason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mChildren = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！！</p><h3 id="5-7-4-FileInstallArgs-doPostInstall"><a href="#5-7-4-FileInstallArgs-doPostInstall" class="headerlink" title="5.7.4 FileInstallArgs.doPostInstall"></a>5.7.4 FileInstallArgs.doPostInstall</h3><p>清理操作，正常情况不会触发！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doPostInstall</span><span class="params">(<span class="keyword">int</span> status, <span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果安装前的状态不是 PackageManager.INSTALL_SUCCEEDED</span></span><br><span class="line">    <span class="keyword">if</span> (status != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">//【5.7.2.1】执行清理操作！</span></span><br><span class="line">        cleanUp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-5-new-PostInstallData"><a href="#5-7-5-new-PostInstallData" class="headerlink" title="5.7.5 new PostInstallData"></a>5.7.5 new PostInstallData</h3><p>又创建了一个 PostInstallData 对象，对 PackageInstalledInfo 做了再次封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostInstallData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> InstallArgs args;</span><br><span class="line">    <span class="keyword">public</span> PackageInstalledInfo res;</span><br><span class="line"></span><br><span class="line">    PostInstallData(InstallArgs _a, PackageInstalledInfo _r) &#123;</span><br><span class="line">        args = _a;</span><br><span class="line">        res = _r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看！!</p><h2 id="5-8-PackageHandler-doHandleMessage-POST-INSTALL-安装收尾"><a href="#5-8-PackageHandler-doHandleMessage-POST-INSTALL-安装收尾" class="headerlink" title="5.8 PackageHandler.doHandleMessage[POST_INSTALL] - 安装收尾"></a>5.8 PackageHandler.doHandleMessage[POST_INSTALL] - 安装收尾</h2><p>PackageHandler 会处理 POST_INSTALL 消息，此时已经处于安装收尾阶段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> POST_INSTALL: &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">"Handling post-install for "</span> + msg.arg1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】我们在安装开始前，会用 PostInstallData 封装安装结果，并保存到 mRunningInstalls 中！</span></span><br><span class="line">    <span class="comment">// 在安装结束后，会处理本次的安装结果！</span></span><br><span class="line">    PostInstallData data = mRunningInstalls.get(msg.arg1);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> didRestore = (msg.arg2 != <span class="number">0</span>);</span><br><span class="line">    mRunningInstalls.delete(msg.arg1);  <span class="comment">// 删除掉！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">        InstallArgs args = data.args;</span><br><span class="line">        PackageInstalledInfo parentRes = data.res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】本次安装是否授予运行时权限！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> grantPermissions = (args.installFlags</span><br><span class="line">                &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】本次安装是否 kill app！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> killApp = (args.installFlags</span><br><span class="line">                &amp; PackageManager.INSTALL_DONT_KILL_APP) == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> String[] grantedPermissions = args.installGrantPermissions;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【×5.8.1】调用 handlePackagePostInstall 继续处理收尾工作！</span></span><br><span class="line">        handlePackagePostInstall(parentRes, grantPermissions, killApp,</span><br><span class="line">                grantedPermissions, didRestore, args.installerPackageName,</span><br><span class="line">                args.observer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】处理子包！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (parentRes.addedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                ? parentRes.addedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageInstalledInfo childRes = parentRes.addedChildPackages.valueAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.8.1】调用 handlePackagePostInstall 继续处理收尾工作！</span></span><br><span class="line">            handlePackagePostInstall(childRes, grantPermissions, killApp,</span><br><span class="line">                    grantedPermissions, <span class="keyword">false</span>, args.installerPackageName,</span><br><span class="line">                    args.observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.traceMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, args.traceMethod,</span><br><span class="line">                    args.traceCookie);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Bogus post-install token "</span> + msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Trace.asyncTraceEnd(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"postInstall"</span>, msg.arg1);</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>继续处理！</p><h3 id="5-8-1-PackageManagerS-handlePackagePostInstall"><a href="#5-8-1-PackageManagerS-handlePackagePostInstall" class="headerlink" title="5.8.1 PackageManagerS.handlePackagePostInstall"></a>5.8.1 PackageManagerS.handlePackagePostInstall</h3><p>处理安装收尾工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handlePackagePostInstall</span><span class="params">(PackageInstalledInfo res, <span class="keyword">boolean</span> grantPermissions,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> killApp, String[] grantedPermissions,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> launchedForRestore, String installerPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">        IPackageInstallObserver2 installObserver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】当安装结果为 success 后，会进入后续的处理！</span></span><br><span class="line">    <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">//【1.1】如果是 move pacakge，那么发送 removed 广播！</span></span><br><span class="line">        <span class="keyword">if</span> (res.removedInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.removedInfo.sendPackageRemovedBroadcasts(killApp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.2】如果安装时指定了授予运行时权限，并且应用的目标 sdk 支持运行时权限，那就授予运行时权限！</span></span><br><span class="line">        <span class="keyword">if</span> (grantPermissions &amp;&amp; res.pkg.applicationInfo.targetSdkVersion</span><br><span class="line">                &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            grantRequestedRuntimePermissions(res.pkg, res.newUsers, grantedPermissions);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.3】判断安装方式，是更新安装，还是全新安装！</span></span><br><span class="line">        <span class="comment">// 我们知道，如果 res.removedInfo 不为 null 的话，一定是覆盖更新！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> update = res.removedInfo != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; res.removedInfo.removedPackage != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.4】如果被 disable 的特权应用之前没有子包，这是第一次有子包，那么我们会授予新的子包</span></span><br><span class="line">        <span class="comment">// 运行时权限，如果旧的特权应用之前已经授予！</span></span><br><span class="line">        <span class="keyword">if</span> (res.pkg.parentPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                grantRuntimePermissionsGrantedToDisabledPrivSysPackageParentLPw(res.pkg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mEphemeralApplicationRegistry.onPackageInstalledLPw(res.pkg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String packageName = res.pkg.applicationInfo.packageName;</span><br><span class="line">        Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</span><br><span class="line">        extras.putInt(Intent.EXTRA_UID, res.uid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.5】决定在那些 user 下是第一次安装，那些用户下是覆盖更新！</span></span><br><span class="line">        <span class="keyword">int</span>[] firstUsers = EMPTY_INT_ARRAY;</span><br><span class="line">        <span class="keyword">int</span>[] updateUsers = EMPTY_INT_ARRAY;</span><br><span class="line">        <span class="keyword">if</span> (res.origUsers == <span class="keyword">null</span> || res.origUsers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            firstUsers = res.newUsers;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// res.newUsers 表示本次安装新增加的目标 user！</span></span><br><span class="line">            <span class="comment">// res.origUsers 标志之前安装的目标 user！</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> newUser : res.newUsers) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isNew = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> origUser : res.origUsers) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (origUser == newUser) &#123;</span><br><span class="line">                        isNew = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isNew) &#123;</span><br><span class="line">                    firstUsers = ArrayUtils.appendInt(firstUsers, newUser);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    updateUsers = ArrayUtils.appendInt(updateUsers, newUser);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.5】发送 ADD 和 REPLACE 广播，如果不是 Ephemeral app！</span></span><br><span class="line">        <span class="keyword">if</span> (!isEphemeral(res.pkg)) &#123;</span><br><span class="line">            mProcessLoggingHandler.invalidateProcessLoggingBaseApkHash(res.pkg.baseCodePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.5.1】给第一次安装的用户发送 ACTION_PACKAGE_ADDED 广播，不带 EXTRA_REPLACING 属性！</span></span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, packageName,</span><br><span class="line">                    extras, <span class="number">0</span> <span class="comment">/*flags*/</span>, <span class="keyword">null</span> <span class="comment">/*targetPackage*/</span>,</span><br><span class="line">                    <span class="keyword">null</span> <span class="comment">/*finishedReceiver*/</span>, firstUsers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.5.2】给覆盖更新的用户发送 ACTION_PACKAGE_ADDED 广播，带 EXTRA_REPLACING 属性！</span></span><br><span class="line">            <span class="keyword">if</span> (update) &#123;</span><br><span class="line">                extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, packageName,</span><br><span class="line">                    extras, <span class="number">0</span> <span class="comment">/*flags*/</span>, <span class="keyword">null</span> <span class="comment">/*targetPackage*/</span>,</span><br><span class="line">                    <span class="keyword">null</span> <span class="comment">/*finishedReceiver*/</span>, updateUsers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.5.3】给覆盖更新的用户发送 ACTION_PACKAGE_REPLACED / ACTION_MY_PACKAGE_REPLACED 广播！</span></span><br><span class="line">            <span class="keyword">if</span> (update) &#123;</span><br><span class="line">                sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED,</span><br><span class="line">                        packageName, extras, <span class="number">0</span> <span class="comment">/*flags*/</span>,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/*targetPackage*/</span>, <span class="keyword">null</span> <span class="comment">/*finishedReceiver*/</span>,</span><br><span class="line">                        updateUsers);</span><br><span class="line">                        </span><br><span class="line">                sendPackageBroadcast(Intent.ACTION_MY_PACKAGE_REPLACED,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/*package*/</span>, <span class="keyword">null</span> <span class="comment">/*extras*/</span>, <span class="number">0</span> <span class="comment">/*flags*/</span>,</span><br><span class="line">                        packageName <span class="comment">/*targetPackage*/</span>,</span><br><span class="line">                        <span class="keyword">null</span> <span class="comment">/*finishedReceiver*/</span>, updateUsers);</span><br><span class="line">                        </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (launchedForRestore &amp;&amp; !isSystemApp(res.pkg)) &#123;</span><br><span class="line">                <span class="comment">//【1.5.4】如果是第一次安装，同时我们要做一个恢复操作，并且 apk 不是系统应用</span></span><br><span class="line">                <span class="comment">// 那么我们会发送 ACTION_PACKAGE_FIRST_LAUNCH 广播！</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_BACKUP) &#123;</span><br><span class="line">                    Slog.i(TAG, <span class="string">"Post-restore of "</span> + packageName</span><br><span class="line">                            + <span class="string">" sending FIRST_LAUNCH in "</span> + Arrays.toString(firstUsers));</span><br><span class="line">                &#125;</span><br><span class="line">                sendFirstLaunchBroadcast(packageName, installerPackage, firstUsers);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.5.5】如果该 apk 处于 forward locked 或者处于外置存储中，那么会给所有的用户发送</span></span><br><span class="line">            <span class="comment">// 资源变化的广播！</span></span><br><span class="line">            <span class="keyword">if</span> (res.pkg.isForwardLocked() || isExternal(res.pkg)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">                    Slog.i(TAG, <span class="string">"upgrading pkg "</span> + res.pkg</span><br><span class="line">                            + <span class="string">" is ASEC-hosted -&gt; AVAILABLE"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span>[] uidArray = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;res.pkg.applicationInfo.uid&#125;;</span><br><span class="line">                ArrayList&lt;String&gt; pkgList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">                pkgList.add(packageName);</span><br><span class="line">                sendResourcesChangedBroadcast(<span class="keyword">true</span>, <span class="keyword">true</span>, pkgList, uidArray, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.6】针对 firstUsers 做一些权限恢复和默认浏览器设置！</span></span><br><span class="line">        <span class="keyword">if</span> (firstUsers != <span class="keyword">null</span> &amp;&amp; firstUsers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> userId : firstUsers) &#123;</span><br><span class="line">                    <span class="comment">//【1.6.1】默认浏览器设置！！</span></span><br><span class="line">                    <span class="keyword">if</span> (packageIsBrowser(packageName, userId)) &#123;</span><br><span class="line">                        mSettings.setDefaultBrowserPackageNameLPw(<span class="keyword">null</span>, userId);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【1.6.2】处理那些正在等待或者需要恢复的运行时权限授予！</span></span><br><span class="line">                    mSettings.applyPendingPermissionGrantsLPw(packageName, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EventLog.writeEvent(EventLogTags.UNKNOWN_SOURCES_ENABLED,</span><br><span class="line">                getUnknownSourcesSettings());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发 GC 回收资源！</span></span><br><span class="line">        Runtime.getRuntime().gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.8.1.1】移除掉更新后的旧 apk！</span></span><br><span class="line">        <span class="keyword">if</span> (res.removedInfo != <span class="keyword">null</span> &amp;&amp; res.removedInfo.args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                res.removedInfo.args.doPostDeleteLI(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.8.2】通知观察者安装的结果，这里的 installObserver 是我们之前创建的 localObsever！！</span></span><br><span class="line">    <span class="keyword">if</span> (installObserver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bundle extras = extrasForInstallResult(res);</span><br><span class="line">            installObserver.onPackageInstalled(res.name, res.returnCode,</span><br><span class="line">                    res.returnMsg, extras);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Observer no longer exists."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里涉及到了几个重要的广播：</p><ul><li><p><strong>Intent.ACTION_PACKAGE_ADDED</strong>：当有应用程序第一次安装时，会发送该广播给对应的 firstUsers！</p><ul><li>携带数据：Intent.EXTRA_UID，值为 apk uid；</li></ul></li><li><p><strong>Intent.ACTION_PACKAGE_REPLACED</strong>：当有应用程序被覆盖安装时，会发送该广播给对应的 updateUsers！</p><ul><li>携带数据：Intent.EXTRA_UID，</li><li>携带数据：Intent.EXTRA_REPLACING，置为 true；</li></ul></li><li><p><strong>Intent.ACTION_MY_PACKAGE_REPLACED</strong>：当有应用程序被覆盖安装时，会发送该广播给对应的 updateUsers 下被更新的 pkg！</p><ul><li>携带数据：packageName，被更新的应用包； </li></ul></li></ul><h4 id="5-8-1-1-FileInstallArgs-doPostDeleteLI-删除被更新的旧-apk"><a href="#5-8-1-1-FileInstallArgs-doPostDeleteLI-删除被更新的旧-apk" class="headerlink" title="5.8.1.1 FileInstallArgs.doPostDeleteLI - 删除被更新的旧 apk"></a>5.8.1.1 FileInstallArgs.doPostDeleteLI - 删除被更新的旧 apk</h4><p>继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">doPostDeleteLI</span><span class="params">(<span class="keyword">boolean</span> delete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.8.1.2】清楚 apk 文件 和 dex 文件！</span></span><br><span class="line">    cleanUpResourcesLI();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="5-8-1-2-FileInstallArgs-cleanUpResourcesLI"><a href="#5-8-1-2-FileInstallArgs-cleanUpResourcesLI" class="headerlink" title="5.8.1.2 FileInstallArgs.cleanUpResourcesLI"></a>5.8.1.2 FileInstallArgs.cleanUpResourcesLI</h4><p>继续分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanUpResourcesLI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; allCodePaths = Collections.EMPTY_LIST;</span><br><span class="line">    <span class="keyword">if</span> (codeFile != <span class="keyword">null</span> &amp;&amp; codeFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1】收集 apk path！</span></span><br><span class="line">            <span class="keyword">final</span> PackageLite pkg = PackageParser.parsePackageLite(codeFile, <span class="number">0</span>);</span><br><span class="line">            allCodePaths = pkg.getAllCodePaths();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="comment">// Ignored; we tried our best</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】清除 apk！</span></span><br><span class="line">    cleanUp();</span><br><span class="line">    <span class="comment">//【3】清除 dex files！</span></span><br><span class="line">    removeDexFiles(allCodePaths, instructionSets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不再过多分析！</p><h3 id="5-8-2-IPackageInstallObserver2-onPackageInstalled"><a href="#5-8-2-IPackageInstallObserver2-onPackageInstalled" class="headerlink" title="5.8.2 IPackageInstallObserver2.onPackageInstalled"></a>5.8.2 IPackageInstallObserver2.onPackageInstalled</h3><p>这里的 installObserver 是我们在 4.3 PackageInstallerSession.commitLocked 中创建的另一个 Observer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】创建一个本地的安装观察者，监听安装结果！</span></span><br><span class="line"><span class="keyword">final</span> IPackageInstallObserver2 localObserver = <span class="keyword">new</span> IPackageInstallObserver2.Stub() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">            Bundle extras)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【×5.8.2.1】关闭文件桥，删除文件拷贝！</span></span><br><span class="line">        destroyInternal();</span><br><span class="line">        <span class="comment">//【×5.8.2.2】处理回调，通知监听者！</span></span><br><span class="line">        dispatchSessionFinished(returnCode, msg, extras);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-8-2-1-PackageInstallerSession-destroyInternal"><a href="#5-8-2-1-PackageInstallerSession-destroyInternal" class="headerlink" title="5.8.2.1 PackageInstallerSession.destroyInternal"></a>5.8.2.1 PackageInstallerSession.destroyInternal</h4><p>关闭文件桥，删除文件拷贝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mSealed = <span class="keyword">true</span>;</span><br><span class="line">        mDestroyed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】关闭之前打开的文件桥对象！</span></span><br><span class="line">        <span class="keyword">for</span> (FileBridge bridge : mBridges) &#123;</span><br><span class="line">            bridge.forceClose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stageDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【2】删除之前的文件拷贝目录！</span></span><br><span class="line">            mPm.mInstaller.rmPackageDir(stageDir.getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        PackageHelper.destroySdDir(stageCid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-8-2-2-PackageInstallerSession-dispatchSessionFinished"><a href="#5-8-2-2-PackageInstallerSession-dispatchSessionFinished" class="headerlink" title="5.8.2.2 PackageInstallerSession.dispatchSessionFinished"></a>5.8.2.2 PackageInstallerSession.dispatchSessionFinished</h4><p>处理回调，通知监听者！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchSessionFinished</span><span class="params">(<span class="keyword">int</span> returnCode, String msg, Bundle extras)</span> </span>&#123;</span><br><span class="line">    mFinalStatus = returnCode;</span><br><span class="line">    mFinalMessage = msg;</span><br><span class="line">    <span class="comment">//【*4.1.2】触发 mRemoteObserver 回调！</span></span><br><span class="line">    <span class="keyword">if</span> (mRemoteObserver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mRemoteObserver.onPackageInstalled(mPackageName, returnCode, msg, extras);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> success = (returnCode == PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">    <span class="comment">//【*5.8.2.2.2】回调触发！！</span></span><br><span class="line">    mCallback.onSessionFinished(<span class="keyword">this</span>, success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面 4.1 commit 事务的时候，我们创建了一个 PackageInstallObserverAdapter，并将其保存到了 PackageInstallerSession.mRemoteObserver 中，这里首先会触发 mRemoteObserver 的回调！</p><p>在 3.1.4.1 new InternalCallback 的时候，我们在创建 PackageInstallerSession 时，传入了一个回调对象 InternalCallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InternalCallback mInternalCallback = <span class="keyword">new</span> InternalCallback();</span><br></pre></td></tr></table></figure><p>InternalCallback 类定义在 PackageInstallerService 中，该对象的引用会被保存到 PackageInstallerSession.mCallback 变量中！</p><h5 id="5-8-2-2-2-InternalCallback-onSessionFinished"><a href="#5-8-2-2-2-InternalCallback-onSessionFinished" class="headerlink" title="5.8.2.2.2 InternalCallback.onSessionFinished"></a>5.8.2.2.2 InternalCallback.onSessionFinished</h5><p>这里我们重点关于 onSessionFinished 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionFinished</span><span class="params">(<span class="keyword">final</span> PackageInstallerSession session, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×5.8.2.2.2.1】注册者回调！</span></span><br><span class="line">    mCallbacks.notifySessionFinished(session.sessionId, session.userId, success);</span><br><span class="line"></span><br><span class="line">    mInstallHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">                <span class="comment">//【1】从 PackageInstallerService 中的 mSessions 移除了该 Session；</span></span><br><span class="line">                mSessions.remove(session.sessionId);</span><br><span class="line">                <span class="comment">//【2】将该 Sesssion 添加到历史中；</span></span><br><span class="line">                mHistoricalSessions.put(session.sessionId, session);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> File appIconFile = buildAppIconFile(session.sessionId);</span><br><span class="line">                <span class="keyword">if</span> (appIconFile.exists()) &#123;</span><br><span class="line">                    appIconFile.delete();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【×3.1.6.1】持久化事务记录文件！</span></span><br><span class="line">                writeSessionsLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，在 InternalCallback 中又回调了另外一个 Callback mCallbacks，它也是 PackageInstallerService 的内部类：</p><h6 id="5-8-2-2-2-1-Callback-notifySessionFinished"><a href="#5-8-2-2-2-1-Callback-notifySessionFinished" class="headerlink" title="5.8.2.2.2.1 Callback.notifySessionFinished"></a>5.8.2.2.2.1 Callback.notifySessionFinished</h6><p>前面我们分析过，Callback 本质上就是一个 Handler，这里就是向其所在的线程发送消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifySessionFinished</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_FINISHED, sessionId, userId, success).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 3.1.4.2 Callbacks.notifySessionXXXX 中，我们分析过，最终其实是很将安装的结果分发给了注册在 Callback 中的所有远程回调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RemoteCallbackList&lt;IPackageInstallerCallback&gt;</span><br><span class="line">        mCallbacks = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>这里就不多说了！</p><h1 id="6-PackageManagerS-replacePackageLIF-覆盖安装"><a href="#6-PackageManagerS-replacePackageLIF-覆盖安装" class="headerlink" title="6 PackageManagerS.replacePackageLIF - 覆盖安装"></a>6 PackageManagerS.replacePackageLIF - 覆盖安装</h1><h2 id="6-1-参数分析"><a href="#6-1-参数分析" class="headerlink" title="6.1 参数分析"></a>6.1 参数分析</h2><p>这里我们来回顾下传入的参数：final int policyFlags 就是我们之前的解析参数 parseFlags</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下： mDefParseFlags = 0 </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> parseFlags = mDefParseFlags | PackageParser.PARSE_CHATTY</span><br><span class="line">        | PackageParser.PARSE_ENFORCE_CODE</span><br><span class="line">        | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>)</span><br><span class="line">        | (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>)</span><br><span class="line">        | (ephemeral ? PackageParser.PARSE_IS_EPHEMERAL : <span class="number">0</span>)</span><br><span class="line">        | (forceSdk ? PackageParser.PARSE_FORCE_SDK : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>同时，对于扫描标志位 scanFlags，会做如下处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【2】设置扫描参数</span></span><br><span class="line"><span class="keyword">int</span> scanFlags = SCAN_NEW_INSTALL | SCAN_UPDATE_SIGNATURE;</span><br><span class="line"><span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//【2.1】如果 args.move 不为 null，表示正在移动一个 app，我们会对其进行一个初始化的扫描</span></span><br><span class="line"><span class="comment">// 增加 SCAN_INITIAL 位！</span></span><br><span class="line">scanFlags |= SCAN_INITIAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123; </span><br><span class="line"><span class="comment">//【2.2】如果安装参数指定了 INSTALL_DONT_KILL_APP，那么增加 SCAN_DONT_KILL_APP 位！</span></span><br><span class="line">scanFlags |= SCAN_DONT_KILL_APP;</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line"><span class="comment">//【13】根据安装参数做不同的处理！</span></span><br><span class="line"><span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//【13.1】如果是 move package，进入这里！</span></span><br><span class="line">scanFlags |= SCAN_NO_DEX; <span class="comment">// 设置以下标签，无需做 odex，我们需要已有的移动过去即可！</span></span><br><span class="line">scanFlags |= SCAN_MOVE;</span><br><span class="line">... ... ...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!forwardLocked &amp;&amp; !pkg.applicationInfo.isExternalAsec()) &#123;</span><br><span class="line"><span class="comment">//【13.2】如果不是 forward lock 模式安装且没有安装到外置存储上，进入这里！</span></span><br><span class="line">scanFlags |= SCAN_NO_DEX; <span class="comment">// 扫描参数设置 SCAN_NO_DEX，意味着后面不做 odex，因为这里会做！</span></span><br><span class="line">... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面，我们省略掉了不重要的代码段！</p><h2 id="6-2-方法分析"><a href="#6-2-方法分析" class="headerlink" title="6.2 方法分析"></a>6.2 方法分析</h2><p>下面继续分析核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replacePackageLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags, <span class="keyword">int</span> scanFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        UserHandle user, String installerPackageName, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral = (policyFlags &amp; PackageParser.PARSE_IS_EPHEMERAL) != <span class="number">0</span>; <span class="comment">// 是否是 ephemeral </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package oldPackage;</span><br><span class="line">    <span class="keyword">final</span> String pkgName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] allUsers;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] installedUsers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得旧应用的 Package 对象！</span></span><br><span class="line">        oldPackage = mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"replacePackageLI: new="</span> + pkg + <span class="string">", old="</span> + oldPackage);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// don't allow upgrade to target a release SDK from a pre-release SDK</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> oldTargetsPreRelease = oldPackage.applicationInfo.targetSdkVersion</span><br><span class="line">                == android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> newTargetsPreRelease = pkg.applicationInfo.targetSdkVersion</span><br><span class="line">                == android.os.Build.VERSION_CODES.CUR_DEVELOPMENT;</span><br><span class="line">        <span class="comment">//【2】如果安装设置了 PackageParser.PARSE_FORCE_SDK，那就要校验下 sdk！</span></span><br><span class="line">        <span class="keyword">if</span> (oldTargetsPreRelease</span><br><span class="line">                &amp;&amp; !newTargetsPreRelease</span><br><span class="line">                &amp;&amp; ((policyFlags &amp; PackageParser.PARSE_FORCE_SDK) == <span class="number">0</span>)) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Can't install package targeting released sdk"</span>);</span><br><span class="line">            res.setReturnCode(PackageManager.INSTALL_FAILED_UPDATE_INCOMPATIBLE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】如果之前安装是 no ephemeral，现在是 ephemeral，那么不能安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> oldIsEphemeral = oldPackage.applicationInfo.isEphemeralApp();</span><br><span class="line">        <span class="keyword">if</span> (isEphemeral &amp;&amp; !oldIsEphemeral) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Can't replace app with ephemeral: "</span> + pkgName);</span><br><span class="line">            res.setReturnCode(PackageManager.INSTALL_FAILED_EPHEMERAL_INVALID);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】校验签名，不匹配，不能安装！</span></span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">if</span> (shouldCheckUpgradeKeySetLP(ps, scanFlags)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkUpgradeKeySetLP(ps, pkg)) &#123;</span><br><span class="line">                res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,</span><br><span class="line">                        <span class="string">"New package not signed by keys specified by upgrade-keysets: "</span></span><br><span class="line">                                + pkgName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareSignatures(oldPackage.mSignatures, pkg.mSignatures)</span><br><span class="line">                    != PackageManager.SIGNATURE_MATCH) &#123;</span><br><span class="line">                res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,</span><br><span class="line">                        <span class="string">"New package has a different signature: "</span> + pkgName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】如果旧的应用是 sys app，并且需要强制 hash 校验，那就会在这里校验 hash！</span></span><br><span class="line">        <span class="keyword">if</span> (oldPackage.restrictUpdateHash != <span class="keyword">null</span> &amp;&amp; oldPackage.isSystemApp()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] digestBytes = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> MessageDigest digest = MessageDigest.getInstance(<span class="string">"SHA-512"</span>);</span><br><span class="line">                updateDigest(digest, <span class="keyword">new</span> File(pkg.baseCodePath));</span><br><span class="line">                <span class="keyword">if</span> (!ArrayUtils.isEmpty(pkg.splitCodePaths)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String path : pkg.splitCodePaths) &#123;</span><br><span class="line">                        updateDigest(digest, <span class="keyword">new</span> File(path));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                digestBytes = digest.digest();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | IOException e) &#123;</span><br><span class="line">                res.setError(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                        <span class="string">"Could not compute hash: "</span> + pkgName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!Arrays.equals(oldPackage.restrictUpdateHash, digestBytes)) &#123;</span><br><span class="line">                res.setError(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                        <span class="string">"New package fails restrict-update check: "</span> + pkgName);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// retain upgrade restriction</span></span><br><span class="line">            pkg.restrictUpdateHash = oldPackage.restrictUpdateHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】检查 shareUserId 是否变化！</span></span><br><span class="line">        String invalidPackageName =</span><br><span class="line">                getParentOrChildPackageChangedSharedUser(oldPackage, pkg);</span><br><span class="line">        <span class="keyword">if</span> (invalidPackageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE,</span><br><span class="line">                    <span class="string">"Package "</span> + invalidPackageName + <span class="string">" tried to change user "</span></span><br><span class="line">                            + oldPackage.mSharedUserId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】获得系统中所有的 user，已经上一次安装的目标 user！</span></span><br><span class="line">        allUsers = sUserManager.getUserIds();</span><br><span class="line">        installedUsers = ps.queryInstalledUsers(allUsers, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×5.7.1.1】针对与 replace 的情况，会创建一个 PackageRemovedInfo，封装被 replace 的 app 的信息！</span></span><br><span class="line">    <span class="comment">// 如果有子包的话，也会做相同的事情！</span></span><br><span class="line">    res.removedInfo = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">    res.removedInfo.uid = oldPackage.applicationInfo.uid;</span><br><span class="line">    res.removedInfo.removedPackage = oldPackage.packageName;</span><br><span class="line">    res.removedInfo.isUpdate = <span class="keyword">true</span>; <span class="comment">// 表示要更新 package！！</span></span><br><span class="line">    res.removedInfo.origUsers = installedUsers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (oldPackage.childPackages != <span class="keyword">null</span>)</span><br><span class="line">            ? oldPackage.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> childPackageUpdated = <span class="keyword">false</span>;</span><br><span class="line">        PackageParser.Package childPkg = oldPackage.childPackages.get(i);</span><br><span class="line">        <span class="keyword">if</span> (res.addedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PackageInstalledInfo childRes = res.addedChildPackages.get(childPkg.packageName);</span><br><span class="line">            <span class="keyword">if</span> (childRes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                childRes.removedInfo.uid = childPkg.applicationInfo.uid;</span><br><span class="line">                childRes.removedInfo.removedPackage = childPkg.packageName;</span><br><span class="line">                childRes.removedInfo.isUpdate = <span class="keyword">true</span>;</span><br><span class="line">                childPackageUpdated = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!childPackageUpdated) &#123;</span><br><span class="line">            PackageRemovedInfo childRemovedRes = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">            childRemovedRes.removedPackage = childPkg.packageName;</span><br><span class="line">            childRemovedRes.isUpdate = <span class="keyword">false</span>;</span><br><span class="line">            childRemovedRes.dataRemoved = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                PackageSetting childPs = mSettings.peekPackageLPr(childPkg.packageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childRemovedRes.origUsers = childPs.queryInstalledUsers(allUsers, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res.removedInfo.removedChildPackages == <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.removedInfo.removedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            res.removedInfo.removedChildPackages.put(childPkg.packageName, childRemovedRes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【9】判断下旧应用是系统应用，还是非系统应用，然后做不同的处理！</span></span><br><span class="line">    <span class="keyword">boolean</span> sysPkg = (isSystemApp(oldPackage));</span><br><span class="line">    <span class="keyword">if</span> (sysPkg) &#123;</span><br><span class="line">        <span class="comment">//【9.1】如果是系统应用，再判断是是否是系统特权应用！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> privileged =</span><br><span class="line">                (oldPackage.applicationInfo.privateFlags</span><br><span class="line">                        &amp; ApplicationInfo.PRIVATE_FLAG_PRIVILEGED) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【9.2】对于系统应用会增加如下的解析 flags!</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> systemPolicyFlags = policyFlags</span><br><span class="line">                | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">                | (privileged ? PackageParser.PARSE_IS_PRIVILEGED : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【×6.2.1】处理系统应用的 replace！</span></span><br><span class="line">        replaceSystemPackageLIF(oldPackage, pkg, systemPolicyFlags, scanFlags,</span><br><span class="line">                user, allUsers, installerPackageName, res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【×6.2.2】处理下非系统应用的 replace！</span></span><br><span class="line">        replaceNonSystemPackageLIF(oldPackage, pkg, policyFlags, scanFlags,</span><br><span class="line">                user, allUsers, installerPackageName, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于判断是否是系统应用，调用了如下的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSystemApp</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-1-replaceSystemPackageLIF-覆盖安装系统应用"><a href="#6-2-1-replaceSystemPackageLIF-覆盖安装系统应用" class="headerlink" title="6.2.1 replaceSystemPackageLIF - 覆盖安装系统应用"></a>6.2.1 replaceSystemPackageLIF - 覆盖安装系统应用</h3><p>这里我们来回顾下传入的参数：final int policyFlags 就是我们之前的解析参数 parseFlags</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】默认情况下： mDefParseFlags = 0 </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> parseFlags = mDefParseFlags | PackageParser.PARSE_CHATTY</span><br><span class="line">        | PackageParser.PARSE_ENFORCE_CODE</span><br><span class="line">        | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>)</span><br><span class="line">        | (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>)</span><br><span class="line">        | (ephemeral ? PackageParser.PARSE_IS_EPHEMERAL : <span class="number">0</span>)</span><br><span class="line">        | (forceSdk ? PackageParser.PARSE_FORCE_SDK : <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//【2】针对系统应用额外增加如下的标志       </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> systemPolicyFlags = policyFlags</span><br><span class="line">    | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">    | (privileged ? PackageParser.PARSE_IS_PRIVILEGED : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>同时，对于扫描标志位 scanFlags，和上面保持一致，下面我们来分析下更新 sys app 的流程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceSystemPackageLIF</span><span class="params">(PackageParser.Package deletedPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags, <span class="keyword">int</span> scanFlags, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] allUsers, String installerPackageName, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"replaceSystemPackageLI: new="</span> + pkg</span><br><span class="line">            + <span class="string">", old="</span> + deletedPackage);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> disabledSystem;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2.1.1】移除掉已安装的 sys app 的数据，包括解析到的四大组件；</span></span><br><span class="line">    removePackageLI(deletedPackage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*6.2.1.2】disable 掉系统应用；</span></span><br><span class="line">        disabledSystem = disableSystemPackageLPw(deletedPackage, pkg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】根据 disabledSystem 的值做不同处理！</span></span><br><span class="line">    <span class="keyword">if</span> (!disabledSystem) &#123;</span><br><span class="line">        <span class="comment">//【1.1】如果 disabledSystem 为 false，说明我们之前已经更新过 sys app 了，其已经被 disable 过了</span></span><br><span class="line">        <span class="comment">// 我们现在更新的是位于 data 分区的那个 app，所以要删除掉那个旧的 data app！</span></span><br><span class="line">        <span class="comment">//【*6.2.1.3】这里会根据要删除 data 分区的 apk 的数据，创建一个 InstallArgs，用于执行删除操作！</span></span><br><span class="line">        res.removedInfo.args = createInstallArgsForExisting(<span class="number">0</span>,</span><br><span class="line">                deletedPackage.applicationInfo.getCodePath(),</span><br><span class="line">                deletedPackage.applicationInfo.getResourcePath(),</span><br><span class="line">                getAppDexInstructionSets(deletedPackage.applicationInfo));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【1.2】此时无需删除 app，所以设置为 null</span></span><br><span class="line">        res.removedInfo.args = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2.1.4】清楚掉新安装的应用 code_cache 目录下的文件数据；</span></span><br><span class="line">    clearAppDataLIF(pkg, UserHandle.USER_ALL, StorageManager.FLAG_STORAGE_DE</span><br><span class="line">            | StorageManager.FLAG_STORAGE_CE | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2.1.5】清楚掉旧的 app 的 profile 相关数据；</span></span><br><span class="line">    clearAppProfilesLIF(deletedPackage, UserHandle.USER_ALL);</span><br><span class="line"></span><br><span class="line">    res.setReturnCode(PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】给本次扫描的新 app 设置 ApplicationInfo.FLAG_UPDATED_SYSTEM_APP 标志位！</span></span><br><span class="line">    pkg.setApplicationInfoFlags(ApplicationInfo.FLAG_UPDATED_SYSTEM_APP,</span><br><span class="line">            ApplicationInfo.FLAG_UPDATED_SYSTEM_APP);</span><br><span class="line"></span><br><span class="line">    PackageParser.Package newPackage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3】再次扫描 apk 文件！！</span></span><br><span class="line">        newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags, <span class="number">0</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】更新新 apk 的安装时间和最新更新时间（包括子包的）；</span></span><br><span class="line">        PackageSetting deletedPkgSetting = (PackageSetting) deletedPackage.mExtras;</span><br><span class="line">        setInstallAndUpdateTime(newPackage, deletedPkgSetting.firstInstallTime,</span><br><span class="line">                System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】处理安装成功的情况！</span></span><br><span class="line">        <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> deletedChildCount = (deletedPackage.childPackages != <span class="keyword">null</span>)</span><br><span class="line">                    ? deletedPackage.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newChildCount = (newPackage.childPackages != <span class="keyword">null</span>)</span><br><span class="line">                    ? newPackage.childPackages.size() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.1】比较旧的应用和新安装的应用的子包！</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deletedChildCount; i++) &#123;</span><br><span class="line">                PackageParser.Package deletedChildPkg = deletedPackage.childPackages.get(i);</span><br><span class="line">                <span class="keyword">boolean</span> childPackageDeleted = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; newChildCount; j++) &#123;</span><br><span class="line">                    PackageParser.Package newChildPkg = newPackage.childPackages.get(j);</span><br><span class="line">                    <span class="keyword">if</span> (deletedChildPkg.packageName.equals(newChildPkg.packageName)) &#123;</span><br><span class="line">                        childPackageDeleted = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5.1.1】如果旧的应用的子包被删除了，那会移除旧的应用子包遗留下的数据！</span></span><br><span class="line">                <span class="keyword">if</span> (childPackageDeleted) &#123;</span><br><span class="line">                    PackageSetting ps = mSettings.getDisabledSystemPkgLPr(</span><br><span class="line">                            deletedChildPkg.packageName);</span><br><span class="line">                    <span class="keyword">if</span> (ps != <span class="keyword">null</span> &amp;&amp; res.removedInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        PackageRemovedInfo removedChildRes = res.removedInfo</span><br><span class="line">                                .removedChildPackages.get(deletedChildPkg.packageName);</span><br><span class="line">                        <span class="comment">// 移除数据！</span></span><br><span class="line">                        removePackageDataLIF(ps, allUsers, removedChildRes, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">                        removedChildRes.removedForAllUsers = mPackages.get(ps.name) == <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*7.2.1】更新数据；</span></span><br><span class="line">            updateSettingsLI(newPackage, installerPackageName, allUsers, res, user);</span><br><span class="line">            <span class="comment">//【*7.2.2】准备数据目录，即 data/data/packageName 的目录；</span></span><br><span class="line">            prepareAppDataAfterInstallLIF(newPackage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        res.setReturnCode(INSTALL_FAILED_INTERNAL_ERROR);</span><br><span class="line">        res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】处理安装失败的情况！</span></span><br><span class="line">    <span class="keyword">if</span> (res.returnCode != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.1.6】移除新解析的 apk 的数据</span></span><br><span class="line">            removeInstalledPackageLI(newPackage, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1】重新扫描旧的 apk（注意如果之前 system apk 已经被更新过了，那么这里</span></span><br><span class="line">            <span class="comment">// 恢复的是处于 data 的那个新的 apk）！</span></span><br><span class="line">            scanPackageTracedLI(deletedPackage, policyFlags, SCAN_UPDATE_SIGNATURE, <span class="number">0</span>, user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to restore original package: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">if</span> (disabledSystem) &#123;</span><br><span class="line">                <span class="comment">//【*6.2.1.7】如果本次是第一次更新（即 disable 了 sys app），那么我们要 enable sys app！</span></span><br><span class="line">                enableSystemPackageLPw(deletedPackage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.2】更新升级包的安装信息，就是 PackageInstaller！</span></span><br><span class="line">            setInstallerPackageNameLPw(deletedPackage, installerPackageName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.3】更新权限信息，关于权限的相关逻辑，这里不再分析，但是能推测到更新权限的原因！</span></span><br><span class="line">            updatePermissionsLPw(deletedPackage, UPDATE_PERMISSIONS_ALL);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.4】持久化数据！</span></span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Slog.i(TAG, <span class="string">"Successfully restored package : "</span> + deletedPackage.packageName</span><br><span class="line">                + <span class="string">" after failed upgrade"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！！</p><h4 id="6-2-1-1-removePackageLI"><a href="#6-2-1-1-removePackageLI" class="headerlink" title="6.2.1.1 removePackageLI"></a>6.2.1.1 removePackageLI</h4><p>移除旧的 apk 的数据信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removePackageLI</span> <span class="params">(PackageParser.Package pkg, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】处理父包！</span></span><br><span class="line">    PackageSetting ps = (PackageSetting) pkg.mExtras;</span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1.1】移除父包的 Settings 对象的 Settings 数据！</span></span><br><span class="line">        removePackageLI(ps, chatty);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】处理子包！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">        ps = (PackageSetting) childPkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.1】移除子包的 Settings 对象的 Settings 数据！</span></span><br><span class="line">            removePackageLI(ps, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了另外一个 removePackageLI 方法！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePackageLI</span><span class="params">(PackageSetting ps, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatty)</span><br><span class="line">            Log.d(TAG, <span class="string">"Removing package "</span> + ps.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】将应用对应的 PackageSettings 对象删除掉！</span></span><br><span class="line">        mPackages.remove(ps.name);</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = ps.pkg;</span><br><span class="line">        <span class="keyword">if</span> (pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【×6.2.1.1.1】移除四大组件数据！</span></span><br><span class="line">            cleanPackageDataStructuresLILPw(pkg, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="6-2-1-1-1-cleanPackageDataStructuresLILPw"><a href="#6-2-1-1-1-cleanPackageDataStructuresLILPw" class="headerlink" title="6.2.1.1.1 cleanPackageDataStructuresLILPw"></a>6.2.1.1.1 cleanPackageDataStructuresLILPw</h5><p>用于删除 apk 的四大组件和共享库数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPackageDataStructuresLILPw</span><span class="params">(PackageParser.Package pkg, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】移除 provider！</span></span><br><span class="line">    <span class="keyword">int</span> N = pkg.providers.size();</span><br><span class="line">    StringBuilder r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Provider p = pkg.providers.get(i);</span><br><span class="line">        mProviders.removeProvider(p);</span><br><span class="line">        <span class="keyword">if</span> (p.info.authority == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1.1】表示系统之前已经有相同 authority 的 provider，那么这个应用的 provider 是不会注册的！</span></span><br><span class="line">            <span class="comment">// 对于没有注册的 provider 不处理！</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String names[] = p.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mProvidersByAuthority.get(names[j]) == p) &#123;</span><br><span class="line">                mProvidersByAuthority.remove(names[j]);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chatty)</span><br><span class="line">                        Log.d(TAG, <span class="string">"Unregistered content provider: "</span> + names[j]</span><br><span class="line">                                + <span class="string">", className = "</span> + p.info.name + <span class="string">", isSyncable = "</span></span><br><span class="line">                                + p.info.isSyncable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Providers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】移除 service！</span></span><br><span class="line">    N = pkg.services.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Service s = pkg.services.get(i);</span><br><span class="line">        mServices.removeService(s);</span><br><span class="line">        <span class="keyword">if</span> (chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(s.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Services: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】移除 receiver！</span></span><br><span class="line">    N = pkg.receivers.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.receivers.get(i);</span><br><span class="line">        mReceivers.removeActivity(a, <span class="string">"receiver"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Receivers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】移除 activity！</span></span><br><span class="line">    N = pkg.activities.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.activities.get(i);</span><br><span class="line">        mActivities.removeActivity(a, <span class="string">"activity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Activities: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】移除定义的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！</span></span><br><span class="line">    N = pkg.permissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Permission p = pkg.permissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(p.info.name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bp = mSettings.mPermissionTrees.get(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; bp.perm == p) &#123;</span><br><span class="line">            bp.perm = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r.append(<span class="string">' '</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                r.append(p.info.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((p.info.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(p.info.name);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】移除请求的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！！</span></span><br><span class="line">    N = pkg.requestedPermissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        String perm = pkg.requestedPermissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(perm);</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; (bp.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(perm);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">                <span class="keyword">if</span> (appOpPkgs.isEmpty()) &#123;</span><br><span class="line">                    mAppOpPermissionPackages.remove(perm);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】移除请求的 instrumentation！</span></span><br><span class="line">    N = pkg.instrumentation.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Instrumentation a = pkg.instrumentation.get(i);</span><br><span class="line">        mInstrumentation.remove(a.getComponentName());</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Instrumentation: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【8】移除 SharedLibraries！</span></span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pkg.applicationInfo.flags&amp;ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Only system apps can hold shared libraries.</span></span><br><span class="line">        <span class="keyword">if</span> (pkg.libraryNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pkg.libraryNames.size(); i++) &#123;</span><br><span class="line">                String name = pkg.libraryNames.get(i);</span><br><span class="line">                SharedLibraryEntry cur = mSharedLibraries.get(name);</span><br><span class="line">                <span class="keyword">if</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.apk != <span class="keyword">null</span> &amp;&amp; cur.apk.equals(pkg.packageName)) &#123;</span><br><span class="line">                    mSharedLibraries.remove(name);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            r.append(<span class="string">' '</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        r.append(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Libraries: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该阶段的逻辑比较简单，不多说了！</p><h4 id="6-2-1-2-disableSystemPackageLPw"><a href="#6-2-1-2-disableSystemPackageLPw" class="headerlink" title="6.2.1.2 disableSystemPackageLPw"></a>6.2.1.2 disableSystemPackageLPw</h4><p>disable 掉系统应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">disableSystemPackageLPw</span><span class="params">(PackageParser.Package oldPkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package newPkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【6.2.1.2.1】disable 掉父包，父包是要通过 replace 方式！</span></span><br><span class="line">    <span class="keyword">boolean</span> disabled = mSettings.disableSystemPackageLPw(oldPkg.packageName, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// Disable the child packages</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (oldPkg.childPackages != <span class="keyword">null</span>) ? oldPkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPkg = oldPkg.childPackages.get(i);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> replace = newPkg.hasChildPackage(childPkg.packageName);</span><br><span class="line">        <span class="comment">//【6.2.1.2.1】disable 掉子包，如果新包也有子包，那就通过 replace 方式！</span></span><br><span class="line">        disabled |= mSettings.disableSystemPackageLPw(childPkg.packageName, replace);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> disabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了 Settings 的 disableSystemPackageLPw 方法！</p><h5 id="6-2-1-2-1-Settings-disableSystemPackageLPw"><a href="#6-2-1-2-1-Settings-disableSystemPackageLPw" class="headerlink" title="6.2.1.2.1 Settings.disableSystemPackageLPw"></a>6.2.1.2.1 Settings.disableSystemPackageLPw</h5><p>我们继续分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">disableSystemPackageLPw</span><span class="params">(String name, <span class="keyword">boolean</span> replaced)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting p = mPackages.get(name);</span><br><span class="line">    <span class="comment">//【1】异常判断，如果没安装，disable 个屁！</span></span><br><span class="line">    <span class="keyword">if</span>(p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(PackageManagerService.TAG, <span class="string">"Package "</span> + name + <span class="string">" is not an installed package"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】尝试从 mDisabledSysPackages 列表中获得 PackageSetting！</span></span><br><span class="line">    <span class="keyword">final</span> PackageSetting dp = mDisabledSysPackages.get(name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】判断 disable 的条件是否满足：</span></span><br><span class="line">    <span class="comment">// 1、之前没有 disable；2、是系统应用；3、没有更新过！</span></span><br><span class="line">    <span class="keyword">if</span> (dp == <span class="keyword">null</span> &amp;&amp; p.pkg != <span class="keyword">null</span> &amp;&amp; p.pkg.isSystemApp() &amp;&amp; !p.pkg.isUpdatedSystemApp()) &#123;</span><br><span class="line">        <span class="comment">//【3.1】设置 ApplicationInfo.FLAG_UPDATED_SYSTEM_APP 标志位，表示更新过的 sys app！</span></span><br><span class="line">        <span class="keyword">if</span>((p.pkg != <span class="keyword">null</span>) &amp;&amp; (p.pkg.applicationInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            p.pkg.applicationInfo.flags |= ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.2】将其旧应用的 PackageSetting 添加到 mDisabledSysPackages 中！</span></span><br><span class="line">        mDisabledSysPackages.put(name, p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.4】判断是否是 replace，显然，对于 base apk 是需要 replace 的，对于 child apk，</span></span><br><span class="line">        <span class="comment">// 需要看新安装的应用是否有相应的子包！</span></span><br><span class="line">        <span class="keyword">if</span> (replaced) &#123;</span><br><span class="line">            PackageSetting newp = <span class="keyword">new</span> PackageSetting(p); <span class="comment">// copy 一份旧数据</span></span><br><span class="line">            <span class="comment">//【3.5】用 copy 后的数据替换之前的数据！</span></span><br><span class="line">            replacePackageLPw(name, newp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于系统应用来说，只有第一次覆盖更新时，会 disable 掉 sys 下的那个 app；如果多次覆盖安装，后续的不会再 disable！</p><p>下面是替换的具体操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replacePackageLPw</span><span class="params">(String name, PackageSetting newp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得之前数据，然后根据 uid 的不同做不同的处理！</span></span><br><span class="line">    <span class="keyword">final</span> PackageSetting p = mPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.sharedUser.removePackage(p);</span><br><span class="line">            p.sharedUser.addPackage(newp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            replaceUserIdLPw(p.appId, newp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】更新 mPackages 中的数据！</span></span><br><span class="line">    mPackages.put(name, newp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧的数据，此时是在 mDisabledSysPackages 中！</p><h4 id="6-2-1-3-createInstallArgsForExisting-要删除的被更新-apk"><a href="#6-2-1-3-createInstallArgsForExisting-要删除的被更新-apk" class="headerlink" title="6.2.1.3 createInstallArgsForExisting - 要删除的被更新 apk"></a>6.2.1.3 createInstallArgsForExisting - 要删除的被更新 apk</h4><p>这里是针对已存在的应用创建一个 InstallArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallArgs <span class="title">createInstallArgsForExisting</span><span class="params">(<span class="keyword">int</span> installFlags, String codePath,</span></span></span><br><span class="line"><span class="function"><span class="params">        String resourcePath, String[] instructionSets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isInAsec;</span><br><span class="line">    <span class="keyword">if</span> (installOnExternalAsec(installFlags)) &#123;</span><br><span class="line">        <span class="comment">//【1】如果是安装到外置的，那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installForwardLocked(installFlags)</span><br><span class="line">            &amp;&amp; !codePath.startsWith(mDrmAppPrivateInstallDir.getAbsolutePath())) &#123;</span><br><span class="line">        <span class="comment">//【2】对于 forward lock 安装，如果目录是 drm app pri</span></span><br><span class="line">        <span class="comment">// 那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isInAsec = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isInAsec) &#123;</span><br><span class="line">        <span class="comment">//【3】创建 AsecInstallArgs 安装参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsecInstallArgs(codePath, instructionSets,</span><br><span class="line">                installOnExternalAsec(installFlags), installForwardLocked(installFlags));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.5.3.1】一般情况下，会创建 FileInstallArgs，这里通过 FileInstallArgs 的另一构造器</span></span><br><span class="line">        <span class="comment">// 创建了实例，描述一个已经存在的 app！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInstallArgs(codePath, resourcePath, instructionSets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又回到了 5.5.3.1 的 FileInstallArgs 的相关创建！</p><h4 id="6-2-1-4-clearAppDataLIF"><a href="#6-2-1-4-clearAppDataLIF" class="headerlink" title="6.2.1.4 clearAppDataLIF"></a>6.2.1.4 clearAppDataLIF</h4><p>清楚 app 的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】处理父包！</span></span><br><span class="line">    clearAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【2】调用另外一个方法处理子包！</span></span><br><span class="line">        clearAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> realUserId : resolveUserIds(userId)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = (ps != <span class="keyword">null</span>) ? ps.getCeDataInode(realUserId) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstaller.clearAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags,</span><br><span class="line">                    ceDataInode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, String.valueOf(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-2-1-5-clearAppProfilesLIF"><a href="#6-2-1-5-clearAppProfilesLIF" class="headerlink" title="6.2.1.5 clearAppProfilesLIF"></a>6.2.1.5 clearAppProfilesLIF</h4><p>清楚 app 的 profiles 数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearAppProfilesLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【×6.2.1.5.1】清除父包的 profile 数据！</span></span><br><span class="line">    clearAppProfilesLeafLIF(pkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We don't remove the base foreign use marker when clearing profiles because</span></span><br><span class="line">    <span class="comment">// we will rename it when the app is updated. Unlike the actual profile contents,</span></span><br><span class="line">    <span class="comment">// the foreign use marker is good across installs.</span></span><br><span class="line">    destroyAppReferenceProfileLeafLIF(pkg, userId, <span class="keyword">false</span> <span class="comment">/* removeBaseMarker */</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【×6.2.1.5.1】清除子包的！</span></span><br><span class="line">        clearAppProfilesLeafLIF(pkg.childPackages.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-5-1-clearAppProfilesLeafLIF"><a href="#6-2-1-5-1-clearAppProfilesLeafLIF" class="headerlink" title="6.2.1.5.1 clearAppProfilesLeafLIF"></a>6.2.1.5.1 clearAppProfilesLeafLIF</h5><p>最终调用了这个方法，清楚 profile 数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearAppProfilesLeafLIF</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mInstaller.clearAppProfiles(pkg.packageName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">        Slog.w(TAG, String.valueOf(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-2-1-6-removeInstalledPackageLI"><a href="#6-2-1-6-removeInstalledPackageLI" class="headerlink" title="6.2.1.6 removeInstalledPackageLI"></a>6.2.1.6 removeInstalledPackageLI</h4><p>移除被扫描到的新的 apk 的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeInstalledPackageLI</span><span class="params">(PackageParser.Package pkg, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatty)</span><br><span class="line">            Log.d(TAG, <span class="string">"Removing package "</span> + pkg.applicationInfo.packageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// writer</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】移除父包!</span></span><br><span class="line">        mPackages.remove(pkg.applicationInfo.packageName);</span><br><span class="line">        <span class="comment">//【*6.2.1.1.1】移除父包的数据结构！</span></span><br><span class="line">        cleanPackageDataStructuresLILPw(pkg, chatty);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove the child packages</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="comment">//【2】移除子包!</span></span><br><span class="line">            PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">            mPackages.remove(childPkg.applicationInfo.packageName);</span><br><span class="line">            <span class="comment">//【*6.2.1.1.1】移除子包的数据结构！</span></span><br><span class="line">            cleanPackageDataStructuresLILPw(childPkg, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-1-7-enableSystemPackageLPw"><a href="#6-2-1-7-enableSystemPackageLPw" class="headerlink" title="6.2.1.7 enableSystemPackageLPw"></a>6.2.1.7 enableSystemPackageLPw</h4><p>恢复系统应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enableSystemPackageLPw</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】恢复父包！</span></span><br><span class="line">    mSettings.enableSystemPackageLPw(pkg.packageName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">        <span class="comment">//【*6.2.1.7.1】恢复子包！</span></span><br><span class="line">        mSettings.enableSystemPackageLPw(childPkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-7-1-Settings-enableSystemPackageLPw"><a href="#6-2-1-7-1-Settings-enableSystemPackageLPw" class="headerlink" title="6.2.1.7.1 Settings.enableSystemPackageLPw"></a>6.2.1.7.1 Settings.enableSystemPackageLPw</h5><p>最终会调用 Settings 的 enableSystemPackageLPw 方法 enable package：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PackageSetting <span class="title">enableSystemPackageLPw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断该 sys package 是否被 disable 了；</span></span><br><span class="line">    PackageSetting p = mDisabledSysPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(PackageManagerService.TAG, <span class="string">"Package "</span> + name + <span class="string">" is not disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】取消 ApplicationInfo.FLAG_UPDATED_SYSTEM_APP 标志位！</span></span><br><span class="line">    <span class="keyword">if</span>((p.pkg != <span class="keyword">null</span>) &amp;&amp; (p.pkg.applicationInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">        p.pkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】重新为该 system 创建一个 PackageSetting 对象，并添加到相应的集合中！</span></span><br><span class="line">    PackageSetting ret = addPackageLPw(name, p.realName, p.codePath, p.resourcePath,</span><br><span class="line">            p.legacyNativeLibraryPathString, p.primaryCpuAbiString,</span><br><span class="line">            p.secondaryCpuAbiString, p.cpuAbiOverrideString,</span><br><span class="line">            p.appId, p.versionCode, p.pkgFlags, p.pkgPrivateFlags,</span><br><span class="line">            p.parentPackageName, p.childPackageNames);</span><br><span class="line">    <span class="comment">//【4】从 mDisabledSysPackages 中删除！</span></span><br><span class="line">    mDisabledSysPackages.remove(name);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 addPackageLPw 的逻辑这里就不在分析了！</p><h3 id="6-2-2-replaceNonSystemPackageLIF-覆盖安装三方应用-gt-接入-8"><a href="#6-2-2-replaceNonSystemPackageLIF-覆盖安装三方应用-gt-接入-8" class="headerlink" title="6.2.2 replaceNonSystemPackageLIF - 覆盖安装三方应用 -&gt; 接入 8"></a>6.2.2 replaceNonSystemPackageLIF - 覆盖安装三方应用 -&gt; 接入 8</h3><p>关于 replaceNonSystemPackageLIF 的逻辑，由于 markdown 不支持 6 级以上的标题，所以移动到第 8 节，单独分析!!</p><h1 id="7-PackageManagerS-installNewPackageLIF-全新安装"><a href="#7-PackageManagerS-installNewPackageLIF-全新安装" class="headerlink" title="7 PackageManagerS.installNewPackageLIF - 全新安装"></a>7 PackageManagerS.installNewPackageLIF - 全新安装</h1><h2 id="7-1-参数分析"><a href="#7-1-参数分析" class="headerlink" title="7.1 参数分析"></a>7.1 参数分析</h2><p>这里我们来回顾下传入的参数：final int policyFlags 就是我们之前的解析参数 parseFlags</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】默认情况下： mDefParseFlags = 0 </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> parseFlags = mDefParseFlags | PackageParser.PARSE_CHATTY</span><br><span class="line">        | PackageParser.PARSE_ENFORCE_CODE</span><br><span class="line">        | (forwardLocked ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>)</span><br><span class="line">        | (onExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>)</span><br><span class="line">        | (ephemeral ? PackageParser.PARSE_IS_EPHEMERAL : <span class="number">0</span>)</span><br><span class="line">        | (forceSdk ? PackageParser.PARSE_FORCE_SDK : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>同时，对于扫描标志位 scanFlags，会做如下处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【2】设置扫描参数</span></span><br><span class="line"><span class="keyword">int</span> scanFlags = SCAN_NEW_INSTALL | SCAN_UPDATE_SIGNATURE;</span><br><span class="line"><span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//【2.1】如果 args.move 不为 null，表示正在移动一个 app，我们会对其进行一个初始化的扫描</span></span><br><span class="line"><span class="comment">// 增加 SCAN_INITIAL 位！</span></span><br><span class="line">scanFlags |= SCAN_INITIAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123; </span><br><span class="line"><span class="comment">//【2.2】如果安装参数指定了 INSTALL_DONT_KILL_APP，那么增加 SCAN_DONT_KILL_APP 位！</span></span><br><span class="line">scanFlags |= SCAN_DONT_KILL_APP;</span><br><span class="line">&#125;</span><br><span class="line">... ... ...</span><br><span class="line"><span class="comment">//【13】根据安装参数做不同的处理！</span></span><br><span class="line"><span class="keyword">if</span> (args.move != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//【13.1】如果是 move package，进入这里！</span></span><br><span class="line">scanFlags |= SCAN_NO_DEX; <span class="comment">// 设置以下标签，无需做 odex，我们需要已有的移动过去即可！</span></span><br><span class="line">scanFlags |= SCAN_MOVE;</span><br><span class="line">... ... ...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!forwardLocked &amp;&amp; !pkg.applicationInfo.isExternalAsec()) &#123;</span><br><span class="line"><span class="comment">//【13.2】如果不是 forward lock 模式安装且没有安装到外置存储上，进入这里！</span></span><br><span class="line">scanFlags |= SCAN_NO_DEX; <span class="comment">// 扫描参数设置 SCAN_NO_DEX，意味着后面不做 odex，因为这里会做！</span></span><br><span class="line">... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面我们省略掉了不重要的代码段！</p><h2 id="7-2-方法解析"><a href="#7-2-方法解析" class="headerlink" title="7.2 方法解析"></a>7.2 方法解析</h2><p>下面继续分析核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installNewPackageLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> scanFlags, UserHandle user, String installerPackageName, String volumeUuid,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"installNewPackage"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remember this for later, in case we need to rollback this install</span></span><br><span class="line">    String pkgName = pkg.packageName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"installNewPackageLI: "</span> + pkg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果已经有一个同名的应用安装了，并且其被改为的旧的名字，那么这种情况不能用该接口安装，</span></span><br><span class="line">        <span class="comment">// 需要使用 replace 接口来更新！</span></span><br><span class="line">        <span class="keyword">if</span> (mSettings.mRenamedPackages.containsKey(pkgName)) &#123;</span><br><span class="line">            res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</span><br><span class="line">                    + <span class="string">" without first uninstalling package running as "</span></span><br><span class="line">                    + mSettings.mRenamedPackages.get(pkgName));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果 PMS.mPackages 中已经扫描到同名的应用，这种情况不能用该接口安装，需要通过 replace 接口！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackages.containsKey(pkgName)) &#123;</span><br><span class="line">            <span class="comment">// Don't allow installation over an existing package with the same name.</span></span><br><span class="line">            res.setError(INSTALL_FAILED_ALREADY_EXISTS, <span class="string">"Attempt to re-install "</span> + pkgName</span><br><span class="line">                    + <span class="string">" without first uninstalling."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3】核心方法，扫描 apk，这里和 PMS 开机的时候一样！</span></span><br><span class="line">        PackageParser.Package newPackage = scanPackageTracedLI(pkg, policyFlags, scanFlags,</span><br><span class="line">                System.currentTimeMillis(), user);</span><br><span class="line">        <span class="comment">//【*7.2.1】更新 Settings 中对应的 PackageSettings 集合！</span></span><br><span class="line">        updateSettingsLI(newPackage, installerPackageName, <span class="keyword">null</span>, res, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">            <span class="comment">//【*7.2.2】安装成功，准备数据目录！</span></span><br><span class="line">            prepareAppDataAfterInstallLIF(newPackage);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*8.1】安装失败，删除 apk，但是保存之前就存在的数据！</span></span><br><span class="line">            deletePackageLIF(pkgName, UserHandle.ALL, <span class="keyword">false</span>, <span class="keyword">null</span>,</span><br><span class="line">                    PackageManager.DELETE_KEEP_DATA, res.removedInfo, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h3 id="7-2-1-updateSettingsLI"><a href="#7-2-1-updateSettingsLI" class="headerlink" title="7.2.1 updateSettingsLI"></a>7.2.1 updateSettingsLI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSettingsLI</span><span class="params">(PackageParser.Package newPackage, String installerPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] allUsers, PackageInstalledInfo res, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×7.2.1.1】更新父包！</span></span><br><span class="line">    updateSettingsInternalLI(newPackage, installerPackageName, allUsers, res.origUsers,</span><br><span class="line">            res, user);</span><br><span class="line">    <span class="comment">//【1】对子包也做相同的处理；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (newPackage.childPackages != <span class="keyword">null</span>)</span><br><span class="line">            ? newPackage.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPackage = newPackage.childPackages.get(i);</span><br><span class="line">        PackageInstalledInfo childRes = res.addedChildPackages.get(childPackage.packageName);</span><br><span class="line">        <span class="comment">//【×7.2.1.1】更新子包！</span></span><br><span class="line">        updateSettingsInternalLI(childPackage, installerPackageName, allUsers,</span><br><span class="line">                childRes.origUsers, childRes, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h4 id="7-2-1-1-updateSettingsInternalLI"><a href="#7-2-1-1-updateSettingsInternalLI" class="headerlink" title="7.2.1.1 updateSettingsInternalLI"></a>7.2.1.1 updateSettingsInternalLI</h4><p>此时，apk 已经扫描了，在扫描的最后阶段，也会创建对应的 PackageSettings 对象，这里会根据安装结果，更新数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSettingsInternalLI</span><span class="params">(PackageParser.Package newPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">        String installerPackageName, <span class="keyword">int</span>[] allUsers, <span class="keyword">int</span>[] installedForUsers,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageInstalledInfo res, UserHandle user)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"updateSettings"</span>);</span><br><span class="line"></span><br><span class="line">    String pkgName = newPackage.packageName;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果应用已经安装了，更新安装状态 INCOMPLETE，并调用 writeLPr 方法更新本地文件！</span></span><br><span class="line">        <span class="comment">// writeLPr 方法在 PMS 开机的时候后有分析过，这里不多说了！</span></span><br><span class="line">        mSettings.setInstallStatus(pkgName, PackageSettingBase.PKG_INSTALL_INCOMPLETE);</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"writeSettings"</span>);</span><br><span class="line">        mSettings.writeLPr();</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"New package installed in "</span> + newPackage.codePath);</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】更新权限信息，移除无效的权限和权限树，更新的 flags 设置了 UPDATE_PERMISSIONS_REPLACE_PKG，</span></span><br><span class="line">        <span class="comment">// 表示只更新自身；如果其有定义权限，还会增加 UPDATE_PERMISSIONS_ALL！</span></span><br><span class="line">        <span class="comment">// 关于 updatePermissionsLPw 我们在 PMS 启动时分析过！</span></span><br><span class="line">        updatePermissionsLPw(newPackage.packageName, newPackage,</span><br><span class="line">                UPDATE_PERMISSIONS_REPLACE_PKG | (newPackage.permissions.size() &gt; <span class="number">0</span></span><br><span class="line">                        ? UPDATE_PERMISSIONS_ALL : <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】对于系统应用，我们默认其为可用状态！</span></span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> userId = user.getIdentifier();</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSystemApp(newPackage)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"Implicitly enabling system package on upgrade: "</span> + pkgName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.1】设置在请求的 userId 下，该应用可用！</span></span><br><span class="line">                <span class="keyword">if</span> (res.origUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> origUserId : res.origUsers) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (userId == UserHandle.USER_ALL || userId == origUserId) &#123;</span><br><span class="line">                            ps.setEnabled(COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                                    origUserId, installerPackageName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.2】设置只有在指定要安装的目标 user 下，安装状态为 true！</span></span><br><span class="line">                <span class="keyword">if</span> (allUsers != <span class="keyword">null</span> &amp;&amp; installedForUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> currentUserId : allUsers) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(</span><br><span class="line">                                installedForUsers, currentUserId);</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">                            Slog.d(TAG, <span class="string">"    user "</span> + currentUserId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                        &#125;</span><br><span class="line">                        ps.setInstalled(installed, currentUserId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.3】如果安装目标用户不是 UserHandle.USER_ALL，设置其在该 userId 下为已安装状态并且可用！</span></span><br><span class="line">            <span class="keyword">if</span> (userId != UserHandle.USER_ALL) &#123;</span><br><span class="line">                ps.setInstalled(<span class="keyword">true</span>, userId);</span><br><span class="line">                ps.setEnabled(COMPONENT_ENABLED_STATE_DEFAULT, userId, installerPackageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】修改安装结果对象中的属性！</span></span><br><span class="line">        res.name = pkgName;</span><br><span class="line">        res.uid = newPackage.applicationInfo.uid;</span><br><span class="line">        res.pkg = newPackage;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】更新 Settings 中该 PackageSetting 的安装状态！</span></span><br><span class="line">        mSettings.setInstallStatus(pkgName, PackageSettingBase.PKG_INSTALL_COMPLETE);</span><br><span class="line">        mSettings.setInstallerPackageName(pkgName, installerPackageName);</span><br><span class="line">        </span><br><span class="line">        res.setReturnCode(PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【6】并调用 writeLPr 方法更新本地文件！</span></span><br><span class="line">        Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"writeSettings"</span>);</span><br><span class="line">        mSettings.writeLPr();</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-prepareAppDataAfterInstallLIF"><a href="#7-2-2-prepareAppDataAfterInstallLIF" class="headerlink" title="7.2.2 prepareAppDataAfterInstallLIF"></a>7.2.2 prepareAppDataAfterInstallLIF</h3><p>准备数据目录！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataAfterInstallLIF</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】保存 Kernel Map 数据！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">        mSettings.writeKernelMappingLPr(ps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> UserManager um = mContext.getSystemService(UserManager.class);</span><br><span class="line">    UserManagerInternal umInternal = getUserManagerInternal();</span><br><span class="line">    <span class="keyword">for</span> (UserInfo user : um.getUsers()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags;</span><br><span class="line">        <span class="keyword">if</span> (umInternal.isUserUnlockingOrUnlocked(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (umInternal.isUserRunning(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果在该 user 下是安装状态，那就在该设备用户下准备数据目录！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.getInstalled(user.id)) &#123;</span><br><span class="line">            <span class="comment">//【7.2.2.1】准备数据目录！</span></span><br><span class="line">            prepareAppDataLIF(pkg, user.id, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时分析到这里！</p><h4 id="7-2-2-1-prepareAppDataLIF"><a href="#7-2-2-1-prepareAppDataLIF" class="headerlink" title="7.2.2.1 prepareAppDataLIF"></a>7.2.2.1 prepareAppDataLIF</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【×7.2.2】准备父包的数据目录</span></span><br><span class="line">    prepareAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【×7.2.2.2】准备子包的数据目录</span></span><br><span class="line">        prepareAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-2-prepareAppDataLeafLIF"><a href="#7-2-2-2-prepareAppDataLeafLIF" class="headerlink" title="7.2.2.2 prepareAppDataLeafLIF"></a>7.2.2.2 prepareAppDataLeafLIF</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_APP_DATA) &#123;</span><br><span class="line">        Slog.v(TAG, <span class="string">"prepareAppData for "</span> + pkg.packageName + <span class="string">" u"</span> + userId + <span class="string">" 0x"</span></span><br><span class="line">                + Integer.toHexString(flags));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = pkg.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> String packageName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo app = pkg.applicationInfo;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> appId = UserHandle.getAppId(app.uid);</span><br><span class="line"></span><br><span class="line">    Preconditions.checkNotNull(app.seinfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】通过 installd 来准备数据目录！</span></span><br><span class="line">        mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">        <span class="comment">//【2】如果是系统应用，第一次准备失败后，还会在尝试一次！</span></span><br><span class="line">        <span class="keyword">if</span> (app.isSystemApp()) &#123;</span><br><span class="line">            logCriticalInfo(Log.ERROR, <span class="string">"Failed to create app data for "</span> + packageName</span><br><span class="line">                    + <span class="string">", but trying to recover: "</span> + e);</span><br><span class="line">            <span class="comment">//【2.1】先删除之前创建的脏目录！</span></span><br><span class="line">            destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【2.2】再次创建数据目录；</span></span><br><span class="line">                mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                        appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery succeeded!"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e2) &#123;</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery failed!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to create app data for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// CE storage is unlocked right now, so read out the inode and</span></span><br><span class="line">            <span class="comment">// remember for use later when it's locked</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> mark this structure as dirty so we persist it!</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = mInstaller.getAppDataInode(volumeUuid, packageName, userId,</span><br><span class="line">                    StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">                <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ps.setCeDataInode(ceDataInode, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to find inode for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prepareAppDataContentsLeafLIF(pkg, userId, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-PackageManagerS-replaceNonSystemPackageLIF-接-6-2-2"><a href="#8-PackageManagerS-replaceNonSystemPackageLIF-接-6-2-2" class="headerlink" title="8 PackageManagerS.replaceNonSystemPackageLIF - 接 6.2.2"></a>8 PackageManagerS.replaceNonSystemPackageLIF - 接 6.2.2</h1><p>这里我们分析下覆盖安装三方应用的流程，对于扫描标志位 scanFlags，和上面保持一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceNonSystemPackageLIF</span><span class="params">(PackageParser.Package deletedPackage,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package pkg, <span class="keyword">final</span> <span class="keyword">int</span> policyFlags, <span class="keyword">int</span> scanFlags, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span>[] allUsers, String installerPackageName, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"replaceNonSystemPackageLI: new="</span> + pkg + <span class="string">", old="</span></span><br><span class="line">            + deletedPackage);</span><br><span class="line"></span><br><span class="line">    String pkgName = deletedPackage.packageName; <span class="comment">// 获得包名！</span></span><br><span class="line">    <span class="keyword">boolean</span> deletedPkg = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">boolean</span> addedPkg = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> updatedSettings = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> killApp = (scanFlags &amp; SCAN_DONT_KILL_APP) == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】设置删除 flags，会保留用户数据！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = PackageManager.DELETE_KEEP_DATA</span><br><span class="line">            | (killApp ? <span class="number">0</span> : PackageManager.DELETE_DONT_KILL_APP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> origUpdateTime = (pkg.mExtras != <span class="keyword">null</span>)</span><br><span class="line">            ? ((PackageSetting)pkg.mExtras).lastUpdateTime : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*8.1】删除在 data 分区的旧 apk 数据，res.removedInfo 用于表示要移除的 apk！！</span></span><br><span class="line">    <span class="comment">// 删除失败会进入 if 分支！</span></span><br><span class="line">    <span class="keyword">if</span> (!deletePackageLIF(pkgName, <span class="keyword">null</span>, <span class="keyword">true</span>, allUsers, deleteFlags,</span><br><span class="line">            res.removedInfo, <span class="keyword">true</span>, pkg)) &#123;</span><br><span class="line"></span><br><span class="line">        res.setError(INSTALL_FAILED_REPLACE_COULDNT_DELETE, <span class="string">"replaceNonSystemPackageLI"</span>);</span><br><span class="line">        deletedPkg = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】删除成功后，要判断下被删除的 apk 是否安装在 External 位置或者其是否是 forward lock 的</span></span><br><span class="line">        <span class="comment">// 如果是，那么我们要发送资源变化的广播通知其他进程！！</span></span><br><span class="line">        <span class="keyword">if</span> (deletedPackage.isForwardLocked() || isExternal(deletedPackage)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"upgrading pkg "</span> + deletedPackage + <span class="string">" is ASEC-hosted -&gt; UNAVAILABLE"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] uidArray = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; deletedPackage.applicationInfo.uid &#125;;</span><br><span class="line">            <span class="keyword">final</span> ArrayList&lt;String&gt; pkgList = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">            pkgList.add(deletedPackage.applicationInfo.packageName);</span><br><span class="line">            sendResourcesChangedBroadcast(<span class="keyword">false</span>, <span class="keyword">true</span>, pkgList, uidArray, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*6.2.1.4】清楚 code cache 数据！</span></span><br><span class="line">        clearAppDataLIF(pkg, UserHandle.USER_ALL, StorageManager.FLAG_STORAGE_DE</span><br><span class="line">                | StorageManager.FLAG_STORAGE_CE | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*6.2.1.5】清楚要被删除的应用的 profile 数据，这个和 odex 优化相关！</span></span><br><span class="line">        clearAppProfilesLIF(deletedPackage, UserHandle.USER_ALL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3】扫描新的 apk 应用！</span></span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package newPackage = scanPackageTracedLI(pkg, policyFlags,</span><br><span class="line">                    scanFlags | SCAN_UPDATE_TIME, System.currentTimeMillis(), user);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//【4】更新系统中的数据结构；</span></span><br><span class="line">            updateSettingsLI(newPackage, installerPackageName, allUsers, res, user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5】记录保存被删除的旧 apk 的 code path，包括父包和子包！</span></span><br><span class="line">            PackageSetting ps = mSettings.mPackages.get(pkgName);</span><br><span class="line">            <span class="keyword">if</span> (!killApp) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ps.oldCodePaths == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ps.oldCodePaths = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                Collections.addAll(ps.oldCodePaths, deletedPackage.baseCodePath);</span><br><span class="line">                <span class="keyword">if</span> (deletedPackage.splitCodePaths != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Collections.addAll(ps.oldCodePaths, deletedPackage.splitCodePaths);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ps.oldCodePaths = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ps.childPackageNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = ps.childPackageNames.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    <span class="keyword">final</span> String childPkgName = ps.childPackageNames.get(i);</span><br><span class="line">                    <span class="keyword">final</span> PackageSetting childPs = mSettings.mPackages.get(childPkgName);</span><br><span class="line">                    childPs.oldCodePaths = ps.oldCodePaths;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*7.2.2】准备 app 数据目录；</span></span><br><span class="line">            prepareAppDataAfterInstallLIF(newPackage);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 表示安装应用成功！</span></span><br><span class="line">            addedPkg = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">            res.setError(<span class="string">"Package couldn't be installed in "</span> + pkg.codePath, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】如果前面的处理没有问题，进入 if 分支！！</span></span><br><span class="line">    <span class="keyword">if</span> (res.returnCode != PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Install failed, rolling pack: "</span> + pkgName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*8.1】如果安装不成功，但是我们已经扫描了新的 apk 那么这里会删除其遗留的数据！</span></span><br><span class="line">        <span class="keyword">if</span> (addedPkg) &#123;</span><br><span class="line">            deletePackageLIF(pkgName, <span class="keyword">null</span>, <span class="keyword">true</span>, allUsers, deleteFlags,</span><br><span class="line">                    res.removedInfo, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6.1】如果新 apk 安装失败了，并且执行了清理旧的 apk 的数据，那么这里会 reinstall 旧 apk！</span></span><br><span class="line">        <span class="keyword">if</span> (deletedPkg) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_INSTALL) Slog.d(TAG, <span class="string">"Install failed, reinstalling: "</span> + deletedPackage);</span><br><span class="line">            File restoreFile = <span class="keyword">new</span> File(deletedPackage.codePath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【6.1.1】设置解析参数 flags！</span></span><br><span class="line">            <span class="keyword">boolean</span> oldExternal = isExternal(deletedPackage);</span><br><span class="line">            <span class="keyword">int</span> oldParseFlags  = mDefParseFlags | PackageParser.PARSE_CHATTY |</span><br><span class="line">                    (deletedPackage.isForwardLocked() ? PackageParser.PARSE_FORWARD_LOCK : <span class="number">0</span>) |</span><br><span class="line">                    (oldExternal ? PackageParser.PARSE_EXTERNAL_STORAGE : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> oldScanFlags = SCAN_UPDATE_SIGNATURE | SCAN_UPDATE_TIME;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【6.1.2】重新解析和扫描旧的 apk！</span></span><br><span class="line">                scanPackageTracedLI(restoreFile, oldParseFlags, oldScanFlags, origUpdateTime,</span><br><span class="line">                        <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failed to restore package : "</span> + pkgName + <span class="string">" after failed upgrade: "</span></span><br><span class="line">                        + e.getMessage());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="comment">//【6.1.3】设置 installer name！</span></span><br><span class="line">                setInstallerPackageNameLPw(deletedPackage, installerPackageName);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【6.1.4】更新被恢复的旧 apk 的权限信息！</span></span><br><span class="line">                updatePermissionsLPw(deletedPackage, UPDATE_PERMISSIONS_ALL);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【6.1.5】持久化内存中的应用数据！</span></span><br><span class="line">                mSettings.writeLPr();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Slog.i(TAG, <span class="string">"Successfully restored package : "</span> + pkgName + <span class="string">" after failed upgrade"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【7】新 apk 覆盖安装成功了，进入 else！</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            PackageSetting ps = mSettings.peekPackageLPr(pkg.packageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【7.1】更新要从那些 user 下移除！</span></span><br><span class="line">                res.removedInfo.removedForAllUsers = mPackages.get(ps.name) == <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (res.removedInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> childCount = res.removedInfo.removedChildPackages.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        String childPackageName = res.removedInfo.removedChildPackages.keyAt(i);</span><br><span class="line">                        <span class="keyword">if</span> (res.addedChildPackages.containsKey(childPackageName)) &#123;</span><br><span class="line">                            res.removedInfo.removedChildPackages.removeAt(i);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            PackageRemovedInfo childInfo = res.removedInfo</span><br><span class="line">                                    .removedChildPackages.valueAt(i);</span><br><span class="line">                            childInfo.removedForAllUsers = mPackages.get(</span><br><span class="line">                                    childInfo.removedPackage) == <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="8-1-deletePackageLIF"><a href="#8-1-deletePackageLIF" class="headerlink" title="8.1 deletePackageLIF"></a>8.1 deletePackageLIF</h2><p>删除 apk，参数 PackageParser.Package replacingPackage 表示用于 replace 的 package：</p><p>deletePackageLIF 中的逻辑很多涉及到了 delete package 的逻辑，和 install package 并没有太大关系，我们在后面的 delete package 中会继续分析！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deletePackageLIF</span><span class="params">(String packageName, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete null packageName."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deletePackageLI: "</span> + packageName + <span class="string">" user "</span> + user);</span><br><span class="line">    PackageSetting ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得要删除的 apk 的 PackageSetting 数据！</span></span><br><span class="line">        ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Package named '"</span> + packageName + <span class="string">"' doesn't exist."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】处理子包的数据：</span></span><br><span class="line">        <span class="comment">// 如果是子包，并且（其不是系统应用，或者 deleteFlags 设置了 DELETE_SYSTEM_APP 标志）！</span></span><br><span class="line">        <span class="comment">// 那么我们会清除该子包的使用状态，同时设置在设备用户下处于未安装状态！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.parentPackageName != <span class="keyword">null</span> &amp;&amp; (!isSystemApp(ps)</span><br><span class="line">                || (flags &amp; PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Uninstalled child package:"</span> + packageName + <span class="string">" for user:"</span></span><br><span class="line">                        + ((user == <span class="keyword">null</span>) ? UserHandle.USER_ALL : user));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.1】判断下要在那些 user 下删除该子包 apk 的状态信息！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> removedUserId = (user != <span class="keyword">null</span>) ? user.getIdentifier()</span><br><span class="line">                    : UserHandle.USER_ALL;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*8.1.1】清除掉 userId 下的子包 apk 的使用信息！！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, removedUserId, outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*8.1.2】更新子包 apk 在该 user 下为未安装状态！</span></span><br><span class="line">            markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.2】更新应用偏好设置！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】如果只是删除在指定 user 下的安装信息，那么我们会设置其在该 user 下为未安装的状态，同时删除其数据！</span></span><br><span class="line">    <span class="comment">// 如果 deleteFlags 设置了 DELETE_SYSTEM_APP 标志位，表示删除的是系统应用；</span></span><br><span class="line">    <span class="keyword">if</span> (((!isSystemApp(ps) || (flags &amp; PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>) &amp;&amp; user != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; user.getIdentifier() != UserHandle.USER_ALL)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*8.1.2】更新子包 apk 在该 user 下为未安装状态！</span></span><br><span class="line">        markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="comment">//【3.1】对于非系统应用的情况，先判断下是否需要保留不卸载！</span></span><br><span class="line">            <span class="keyword">boolean</span> keepUninstalledPackage = shouldKeepUninstalledPackageLPr(packageName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.2】如果该 package 在其他用户下有安装；或者其需要保留不卸载！</span></span><br><span class="line">            <span class="comment">// 那么我们只需要清楚在当前指定的用户 user 下的数据并设置其为未安装状态；</span></span><br><span class="line">            <span class="keyword">if</span> (ps.isAnyInstalled(sUserManager.getUserIds()) || keepUninstalledPackage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Still installed by other users"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【*8.1.1】清除掉当前指定的用户 user 下的 apk 的使用信息！！</span></span><br><span class="line">                <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.3】更新应用偏好设置，然后返回！</span></span><br><span class="line">                scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【3.4】这里说明其没有在其他 user 下安装，同时也不需要保留，那么后面会执行删除操作</span></span><br><span class="line">                <span class="comment">// 这里会将在当前指定的用户 user 下的安装状态设置为 installed，这样卸载广播能正确发出！ </span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Not installed by other users, full delete"</span>);</span><br><span class="line">                ps.setInstalled(<span class="keyword">true</span>, user.getIdentifier());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【3.5】对于系统应用的情况，这里只会清楚当前指定用户下的数据，然后返回！</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Deleting system app"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*8.1.1】清除掉当前指定的用户 user 下的 apk 的使用信息！！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.6】更新应用偏好设置，然后返回！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里按照逻辑，只有系统 apk 才能进入，因为只有系统 apk 才有子包！</span></span><br><span class="line">    <span class="comment">// 这里是处理每个子包的移除信息，包括子包名，子包所在 user！</span></span><br><span class="line">    <span class="keyword">if</span> (ps.childPackageNames != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = ps.childPackageNames.size();</span><br><span class="line">            outInfo.removedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;(childCount);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageRemovedInfo childInfo = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">                childInfo.removedPackage = childPackageName;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【4.1】添加到父包的 removedChildPackages 集合中！</span></span><br><span class="line">                outInfo.removedChildPackages.put(childPackageName, childInfo);</span><br><span class="line">                PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.origUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【×8.1.3】删除系统 apk，如果系统 apk 之前被覆盖更新了，那么我们会删除新的 apk</span></span><br><span class="line">        <span class="comment">// 回滚到 system 分区的旧 apk！！</span></span><br><span class="line">        ret = deleteSystemPackageLIF(ps.pkg, ps, allUserHandles, flags, outInfo, writeSettings);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing non-system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【×8.1.4】删除非系统的 apk！</span></span><br><span class="line">        ret = deleteInstalledPackageLIF(ps, deleteCodeAndResources, flags, allUserHandles,</span><br><span class="line">                outInfo, writeSettings, replacingPackage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】记录下，我们是否从所有的用户 user 下删除了该 package!</span></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【5.1】更新父包和子包的 removedForAllUsers 属性！</span></span><br><span class="line">        outInfo.removedForAllUsers = mPackages.get(ps.name) == <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = outInfo.removedChildPackages.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    PackageRemovedInfo childInfo = outInfo.removedChildPackages.valueAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        childInfo.removedForAllUsers = mPackages.get(</span><br><span class="line">                                childInfo.removedPackage) == <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.2】我们卸载的是一个系统 apk 的更新包，那么可能有些子包在 system 分区的旧 apk 中声明了</span></span><br><span class="line">        <span class="comment">// 但是在新的 data 更新 apk 中没有申明，这里会处理这种情况！！</span></span><br><span class="line">        <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                PackageSetting updatedPs = mSettings.peekPackageLPr(ps.name);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = (updatedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                        ? updatedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    String childPackageName = updatedPs.childPackageNames.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (outInfo.removedChildPackages == <span class="keyword">null</span></span><br><span class="line">                            || outInfo.removedChildPackages.indexOfKey(childPackageName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                        <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        PackageInstalledInfo installRes = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">                        installRes.name = childPackageName;</span><br><span class="line">                        installRes.newUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                        installRes.pkg = mPackages.get(childPackageName);</span><br><span class="line">                        installRes.uid = childPs.pkg.applicationInfo.uid;</span><br><span class="line">                        <span class="keyword">if</span> (outInfo.appearedChildPackages == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            outInfo.appearedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//【5.3】将这些子包保存到 outInfo.appearedChildPackages 中！</span></span><br><span class="line">                        outInfo.appearedChildPackages.put(childPackageName, installRes);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看到这里！</p><h3 id="8-1-1-clearPackageStateForUserLIF"><a href="#8-1-1-clearPackageStateForUserLIF" class="headerlink" title="8.1.1 clearPackageStateForUserLIF"></a>8.1.1 clearPackageStateForUserLIF</h3><p>清楚指定 user 下的应用数据，这里涉及到的清理操作很多，由于篇幅，这里先不细讲，等到卸载应用时在深入分析！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">clearPackageStateForUserLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得旧 apk 的扫描信息！</span></span><br><span class="line">        pkg = mPackages.get(ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断要删除那些 user 下的状态数据！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (userId == UserHandle.USER_ALL) ? sUserManager.getUserIds()</span><br><span class="line">            : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Updating package:"</span> + ps.name + <span class="string">" install state for user:"</span></span><br><span class="line">                    + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【×8.1.1.1】删除掉旧 apk 的使用状态本地记录文件！</span></span><br><span class="line">        destroyAppDataLIF(pkg, userId,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【×8.1.1.2】删除 profile 相关信息！！</span></span><br><span class="line">        destroyAppProfilesLIF(pkg, userId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【4】移除 key store！！</span></span><br><span class="line">        removeKeystoreDataIfNeeded(nextUserId, ps.appId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【×8.1.1.3】执行 package clean 操作！！</span></span><br><span class="line">        schedulePackageCleaning(ps.name, nextUserId, <span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">//【5】清楚默认应用设置!</span></span><br><span class="line">            <span class="keyword">if</span> (clearPackagePreferredActivitiesLPw(ps.name, nextUserId)) &#123;</span><br><span class="line">                <span class="comment">//【5.1】更新偏好设置！</span></span><br><span class="line">                scheduleWritePackageRestrictionsLocked(nextUserId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【6】更新运行时权限信息！</span></span><br><span class="line">            resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outInfo.removedPackage = ps.name;</span><br><span class="line">        outInfo.removedAppId = ps.appId;</span><br><span class="line">        outInfo.removedUsers = userIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于以下的内容，会在卸载 app 和权限相关文章中分析，这里由于篇幅原因（markdown 只支持 6 级标题），就先不深入分析了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【3】删除 profile 相关信息！！</span></span><br><span class="line">destroyAppProfilesLIF(pkg, userId);</span><br><span class="line"><span class="comment">//【4】移除 key store！！</span></span><br><span class="line">removeKeystoreDataIfNeeded(nextUserId, ps.appId);</span><br><span class="line"><span class="comment">//【5】清楚默认应用设置</span></span><br><span class="line">clearPackagePreferredActivitiesLPw();</span><br><span class="line"><span class="comment">//【6】更新运行时权限信息！</span></span><br><span class="line">resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);</span><br></pre></td></tr></table></figure><p>这里就不再多说了！！</p><h4 id="8-1-1-1-destroyAppDataLIF-gt-Leaf"><a href="#8-1-1-1-destroyAppDataLIF-gt-Leaf" class="headerlink" title="8.1.1.1 destroyAppDataLIF -&gt;[Leaf]"></a>8.1.1.1 destroyAppDataLIF -&gt;[Leaf]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】删除父包的数据！！</span></span><br><span class="line">    destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【2】删除子包的数据！</span></span><br><span class="line">        destroyAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得该应用的安装信息 PackageSetting ！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> realUserId : resolveUserIds(userId)) &#123;</span><br><span class="line">        <span class="comment">//【2】获得要删除的状态信息目录：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = (ps != <span class="keyword">null</span>) ? ps.getCeDataInode(realUserId) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3】调用了 Installd 删除指定目录！</span></span><br><span class="line">            mInstaller.destroyAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags,</span><br><span class="line">                    ceDataInode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, String.valueOf(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里使用了 PackageSetting.getCeDataInode 方法：</p><h5 id="8-1-1-1-1-PackageSetting-getCeDataInode"><a href="#8-1-1-1-1-PackageSetting-getCeDataInode" class="headerlink" title="8.1.1.1.1 PackageSetting.getCeDataInode"></a>8.1.1.1.1 PackageSetting.getCeDataInode</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getCeDataInode</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).ceDataInode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法返回的是 PackageUserState.ceDataInode 的值！</p><h4 id="8-1-1-3-schedulePackageCleaning"><a href="#8-1-1-3-schedulePackageCleaning" class="headerlink" title="8.1.1.3 schedulePackageCleaning"></a>8.1.1.3 schedulePackageCleaning</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedulePackageCleaning</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> andCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*8.1.1.3.1】这里会发送一个 START_CLEANING_PACKAGE 的消息给 PackageHandler ！</span></span><br><span class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(START_CLEANING_PACKAGE,</span><br><span class="line">            userId, andCode ? <span class="number">1</span> : <span class="number">0</span>, packageName);</span><br><span class="line">    <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">        msg.sendToTarget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPostSystemReadyMessages == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPostSystemReadyMessages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mPostSystemReadyMessages.add(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-1-1-3-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE"><a href="#8-1-1-3-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE" class="headerlink" title="8.1.1.3.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]"></a>8.1.1.3.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> START_CLEANING_PACKAGE: &#123;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="keyword">final</span> String packageName = (String)msg.obj;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = msg.arg1;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> andCode = msg.arg2 != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] users = sUserManager.getUserIds();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">                <span class="comment">//【1】将 package 加入到 Settings 内部的 mPackagesToBeCleaned 集合中！</span></span><br><span class="line">                mSettings.addPackageToCleanLPw(</span><br><span class="line">                        <span class="keyword">new</span> PackageCleanItem(user, packageName, andCode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mSettings.addPackageToCleanLPw(</span><br><span class="line">                    <span class="keyword">new</span> PackageCleanItem(userId, packageName, andCode));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="comment">//【*8.1.1.3.2】</span></span><br><span class="line">    startCleaningPackages();</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="8-1-1-3-2-startCleaningPackages"><a href="#8-1-1-3-2-startCleaningPackages" class="headerlink" title="8.1.1.3.2 startCleaningPackages"></a>8.1.1.3.2 startCleaningPackages</h5><p>执行扩展存储清理操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startCleaningPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">if</span> (!isExternalMediaAvailable()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mSettings.mPackagesToBeCleaned.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】发送 action PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE！</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE);</span><br><span class="line">    <span class="comment">//【2】目标组件服务：DefaultContainerService</span></span><br><span class="line">    intent.setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">    IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">    <span class="keyword">if</span> (am != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【2.1】启动服务！</span></span><br><span class="line">            am.startService(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, mContext.getOpPackageName(),</span><br><span class="line">                    UserHandle.USER_SYSTEM);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 DefaultContainerService.onHandleIntent 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE.equals(intent.getAction())) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageManager pm = IPackageManager.Stub.asInterface(</span><br><span class="line">                ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line">        PackageCleanItem item = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((item = pm.nextPackageToClean(item)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserEnvironment userEnv = <span class="keyword">new</span> UserEnvironment(item.userId);</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppDataDirs(item.packageName));</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppMediaDirs(item.packageName));</span><br><span class="line">                <span class="keyword">if</span> (item.andCode) &#123;</span><br><span class="line">                    eraseFiles(userEnv.buildExternalStorageAppObbDirs(item.packageName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑就不多说了！</p><h3 id="8-1-2-markPackageUninstalledForUserLPw"><a href="#8-1-2-markPackageUninstalledForUserLPw" class="headerlink" title="8.1.2 markPackageUninstalledForUserLPw"></a>8.1.2 markPackageUninstalledForUserLPw</h3><p>更新每个用户下的 package 的用户状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markPackageUninstalledForUserLPw</span><span class="params">(PackageSetting ps, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (user == <span class="keyword">null</span> || user.getIdentifier() == UserHandle.USER_ALL)</span><br><span class="line">            ? sUserManager.getUserIds() : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;user.getIdentifier()&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Marking package:"</span> + ps.name + <span class="string">" uninstalled for user:"</span> + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】调用了 PackageSettings 的 setUserState 接口！</span></span><br><span class="line">        ps.setUserState(nextUserId, <span class="number">0</span>, COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*installed*/</span>, <span class="keyword">true</span> <span class="comment">/*stopped*/</span>, <span class="keyword">true</span> <span class="comment">/*notLaunched*/</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*hidden*/</span>, <span class="keyword">false</span> <span class="comment">/*suspended*/</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*blockUninstall*/</span>,</span><br><span class="line">                ps.readUserState(nextUserId).domainVerificationStatus, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-3-deleteSystemPackageLIF"><a href="#8-1-3-deleteSystemPackageLIF" class="headerlink" title="8.1.3 deleteSystemPackageLIF"></a>8.1.3 deleteSystemPackageLIF</h3><p>关于 flags 的设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】设置删除 flags，会保留用户数据！</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = PackageManager.DELETE_KEEP_DATA</span><br><span class="line">        | (killApp ? <span class="number">0</span> : PackageManager.DELETE_DONT_KILL_APP);</span><br></pre></td></tr></table></figure><p>删除 system 更新 apk，PackageRemovedInfo outInfo 用于封装移除的相关信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteSystemPackageLIF</span><span class="params">(PackageParser.Package deletedPkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageSetting deletedPs, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags, PackageRemovedInfo outInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deletedPs.parentPackageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete child system package "</span> + deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> applyUserRestrictions</span><br><span class="line">            = (allUserHandles != <span class="keyword">null</span>) &amp;&amp; (outInfo.origUsers != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> PackageSetting disabledPs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】尝试获得被更新的 system apk 数据！</span></span><br><span class="line">        disabledPs = mSettings.getDisabledSystemPkgLPr(deletedPs.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deleteSystemPackageLI: newPs="</span> + deletedPkg.packageName</span><br><span class="line">            + <span class="string">" disabledPs="</span> + disabledPs);</span><br><span class="line">    <span class="comment">//【2】如果没有更新，那就不能删除，对于系统 apk，我们只能删除覆盖更新在 data 分区的！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete unknown system package "</span>+ deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">"Deleting system pkg from data partition"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Remembering install states:"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> finstalled = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                Slog.d(TAG, <span class="string">"   u="</span> + userId + <span class="string">" inst="</span> + finstalled);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】设置父包和子包的 isRemovedPackageSystemUpdate 为 true！</span></span><br><span class="line">    outInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (deletedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                ? deletedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            String childPackageName = deletedPs.childPackageNames.get(i);</span><br><span class="line">            <span class="keyword">if</span> (disabledPs.childPackageNames != <span class="keyword">null</span> &amp;&amp; disabledPs.childPackageNames</span><br><span class="line">                    .contains(childPackageName)) &#123;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】判读 version code，如果出现降级，那么就不能保留数据！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs.versionCode &lt; deletedPs.versionCode) &#123;</span><br><span class="line">        flags &amp;= ~PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags |= PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【×8.1.4】执行删除 data 分区新 apk，删除失败就结束操作！</span></span><br><span class="line">    <span class="keyword">boolean</span> ret = deleteInstalledPackageLIF(deletedPs, <span class="keyword">true</span>, flags, allUserHandles,</span><br><span class="line">            outInfo, writeSettings, disabledPs.pkg);</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】恢复 system 分区的旧 apk 的数据，同时删除更新的 apk 的 native libs</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        enableSystemPackageLPw(disabledPs.pkg);</span><br><span class="line">        removeNativeBinariesLI(deletedPs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】设置扫描 flags！</span></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Re-installing system package: "</span> + disabledPs);</span><br><span class="line">    <span class="keyword">int</span> parseFlags = mDefParseFlags</span><br><span class="line">            | PackageParser.PARSE_MUST_BE_APK</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">    <span class="keyword">if</span> (locationIsPrivileged(disabledPs.codePath)) &#123;</span><br><span class="line">        parseFlags |= PackageParser.PARSE_IS_PRIVILEGED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package newPkg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【7】扫描旧的 system apk！</span></span><br><span class="line">        newPkg = scanPackageTracedLI(disabledPs.codePath, parseFlags, SCAN_NO_PATHS, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to restore system package:"</span> + deletedPkg.packageName + <span class="string">": "</span></span><br><span class="line">                + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【8】更新 shared libs 给重新安装的 system apk！</span></span><br><span class="line">        updateSharedLibrariesLPw(newPkg, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"updateAllSharedLibrariesLPw failed: "</span> + e.getMessage());</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*7.2.2】准备 app 数据目录；</span></span><br><span class="line">    prepareAppDataAfterInstallLIF(newPkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【9】更新 pms 数据！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(newPkg.packageName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9.1】从被删除的 data 分区 apk 那里继承最新的权限信息！</span></span><br><span class="line">        ps.getPermissionsState().copyFrom(deletedPs.getPermissionsState());</span><br><span class="line">        <span class="comment">//【9.2】更新系统中所有应用的权限信息！</span></span><br><span class="line">        updatePermissionsLPw(newPkg.packageName, newPkg,</span><br><span class="line">                UPDATE_PERMISSIONS_ALL | UPDATE_PERMISSIONS_REPLACE_PKG);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Propagating install state across reinstall"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                &#125;</span><br><span class="line">                ps.setInstalled(installed, userId);</span><br><span class="line">                <span class="comment">//【9.3】持久化运行时权限；</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【9.4】持久化应用偏好设置！</span></span><br><span class="line">            mSettings.writeAllUsersPackageRestrictionsLPr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【9.5】持久化最新的所有应用数据！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不在多说了！</p><h3 id="8-1-4-deleteInstalledPackageLIF"><a href="#8-1-4-deleteInstalledPackageLIF" class="headerlink" title="8.1.4 deleteInstalledPackageLIF"></a>8.1.4 deleteInstalledPackageLIF</h3><p>关于 flags 的设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】设置删除 flags，会保留用户数据！</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = PackageManager.DELETE_KEEP_DATA</span><br><span class="line">        | (killApp ? <span class="number">0</span> : PackageManager.DELETE_DONT_KILL_APP);</span><br></pre></td></tr></table></figure><p>删除 data 分区的 apk：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteInstalledPackageLIF</span><span class="params">(PackageSetting ps,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span> flags, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.uid = ps.appId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                    ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageSetting childPs = mSettings.mPackages.get(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.uid = childPs.appId;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×8.1.4.1】移除 package 的数据！</span></span><br><span class="line">    removePackageDataLIF(ps, allUserHandles, outInfo, flags, writeSettings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果有子包，也会移除子包的数据！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>) ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageSetting childPs;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            childPs = mSettings.peekPackageLPr(ps.childPackageNames.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PackageRemovedInfo childOutInfo = (outInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                    ? outInfo.removedChildPackages.get(childPs.name) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = (flags &amp; DELETE_KEEP_DATA) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (replacingPackage != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; !replacingPackage.hasChildPackage(childPs.name))</span><br><span class="line">                    ? flags &amp; ~DELETE_KEEP_DATA : flags;</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//【×8.1.4.1】移除 package 的数据！</span></span><br><span class="line">            removePackageDataLIF(childPs, allUserHandles, childOutInfo,</span><br><span class="line">                    deleteFlags, writeSettings);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】对于被删除的父包，会创建一个 InstallArgs，用于删除 apk 和资源！</span></span><br><span class="line">    <span class="keyword">if</span> (ps.parentPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deleteCodeAndResources &amp;&amp; (outInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//【×6.2.1.3】根据一个存在的 package 创建一个 InstallArgs 中！</span></span><br><span class="line">            outInfo.args = createInstallArgsForExisting(packageFlagsToInstallFlags(ps),</span><br><span class="line">                    ps.codePathString, ps.resourcePathString, getAppDexInstructionSets(ps));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Slog.i(TAG, <span class="string">"args="</span> + outInfo.args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="8-1-4-1-removePackageDataLIF"><a href="#8-1-4-1-removePackageDataLIF" class="headerlink" title="8.1.4.1 removePackageDataLIF"></a>8.1.4.1 removePackageDataLIF</h4><p>删除 package 的数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removePackageDataLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    String packageName = ps.name;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"removePackageDataLI: "</span> + ps);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package deletedPkg;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting deletedPs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得要被删除的 apk 的 PackageSetting 和 PackageParser.Package 对象！</span></span><br><span class="line">        deletedPkg = mPackages.get(packageName);</span><br><span class="line">        deletedPs = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.removedPackage = packageName;</span><br><span class="line">            outInfo.removedUsers = deletedPs != <span class="keyword">null</span></span><br><span class="line">                    ? deletedPs.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>)</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【×8.1.4.1】第一部移除，扫描和四大组件信息！</span></span><br><span class="line">    removePackageLI(ps, (flags &amp; REMOVE_CHATTY) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 flags 没有设置 DELETE_KEEP_DATA，那么会清楚 apk 的数据，显然这里由于设置了，那么就不会清楚！</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package resolvedPkg;</span><br><span class="line">        <span class="keyword">if</span> (deletedPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvedPkg = deletedPkg;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolvedPkg = <span class="keyword">new</span> PackageParser.Package(ps.name);</span><br><span class="line">            resolvedPkg.setVolumeUuid(ps.volumeUuid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【×8.1.1.1】删除 apk 的 data 数据！！</span></span><br><span class="line">        destroyAppDataLIF(resolvedPkg, UserHandle.USER_ALL,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">        <span class="comment">//【×8.1.1.2】删除 apk 的 profiles 数据！！</span></span><br><span class="line">        destroyAppProfilesLIF(resolvedPkg, UserHandle.USER_ALL);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.dataRemoved = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【×8.1.1.3】执行 package 清除！！</span></span><br><span class="line">        schedulePackageCleaning(packageName, UserHandle.USER_ALL, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】进一步处理！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deletedPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】如果 flags 没有设置 DELETE_KEEP_DATA 标志位，那么执行其他的清楚操作！</span></span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">//【3.1.1】清楚 intentfilter verify 和 默认浏览器的设置数据！</span></span><br><span class="line">                clearIntentFilterVerificationsLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">                clearDefaultBrowserIfNeeded(packageName);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mSettings.mKeySetManagerService.removeAppKeySetDataLPw(packageName);</span><br><span class="line">                    outInfo.removedAppId = mSettings.removePackageLPw(packageName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【3.1.2】更新权限信息！</span></span><br><span class="line">                updatePermissionsLPw(deletedPs.name, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.1.3】如果该应用是共享 shared user 的，进入这里！</span></span><br><span class="line">                <span class="keyword">if</span> (deletedPs.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//【3.1.3.1】更新该共享 shared uid 的权限，该 package 被移除掉，会导致和该</span></span><br><span class="line">                        <span class="comment">// 应用相关连的权限的变化，从而导致共享 shared uid 的 gids 发生变化！</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> userIdToKill = mSettings.updateSharedUserPermsLPw(deletedPs,</span><br><span class="line">                                userId);</span><br><span class="line">                        <span class="keyword">if</span> (userIdToKill == UserHandle.USER_ALL</span><br><span class="line">                                || userIdToKill &gt;= UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                            <span class="comment">//【3.1.3.1】如果共享 shared uid 的 gids 发生变化，杀掉该 uid 下的</span></span><br><span class="line">                            <span class="comment">// 所有的 app 进程！</span></span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    killApplication(deletedPs.name, deletedPs.appId,</span><br><span class="line">                                            KILL_APP_REASON_GIDS_CHANGED);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.1.4】清除默认应用的数据；</span></span><br><span class="line">                clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.4】更新下在每个 user 下的安装状态！</span></span><br><span class="line">            <span class="keyword">if</span> (allUserHandles != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.origUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"Propagating install state across downgrade"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                        Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ps.setInstalled(installed, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.5】持久化 Settings！！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【4】移除 key-store！</span></span><br><span class="line">        removeKeystoreDataIfNeeded(UserHandle.USER_ALL, outInfo.removedAppId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h5 id="8-1-4-1-1-removePackageLI"><a href="#8-1-4-1-1-removePackageLI" class="headerlink" title="8.1.4.1.1 removePackageLI"></a>8.1.4.1.1 removePackageLI</h5><p>移除 PackageSetting 对应的扫描数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePackageLI</span><span class="params">(PackageSetting ps, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatty)</span><br><span class="line">            Log.d(TAG, <span class="string">"Removing package "</span> + ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】移除扫描信息！</span></span><br><span class="line">        mPackages.remove(ps.name);</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = ps.pkg;</span><br><span class="line">        <span class="keyword">if</span> (pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【×6.2.1.6.1】移除四大组件，共享库解析对象！</span></span><br><span class="line">            cleanPackageDataStructuresLILPw(pkg, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就不多说了！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 6 篇 - PMS_READY 阶段</title>
    <link href="https://coolqi.top/2018/04/28/PMS6-PMS_READY/"/>
    <id>https://coolqi.top/2018/04/28/PMS6-PMS_READY/</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-11-20T15:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现，本文是作者原创，转载请说明出处！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>最后我们会进入 PMS 初始化的最后阶段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">        ... ... ... ...<span class="comment">// 第五阶段</span></span><br><span class="line">        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,</span><br><span class="line">                SystemClock.uptimeMillis());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【1】获得 PMS 需要一些包名，比如 PackageInstaller，IntentFilterVerifier 等等！</span></span><br><span class="line">        <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">            mRequiredVerifierPackage = getRequiredButNotReallyRequiredVerifierLPr();</span><br><span class="line">            mRequiredInstallerPackage = getRequiredInstallerLPr();</span><br><span class="line">            mRequiredUninstallerPackage = getRequiredUninstallerLPr();</span><br><span class="line">            mIntentFilterVerifierComponent = getIntentFilterVerifierComponentNameLPr();</span><br><span class="line">            mIntentFilterVerifier = <span class="keyword">new</span> IntentVerifierProxy(mContext,</span><br><span class="line">                    mIntentFilterVerifierComponent);</span><br><span class="line">            mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">                    PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);</span><br><span class="line">            mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">                    PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mRequiredVerifierPackage = <span class="keyword">null</span>;</span><br><span class="line">            mRequiredInstallerPackage = <span class="keyword">null</span>;</span><br><span class="line">            mRequiredUninstallerPackage = <span class="keyword">null</span>;</span><br><span class="line">            mIntentFilterVerifierComponent = <span class="keyword">null</span>;</span><br><span class="line">            mIntentFilterVerifier = <span class="keyword">null</span>;</span><br><span class="line">            mServicesSystemSharedLibraryPackageName = <span class="keyword">null</span>;</span><br><span class="line">            mSharedSystemSharedLibraryPackageName = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【2】建立 PackageInstallerService 服务对象，用于 package 的安装！</span></span><br><span class="line">        mInstallerService = <span class="keyword">new</span> PackageInstallerService(context, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ComponentName ephemeralResolverComponent = getEphemeralResolverLPr();</span><br><span class="line">        <span class="keyword">final</span> ComponentName ephemeralInstallerComponent = getEphemeralInstallerLPr();</span><br><span class="line">        <span class="comment">// both the installer and resolver must be present to enable ephemeral</span></span><br><span class="line">        <span class="keyword">if</span> (ephemeralInstallerComponent != <span class="keyword">null</span> &amp;&amp; ephemeralResolverComponent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Ephemeral activated; resolver: "</span> + ephemeralResolverComponent</span><br><span class="line">                        + <span class="string">" installer:"</span> + ephemeralInstallerComponent);</span><br><span class="line">            &#125;</span><br><span class="line">            mEphemeralResolverComponent = ephemeralResolverComponent;</span><br><span class="line">            mEphemeralInstallerComponent = ephemeralInstallerComponent;</span><br><span class="line">            setUpEphemeralInstallerActivityLP(mEphemeralInstallerComponent);</span><br><span class="line">            mEphemeralResolverConnection =</span><br><span class="line">                    <span class="keyword">new</span> EphemeralResolverConnection(mContext, mEphemeralResolverComponent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_EPHEMERAL) &#123;</span><br><span class="line">                <span class="keyword">final</span> String missingComponent =</span><br><span class="line">                        (ephemeralResolverComponent == <span class="keyword">null</span>)</span><br><span class="line">                        ? (ephemeralInstallerComponent == <span class="keyword">null</span>)</span><br><span class="line">                                ? <span class="string">"resolver and installer"</span></span><br><span class="line">                                : <span class="string">"resolver"</span></span><br><span class="line">                        : <span class="string">"installer"</span>;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Ephemeral deactivated; missing "</span> + missingComponent);</span><br><span class="line">            &#125;</span><br><span class="line">            mEphemeralResolverComponent = <span class="keyword">null</span>;</span><br><span class="line">            mEphemeralInstallerComponent = <span class="keyword">null</span>;</span><br><span class="line">            mEphemeralResolverConnection = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mEphemeralApplicationRegistry = <span class="keyword">new</span> EphemeralApplicationRegistry(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="comment">// synchronized (mPackages)</span></span><br><span class="line">    &#125; <span class="comment">// synchronized (mInstallLock)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 GC 操作，回收系统资源！</span></span><br><span class="line">    Runtime.getRuntime().gc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The initial scanning above does many calls into installd while</span></span><br><span class="line">    <span class="comment">// holding the mPackages lock, but we're mostly interested in yelling</span></span><br><span class="line">    <span class="comment">// once we have a booted system.</span></span><br><span class="line">    mInstaller.setWarnIfHeld(mPackages);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】将自身加入本地服务管理中，方便系统自身访问！</span></span><br><span class="line">    LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个阶段逻辑很简单，我们不多分析！</p><h1 id="1-获得一些-PMS-会用到的应用的包名"><a href="#1-获得一些-PMS-会用到的应用的包名" class="headerlink" title="1 获得一些 PMS 会用到的应用的包名"></a>1 获得一些 PMS 会用到的应用的包名</h1><h2 id="1-1-PackageMS-getRequiredButNotReallyRequiredVerifierLPr"><a href="#1-1-PackageMS-getRequiredButNotReallyRequiredVerifierLPr" class="headerlink" title="1.1 PackageMS.getRequiredButNotReallyRequiredVerifierLPr"></a>1.1 PackageMS.getRequiredButNotReallyRequiredVerifierLPr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="function">String <span class="title">getRequiredButNotReallyRequiredVerifierLPr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// android.intent.action.PACKAGE_NEEDS_VERIFICATION</span></span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PACKAGE_NEEDS_VERIFICATION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;ResolveInfo&gt; matches = queryIntentReceiversInternal(intent, PACKAGE_MIME_TYPE,</span><br><span class="line">            MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE,</span><br><span class="line">            UserHandle.USER_SYSTEM);</span><br><span class="line">    <span class="keyword">if</span> (matches.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> matches.get(<span class="number">0</span>).getComponentInfo().packageName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matches.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"There should probably be a verifier, but, none were found"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There must be exactly one verifier; found "</span> + matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-PackageMS-getRequiredInstallerLPr"><a href="#1-2-PackageMS-getRequiredInstallerLPr" class="headerlink" title="1.2 PackageMS.getRequiredInstallerLPr"></a>1.2 PackageMS.getRequiredInstallerLPr</h2><p>获得 packageInstaller 的包名！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="function">String <span class="title">getRequiredInstallerLPr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_INSTALL_PACKAGE);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">    intent.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(<span class="string">"foo.apk"</span>)), PACKAGE_MIME_TYPE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;ResolveInfo&gt; matches = queryIntentActivitiesInternal(intent, PACKAGE_MIME_TYPE,</span><br><span class="line">            MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE,</span><br><span class="line">            UserHandle.USER_SYSTEM);</span><br><span class="line">    <span class="keyword">if</span> (matches.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        ResolveInfo resolveInfo = matches.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!resolveInfo.activityInfo.applicationInfo.isPrivilegedApp()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The installer must be a privileged app"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matches.get(<span class="number">0</span>).getComponentInfo().packageName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There must be exactly one installer; found "</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-3-PackageMS-getRequiredUninstallerLPr"><a href="#1-3-PackageMS-getRequiredUninstallerLPr" class="headerlink" title="1.3 PackageMS.getRequiredUninstallerLPr"></a>1.3 PackageMS.getRequiredUninstallerLPr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="function">String <span class="title">getRequiredUninstallerLPr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">    intent.setData(Uri.fromParts(PACKAGE_SCHEME, <span class="string">"foo.bar"</span>, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ResolveInfo resolveInfo = resolveIntent(intent, <span class="keyword">null</span>,</span><br><span class="line">            MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE,</span><br><span class="line">            UserHandle.USER_SYSTEM);</span><br><span class="line">    <span class="keyword">if</span> (resolveInfo == <span class="keyword">null</span> ||</span><br><span class="line">            mResolveActivity.name.equals(resolveInfo.getComponentInfo().name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There must be exactly one uninstaller; found "</span></span><br><span class="line">                + resolveInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolveInfo.getComponentInfo().packageName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-PackageMS-getIntentFilterVerifierComponentNameLPr"><a href="#1-4-PackageMS-getIntentFilterVerifierComponentNameLPr" class="headerlink" title="1.4 PackageMS.getIntentFilterVerifierComponentNameLPr"></a>1.4 PackageMS.getIntentFilterVerifierComponentNameLPr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="function">ComponentName <span class="title">getIntentFilterVerifierComponentNameLPr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_INTENT_FILTER_NEEDS_VERIFICATION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> List&lt;ResolveInfo&gt; matches = queryIntentReceiversInternal(intent, PACKAGE_MIME_TYPE,</span><br><span class="line">            MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE,</span><br><span class="line">            UserHandle.USER_SYSTEM);</span><br><span class="line">    ResolveInfo best = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = matches.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> ResolveInfo cur = matches.get(i);</span><br><span class="line">        <span class="keyword">final</span> String packageName = cur.getComponentInfo().packageName;</span><br><span class="line">        <span class="keyword">if</span> (checkPermission(android.Manifest.permission.INTENT_FILTER_VERIFICATION_AGENT,</span><br><span class="line">                packageName, UserHandle.USER_SYSTEM) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (best == <span class="keyword">null</span> || cur.priority &gt; best.priority) &#123;</span><br><span class="line">            best = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (best != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> best.getComponentInfo().getComponentName();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There must be at least one intent filter verifier"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-PackageMS-getRequiredSharedLibraryLPr"><a href="#1-5-PackageMS-getRequiredSharedLibraryLPr" class="headerlink" title="1.5 PackageMS.getRequiredSharedLibraryLPr"></a>1.5 PackageMS.getRequiredSharedLibraryLPr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a library that contains components apps can invoke. For</span></span><br><span class="line"><span class="comment"> * example, a services for apps to bind to, or standard chooser UI,</span></span><br><span class="line"><span class="comment"> * etc. This library is versioned and backwards compatible. Clients</span></span><br><span class="line"><span class="comment"> * should check its version via &#123;<span class="doctag">@link</span> android.ext.services.Version</span></span><br><span class="line"><span class="comment"> * #getVersionCode()&#125; and avoid calling APIs added in later versions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_SHARED_LIBRARY_SERVICES = <span class="string">"android.ext.services"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is a library that contains components apps can dynamically</span></span><br><span class="line"><span class="comment"> * load. For example, new widgets, helper classes, etc. This library</span></span><br><span class="line"><span class="comment"> * is versioned and backwards compatible. Clients should check its</span></span><br><span class="line"><span class="comment"> * version via &#123;<span class="doctag">@link</span> android.ext.shared.Version#getVersionCode()&#125;</span></span><br><span class="line"><span class="comment"> * and avoid calling APIs added in later versions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_SHARED_LIBRARY_SHARED = <span class="string">"android.ext.shared"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    mServicesSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">            PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);</span><br><span class="line">    mSharedSystemSharedLibraryPackageName = getRequiredSharedLibraryLPr(</span><br><span class="line">            PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);</span><br><span class="line">```                        </span><br><span class="line">```java</span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@NonNull</span> <span class="function">String <span class="title">getRequiredSharedLibraryLPr</span><span class="params">(String libraryName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            SharedLibraryEntry libraryEntry = mSharedLibraries.get(libraryName);</span><br><span class="line">            <span class="keyword">if</span> (libraryEntry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Missing required shared library:"</span> + libraryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> libraryEntry.apk;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-new-PackageInstallerService-创建安装服务对象"><a href="#2-new-PackageInstallerService-创建安装服务对象" class="headerlink" title="2 new PackageInstallerService - 创建安装服务对象"></a>2 new PackageInstallerService - 创建安装服务对象</h1><p>创建 PackageInstallerService 服务对象，用于应用的安装，关于安装，这个我们先不关注！ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerService</span><span class="params">(Context context, PackageManagerService pm)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mPm = pm; <span class="comment">// pms 的应用！</span></span><br><span class="line"></span><br><span class="line">    mInstallThread = <span class="keyword">new</span> HandlerThread(TAG); <span class="comment">// 一个线程，用于处理 install 操作！</span></span><br><span class="line">    mInstallThread.start();</span><br><span class="line"></span><br><span class="line">    mInstallHandler = <span class="keyword">new</span> Handler(mInstallThread.getLooper()); <span class="comment">// 该线程的 Handler！</span></span><br><span class="line">    <span class="comment">//【2.1】创建了一个 Callbacks 回调对象，用于处理事务的变化，通知需要监听事务变化的远程对象！</span></span><br><span class="line">    mCallbacks = <span class="keyword">new</span> Callbacks(mInstallThread.getLooper());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于保存安装事务项的文件对象！</span></span><br><span class="line">    mSessionsFile = <span class="keyword">new</span> AtomicFile(</span><br><span class="line">            <span class="keyword">new</span> File(Environment.getDataSystemDirectory(), <span class="string">"install_sessions.xml"</span>));</span><br><span class="line">    mSessionsDir = <span class="keyword">new</span> File(Environment.getDataSystemDirectory(), <span class="string">"install_sessions"</span>);</span><br><span class="line">    mSessionsDir.mkdirs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【2.2】读取安装事务！</span></span><br><span class="line">        readSessionsLocked();</span><br><span class="line"></span><br><span class="line">        reconcileStagesLocked(StorageManager.UUID_PRIVATE_INTERNAL, <span class="keyword">false</span> <span class="comment">/*isEphemeral*/</span>);</span><br><span class="line">        reconcileStagesLocked(StorageManager.UUID_PRIVATE_INTERNAL, <span class="keyword">true</span> <span class="comment">/*isEphemeral*/</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ArraySet&lt;File&gt; unclaimedIcons = newArraySet(</span><br><span class="line">                mSessionsDir.listFiles());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ignore stages and icons claimed by active sessions</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mSessions.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageInstallerSession session = mSessions.valueAt(i);</span><br><span class="line">            unclaimedIcons.remove(buildAppIconFile(session.sessionId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clean up orphaned icons</span></span><br><span class="line">        <span class="keyword">for</span> (File icon : unclaimedIcons) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Deleting orphan icon "</span> + icon);</span><br><span class="line">            icon.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 PackageInstallerService 有如下的集合，来保存安装事务！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的事务，有效和无效的</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseBooleanArray mAllocatedSessions = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存那些有效的安装事务！</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;PackageInstallerSession&gt; mSessions = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存那些无效的历史事务！</span></span><br><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mSessions"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;PackageInstallerSession&gt; mHistoricalSessions = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br></pre></td></tr></table></figure></p><p>在创建 PackageInstallerService 的时候会调用 readSessionsLocked 读取重启之前的所有安装事务！</p><h2 id="2-1-new-Callback"><a href="#2-1-new-Callback" class="headerlink" title="2.1 new Callback"></a>2.1 new Callback</h2><p>Callback 本质上也是一个 Handler 对象，其 Looper 对象来自 mInstallThread.getLooper()，用于处理耗时操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callbacks</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Callbacks</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Callback 用于处理和 session 相关的消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_CREATED = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_BADGING_CHANGED = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_ACTIVE_CHANGED = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_PROGRESS_CHANGED = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_SESSION_FINISHED = <span class="number">5</span>;</span><br></pre></td></tr></table></figure></p><p>本质上讲，Callback 只是这些消息的中转站，它会将消息发送给注册到其内部的远程回调接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RemoteCallbackList&lt;IPackageInstallerCallback&gt;</span><br><span class="line">        mCallbacks = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>CallBack 内部提供了注册相关的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(IPackageInstallerCallback callback, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    mCallbacks.register(callback, <span class="keyword">new</span> UserHandle(userId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(IPackageInstallerCallback callback)</span> </span>&#123;</span><br><span class="line">    mCallbacks.unregister(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下，其实如何处理回调的，当有 Session 发生变化后，下面的接口会被触发调用！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionCreated</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_CREATED, sessionId, userId).sendToTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionBadgingChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_BADGING_CHANGED, sessionId, userId).sendToTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionActiveChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_ACTIVE_CHANGED, sessionId, userId, active).sendToTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifySessionProgressChanged</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_PROGRESS_CHANGED, sessionId, userId, progress).sendToTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifySessionFinished</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">    obtainMessage(MSG_SESSION_FINISHED, sessionId, userId, success).sendToTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些接口会发送消息，处理仍然是在 CallBack 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = msg.arg2;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> n = mCallbacks.beginBroadcast();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageInstallerCallback callback = mCallbacks.getBroadcastItem(i);</span><br><span class="line">        <span class="keyword">final</span> UserHandle user = (UserHandle) mCallbacks.getBroadcastCookie(i);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> dispatch notifications for slave profiles</span></span><br><span class="line">        <span class="keyword">if</span> (userId == user.getIdentifier()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用 invokeCallback 分发 session 变化的消息！</span></span><br><span class="line">                invokeCallback(callback, msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mCallbacks.finishBroadcast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invokeCallback 方法将 session 变化的消息会转发给所有注册到其内部的远程回调接口！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeCallback</span><span class="params">(IPackageInstallerCallback callback, Message msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = msg.arg1;</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_CREATED:</span><br><span class="line">            callback.onSessionCreated(sessionId);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_BADGING_CHANGED:</span><br><span class="line">            callback.onSessionBadgingChanged(sessionId);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_ACTIVE_CHANGED:</span><br><span class="line">            callback.onSessionActiveChanged(sessionId, (<span class="keyword">boolean</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_PROGRESS_CHANGED:</span><br><span class="line">            callback.onSessionProgressChanged(sessionId, (<span class="keyword">float</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_SESSION_FINISHED:</span><br><span class="line">            callback.onSessionFinished(sessionId, (<span class="keyword">boolean</span>) msg.obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-PackageInstallerService-readSessionsLocked-0"><a href="#2-2-PackageInstallerService-readSessionsLocked-0" class="headerlink" title="2.2 PackageInstallerService.readSessionsLocked[0]"></a>2.2 PackageInstallerService.readSessionsLocked[0]</h2><p>readSessionsLocked 用来读取事务！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readSessionsLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGD) Slog.v(TAG, <span class="string">"readSessionsLocked()"</span>);</span><br><span class="line"></span><br><span class="line">    mSessions.clear();</span><br><span class="line"></span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = mSessionsFile.openRead();</span><br><span class="line">        <span class="keyword">final</span> XmlPullParser in = Xml.newPullParser();</span><br><span class="line">        in.setInput(fis, StandardCharsets.UTF_8.name());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">while</span> ((type = in.next()) != END_DOCUMENT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type == START_TAG) &#123;</span><br><span class="line">                <span class="keyword">final</span> String tag = in.getName();</span><br><span class="line">                <span class="keyword">if</span> (TAG_SESSION.equals(tag)) &#123; <span class="comment">// session 标签，用户封装指定的安装事务！</span></span><br><span class="line">                    <span class="comment">//【2.2】读取安装事务，返回 PackageInstallerSession 对象！</span></span><br><span class="line">                    <span class="keyword">final</span> PackageInstallerSession session = readSessionLocked(in);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 计算事务的有效性！</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> age = System.currentTimeMillis() - session.createdMillis;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> valid;</span><br><span class="line">                    <span class="comment">// 如果大于 MAX_AGE_MILLIS 3 天，那就是无效的，否则是有效的！</span></span><br><span class="line">                    <span class="keyword">if</span> (age &gt;= MAX_AGE_MILLIS) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"Abandoning old session first created at "</span></span><br><span class="line">                                + session.createdMillis);</span><br><span class="line">                        valid = <span class="keyword">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        valid = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        <span class="comment">// 有效的事务</span></span><br><span class="line">                        mSessions.put(session.sessionId, session);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 无效的事务，用于 debug，比如 dumpsys 等等！</span></span><br><span class="line">                        mHistoricalSessions.put(session.sessionId, session);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 所有的事务！</span></span><br><span class="line">                    mAllocatedSessions.put(session.sessionId, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// Missing sessions are okay, probably first boot</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | XmlPullParserException e) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Failed reading install sessions"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(fis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>判断一个事务是否有效的依据是，其实是否是在 3 天时间间隔之前创建的！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_AGE_MILLIS = <span class="number">3</span> * DateUtils.DAY_IN_MILLIS;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-1-PackageInstallerService-readSessionsLocked-1"><a href="#2-2-1-PackageInstallerService-readSessionsLocked-1" class="headerlink" title="2.2.1 PackageInstallerService.readSessionsLocked[1]"></a>2.2.1 PackageInstallerService.readSessionsLocked[1]</h3><p>我们看下解析单个事务的具体过程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageInstallerSession <span class="title">readSessionLocked</span><span class="params">(XmlPullParser in)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">        XmlPullParserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = readIntAttribute(in, ATTR_SESSION_ID); <span class="comment">// sessionId 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = readIntAttribute(in, ATTR_USER_ID); <span class="comment">// userId 属性 </span></span><br><span class="line">    <span class="keyword">final</span> String installerPackageName = readStringAttribute(in, ATTR_INSTALLER_PACKAGE_NAME); <span class="comment">// installerPackageName 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> installerUid = readIntAttribute(in, ATTR_INSTALLER_UID, mPm.getPackageUid(</span><br><span class="line">            installerPackageName, PackageManager.MATCH_UNINSTALLED_PACKAGES, userId)); <span class="comment">// installerUid 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> createdMillis = readLongAttribute(in, ATTR_CREATED_MILLIS); <span class="comment">// createdMillis 属性</span></span><br><span class="line">    <span class="keyword">final</span> String stageDirRaw = readStringAttribute(in, ATTR_SESSION_STAGE_DIR); <span class="comment">// sessionStageDir 属性</span></span><br><span class="line">    <span class="keyword">final</span> File stageDir = (stageDirRaw != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(stageDirRaw) : <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">final</span> String stageCid = readStringAttribute(in, ATTR_SESSION_STAGE_CID); <span class="comment">// sessionStageCid 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> prepared = readBooleanAttribute(in, ATTR_PREPARED, <span class="keyword">true</span>); <span class="comment">// prepared 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> sealed = readBooleanAttribute(in, ATTR_SEALED); <span class="comment">// sealed 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2.2.1】创建了一个 SessionParams 对象，封装事务详细参数</span></span><br><span class="line">    <span class="keyword">final</span> SessionParams params = <span class="keyword">new</span> SessionParams(</span><br><span class="line">            SessionParams.MODE_INVALID);</span><br><span class="line">    params.mode = readIntAttribute(in, ATTR_MODE); <span class="comment">// mode 属性</span></span><br><span class="line">    params.installFlags = readIntAttribute(in, ATTR_INSTALL_FLAGS); <span class="comment">// installFlags 属性</span></span><br><span class="line">    params.installLocation = readIntAttribute(in, ATTR_INSTALL_LOCATION); <span class="comment">// installLocation 属性</span></span><br><span class="line">    params.sizeBytes = readLongAttribute(in, ATTR_SIZE_BYTES); <span class="comment">// sizeBytes 属性</span></span><br><span class="line">    params.appPackageName = readStringAttribute(in, ATTR_APP_PACKAGE_NAME); <span class="comment">// appPackageName 属性</span></span><br><span class="line">    params.appIcon = readBitmapAttribute(in, ATTR_APP_ICON); <span class="comment">// appIcon 属性</span></span><br><span class="line">    params.appLabel = readStringAttribute(in, ATTR_APP_LABEL); <span class="comment">// appLabel 属性</span></span><br><span class="line">    params.originatingUri = readUriAttribute(in, ATTR_ORIGINATING_URI); <span class="comment">// originatingUri 属性</span></span><br><span class="line">    params.originatingUid =</span><br><span class="line">            readIntAttribute(in, ATTR_ORIGINATING_UID, SessionParams.UID_UNKNOWN); <span class="comment">// originatingUid 属性</span></span><br><span class="line">    params.referrerUri = readUriAttribute(in, ATTR_REFERRER_URI); <span class="comment">// referrerUri 属性</span></span><br><span class="line">    params.abiOverride = readStringAttribute(in, ATTR_ABI_OVERRIDE); <span class="comment">// abiOverride 属性</span></span><br><span class="line">    params.volumeUuid = readStringAttribute(in, ATTR_VOLUME_UUID); <span class="comment">// volumeUuid 属性</span></span><br><span class="line">    <span class="comment">//【2.2.2】读取授予的运行时权限！</span></span><br><span class="line">    params.grantedRuntimePermissions = readGrantedRuntimePermissions(in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> File appIconFile = buildAppIconFile(sessionId);</span><br><span class="line">    <span class="keyword">if</span> (appIconFile.exists()) &#123;</span><br><span class="line">        params.appIcon = BitmapFactory.decodeFile(appIconFile.getAbsolutePath());</span><br><span class="line">        params.appIconLastModified = appIconFile.lastModified();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2.2.3】创建事务对象 PackageInstallerSession！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PackageInstallerSession(mInternalCallback, mContext, mPm,</span><br><span class="line">            mInstallThread.getLooper(), sessionId, userId, installerPackageName, installerUid,</span><br><span class="line">            params, createdMillis, stageDir, stageCid, prepared, sealed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法步骤：</p><ul><li>解析 xml；</li><li>创建事务对象 PackageInstallerSession；</li></ul><h4 id="2-2-1-1-new-SessionParams"><a href="#2-2-1-1-new-SessionParams" class="headerlink" title="2.2.1.1 new SessionParams"></a>2.2.1.1 new SessionParams</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SessionParams</span><span class="params">(<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mode = mode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建了一个 SessionParams，用于封装事务参数！</p><h4 id="2-2-1-2-PackageInstallerService-readGrantedRuntimePermissions"><a href="#2-2-1-2-PackageInstallerService-readGrantedRuntimePermissions" class="headerlink" title="2.2.1.2 PackageInstallerService.readGrantedRuntimePermissions"></a>2.2.1.2 PackageInstallerService.readGrantedRuntimePermissions</h4><p>readGrantedRuntimePermissions 方法会读取授予的运行时权限！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] readGrantedRuntimePermissions(XmlPullParser in)</span><br><span class="line">        <span class="keyword">throws</span> IOException, XmlPullParserException &#123;</span><br><span class="line">    List&lt;String&gt; permissions = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> outerDepth = in.getDepth();</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">while</span> ((type = in.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; (type != XmlPullParser.END_TAG || in.getDepth() &gt; outerDepth)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (TAG_GRANTED_RUNTIME_PERMISSION.equals(in.getName())) &#123; <span class="comment">// 读取 granted-runtime-permission 子标签！</span></span><br><span class="line">            String permission = readStringAttribute(in, ATTR_NAME); <span class="comment">// 读取 name 属性，即运行时权限名</span></span><br><span class="line">            <span class="keyword">if</span> (permissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                permissions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将权限名保存到 permissions，并返回！！</span></span><br><span class="line">            permissions.add(permission);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (permissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] permissionsArray = <span class="keyword">new</span> String[permissions.size()];</span><br><span class="line">    permissions.toArray(permissionsArray);</span><br><span class="line">    <span class="keyword">return</span> permissionsArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法很简单，这就不多说了！</p><h4 id="2-2-1-3-new-PackageInstallerSession"><a href="#2-2-1-3-new-PackageInstallerSession" class="headerlink" title="2.2.1.3 new PackageInstallerSession"></a>2.2.1.3 new PackageInstallerSession</h4><p>创建一个 PackageInstallerSession，参数来自前面的解析！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerSession</span><span class="params">(PackageInstallerService.InternalCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, PackageManagerService pm, Looper looper, <span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        String installerPackageName, <span class="keyword">int</span> installerUid, SessionParams params, <span class="keyword">long</span> createdMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">        File stageDir, String stageCid, <span class="keyword">boolean</span> prepared, <span class="keyword">boolean</span> sealed)</span> </span>&#123;</span><br><span class="line">    mCallback = callback; <span class="comment">// InternalCallback 对象，用于监听和相应 session 的变化！！</span></span><br><span class="line">    mContext = context;</span><br><span class="line">    mPm = pm;</span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(looper, mHandlerCallback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">    <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    <span class="keyword">this</span>.installerPackageName = installerPackageName;</span><br><span class="line">    <span class="keyword">this</span>.installerUid = installerUid;</span><br><span class="line">    <span class="keyword">this</span>.params = params;</span><br><span class="line">    <span class="keyword">this</span>.createdMillis = createdMillis;</span><br><span class="line">    <span class="keyword">this</span>.stageDir = stageDir;</span><br><span class="line">    <span class="keyword">this</span>.stageCid = stageCid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((stageDir == <span class="keyword">null</span>) == (stageCid == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">"Exactly one of stageDir or stageCid stage must be set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mPrepared = prepared;</span><br><span class="line">    mSealed = sealed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Device owners are allowed to silently install packages, so the permission check is</span></span><br><span class="line">    <span class="comment">// waived if the installer is the device owner.</span></span><br><span class="line">    DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">            Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPermissionGranted =</span><br><span class="line">            (mPm.checkUidPermission(android.Manifest.permission.INSTALL_PACKAGES, installerUid)</span><br><span class="line">                    == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isInstallerRoot = (installerUid == Process.ROOT_UID); <span class="comment">// 安装者是否是 root 级别！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> forcePermissionPrompt =</span><br><span class="line">            (params.installFlags &amp; PackageManager.INSTALL_FORCE_PERMISSION_PROMPT) != <span class="number">0</span>;</span><br><span class="line">    mIsInstallerDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">            installerPackageName);</span><br><span class="line">    <span class="keyword">if</span> ((isPermissionGranted</span><br><span class="line">                    || isInstallerRoot</span><br><span class="line">                    || mIsInstallerDeviceOwner)</span><br><span class="line">            &amp;&amp; !forcePermissionPrompt) &#123;</span><br><span class="line">        mPermissionsAccepted = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mPermissionsAccepted = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> uid = mPm.getPackageUid(PackageManagerService.DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">                PackageManager.MATCH_SYSTEM_ONLY, UserHandle.USER_SYSTEM);</span><br><span class="line">        defaultContainerGid = UserHandle.getSharedAppGid(uid);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在创建 PackageInstallerSession 的时候，我们传入了一个 mInternalCallback，他是 PackageInstallerService 的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InternalCallback mInternalCallback = <span class="keyword">new</span> InternalCallback();</span><br></pre></td></tr></table></figure><p>这个接口用于监听和相应 Sessions 的变化，当 Sessions 发生变化后，会通过该接口，将相应的消息抓发给 Callback，Callback 会将消息再次转发给远程回调接口！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InternalCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionBadgingChanged</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionBadgingChanged(session.sessionId, session.userId);</span><br><span class="line">        writeSessionsAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionActiveChanged</span><span class="params">(PackageInstallerSession session, <span class="keyword">boolean</span> active)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionActiveChanged(session.sessionId, session.userId, active);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安装事务的进度发生变化！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionProgressChanged</span><span class="params">(PackageInstallerSession session, <span class="keyword">float</span> progress)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionProgressChanged(session.sessionId, session.userId, progress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理事务完成的消息！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionFinished</span><span class="params">(<span class="keyword">final</span> PackageInstallerSession session, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        mCallbacks.notifySessionFinished(session.sessionId, session.userId, success);</span><br><span class="line"></span><br><span class="line">        mInstallHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">                    <span class="comment">// 将已经完成的消息移除 mSessions，加入到 mHistoricalSessions 中！</span></span><br><span class="line">                    mSessions.remove(session.sessionId);</span><br><span class="line">                    mHistoricalSessions.put(session.sessionId, session);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> File appIconFile = buildAppIconFile(session.sessionId);</span><br><span class="line">                    <span class="keyword">if</span> (appIconFile.exists()) &#123;</span><br><span class="line">                        appIconFile.delete();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    writeSessionsLocked(); <span class="comment">// 更新 sessions 变化到本地文件中！</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionPrepared</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// We prepared the destination to write into; we want to persist</span></span><br><span class="line">        <span class="comment">// this, but it's not critical enough to block for.</span></span><br><span class="line">        writeSessionsAsync(); <span class="comment">// 将 sessions 数据写到本地文件中！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSessionSealedBlocking</span><span class="params">(PackageInstallerSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// It's very important that we block until we've recorded the</span></span><br><span class="line">        <span class="comment">// session as being sealed, since we never want to allow mutation</span></span><br><span class="line">        <span class="comment">// after sealing.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">            writeSessionsLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于 Session，我们想讲这么多，在分析安装的过程中，我们在深入分析，我们只需要知道，每一个安装任务都会封装成一个 Session 即可！</p><h1 id="3-new-PackageManagerInternalImpl-系统进程内部调用"><a href="#3-new-PackageManagerInternalImpl-系统进程内部调用" class="headerlink" title="3 new PackageManagerInternalImpl - 系统进程内部调用"></a>3 new PackageManagerInternalImpl - 系统进程内部调用</h1><p>在 pms 的构造器结尾，调用了 LocalServices，将一个 PackageManagerInternalImpl 对象注册到本地服务管理中，这种方式用于系统进程内部服务间的通信，因为不需要使用 Binder 线程，所以效率更高！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【3】将自身加入本地服务管理中，方便系统自身访问！</span></span><br><span class="line">LocalServices.addService(PackageManagerInternal.class, <span class="keyword">new</span> PackageManagerInternalImpl());</span><br></pre></td></tr></table></figure><p>LocalServices 内部保存着一个静态的 ArrayMap 来保存所有注册到其内部的服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayMap&lt;Class&lt;?&gt;, Object&gt; sLocalServiceObjects =</span><br><span class="line">        <span class="keyword">new</span> ArrayMap&lt;Class&lt;?&gt;, Object&gt;();</span><br></pre></td></tr></table></figure><p>通过其内部的 addService 方法，将系统服务添加进来！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addService</span><span class="params">(Class&lt;T&gt; type, T service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sLocalServiceObjects) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sLocalServiceObjects.containsKey(type)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Overriding service registration"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sLocalServiceObjects.put(type, service);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PackageManagerInternalImpl 对象继承了 PackageManagerInternal 并实现了其抽象方法，其内部有多个方案来供其他服务访问 PMS：</p><h2 id="3-1-注册系统服务-provider"><a href="#3-1-注册系统服务-provider" class="headerlink" title="3.1 注册系统服务 provider"></a>3.1 注册系统服务 provider</h2><p>后续会有其他的系统服务启动，他们会把自身的 provider 注册进入 PMS，后续 PMS 会授予他们权限！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageManagerInternalImpl</span> <span class="keyword">extends</span> <span class="title">PackageManagerInternal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 LocationManagerService 时会调用该方法，LocationManagerService 会创建一个 PackagesProvider 对象！</span></span><br><span class="line">    <span class="comment">// 用于封装其 provider name！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocationPackagesProvider</span><span class="params">(PackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mLocationPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setLocationPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 VoiceInteractionManagerService 时会调用该方法！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVoiceInteractionPackagesProvider</span><span class="params">(PackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mVoiceInteractionPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setVoiceInteractionPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 TelecomLoaderService 时会调用该方法，TelecomLoaderService 创建时,</span></span><br><span class="line">    <span class="comment">// 会调用 registerDefaultAppProviders，该方法会触发注册 provider！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSmsAppPackagesProvider</span><span class="params">(PackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mSmsAppPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setSmsAppPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 TelecomLoaderService 时会调用该方法，同上！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDialerAppPackagesProvider</span><span class="params">(PackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mDialerAppPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setDialerAppPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 TelecomLoaderService 时会调用该方法，同上！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimCallManagerPackagesProvider</span><span class="params">(PackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mSimCallManagerPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setSimCallManagerPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ContentService 时会调用该方法，注册 provider！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSyncAdapterPackagesprovider</span><span class="params">(SyncAdapterPackagesProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">// 保存到 DefaultPermissionGrantPolicy.mSyncAdapterPackagesProvider 变量中！</span></span><br><span class="line">            mDefaultPermissionPolicy.setSyncAdapterPackagesProviderLPw(provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的内容，后面会遇到！</p><h2 id="3-2-授予默认权限接口"><a href="#3-2-授予默认权限接口" class="headerlink" title="3.2 授予默认权限接口"></a>3.2 授予默认权限接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageManagerInternalImpl</span> <span class="keyword">extends</span> <span class="title">PackageManagerInternal</span> </span>&#123;</span><br><span class="line">    ... ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grantDefaultPermissionsToDefaultSmsApp</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSmsAppLPr(</span><br><span class="line">                    packageName, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grantDefaultPermissionsToDefaultDialerApp</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mSettings.setDefaultDialerPackageNameLPw(packageName, userId);</span><br><span class="line">            mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultDialerAppLPr(</span><br><span class="line">                    packageName, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grantDefaultPermissionsToDefaultSimCallManager</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mDefaultPermissionPolicy.grantDefaultPermissionsToDefaultSimCallManagerLPr(</span><br><span class="line">                    packageName, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上方法都是在 TelecomLoaderService 服务中调用的！</p><h1 id="4-PackageMS-updatePackagesIfNeeded-执行-Odex-优化"><a href="#4-PackageMS-updatePackagesIfNeeded-执行-Odex-优化" class="headerlink" title="4 PackageMS.updatePackagesIfNeeded - 执行 Odex 优化"></a>4 PackageMS.updatePackagesIfNeeded - 执行 Odex 优化</h1><p>在 SystemServer.startOtherServices 中，会调用 updatePackagesIfNeeded 更新 package！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, <span class="string">"UpdatePackagesIfNeeded"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mPackageManagerService.updatePackagesIfNeeded();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        reportWtf(<span class="string">"update packages"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去看看 updatePackagesIfNeeded 方法，该方法的主要作用是对应用进行 Odex 优化！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePackagesIfNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    enforceSystemOrRoot(<span class="string">"Only the system can request package update"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】是否是通过 OTA 升级的！</span></span><br><span class="line">    <span class="keyword">boolean</span> causeUpgrade = isUpgrade();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】是否是第一次启动，包括出场第一次开机，factory reset，如果是从 Android N 升级上来的，也看作是第一次启动！</span></span><br><span class="line">    <span class="keyword">boolean</span> causeFirstBoot = isFirstBoot() || mIsPreNUpgrade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need to re-extract after a pruned cache, as AoT-ed files will be out of date.</span></span><br><span class="line">    <span class="keyword">boolean</span> causePrunedCache = VMRuntime.didPruneDalvikCache();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】如果不是上面几种情况，不处理！</span></span><br><span class="line">    <span class="keyword">if</span> (!causeUpgrade &amp;&amp; !causeFirstBoot &amp;&amp; !causePrunedCache) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4.1】获得要执行 odex 优化的 package！</span></span><br><span class="line">    List&lt;PackageParser.Package&gt; pkgs;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        pkgs = PackageManagerServiceUtils.getPackagesForDexopt(mPackages.values(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">    <span class="comment">//【4.2】执行 odex 优化！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] stats = performDexOptUpgrade(pkgs, mIsPreNUpgrade <span class="comment">/* showDialog */</span>,</span><br><span class="line">                getCompilerFilterForReason(causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> elapsedTimeSeconds =</span><br><span class="line">            (<span class="keyword">int</span>) TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - startTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】记录执行结果！</span></span><br><span class="line">    MetricsLogger.histogram(mContext, <span class="string">"opt_dialog_num_dexopted"</span>, stats[<span class="number">0</span>]);</span><br><span class="line">    MetricsLogger.histogram(mContext, <span class="string">"opt_dialog_num_skipped"</span>, stats[<span class="number">1</span>]);</span><br><span class="line">    MetricsLogger.histogram(mContext, <span class="string">"opt_dialog_num_failed"</span>, stats[<span class="number">2</span>]);</span><br><span class="line">    MetricsLogger.histogram(mContext, <span class="string">"opt_dialog_num_total"</span>, getOptimizablePackages().size());</span><br><span class="line">    MetricsLogger.histogram(mContext, <span class="string">"opt_dialog_time_s"</span>, elapsedTimeSeconds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个过程就是收集所有的 Pacakge，然后执行 Odex 优化！</p><p>可以看到，只有</p><h2 id="4-1-PackageManagerServiceUtils-getPackagesForDexopt"><a href="#4-1-PackageManagerServiceUtils-getPackagesForDexopt" class="headerlink" title="4.1 PackageManagerServiceUtils.getPackagesForDexopt"></a>4.1 PackageManagerServiceUtils.getPackagesForDexopt</h2><p>getPackagesForDexopt 会对系统中所有扫描到的 package 进行排序！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;PackageParser.Package&gt; getPackagesForDexopt(</span><br><span class="line">        Collection&lt;PackageParser.Package&gt; packages,</span><br><span class="line">        PackageManagerService packageManagerService) &#123;</span><br><span class="line">    <span class="comment">//【1】result 用于保存排序后的所有结果，remainingPkgs 用于保存没有排序的 package</span></span><br><span class="line">    <span class="comment">// sortTemp 用于缓存排序的结果！</span></span><br><span class="line">    ArrayList&lt;PackageParser.Package&gt; remainingPkgs = <span class="keyword">new</span> ArrayList&lt;&gt;(packages); <span class="comment">// 初始化 remainingPkgs！</span></span><br><span class="line">    LinkedList&lt;PackageParser.Package&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;PackageParser.Package&gt; sortTemp = <span class="keyword">new</span> ArrayList&lt;&gt;(remainingPkgs.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4.1.1】调用 applyPackageFilter 设置优先级，然后排序！</span></span><br><span class="line">    <span class="comment">//【4.1.1.1】开始第一阶段排序，收集那些 pkg.coreApp 为 true 的应用，进行排序，然后添加到 result 中！</span></span><br><span class="line">    applyPackageFilter((pkg) -&gt; pkg.coreApp, result, remainingPkgs, sortTemp,</span><br><span class="line">            packageManagerService);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4.1.1.2】开始第二个阶段排序，条件是是否监听 ACTION_PRE_BOOT_COMPLETED 这个广播！</span></span><br><span class="line">    <span class="comment">// 手机监听该广播的 package，进行排序，结果添加到 result 中！</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PRE_BOOT_COMPLETED);</span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;String&gt; pkgNames = getPackageNamesForIntent(intent, UserHandle.USER_SYSTEM);</span><br><span class="line">    applyPackageFilter((pkg) -&gt; pkgNames.contains(pkg.packageName), result, remainingPkgs,</span><br><span class="line">            sortTemp, packageManagerService);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4.1.1.3】开始第三个阶段排序，条件是 package 是否被其他应用加载或使用，排序后结果添加到 result 中！</span></span><br><span class="line">    applyPackageFilter((pkg) -&gt; PackageDexOptimizer.isUsedByOtherApps(pkg), result,</span><br><span class="line">            remainingPkgs, sortTemp, packageManagerService);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】处理剩余的仍然没有被处理的 Package！</span></span><br><span class="line">    Predicate&lt;PackageParser.Package&gt; remainingPredicate;</span><br><span class="line">    <span class="keyword">if</span> (!remainingPkgs.isEmpty() &amp;&amp; packageManagerService.isHistoricalPackageUsageAvailable()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DEXOPT) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Looking at historical package use"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】对剩余的 package 进行比较，找到最新使用时间最晚的那个 package！</span></span><br><span class="line">        PackageParser.Package lastUsed = Collections.max(remainingPkgs, (pkg1, pkg2) -&gt;</span><br><span class="line">                Long.compare(pkg1.getLatestForegroundPackageUseTimeInMills(),</span><br><span class="line">                        pkg2.getLatestForegroundPackageUseTimeInMills()));</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DEXOPT) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Taking package "</span> + lastUsed.packageName + <span class="string">" as reference in time use"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> estimatedPreviousSystemUseTime =</span><br><span class="line">                lastUsed.getLatestForegroundPackageUseTimeInMills();</span><br><span class="line">        <span class="comment">//【2】确定过滤器</span></span><br><span class="line">        <span class="keyword">if</span> (estimatedPreviousSystemUseTime != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.1】剩余 package 的排序条件为：该应用最新使用时间距离安装超过了 7 天！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> cutoffTime = estimatedPreviousSystemUseTime - SEVEN_DAYS_IN_MILLISECONDS;</span><br><span class="line">            remainingPredicate =</span><br><span class="line">                    (pkg) -&gt; pkg.getLatestForegroundPackageUseTimeInMills() &gt;= cutoffTime;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2.2】剩余 package 的排序条件为 true，即：不过滤，处理剩下的所有 package！</span></span><br><span class="line">            remainingPredicate = (pkg) -&gt; <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先对剩余的 package 进行一次时间排序，目的是使用！</span></span><br><span class="line">        sortPackagesByUsageDate(remainingPkgs, packageManagerService);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2.3】剩余 package 的排序条件为 true，即：不过滤，处理剩下的所有 package</span></span><br><span class="line">        remainingPredicate = (pkg) -&gt; <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4.1.1.4】最后一次排序，处理剩余的仍然没有被处理的 Package，满足上面条件的 package！！</span></span><br><span class="line">    applyPackageFilter(remainingPredicate, result, remainingPkgs, sortTemp,</span><br><span class="line">            packageManagerService);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_DEXOPT) &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Packages to be dexopted: "</span> + packagesToString(result));</span><br><span class="line">        Log.i(TAG, <span class="string">"Packages skipped from dexopt: "</span> + packagesToString(remainingPkgs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】返回需要做 Odex 的排序过的 Package！</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于 getPackagesForDexopt 方法的分析就到这里！</p><h3 id="4-1-1-PackageManagerServiceUtils-applyPackageFilter"><a href="#4-1-1-PackageManagerServiceUtils-applyPackageFilter" class="headerlink" title="4.1.1 PackageManagerServiceUtils.applyPackageFilter"></a>4.1.1 PackageManagerServiceUtils.applyPackageFilter</h3><p>applyPackageFilter 方法通过传入的过滤条件，收集满足条件的 package，对其进行排序！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyPackageFilter</span><span class="params">(Predicate&lt;PackageParser.Package&gt; filter,</span></span></span><br><span class="line"><span class="function"><span class="params">        Collection&lt;PackageParser.Package&gt; result,</span></span></span><br><span class="line"><span class="function"><span class="params">        Collection&lt;PackageParser.Package&gt; packages,</span></span></span><br><span class="line"><span class="function"><span class="params">        @NonNull List&lt;PackageParser.Package&gt; sortTemp,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageManagerService packageManagerService)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】收集那些满足 filter 设定的条件的 package，添加到 sortTemp！</span></span><br><span class="line">    <span class="keyword">for</span> (PackageParser.Package pkg : packages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.test(pkg)) &#123;</span><br><span class="line">            sortTemp.add(pkg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4.1.1.1】对 sortTemp 中的 package 进行排序！</span></span><br><span class="line">    sortPackagesByUsageDate(sortTemp, packageManagerService);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】从 packages （就是 remainingPkgs）中移除 sortTemp 包含的 pacakge！</span></span><br><span class="line">    packages.removeAll(sortTemp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】将 sortTemp 中排好序的所有 package，添加到 result 中！</span></span><br><span class="line">    <span class="keyword">for</span> (PackageParser.Package pkg : sortTemp) &#123;</span><br><span class="line">        result.add(pkg);</span><br><span class="line">        <span class="comment">//【3.1】找到和该 pkg 共享非系统库文件的 package，也添加到 result 中！</span></span><br><span class="line">        <span class="comment">// 同时从 packages （就是 remainingPkgs）中也移除这部分 package！</span></span><br><span class="line">        Collection&lt;PackageParser.Package&gt; deps =</span><br><span class="line">                packageManagerService.findSharedNonSystemLibraries(pkg);</span><br><span class="line">        <span class="keyword">if</span> (!deps.isEmpty()) &#123;</span><br><span class="line">            deps.removeAll(result);</span><br><span class="line">            result.addAll(deps);</span><br><span class="line">            packages.removeAll(deps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sortTemp.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>过程很简单不多说了！</p><h4 id="4-1-1-1-PackageManagerServiceUtils-sortPackagesByUsageDate"><a href="#4-1-1-1-PackageManagerServiceUtils-sortPackagesByUsageDate" class="headerlink" title="4.1.1.1 PackageManagerServiceUtils.sortPackagesByUsageDate"></a>4.1.1.1 PackageManagerServiceUtils.sortPackagesByUsageDate</h4><p>该方法的作用是对 package 列表进行排序！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortPackagesByUsageDate</span><span class="params">(List&lt;PackageParser.Package&gt; pkgs,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageManagerService packageManagerService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!packageManagerService.isHistoricalPackageUsageAvailable()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】排序依据是：package 在前台使用是时间！</span></span><br><span class="line">    Collections.sort(pkgs, (pkg1, pkg2) -&gt;</span><br><span class="line">            Long.compare(pkg2.getLatestForegroundPackageUseTimeInMills(),</span><br><span class="line">                    pkg1.getLatestForegroundPackageUseTimeInMills()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-2-PackageMS-performDexOptUpgrade"><a href="#4-2-PackageMS-performDexOptUpgrade" class="headerlink" title="4.2 PackageMS.performDexOptUpgrade"></a>4.2 PackageMS.performDexOptUpgrade</h2><p>performDexOptUpgrade 用于执行 Odex 优化操作！</p><p>对于参数 showDialog：传入的是 mIsPreNUpgrade，表示是否是从 N 升级上来的！</p><p>对于参数 compilerFilter：传入的是 getCompilerFilterForReason(causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT)!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] performDexOptUpgrade(List&lt;PackageParser.Package&gt; pkgs, <span class="keyword">boolean</span> showDialog,</span><br><span class="line">        String compilerFilter) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numberOfPackagesVisited = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfPackagesOptimized = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfPackagesSkipped = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> numberOfPackagesFailed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> numberOfPackagesToDexopt = pkgs.size();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【All】遍历所有要执行 Odex 的所有 Package！</span></span><br><span class="line">    <span class="keyword">for</span> (PackageParser.Package pkg : pkgs) &#123;</span><br><span class="line">        numberOfPackagesVisited++;</span><br><span class="line">        <span class="comment">//【1】跳过那些不能做 Odex 优化的 Package！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageDexOptimizer.canOptimizePackage(pkg)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_DEXOPT) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"Skipping update of of non-optimizable app "</span> + pkg.packageName);</span><br><span class="line">            &#125;</span><br><span class="line">            numberOfPackagesSkipped++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DEXOPT) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Updating app "</span> + numberOfPackagesVisited + <span class="string">" of "</span> +</span><br><span class="line">                    numberOfPackagesToDexopt + <span class="string">": "</span> + pkg.packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】在做 Odex 优化的时候，是否显示界面进行提示！</span></span><br><span class="line">        <span class="keyword">if</span> (showDialog) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ActivityManagerNative.getDefault().showBootMessage(</span><br><span class="line">                        mContext.getResources().getString(R.string.android_upgrading_apk,</span><br><span class="line">                                numberOfPackagesVisited, numberOfPackagesToDexopt), <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                mDexOptDialogShown = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the OTA updates a system app which was previously preopted to a non-preopted state</span></span><br><span class="line">        <span class="comment">// the app might end up being verified at runtime. That's because by default the apps</span></span><br><span class="line">        <span class="comment">// are verify-profile but for preopted apps there's no profile.</span></span><br><span class="line">        <span class="comment">// Do a hacky check to ensure that if we have no profiles (a reasonable indication</span></span><br><span class="line">        <span class="comment">// that before the OTA the app was preopted) the app gets compiled with a non-profile</span></span><br><span class="line">        <span class="comment">// filter (by default interpret-only).</span></span><br><span class="line">        <span class="comment">// Note that at this stage unused apps are already filtered.</span></span><br><span class="line">        <span class="comment">//【3】设置执行 Odex 优化的时候的 compilerFilter 类型！</span></span><br><span class="line">        <span class="keyword">if</span> (isSystemApp(pkg) &amp;&amp;</span><br><span class="line">                DexFile.isProfileGuidedCompilerFilter(compilerFilter) &amp;&amp;</span><br><span class="line">                !Environment.getReferenceProfile(pkg.packageName).exists()) &#123;</span><br><span class="line">            compilerFilter = getNonProfileGuidedCompilerFilter(compilerFilter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// checkProfiles is false to avoid merging profiles during boot which</span></span><br><span class="line">        <span class="comment">// might interfere with background compilation (b/28612421).</span></span><br><span class="line">        <span class="comment">// Unfortunately this will also means that "pm.dexopt.boot=speed-profile" will</span></span><br><span class="line">        <span class="comment">// behave differently than "pm.dexopt.bg-dexopt=speed-profile" but that's a</span></span><br><span class="line">        <span class="comment">// trade-off worth doing to save boot time work.</span></span><br><span class="line">        <span class="comment">//【4.2.2】执行 Odex</span></span><br><span class="line">        <span class="keyword">int</span> dexOptStatus = performDexOptTraced(pkg.packageName,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/* checkProfiles */</span>,</span><br><span class="line">                compilerFilter,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/* force */</span>);</span><br><span class="line">        <span class="keyword">switch</span> (dexOptStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> PackageDexOptimizer.DEX_OPT_PERFORMED:</span><br><span class="line">                numberOfPackagesOptimized++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PackageDexOptimizer.DEX_OPT_SKIPPED:</span><br><span class="line">                numberOfPackagesSkipped++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PackageDexOptimizer.DEX_OPT_FAILED:</span><br><span class="line">                numberOfPackagesFailed++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Log.e(TAG, <span class="string">"Unexpected dexopt return code "</span> + dexOptStatus);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; numberOfPackagesOptimized, numberOfPackagesSkipped,</span><br><span class="line">            numberOfPackagesFailed &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-2-1-PackageManagerServiceCompilerMapping-getCompilerFilterForReason"><a href="#4-2-1-PackageManagerServiceCompilerMapping-getCompilerFilterForReason" class="headerlink" title="4.2.1 PackageManagerServiceCompilerMapping.getCompilerFilterForReason"></a>4.2.1 PackageManagerServiceCompilerMapping.getCompilerFilterForReason</h3><p>这里调用了 getCompilerFilterForReason，根据执行的原因选择合适的 compileFilter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCompilerFilterForReason</span><span class="params">(<span class="keyword">int</span> reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.2.1.1】通过 reason 来获得 compileFilter</span></span><br><span class="line">    <span class="keyword">return</span> getAndCheckValidity(reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是 first boot，则为 REASON_FIRST_BOOT，否则为 REASON_BOOT！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compilation reasons.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_FIRST_BOOT = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_BOOT = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_INSTALL = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_BACKGROUND_DEXOPT = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_AB_OTA = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_NON_SYSTEM_LIBRARY = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_SHARED_APK = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_FORCED_DEXOPT = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REASON_CORE_APP = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>对于 reason 的取值如上，其实通过名字，很容易就能看到，每种 reason 的使用类型！</p><h4 id="4-2-1-1-PackageManagerServiceCompilerMapping-getAndCheckValidity"><a href="#4-2-1-1-PackageManagerServiceCompilerMapping-getAndCheckValidity" class="headerlink" title="4.2.1.1 PackageManagerServiceCompilerMapping.getAndCheckValidity"></a>4.2.1.1 PackageManagerServiceCompilerMapping.getAndCheckValidity</h4><p>检查 reason 对应的有效性！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getAndCheckValidity</span><span class="params">(<span class="keyword">int</span> reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】校验 reason 对应的 compileFilter 是否有效！</span></span><br><span class="line">    String sysPropValue = SystemProperties.get(getSystemPropertyName(reason));</span><br><span class="line">    <span class="keyword">if</span> (sysPropValue == <span class="keyword">null</span> || sysPropValue.isEmpty() ||</span><br><span class="line">            !DexFile.isValidCompilerFilter(sysPropValue)) &#123;</span><br><span class="line">        <span class="comment">//【1.1】这里会通过 DexFile.isValidCompilerFilter 校验！</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Value \""</span> + sysPropValue +<span class="string">"\" not valid "</span></span><br><span class="line">                + <span class="string">"(reason "</span> + REASON_STRINGS[reason] + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 reason 是 REASON_SHARED_APK 和 REASON_FORCED_DEXOPT，还要校验下其是否映射到一个 </span></span><br><span class="line">    <span class="comment">// profile-guided filter！</span></span><br><span class="line">    <span class="keyword">switch</span> (reason) &#123;</span><br><span class="line">        <span class="keyword">case</span> PackageManagerService.REASON_SHARED_APK:</span><br><span class="line">        <span class="keyword">case</span> PackageManagerService.REASON_FORCED_DEXOPT:</span><br><span class="line">            <span class="keyword">if</span> (DexFile.isProfileGuidedCompilerFilter(sysPropValue)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"\""</span> + sysPropValue + <span class="string">"\" is profile-guided, "</span></span><br><span class="line">                        + <span class="string">"but not allowed for "</span> + REASON_STRINGS[reason]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】返回我们需要的 compileFilter！</span></span><br><span class="line">    <span class="keyword">return</span> sysPropValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个有效的 reason 都会对应一个系统属性名，PackageManagerServiceCompilerMapping 内置了如下的系统属性名关键字：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String REASON_STRINGS[] = &#123;</span><br><span class="line">        <span class="string">"first-boot"</span>, <span class="string">"boot"</span>, <span class="string">"install"</span>, <span class="string">"bg-dexopt"</span>, <span class="string">"ab-ota"</span>, <span class="string">"nsys-library"</span>, <span class="string">"shared-apk"</span>,</span><br><span class="line">        <span class="string">"forced-dexopt"</span>, <span class="string">"core-app"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果是 <strong>REASON_FIRST_BOOT</strong>，对应的关键字就是 “first-boot”，其他的以此类推！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getSystemPropertyName</span><span class="params">(<span class="keyword">int</span> reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (reason &lt; <span class="number">0</span> || reason &gt;= REASON_STRINGS.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"reason "</span> + reason + <span class="string">" invalid"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"pm.dexopt."</span> + REASON_STRINGS[reason];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，我们就可以获得系统属性名了，格式为：pm.dexopt.REASON_STRINGS[reason]，比如对于 REASON_FIRST_BOOT，对应的系统属性名为 ：pm.dexopt.first-boot！</p><p>然后我们通过该系统属性名，获得对应的属性 compileFilter！</p><h3 id="4-2-2-PackageMS-performDexOptTraced"><a href="#4-2-2-PackageMS-performDexOptTraced" class="headerlink" title="4.2.2 PackageMS.performDexOptTraced"></a>4.2.2 PackageMS.performDexOptTraced</h3><p>执行 Odex 优化操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">performDexOptTraced</span><span class="params">(String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> checkProfiles, String targetCompilerFilter, <span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, <span class="string">"dexopt"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【4.2.2.1】执行 Odex 优化！</span></span><br><span class="line">        <span class="keyword">return</span> performDexOptInternal(packageName, checkProfiles,</span><br><span class="line">                targetCompilerFilter, force);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续调用 performDexOptTraced 方法！</p><h4 id="4-2-2-1-PackageMS-performDexOptTraced"><a href="#4-2-2-1-PackageMS-performDexOptTraced" class="headerlink" title="4.2.2.1 PackageMS.performDexOptTraced"></a>4.2.2.1 PackageMS.performDexOptTraced</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">performDexOptInternal</span><span class="params">(String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> checkProfiles, String targetCompilerFilter, <span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">    PackageParser.Package p;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得 package 对应的数据对象 PackageParser.Package！</span></span><br><span class="line">        <span class="comment">// 找不到，返回 PackageDexOptimizer.DEX_OPT_FAILED！</span></span><br><span class="line">        p = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Package could not be found. Report failure.</span></span><br><span class="line">            <span class="keyword">return</span> PackageDexOptimizer.DEX_OPT_FAILED;</span><br><span class="line">        &#125;</span><br><span class="line">        mPackageUsage.maybeWriteAsync(mPackages);</span><br><span class="line">        mCompilerStats.maybeWriteAsync();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">            <span class="comment">//【4.2.2.2】调用 performDexOptInternalWithDependenciesLI 继续执行！</span></span><br><span class="line">            <span class="keyword">return</span> performDexOptInternalWithDependenciesLI(p, checkProfiles,</span><br><span class="line">                    targetCompilerFilter, force);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续调用 performDexOptInternalWithDependenciesLI</p><h4 id="4-2-2-2-PackageMS-performDexOptInternalWithDependenciesLI"><a href="#4-2-2-2-PackageMS-performDexOptInternalWithDependenciesLI" class="headerlink" title="4.2.2.2 PackageMS.performDexOptInternalWithDependenciesLI"></a>4.2.2.2 PackageMS.performDexOptInternalWithDependenciesLI</h4><p>根据前面的参数传递：checkProfiles 的值为 false；force 的值为 false：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">performDexOptInternalWithDependenciesLI</span><span class="params">(PackageParser.Package p,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> checkProfiles, String targetCompilerFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】根据参数 force 的值，选择不同的 PackageDexOptimizer，绝大多数情况下，选择的是</span></span><br><span class="line">    <span class="comment">// PackageDexOptimizer！</span></span><br><span class="line">    PackageDexOptimizer pdo = force</span><br><span class="line">            ? <span class="keyword">new</span> PackageDexOptimizer.ForcedUpdatePackageDexOptimizer(mPackageDexOptimizer)</span><br><span class="line">            : mPackageDexOptimizer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】先对该 package 所依赖的共享库所属 pacakge 进行 Odex 优化！</span></span><br><span class="line">    Collection&lt;PackageParser.Package&gt; deps = findSharedNonSystemLibraries(p);</span><br><span class="line">    <span class="keyword">final</span> String[] instructionSets = getAppDexInstructionSets(p.applicationInfo);</span><br><span class="line">    <span class="keyword">if</span> (!deps.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (PackageParser.Package depPackage : deps) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Analyze and investigate if we (should) profile libraries.</span></span><br><span class="line">            <span class="comment">// Currently this will do a full compilation of the library by default.</span></span><br><span class="line">            pdo.performDexOpt(depPackage, <span class="keyword">null</span> <span class="comment">/* sharedLibraries */</span>, instructionSets,</span><br><span class="line">                    <span class="keyword">false</span> <span class="comment">/* checkProfiles */</span>,</span><br><span class="line">                    getCompilerFilterForReason(REASON_NON_SYSTEM_LIBRARY),</span><br><span class="line">                    getOrCreateCompilerPackageStats(depPackage));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4.2.2.3】对该 package 进行 Odex 优化！</span></span><br><span class="line">    <span class="keyword">return</span> pdo.performDexOpt(p, p.usesLibraryFiles, instructionSets, checkProfiles,</span><br><span class="line">            targetCompilerFilter, getOrCreateCompilerPackageStats(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 force 的值为 false，那么选择的是 mPackageDexOptimizer，mPackageDexOptimizer 我们都知道，在 PackageManagerService 的初始化的时候，会创建对应的 PackageDexOptimizer 对象！</p><p>绝大数情况，force 都是 false；为 true 的情况很少使用，主要用于 cmd test！</p><p>当然，最终调用了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PackageDexOptimizer.performDexOpt</span><br></pre></td></tr></table></figure></p><p>performDexOpt 方法进行 Odex 优化！</p><h4 id="4-2-2-3-PackageDexOptimizer-performDexOpt"><a href="#4-2-2-3-PackageDexOptimizer-performDexOpt" class="headerlink" title="4.2.2.3 PackageDexOptimizer.performDexOpt"></a>4.2.2.3 PackageDexOptimizer.performDexOpt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">performDexOpt</span><span class="params">(PackageParser.Package pkg, String[] sharedLibraries,</span></span></span><br><span class="line"><span class="function"><span class="params">        String[] instructionSets, <span class="keyword">boolean</span> checkProfiles, String targetCompilationFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">        CompilerStats.PackageStats packageStats)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">        <span class="comment">//【1】申请 WakeLock！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> useLock = mSystemReady;</span><br><span class="line">        <span class="keyword">if</span> (useLock) &#123;</span><br><span class="line">            mDexoptWakeLock.setWorkSource(<span class="keyword">new</span> WorkSource(pkg.applicationInfo.uid));</span><br><span class="line">            mDexoptWakeLock.acquire();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【4.2.2.3.1】调用 performDexOptLI 执行 Odex 优化！</span></span><br><span class="line">            <span class="keyword">return</span> performDexOptLI(pkg, sharedLibraries, instructionSets, checkProfiles,</span><br><span class="line">                    targetCompilationFilter, packageStats);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (useLock) &#123;</span><br><span class="line">                mDexoptWakeLock.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-3-1-PackageDexOptimizer-performDexOptLI"><a href="#4-2-2-3-1-PackageDexOptimizer-performDexOptLI" class="headerlink" title="4.2.2.3.1 PackageDexOptimizer.performDexOptLI"></a>4.2.2.3.1 PackageDexOptimizer.performDexOptLI</h5><p>performDexOptLI 是执行 Odex 的重要方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">performDexOptLI</span><span class="params">(PackageParser.Package pkg, String[] sharedLibraries,</span></span></span><br><span class="line"><span class="function"><span class="params">        String[] targetInstructionSets, <span class="keyword">boolean</span> checkProfiles, String targetCompilerFilter,</span></span></span><br><span class="line"><span class="function"><span class="params">        CompilerStats.PackageStats packageStats)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String[] instructionSets = targetInstructionSets != <span class="keyword">null</span> ?</span><br><span class="line">            targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);</span><br><span class="line">    <span class="comment">//【1】如果该 package 没有 ApplicationInfo.FLAG_HAS_CODE 该标志，</span></span><br><span class="line">    <span class="comment">// 就不能执行 Odex 优化，返回 DEX_OPT_SKIPPED！</span></span><br><span class="line">    <span class="keyword">if</span> (!canOptimizePackage(pkg)) &#123;</span><br><span class="line">        <span class="keyword">return</span> DEX_OPT_SKIPPED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得该应用的 apk 文件所在路径！</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; paths = pkg.getAllCodePathsExcludingResourceOnly();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sharedGid = UserHandle.getSharedAppGid(pkg.applicationInfo.uid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果该应用被其他的应用使用，不能用 profile-guided</span></span><br><span class="line">    <span class="keyword">boolean</span> isProfileGuidedFilter = DexFile.isProfileGuidedCompilerFilter(targetCompilerFilter);</span><br><span class="line">    <span class="keyword">if</span> (isProfileGuidedFilter &amp;&amp; isUsedByOtherApps(pkg)) &#123;</span><br><span class="line">        checkProfiles = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        targetCompilerFilter = getNonProfileGuidedCompilerFilter(targetCompilerFilter);</span><br><span class="line">        <span class="keyword">if</span> (DexFile.isProfileGuidedCompilerFilter(targetCompilerFilter)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(targetCompilerFilter);</span><br><span class="line">        &#125;</span><br><span class="line">        isProfileGuidedFilter = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we're asked to take profile updates into account, check now.</span></span><br><span class="line">    <span class="keyword">boolean</span> newProfile = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkProfiles &amp;&amp; isProfileGuidedFilter) &#123;</span><br><span class="line">        <span class="comment">// Merge profiles, see if we need to do anything.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            newProfile = mInstaller.mergeProfiles(sharedGid, pkg.packageName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to merge profiles"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> vmSafeMode = (pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_VM_SAFE_MODE) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> debuggable = (pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> performedDexOpt = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> successfulDexOpt = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】处理所有指令集下的  Odex 优化！</span></span><br><span class="line">    <span class="keyword">final</span> String[] dexCodeInstructionSets = getDexCodeInstructionSets(instructionSets);</span><br><span class="line">    <span class="keyword">for</span> (String dexCodeInstructionSet : dexCodeInstructionSets) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String path : paths) &#123;</span><br><span class="line">            <span class="keyword">int</span> dexoptNeeded;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【5.1】判断是否有必要做 Odex 优化，结果保存到 dexoptNeeded！</span></span><br><span class="line">                dexoptNeeded = DexFile.getDexOptNeeded(path,</span><br><span class="line">                        dexCodeInstructionSet, targetCompilerFilter, newProfile);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"IOException reading apk: "</span> + path, ioe);</span><br><span class="line">                <span class="keyword">return</span> DEX_OPT_FAILED;</span><br><span class="line">            &#125;</span><br><span class="line">            dexoptNeeded = adjustDexoptNeeded(dexoptNeeded); <span class="comment">// 返回自身！</span></span><br><span class="line">            <span class="keyword">if</span> (PackageManagerService.DEBUG_DEXOPT) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"DexoptNeeded for "</span> + path + <span class="string">"@"</span> + targetCompilerFilter + <span class="string">" is "</span> +</span><br><span class="line">                        dexoptNeeded);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String dexoptType;</span><br><span class="line">            String oatDir = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//【5.2】处理 dexoptNeeded 结果！</span></span><br><span class="line">            <span class="keyword">switch</span> (dexoptNeeded) &#123;</span><br><span class="line">                <span class="keyword">case</span> DexFile.NO_DEXOPT_NEEDED: </span><br><span class="line">                    <span class="comment">// 如果是 NO_DEXOPT_NEEDED，不需要优化，跳过；</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">case</span> DexFile.DEX2OAT_NEEDED: </span><br><span class="line">                    <span class="comment">// 如果是 DEX2OAT_NEEDED，需要优化，类型为 dex2oat！</span></span><br><span class="line">                    <span class="comment">//【4.2.2.3.1.1】并创建 oat 目标目录！ </span></span><br><span class="line">                    dexoptType = <span class="string">"dex2oat"</span>;</span><br><span class="line">                    oatDir = createOatDirIfSupported(pkg, dexCodeInstructionSet);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DexFile.PATCHOAT_NEEDED:</span><br><span class="line">                    <span class="comment">// 如果是 PATCHOAT_NEEDED，需要优化，类型为 patchoat！</span></span><br><span class="line">                    dexoptType = <span class="string">"patchoat"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DexFile.SELF_PATCHOAT_NEEDED:</span><br><span class="line">                    <span class="comment">// 如果是 SELF_PATCHOAT_NEEDED，需要优化，类型为 self patchoat！</span></span><br><span class="line">                    dexoptType = <span class="string">"self patchoat"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid dexopt:"</span> + dexoptNeeded);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String sharedLibrariesPath = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (sharedLibraries != <span class="keyword">null</span> &amp;&amp; sharedLibraries.length != <span class="number">0</span>) &#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span> (String lib : sharedLibraries) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sb.length() != <span class="number">0</span>) &#123;</span><br><span class="line">                        sb.append(<span class="string">":"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    sb.append(lib);</span><br><span class="line">                &#125;</span><br><span class="line">                sharedLibrariesPath = sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Log.i(TAG, <span class="string">"Running dexopt ("</span> + dexoptType + <span class="string">") on: "</span> + path + <span class="string">" pkg="</span></span><br><span class="line">                    + pkg.applicationInfo.packageName + <span class="string">" isa="</span> + dexCodeInstructionSet</span><br><span class="line">                    + <span class="string">" vmSafeMode="</span> + vmSafeMode + <span class="string">" debuggable="</span> + debuggable</span><br><span class="line">                    + <span class="string">" target-filter="</span> + targetCompilerFilter + <span class="string">" oatDir = "</span> + oatDir</span><br><span class="line">                    + <span class="string">" sharedLibraries="</span> + sharedLibrariesPath);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">// Profile guide compiled oat files should not be public.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> isPublic = !pkg.isForwardLocked() &amp;&amp; !isProfileGuidedFilter;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> profileFlag = isProfileGuidedFilter ? DEXOPT_PROFILE_GUIDED : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> dexFlags = adjustDexoptFlags(</span><br><span class="line">                    ( isPublic ? DEXOPT_PUBLIC : <span class="number">0</span>)</span><br><span class="line">                    | (vmSafeMode ? DEXOPT_SAFEMODE : <span class="number">0</span>)</span><br><span class="line">                    | (debuggable ? DEXOPT_DEBUGGABLE : <span class="number">0</span>)</span><br><span class="line">                    | profileFlag</span><br><span class="line">                    | DEXOPT_BOOTCOMPLETE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">                <span class="comment">//【5.3】执行 Odex 优化！</span></span><br><span class="line">                mInstaller.dexopt(path, sharedGid, pkg.packageName, dexCodeInstructionSet,</span><br><span class="line">                        dexoptNeeded, oatDir, dexFlags, targetCompilerFilter, pkg.volumeUuid,</span><br><span class="line">                        sharedLibrariesPath);</span><br><span class="line">                performedDexOpt = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (packageStats != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">                    packageStats.setCompileTime(path, (<span class="keyword">int</span>)(endTime - startTime));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Failed to dexopt"</span>, e);</span><br><span class="line">                successfulDexOpt = <span class="keyword">false</span>; <span class="comment">// 如果有异常，successfulDexOpt 为 false！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】处理 Odex 优化结果，如果 successfulDexOpt 为 true，说明执行 Odex 的过程中没有发生错误！</span></span><br><span class="line">    <span class="comment">// 然后还要处理 performedDexOpt，如果为 true，表示 Odex 优化成功，返回 DEX_OPT_PERFORMED！</span></span><br><span class="line">    <span class="comment">// 否则，直接返回 DEX_OPT_SKIPPED 表示无需 Odex 优化，直接跳过！</span></span><br><span class="line">    <span class="keyword">if</span> (successfulDexOpt) &#123;</span><br><span class="line">        <span class="keyword">return</span> performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DEX_OPT_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个流程很清晰，不多说！</p><h6 id="4-2-2-3-1-1-PackageDexOptimizer-createOatDirIfSupported"><a href="#4-2-2-3-1-1-PackageDexOptimizer-createOatDirIfSupported" class="headerlink" title="4.2.2.3.1.1 PackageDexOptimizer.createOatDirIfSupported"></a>4.2.2.3.1.1 PackageDexOptimizer.createOatDirIfSupported</h6><p>createOatDirIfSupported 方法用于创建 oat 目录！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createOatDirIfSupported</span><span class="params">(PackageParser.Package pkg, String dexInstructionSet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果应用不能有 oat 文件，返回 null！</span></span><br><span class="line">    <span class="keyword">if</span> (!pkg.canHaveOatDir()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    File codePath = <span class="keyword">new</span> File(pkg.codePath);</span><br><span class="line">    <span class="keyword">if</span> (codePath.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">//【2】创建 oat 目录！</span></span><br><span class="line">        File oatDir = getOatDir(codePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的 oatDir 为 /data/app/&lt;packageName&gt;/oat</span></span><br><span class="line">            <span class="comment">// 而 dexInstructionSet 为 arm/arm64</span></span><br><span class="line">            mInstaller.createOatDir(oatDir.getAbsolutePath(), dexInstructionSet);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to create oat dir"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oatDir.getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PackageParser.Package.canHaveOatDir 方法用于判断该应用是否能够有 oat 目录！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canHaveOatDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 要能有 oat 目录，必须要满足 2 个条件；</span></span><br><span class="line">    <span class="comment">// 1、不是 system app，或者是被更新过的 system app；</span></span><br><span class="line">    <span class="comment">// 2、同时不能是 forward-locked app，并且不能被安装在 external 上!</span></span><br><span class="line">    <span class="keyword">return</span> (!isSystemApp() || isUpdatedSystemApp())</span><br><span class="line">            &amp;&amp; !isForwardLocked() &amp;&amp; !applicationInfo.isExternalAsec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="5-PackageMS-systemReady-进入最终阶段"><a href="#5-PackageMS-systemReady-进入最终阶段" class="headerlink" title="5 PackageMS.systemReady - 进入最终阶段"></a>5 PackageMS.systemReady - 进入最终阶段</h1><p>在 SystemServer.startOtherServices 中，最后，会调用 systemReady 方法，进入 PackageManagerService 启动的最终阶段！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, &quot;MakePackageManagerServiceReady&quot;);</span><br><span class="line">try &#123;</span><br><span class="line">    mPackageManagerService.systemReady();</span><br><span class="line">&#125; catch (Throwable e) &#123;</span><br><span class="line">    reportWtf(&quot;making Package Manager Service ready&quot;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当系统准备完成后，会调用到 PackageManagerService 的 systemReady 方法！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSystemReady = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disable any carrier apps. We do this very early in boot to prevent the apps from being</span></span><br><span class="line">    <span class="comment">// disabled after already being started.</span></span><br><span class="line">    CarrierAppUtils.disableCarrierAppsUntilPrivileged(mContext.getOpPackageName(), <span class="keyword">this</span>,</span><br><span class="line">            mContext.getContentResolver(), UserHandle.USER_SYSTEM);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the compatibilty setting when the system is ready.</span></span><br><span class="line">    <span class="keyword">boolean</span> compatibilityModeEnabled = android.provider.Settings.Global.getInt(</span><br><span class="line">            mContext.getContentResolver(),</span><br><span class="line">            android.provider.Settings.Global.COMPATIBILITY_MODE, <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">    PackageParser.setCompatibilityModeEnabled(compatibilityModeEnabled);</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_SETTINGS) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"compatibility mode:"</span> + compatibilityModeEnabled);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】该集合表示需要默认授予运行时权限的 userId！</span></span><br><span class="line">    <span class="keyword">int</span>[] grantPermissionsUserIds = EMPTY_INT_ARRAY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】移除那些已经不存在的 preferred activity </span></span><br><span class="line">        ArrayList&lt;PreferredActivity&gt; removed = <span class="keyword">new</span> ArrayList&lt;PreferredActivity&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mSettings.mPreferredActivities.size(); i++) &#123;</span><br><span class="line">            PreferredIntentResolver pir = mSettings.mPreferredActivities.valueAt(i);</span><br><span class="line">            removed.clear();</span><br><span class="line">            <span class="keyword">for</span> (PreferredActivity pa : pir.filterSet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mActivities.mActivities.get(pa.mPref.mComponent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    removed.add(pa);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移除这些不存在的 preferred activity 在系统中的关联！</span></span><br><span class="line">            <span class="keyword">if</span> (removed.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>; r&lt;removed.size(); r++) &#123;</span><br><span class="line">                    PreferredActivity pa = removed.get(r);</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Removing dangling preferred activity: "</span></span><br><span class="line">                            + pa.mPref.mComponent);</span><br><span class="line">                    pir.removeFilter(pa);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新偏好设置！</span></span><br><span class="line">                mSettings.writePackageRestrictionsLPr(</span><br><span class="line">                        mSettings.mPreferredActivities.keyAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回需要授予默认权限的 userId 集合！，其实就是访问 mDefaultPermissionsGranted 在指定的 userId 下的值</span></span><br><span class="line">        <span class="comment">// 如果指定 userId 返回 false，表示发生了系统升级，那么我们会执行默认运行时权限授予！！</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mSettings.areDefaultRuntimePermissionsGrantedLPr(userId)) &#123;</span><br><span class="line">                grantPermissionsUserIds = ArrayUtils.appendInt(</span><br><span class="line">                        grantPermissionsUserIds, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通知 userManager 系统准备完毕！</span></span><br><span class="line">    sUserManager.systemReady();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5.1】执行默认授予运行时权限的操作！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> userId : grantPermissionsUserIds) &#123;</span><br><span class="line">        mDefaultPermissionPolicy.grantDefaultPermissions(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有默认授予运行时权限给指定的 userId，那么我们会直接读取 default-permissions 目录中的文件</span></span><br><span class="line">    <span class="comment">// 初始化 mGrantExceptions，和上面的过程类似，不关注！</span></span><br><span class="line">    <span class="keyword">if</span> (grantPermissionsUserIds == EMPTY_INT_ARRAY) &#123;</span><br><span class="line">        <span class="comment">// 该方法会发送 MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS 消息给内部的 Handler</span></span><br><span class="line">        <span class="comment">// 然后会调用：readDefaultPermissionExceptionsLPw 方法！</span></span><br><span class="line">        mDefaultPermissionPolicy.scheduleReadDefaultPermissionExceptions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 mPostSystemReadyMessages 中的 START_CLEANING_PACKAGE 消息，这些消息是在 delete/remove package</span></span><br><span class="line">    <span class="comment">// 的时候添加进来的！！</span></span><br><span class="line">    <span class="keyword">if</span> (mPostSystemReadyMessages != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Message msg : mPostSystemReadyMessages) &#123;</span><br><span class="line">            msg.sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">        mPostSystemReadyMessages = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册存储监听器，持续监听存储变化！</span></span><br><span class="line">    <span class="keyword">final</span> StorageManager storage = mContext.getSystemService(StorageManager.class);</span><br><span class="line">    storage.registerListener(mStorageListener);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知 PackageInstallerService 和 PackageDexOptimizer 系统准备完成！</span></span><br><span class="line">    <span class="comment">// PackageDexOptimizer 是用于执行 odex 优化的，后续我们会看到！</span></span><br><span class="line">    mInstallerService.systemReady();</span><br><span class="line">    mPackageDexOptimizer.systemReady();</span><br><span class="line"></span><br><span class="line">    MountServiceInternal mountServiceInternal = LocalServices.getService(</span><br><span class="line">            MountServiceInternal.class);</span><br><span class="line">    mountServiceInternal.addExternalStoragePolicy(</span><br><span class="line">            <span class="keyword">new</span> MountServiceInternal.ExternalStorageMountPolicy() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMountMode</span><span class="params">(<span class="keyword">int</span> uid, String packageName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Process.isIsolated(uid)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Zygote.MOUNT_EXTERNAL_NONE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkUidPermission(WRITE_MEDIA_STORAGE, uid) == PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="keyword">return</span> Zygote.MOUNT_EXTERNAL_DEFAULT;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkUidPermission(READ_EXTERNAL_STORAGE, uid) == PERMISSION_DENIED) &#123;</span><br><span class="line">                <span class="keyword">return</span> Zygote.MOUNT_EXTERNAL_DEFAULT;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkUidPermission(WRITE_EXTERNAL_STORAGE, uid) == PERMISSION_DENIED) &#123;</span><br><span class="line">                <span class="keyword">return</span> Zygote.MOUNT_EXTERNAL_READ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Zygote.MOUNT_EXTERNAL_WRITE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasExternalStorage</span><span class="params">(<span class="keyword">int</span> uid, String packageName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5.2】清楚哪些无效不用的用户和应用！</span></span><br><span class="line">    reconcileUsers(StorageManager.UUID_PRIVATE_INTERNAL);</span><br><span class="line">    reconcileApps(StorageManager.UUID_PRIVATE_INTERNAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-1-DefaultPermissionGrantPolicy-grantDefaultPermissions-默认运行时权限授予"><a href="#5-1-DefaultPermissionGrantPolicy-grantDefaultPermissions-默认运行时权限授予" class="headerlink" title="5.1 DefaultPermissionGrantPolicy.grantDefaultPermissions - 默认运行时权限授予"></a>5.1 DefaultPermissionGrantPolicy.grantDefaultPermissions - 默认运行时权限授予</h2><p>前面有讲过 DefaultPermissionGrantPolicy 用来处理默认授予系统应用相应的运行时权限的！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grantDefaultPermissions</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【5.1.1】默认授予系统组件和 pri app 相应的运行时权限！</span></span><br><span class="line">    grantPermissionsToSysComponentsAndPrivApps(userId);</span><br><span class="line">    <span class="comment">//【5.1.2】默认授予系统中的一些重要应用包相应的运行时权限！</span></span><br><span class="line">    grantDefaultSystemHandlerPermissions(userId);</span><br><span class="line">    <span class="comment">//【5.1.3】处理之前授予异常的情况！</span></span><br><span class="line">    grantDefaultPermissionExceptions(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们来一个一个分析！</p><p>下面分析过程中，我们把 DefaultPermissionGrantPolicy 简称为 DPGrantPolicy</p><h3 id="5-1-1-DPGrantPolicy-grantPermissionsToSysComponentsAndPrivApps"><a href="#5-1-1-DPGrantPolicy-grantPermissionsToSysComponentsAndPrivApps" class="headerlink" title="5.1.1 DPGrantPolicy.grantPermissionsToSysComponentsAndPrivApps"></a>5.1.1 DPGrantPolicy.grantPermissionsToSysComponentsAndPrivApps</h3><p>授予系统组件和私有应用默认权限！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantPermissionsToSysComponentsAndPrivApps</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"Granting permissions to platform components for user "</span> + userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService.mPackages) &#123;</span><br><span class="line">        <span class="keyword">for</span> (PackageParser.Package pkg : mService.mPackages.values()) &#123;</span><br><span class="line">            <span class="comment">//【5.1.1.1/2】跳过那些非系统或者非私有应用，或者不支持运行时权限，或者没有请求运行时权限的应用</span></span><br><span class="line">            <span class="keyword">if</span> (!isSysComponentOrPersistentPlatformSignedPrivAppLPr(pkg)</span><br><span class="line">                    || !doesPackageSupportRuntimePermissions(pkg)</span><br><span class="line">                    || pkg.requestedPermissions.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;String&gt; permissions = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> permissionCount = pkg.requestedPermissions.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissionCount; i++) &#123;</span><br><span class="line">                String permission = pkg.requestedPermissions.get(i);</span><br><span class="line">                BasePermission bp = mService.mSettings.mPermissions.get(permission);</span><br><span class="line">                <span class="comment">// 如果是运行时权限的话，添加到集合中！</span></span><br><span class="line">                <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; bp.isRuntime()) &#123;</span><br><span class="line">                    permissions.add(permission);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5.1.1.3】默认授予运行时权限，不需要请求！！</span></span><br><span class="line">            <span class="keyword">if</span> (!permissions.isEmpty()) &#123;</span><br><span class="line">                grantRuntimePermissionsLPw(pkg, permissions, <span class="keyword">true</span>, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接授予权限即可！</p><h4 id="5-1-1-1-DPGrantPolicy-isSysComponentOrPersistentPlatformSignedPrivAppLPr"><a href="#5-1-1-1-DPGrantPolicy-isSysComponentOrPersistentPlatformSignedPrivAppLPr" class="headerlink" title="5.1.1.1 DPGrantPolicy.isSysComponentOrPersistentPlatformSignedPrivAppLPr"></a>5.1.1.1 DPGrantPolicy.isSysComponentOrPersistentPlatformSignedPrivAppLPr</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSysComponentOrPersistentPlatformSignedPrivAppLPr</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】apk 的 uid 小于 FIRST_APPLICATION_UID，那么返回 true，不跳过！</span></span><br><span class="line">    <span class="keyword">if</span> (UserHandle.getAppId(pkg.applicationInfo.uid) &lt; FIRST_APPLICATION_UID) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果不是 privileged App，返回 false，会跳过！</span></span><br><span class="line">    <span class="keyword">if</span> (!pkg.isPrivilegedApp()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果其没有 ApplicationInfo.FLAG_PERSISTENT 标志位，返回 false，会跳过！</span></span><br><span class="line">    PackageSetting sysPkg = mService.mSettings.getDisabledSystemPkgLPr(pkg.packageName);</span><br><span class="line">    <span class="keyword">if</span> (sysPkg != <span class="keyword">null</span> &amp;&amp; sysPkg.pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sysPkg.pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_PERSISTENT) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((pkg.applicationInfo.flags &amp; ApplicationInfo.FLAG_PERSISTENT) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后，匹配签名，如果应用是系统平台签名，返回 true，不跳过！</span></span><br><span class="line">    <span class="keyword">return</span> PackageManagerService.compareSignatures(mService.mPlatformPackage.mSignatures,</span><br><span class="line">            pkg.mSignatures) == PackageManager.SIGNATURE_MATCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的逻辑就不多说了！</p><h4 id="5-1-1-2-DPGrantPolicy-doesPackageSupportRuntimePermissions"><a href="#5-1-1-2-DPGrantPolicy-doesPackageSupportRuntimePermissions" class="headerlink" title="5.1.1.2 DPGrantPolicy.doesPackageSupportRuntimePermissions"></a>5.1.1.2 DPGrantPolicy.doesPackageSupportRuntimePermissions</h4><p>判断该 package 是否支持运行时权限！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doesPackageSupportRuntimePermissions</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pkg.applicationInfo.targetSdkVersion &gt; Build.VERSION_CODES.LOLLIPOP_MR1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即：如果目标 sdk 大于 Android5.1，那就是支持，返回 true！</p><h3 id="5-1-2-DPGrantPolicy-grantDefaultSystemHandlerPermissions"><a href="#5-1-2-DPGrantPolicy-grantDefaultSystemHandlerPermissions" class="headerlink" title="5.1.2 DPGrantPolicy.grantDefaultSystemHandlerPermissions"></a>5.1.2 DPGrantPolicy.grantDefaultSystemHandlerPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantDefaultSystemHandlerPermissions</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"Granting permissions to default platform handlers for user "</span> + userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这些 PackagesProvider 就是其他服务通过 PackageManagerInternalImpl 注册到 pms 内部的！</span></span><br><span class="line">    <span class="keyword">final</span> PackagesProvider locationPackagesProvider;</span><br><span class="line">    <span class="keyword">final</span> PackagesProvider voiceInteractionPackagesProvider;</span><br><span class="line">    <span class="keyword">final</span> PackagesProvider smsAppPackagesProvider;</span><br><span class="line">    <span class="keyword">final</span> PackagesProvider dialerAppPackagesProvider;</span><br><span class="line">    <span class="keyword">final</span> PackagesProvider simCallManagerPackagesProvider;</span><br><span class="line">    <span class="keyword">final</span> SyncAdapterPackagesProvider syncAdapterPackagesProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService.mPackages) &#123;</span><br><span class="line">        locationPackagesProvider = mLocationPackagesProvider;</span><br><span class="line">        voiceInteractionPackagesProvider = mVoiceInteractionPackagesProvider;</span><br><span class="line">        smsAppPackagesProvider = mSmsAppPackagesProvider;</span><br><span class="line">        dialerAppPackagesProvider = mDialerAppPackagesProvider;</span><br><span class="line">        simCallManagerPackagesProvider = mSimCallManagerPackagesProvider;</span><br><span class="line">        syncAdapterPackagesProvider = mSyncAdapterPackagesProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] voiceInteractPackageNames = (voiceInteractionPackagesProvider != <span class="keyword">null</span>)</span><br><span class="line">            ? voiceInteractionPackagesProvider.getPackages(userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] locationPackageNames = (locationPackagesProvider != <span class="keyword">null</span>)</span><br><span class="line">            ? locationPackagesProvider.getPackages(userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] smsAppPackageNames = (smsAppPackagesProvider != <span class="keyword">null</span>)</span><br><span class="line">            ? smsAppPackagesProvider.getPackages(userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] dialerAppPackageNames = (dialerAppPackagesProvider != <span class="keyword">null</span>)</span><br><span class="line">            ? dialerAppPackagesProvider.getPackages(userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] simCallManagerPackageNames = (simCallManagerPackagesProvider != <span class="keyword">null</span>)</span><br><span class="line">            ? simCallManagerPackagesProvider.getPackages(userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] contactsSyncAdapterPackages = (syncAdapterPackagesProvider != <span class="keyword">null</span>) ?</span><br><span class="line">            syncAdapterPackagesProvider.getPackages(ContactsContract.AUTHORITY, userId) : <span class="keyword">null</span>;</span><br><span class="line">    String[] calendarSyncAdapterPackages = (syncAdapterPackagesProvider != <span class="keyword">null</span>) ?</span><br><span class="line">            syncAdapterPackagesProvider.getPackages(CalendarContract.AUTHORITY, userId) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mService.mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】默认授予 PackageInstaller STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package installerPackage = getSystemPackageLPr(</span><br><span class="line">                mService.mRequiredInstallerPackage);</span><br><span class="line">        <span class="keyword">if</span> (installerPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(installerPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(installerPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】默认授予 PackageVerifier STORAGE_PERMISSIONS，PHONE_PERMISSIONS，SMS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package verifierPackage = getSystemPackageLPr(</span><br><span class="line">                mService.mRequiredVerifierPackage);</span><br><span class="line">        <span class="keyword">if</span> (verifierPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(verifierPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(verifierPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(verifierPackage, PHONE_PERMISSIONS, <span class="keyword">false</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(verifierPackage, SMS_PERMISSIONS, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】默认授予 SetupWizard PHONE_PERMISSIONS，CONTACTS_PERMISSIONS，LOCATION_PERMISSIONS </span></span><br><span class="line">        <span class="comment">// CAMERA_PERMISSIONS中的所有权限！</span></span><br><span class="line">        PackageParser.Package setupPackage = getSystemPackageLPr(</span><br><span class="line">                mService.mSetupWizardPackage);</span><br><span class="line">        <span class="keyword">if</span> (setupPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(setupPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(setupPackage, PHONE_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(setupPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(setupPackage, LOCATION_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(setupPackage, CAMERA_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】默认授予 Camera CAMERA_PERMISSIONS，MICROPHONE_PERMISSIONS，STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent cameraIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        PackageParser.Package cameraPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                cameraIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (cameraPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(cameraPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(cameraPackage, CAMERA_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(cameraPackage, MICROPHONE_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(cameraPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】默认授予 Media provier STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package mediaStorePackage = getDefaultProviderAuthorityPackageLPr(</span><br><span class="line">                MediaStore.AUTHORITY, userId);</span><br><span class="line">        <span class="keyword">if</span> (mediaStorePackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(mediaStorePackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】默认授予 download provier STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package downloadsPackage = getDefaultProviderAuthorityPackageLPr(</span><br><span class="line">                <span class="string">"downloads"</span>, userId);</span><br><span class="line">        <span class="keyword">if</span> (downloadsPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(downloadsPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【8】默认授予 Downloads UI STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent downloadsUiIntent = <span class="keyword">new</span> Intent(DownloadManager.ACTION_VIEW_DOWNLOADS);</span><br><span class="line">        PackageParser.Package downloadsUiPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                downloadsUiIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (downloadsUiPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(downloadsUiPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(downloadsUiPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】默认授予 Storage provider STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package storagePackage = getDefaultProviderAuthorityPackageLPr(</span><br><span class="line">                <span class="string">"com.android.externalstorage.documents"</span>, userId);</span><br><span class="line">        <span class="keyword">if</span> (storagePackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(storagePackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【10】默认授予 CertInstaller STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent certInstallerIntent = <span class="keyword">new</span> Intent(Credentials.INSTALL_ACTION);</span><br><span class="line">        PackageParser.Package certInstallerPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                certInstallerIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (certInstallerPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(certInstallerPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(certInstallerPackage, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【11】默认授予 dialer CONTACTS_PERMISSIONS，SMS_PERMISSIONS，</span></span><br><span class="line">        <span class="comment">// MICROPHONE_PERMISSIONS，CAMERA_PERMISSIONS中的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (dialerAppPackageNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Intent dialerIntent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</span><br><span class="line">            PackageParser.Package dialerPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                    dialerIntent, userId);</span><br><span class="line">            <span class="keyword">if</span> (dialerPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                grantDefaultPermissionsToDefaultSystemDialerAppLPr(dialerPackage, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dialerAppPackageName : dialerAppPackageNames) &#123;</span><br><span class="line">                PackageParser.Package dialerPackage = getSystemPackageLPr(dialerAppPackageName);</span><br><span class="line">                <span class="keyword">if</span> (dialerPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    grantDefaultPermissionsToDefaultSystemDialerAppLPr(dialerPackage, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【12】默认授予 Sim call manager PHONE_PERMISSIONS，SMS_PERMISSIONS</span></span><br><span class="line">        <span class="comment">// MICROPHONE_PERMISSIONS，CAMERA_PERMISSIONS中的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (simCallManagerPackageNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String simCallManagerPackageName : simCallManagerPackageNames) &#123;</span><br><span class="line">                PackageParser.Package simCallManagerPackage =</span><br><span class="line">                        getSystemPackageLPr(simCallManagerPackageName);</span><br><span class="line">                <span class="keyword">if</span> (simCallManagerPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    grantDefaultPermissionsToDefaultSimCallManagerLPr(simCallManagerPackage,</span><br><span class="line">                            userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【13】默认授予 SMS PHONE_PERMISSIONS，CONTACTS_PERMISSIONS，SMS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (smsAppPackageNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Intent smsIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">            smsIntent.addCategory(Intent.CATEGORY_APP_MESSAGING);</span><br><span class="line">            PackageParser.Package smsPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                    smsIntent, userId);</span><br><span class="line">            <span class="keyword">if</span> (smsPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">               grantDefaultPermissionsToDefaultSystemSmsAppLPr(smsPackage, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String smsPackageName : smsAppPackageNames) &#123;</span><br><span class="line">                PackageParser.Package smsPackage = getSystemPackageLPr(smsPackageName);</span><br><span class="line">                <span class="keyword">if</span> (smsPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    grantDefaultPermissionsToDefaultSystemSmsAppLPr(smsPackage, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【14】默认授予 Cell Broadcast Receiver SMS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent cbrIntent = <span class="keyword">new</span> Intent(Intents.SMS_CB_RECEIVED_ACTION);</span><br><span class="line">        PackageParser.Package cbrPackage =</span><br><span class="line">                getDefaultSystemHandlerActivityPackageLPr(cbrIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (cbrPackage != <span class="keyword">null</span> &amp;&amp; doesPackageSupportRuntimePermissions(cbrPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(cbrPackage, SMS_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【15】默认授予 Carrier Provisioning Service SMS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent carrierProvIntent = <span class="keyword">new</span> Intent(Intents.SMS_CARRIER_PROVISION_ACTION);</span><br><span class="line">        PackageParser.Package carrierProvPackage =</span><br><span class="line">                getDefaultSystemHandlerServicePackageLPr(carrierProvIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (carrierProvPackage != <span class="keyword">null</span> &amp;&amp; doesPackageSupportRuntimePermissions(carrierProvPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(carrierProvPackage, SMS_PERMISSIONS, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【15】默认授予 Calendar CALENDAR_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent calendarIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        calendarIntent.addCategory(Intent.CATEGORY_APP_CALENDAR);</span><br><span class="line">        PackageParser.Package calendarPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                calendarIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (calendarPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(calendarPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(calendarPackage, CALENDAR_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(calendarPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【16】默认授予 Calendar provider CONTACTS_PERMISSIONS，CALENDAR_PERMISSIONS，</span></span><br><span class="line">        <span class="comment">// STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package calendarProviderPackage = getDefaultProviderAuthorityPackageLPr(</span><br><span class="line">                CalendarContract.AUTHORITY, userId);</span><br><span class="line">        <span class="keyword">if</span> (calendarProviderPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(calendarProviderPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(calendarProviderPackage, CALENDAR_PERMISSIONS,</span><br><span class="line">                    <span class="keyword">true</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(calendarProviderPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【17】默认授予 Calendar provider sync adapters CALENDAR_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        List&lt;PackageParser.Package&gt; calendarSyncAdapters = getHeadlessSyncAdapterPackagesLPr(</span><br><span class="line">                calendarSyncAdapterPackages, userId);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> calendarSyncAdapterCount = calendarSyncAdapters.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; calendarSyncAdapterCount; i++) &#123;</span><br><span class="line">            PackageParser.Package calendarSyncAdapter = calendarSyncAdapters.get(i);</span><br><span class="line">            <span class="keyword">if</span> (doesPackageSupportRuntimePermissions(calendarSyncAdapter)) &#123;</span><br><span class="line">                grantRuntimePermissionsLPw(calendarSyncAdapter, CALENDAR_PERMISSIONS, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【18】默认授予 Contacts CONTACTS_PERMISSIONS， PHONE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent contactsIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        contactsIntent.addCategory(Intent.CATEGORY_APP_CONTACTS);</span><br><span class="line">        PackageParser.Package contactsPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                contactsIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (contactsPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(contactsPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(contactsPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(contactsPackage, PHONE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【19】默认授予 Contacts provider sync adapters CONTACTS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        List&lt;PackageParser.Package&gt; contactsSyncAdapters = getHeadlessSyncAdapterPackagesLPr(</span><br><span class="line">                contactsSyncAdapterPackages, userId);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> contactsSyncAdapterCount = contactsSyncAdapters.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contactsSyncAdapterCount; i++) &#123;</span><br><span class="line">            PackageParser.Package contactsSyncAdapter = contactsSyncAdapters.get(i);</span><br><span class="line">            <span class="keyword">if</span> (doesPackageSupportRuntimePermissions(contactsSyncAdapter)) &#123;</span><br><span class="line">                grantRuntimePermissionsLPw(contactsSyncAdapter, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【20】默认授予 Contacts provider CONTACTS_PERMISSIONS，PHONE_PERMISSIONS，</span></span><br><span class="line">        <span class="comment">// STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package contactsProviderPackage = getDefaultProviderAuthorityPackageLPr(</span><br><span class="line">                ContactsContract.AUTHORITY, userId);</span><br><span class="line">        <span class="keyword">if</span> (contactsProviderPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(contactsProviderPackage, CONTACTS_PERMISSIONS,</span><br><span class="line">                    <span class="keyword">true</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(contactsProviderPackage, PHONE_PERMISSIONS,</span><br><span class="line">                    <span class="keyword">true</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(contactsProviderPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【21】默认授予 Device provisioning CONTACTS_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent deviceProvisionIntent = <span class="keyword">new</span> Intent(</span><br><span class="line">                DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE);</span><br><span class="line">        PackageParser.Package deviceProvisionPackage =</span><br><span class="line">                getDefaultSystemHandlerActivityPackageLPr(deviceProvisionIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (deviceProvisionPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(deviceProvisionPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(deviceProvisionPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【22】默认授予 Maps App LOCATION_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent mapsIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        mapsIntent.addCategory(Intent.CATEGORY_APP_MAPS);</span><br><span class="line">        PackageParser.Package mapsPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                mapsIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (mapsPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(mapsPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(mapsPackage, LOCATION_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【23】默认授予 Gallery App STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent galleryIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        galleryIntent.addCategory(Intent.CATEGORY_APP_GALLERY);</span><br><span class="line">        PackageParser.Package galleryPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                galleryIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (galleryPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(galleryPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(galleryPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【24】默认授予 Email App CONTACTS_PERMISSIONS，CALENDAR_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent emailIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        emailIntent.addCategory(Intent.CATEGORY_APP_EMAIL);</span><br><span class="line">        PackageParser.Package emailPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                emailIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (emailPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(emailPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(emailPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(emailPackage, CALENDAR_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【25】默认授予 Browser App LOCATION_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package browserPackage = <span class="keyword">null</span>;</span><br><span class="line">        String defaultBrowserPackage = mService.getDefaultBrowserPackageName(userId);</span><br><span class="line">        <span class="keyword">if</span> (defaultBrowserPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            browserPackage = getPackageLPr(defaultBrowserPackage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (browserPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Intent browserIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">            browserIntent.addCategory(Intent.CATEGORY_APP_BROWSER);</span><br><span class="line">            browserPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                    browserIntent, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (browserPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(browserPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(browserPackage, LOCATION_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【26】默认授予 Voice interaction CONTACTS_PERMISSIONS，CALENDAR_PERMISSIONS，MICROPHONE_PERMISSIONS</span></span><br><span class="line">        <span class="comment">// PHONE_PERMISSIONS，SMS_PERMISSIONS，LOCATION_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (voiceInteractPackageNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String voiceInteractPackageName : voiceInteractPackageNames) &#123;</span><br><span class="line">                PackageParser.Package voiceInteractPackage = getSystemPackageLPr(</span><br><span class="line">                        voiceInteractPackageName);</span><br><span class="line">                <span class="keyword">if</span> (voiceInteractPackage != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; doesPackageSupportRuntimePermissions(voiceInteractPackage)) &#123;</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            CONTACTS_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            CALENDAR_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            MICROPHONE_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            PHONE_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            SMS_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(voiceInteractPackage,</span><br><span class="line">                            LOCATION_PERMISSIONS, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【26】默认授予 Voice recognition MICROPHONE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent voiceRecoIntent = <span class="keyword">new</span> Intent(<span class="string">"android.speech.RecognitionService"</span>);</span><br><span class="line">        voiceRecoIntent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">        PackageParser.Package voiceRecoPackage = getDefaultSystemHandlerServicePackageLPr(</span><br><span class="line">                voiceRecoIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (voiceRecoPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(voiceRecoPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(voiceRecoPackage, MICROPHONE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【27】默认授予 Location CONTACTS_PERMISSIONS... 中的所有权限！</span></span><br><span class="line">        <span class="keyword">if</span> (locationPackageNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String packageName : locationPackageNames) &#123;</span><br><span class="line">                PackageParser.Package locationPackage = getSystemPackageLPr(packageName);</span><br><span class="line">                <span class="keyword">if</span> (locationPackage != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; doesPackageSupportRuntimePermissions(locationPackage)) &#123;</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, CONTACTS_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, CALENDAR_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, MICROPHONE_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, PHONE_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, SMS_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, LOCATION_PERMISSIONS,</span><br><span class="line">                            <span class="keyword">true</span>, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, CAMERA_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, SENSORS_PERMISSIONS, userId);</span><br><span class="line">                    grantRuntimePermissionsLPw(locationPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【28】默认授予 Music STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent musicIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        musicIntent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">        musicIntent.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(<span class="string">"foo.mp3"</span>)),</span><br><span class="line">                AUDIO_MIME_TYPE);</span><br><span class="line">        PackageParser.Package musicPackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                musicIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (musicPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(musicPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(musicPackage, STORAGE_PERMISSIONS, userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是针对于 Android Wear 设备的，不关注！</span></span><br><span class="line">        <span class="keyword">if</span> (mService.hasSystemFeature(PackageManager.FEATURE_WATCH, <span class="number">0</span>)) &#123;</span><br><span class="line">            Intent homeIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">            homeIntent.addCategory(Intent.CATEGORY_HOME_MAIN);</span><br><span class="line"></span><br><span class="line">            PackageParser.Package wearHomePackage = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                    homeIntent, userId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (wearHomePackage != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; doesPackageSupportRuntimePermissions(wearHomePackage)) &#123;</span><br><span class="line">                grantRuntimePermissionsLPw(wearHomePackage, CONTACTS_PERMISSIONS, <span class="keyword">false</span>,</span><br><span class="line">                        userId);</span><br><span class="line">                grantRuntimePermissionsLPw(wearHomePackage, PHONE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">                grantRuntimePermissionsLPw(wearHomePackage, MICROPHONE_PERMISSIONS, <span class="keyword">false</span>,</span><br><span class="line">                        userId);</span><br><span class="line">                grantRuntimePermissionsLPw(wearHomePackage, LOCATION_PERMISSIONS, <span class="keyword">false</span>,</span><br><span class="line">                        userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【29】默认授予 Print Spooler LOCATION_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        PackageParser.Package printSpoolerPackage = getSystemPackageLPr(</span><br><span class="line">                PrintManager.PRINT_SPOOLER_PACKAGE_NAME);</span><br><span class="line">        <span class="keyword">if</span> (printSpoolerPackage != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(printSpoolerPackage)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(printSpoolerPackage, LOCATION_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【30】默认授予 EmergencyInfo CONTACTS_PERMISSIONS, PHONE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent emergencyInfoIntent = <span class="keyword">new</span> Intent(TelephonyManager.ACTION_EMERGENCY_ASSISTANCE);</span><br><span class="line">        PackageParser.Package emergencyInfoPckg = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                emergencyInfoIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (emergencyInfoPckg != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(emergencyInfoPckg)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(emergencyInfoPckg, CONTACTS_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(emergencyInfoPckg, PHONE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【31】默认授予 NFC CONTACTS_PERMISSIONS, PHONE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent nfcTagIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        nfcTagIntent.setType(<span class="string">"vnd.android.cursor.item/ndef_msg"</span>);</span><br><span class="line">        PackageParser.Package nfcTagPkg = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                nfcTagIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (nfcTagPkg != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(nfcTagPkg)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(nfcTagPkg, CONTACTS_PERMISSIONS, <span class="keyword">false</span>, userId);</span><br><span class="line">            grantRuntimePermissionsLPw(nfcTagPkg, PHONE_PERMISSIONS, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【32】默认授予 Storage Manager STORAGE_PERMISSIONS 中的所有权限！</span></span><br><span class="line">        Intent storageManagerIntent = <span class="keyword">new</span> Intent(StorageManager.ACTION_MANAGE_STORAGE);</span><br><span class="line">        PackageParser.Package storageManagerPckg = getDefaultSystemHandlerActivityPackageLPr(</span><br><span class="line">                storageManagerIntent, userId);</span><br><span class="line">        <span class="keyword">if</span> (storageManagerPckg != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; doesPackageSupportRuntimePermissions(storageManagerPckg)) &#123;</span><br><span class="line">            grantRuntimePermissionsLPw(storageManagerPckg, STORAGE_PERMISSIONS, <span class="keyword">true</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【5.1.2.2】最后调用了 Settings.onDefaultRuntimePermissionsGrantedLPr 方法，</span></span><br><span class="line">        <span class="comment">// 再次保存运行时权限授予情况！！！</span></span><br><span class="line">        mService.mSettings.onDefaultRuntimePermissionsGrantedLPr(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这个阶段 DefaultPermissionGrantPolicy 默认授予了很多系统组件很多必须的运行时权限！</p><p>涉及到的 DefaultPermissionGrantPolicy 内部方法也很多，但是<strong>最终都是调用了其内部的 grantRuntimePermissionsLPw 方法</strong>，该方法，我们签名有分析过！</p><p>这里就不在跟踪了！</p><h4 id="5-1-2-1-权限集合"><a href="#5-1-2-1-权限集合" class="headerlink" title="5.1.2.1 权限集合"></a>5.1.2.1 权限集合</h4><p>DefaultPermissionGrantPolicy 内部有多个 Set 集合，保存了要默认授予给应用的运行时权限！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; PHONE_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.READ_PHONE_STATE);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.CALL_PHONE);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.READ_CALL_LOG);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.WRITE_CALL_LOG);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.ADD_VOICEMAIL);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.USE_SIP);</span><br><span class="line">    PHONE_PERMISSIONS.add(Manifest.permission.PROCESS_OUTGOING_CALLS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; CONTACTS_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    CONTACTS_PERMISSIONS.add(Manifest.permission.READ_CONTACTS);</span><br><span class="line">    CONTACTS_PERMISSIONS.add(Manifest.permission.WRITE_CONTACTS);</span><br><span class="line">    CONTACTS_PERMISSIONS.add(Manifest.permission.GET_ACCOUNTS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; LOCATION_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    LOCATION_PERMISSIONS.add(Manifest.permission.ACCESS_FINE_LOCATION);</span><br><span class="line">    LOCATION_PERMISSIONS.add(Manifest.permission.ACCESS_COARSE_LOCATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; CALENDAR_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    CALENDAR_PERMISSIONS.add(Manifest.permission.READ_CALENDAR);</span><br><span class="line">    CALENDAR_PERMISSIONS.add(Manifest.permission.WRITE_CALENDAR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; SMS_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.SEND_SMS);</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.RECEIVE_SMS);</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.READ_SMS);</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.RECEIVE_WAP_PUSH);</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.RECEIVE_MMS);</span><br><span class="line">    SMS_PERMISSIONS.add(Manifest.permission.READ_CELL_BROADCASTS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; MICROPHONE_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    MICROPHONE_PERMISSIONS.add(Manifest.permission.RECORD_AUDIO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; CAMERA_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    CAMERA_PERMISSIONS.add(Manifest.permission.CAMERA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; SENSORS_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    SENSORS_PERMISSIONS.add(Manifest.permission.BODY_SENSORS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; STORAGE_PERMISSIONS = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    STORAGE_PERMISSIONS.add(Manifest.permission.READ_EXTERNAL_STORAGE);</span><br><span class="line">    STORAGE_PERMISSIONS.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里只是简单的列举出来！</p><h4 id="5-1-2-2-Settings-onDefaultRuntimePermissionsGrantedLPr"><a href="#5-1-2-2-Settings-onDefaultRuntimePermissionsGrantedLPr" class="headerlink" title="5.1.2.2 Settings.onDefaultRuntimePermissionsGrantedLPr"></a>5.1.2.2 Settings.onDefaultRuntimePermissionsGrantedLPr</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onDefaultRuntimePermissionsGrantedLPr</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    mRuntimePermissionsPersistence</span><br><span class="line">            .onDefaultRuntimePermissionsGrantedLPr(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 RuntimePermissionsPersistence 我们前面有说过，这里会调用其 onDefaultRuntimePermissionsGrantedLPr 方法，重新保存一次运行时权限授予情况！</p><p>代码就不在跟踪了！</p><h3 id="5-1-3-DPGrantPolicy-grantDefaultPermissionExceptions"><a href="#5-1-3-DPGrantPolicy-grantDefaultPermissionExceptions" class="headerlink" title="5.1.3 DPGrantPolicy.grantDefaultPermissionExceptions"></a>5.1.3 DPGrantPolicy.grantDefaultPermissionExceptions</h3><p>grantDefaultPermissionExceptions 用于处理那些授予异常的情况，系统会将授予异常的权限保存到一个文件中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantDefaultPermissionExceptions</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mService.mPackages) &#123;</span><br><span class="line">        mHandler.removeMessages(MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS);</span><br><span class="line">        <span class="comment">//【5.1.3.1】通过本地文件读取默认运行时权限的授予！</span></span><br><span class="line">        <span class="keyword">if</span> (mGrantExceptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mGrantExceptions = readDefaultPermissionExceptionsLPw();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mGrantExceptions 仅在第一次读取之前为空，然后它作为应为每个用户执行的默认授权的缓存。</span></span><br><span class="line">        <span class="comment">// 如果有条目，则应用程序位于系统映像上并支持运行时权限。</span></span><br><span class="line">        Set&lt;String&gt; permissions = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> exceptionCount = mGrantExceptions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; exceptionCount; i++) &#123;</span><br><span class="line">            String packageName = mGrantExceptions.keyAt(i);</span><br><span class="line">            PackageParser.Package pkg = getSystemPackageLPr(packageName);</span><br><span class="line">            List&lt;DefaultPermissionGrant&gt; permissionGrants = mGrantExceptions.valueAt(i);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> permissionGrantCount = permissionGrants.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; permissionGrantCount; j++) &#123;</span><br><span class="line">                DefaultPermissionGrant permissionGrant = permissionGrants.get(j);</span><br><span class="line">                <span class="keyword">if</span> (permissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    permissions = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    permissions.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                permissions.add(permissionGrant.name);</span><br><span class="line">                <span class="comment">//【5.1.1.3】再次调用 grantRuntimePermissionsLPw 授予该运行时权限！</span></span><br><span class="line">                grantRuntimePermissionsLPw(pkg, permissions, <span class="keyword">false</span>,</span><br><span class="line">                        permissionGrant.fixed, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-1-DPGrantPolicy-readDefaultPermissionExceptionsLPw"><a href="#5-1-3-1-DPGrantPolicy-readDefaultPermissionExceptionsLPw" class="headerlink" title="5.1.3.1 DPGrantPolicy.readDefaultPermissionExceptionsLPw"></a>5.1.3.1 DPGrantPolicy.readDefaultPermissionExceptionsLPw</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@NonNull</span> ArrayMap&lt;String, List&lt;DefaultPermissionGrant&gt;&gt;</span><br><span class="line">        readDefaultPermissionExceptionsLPw() &#123;</span><br><span class="line">    <span class="comment">//【1】获得 /etc/default-permissions 文件目录对象！</span></span><br><span class="line">    File dir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"etc/default-permissions"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dir.exists() || !dir.isDirectory() || !dir.canRead()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayMap&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File[] files = dir.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayMap&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ArrayMap&lt;String, List&lt;DefaultPermissionGrant&gt;&gt; grantExceptions = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.getPath().endsWith(<span class="string">".xml"</span>)) &#123;</span><br><span class="line">            Slog.i(TAG, <span class="string">"Non-xml file "</span> + file + <span class="string">" in "</span> + dir + <span class="string">" directory, ignoring"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.canRead()) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Default permissions file "</span> + file + <span class="string">" cannot be read"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            InputStream str = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file))</span><br><span class="line">        ) &#123;</span><br><span class="line">            XmlPullParser parser = Xml.newPullParser();</span><br><span class="line">            parser.setInput(str, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//【5.1.3.1.1】parse 解析该目录下的每一个 xml 文件，将结果保存到 grantExceptions 中！</span></span><br><span class="line">            parse(parser, grantExceptions);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException | IOException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Error reading default permissions file "</span> + file, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grantExceptions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-1-1-DPGrantPolicy-parse"><a href="#5-1-3-1-1-DPGrantPolicy-parse" class="headerlink" title="5.1.3.1.1 DPGrantPolicy.parse"></a>5.1.3.1.1 DPGrantPolicy.parse</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(XmlPullParser parser, Map&lt;String, List&lt;DefaultPermissionGrant&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">        outGrantExceptions)</span> <span class="keyword">throws</span> IOException, XmlPullParserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> outerDepth = parser.getDepth();</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (TAG_EXCEPTIONS.equals(parser.getName())) &#123; <span class="comment">// 标签 exceptions</span></span><br><span class="line">            <span class="comment">//【5.1.3.1.2】parseExceptions 继续解析</span></span><br><span class="line">            parseExceptions(parser, outGrantExceptions);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Unknown tag "</span> + parser.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-1-2-DPGrantPolicy-parseExceptions"><a href="#5-1-3-1-2-DPGrantPolicy-parseExceptions" class="headerlink" title="5.1.3.1.2 DPGrantPolicy.parseExceptions"></a>5.1.3.1.2 DPGrantPolicy.parseExceptions</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseExceptions</span><span class="params">(XmlPullParser parser, Map&lt;String, List&lt;DefaultPermissionGrant&gt;&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">        outGrantExceptions)</span> <span class="keyword">throws</span> IOException, XmlPullParserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> outerDepth = parser.getDepth();</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (TAG_EXCEPTION.equals(parser.getName())) &#123; <span class="comment">// exception 标签名；</span></span><br><span class="line">            String packageName = parser.getAttributeValue(<span class="keyword">null</span>, ATTR_PACKAGE); <span class="comment">// package 属性名；</span></span><br><span class="line"></span><br><span class="line">            List&lt;DefaultPermissionGrant&gt; packageExceptions =</span><br><span class="line">                    outGrantExceptions.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (packageExceptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】要处理的应用必须是 system app！</span></span><br><span class="line">                PackageParser.Package pkg = getSystemPackageLPr(packageName);</span><br><span class="line">                <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"Unknown package:"</span> + packageName);</span><br><span class="line">                    XmlUtils.skipCurrentTag(parser);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【2】必须支持运行时权限！</span></span><br><span class="line">                <span class="keyword">if</span> (!doesPackageSupportRuntimePermissions(pkg)) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">"Skipping non supporting runtime permissions package:"</span></span><br><span class="line">                            + packageName);</span><br><span class="line">                    XmlUtils.skipCurrentTag(parser);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3】创建一个 list，保存权限信息！</span></span><br><span class="line">                packageExceptions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                outGrantExceptions.put(packageName, packageExceptions);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5.1.3.1.3】调用 parsePermission 继续解析！</span></span><br><span class="line">            parsePermission(parser, packageExceptions);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Unknown tag "</span> + parser.getName() + <span class="string">"under &lt;exceptions&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-1-3-DPGrantPolicy-parsePermission"><a href="#5-1-3-1-3-DPGrantPolicy-parsePermission" class="headerlink" title="5.1.3.1.3 DPGrantPolicy.parsePermission"></a>5.1.3.1.3 DPGrantPolicy.parsePermission</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parsePermission</span><span class="params">(XmlPullParser parser, List&lt;DefaultPermissionGrant&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">        outPackageExceptions)</span> <span class="keyword">throws</span> IOException, XmlPullParserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> outerDepth = parser.getDepth();</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; (type != XmlPullParser.END_TAG || parser.getDepth() &gt; outerDepth)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TAG_PERMISSION.contains(parser.getName())) &#123; <span class="comment">// permission 标签！</span></span><br><span class="line">            String name = parser.getAttributeValue(<span class="keyword">null</span>, ATTR_NAME); <span class="comment">// name 属性</span></span><br><span class="line">            <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Mandatory name attribute missing for permission tag"</span>);</span><br><span class="line">                XmlUtils.skipCurrentTag(parser);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> fixed = XmlUtils.readBooleanAttribute(parser, ATTR_FIXED); <span class="comment">// fixed 属性</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.1.3.1.4】封装为一个 DefaultPermissionGrant 对象！</span></span><br><span class="line">            DefaultPermissionGrant exception = <span class="keyword">new</span> DefaultPermissionGrant(name, fixed);</span><br><span class="line">            outPackageExceptions.add(exception);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Unknown tag "</span> + parser.getName() + <span class="string">"under &lt;exception&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3-1-4-new-DefaultPermissionGrant"><a href="#5-1-3-1-4-new-DefaultPermissionGrant" class="headerlink" title="5.1.3.1.4 new DefaultPermissionGrant"></a>5.1.3.1.4 new DefaultPermissionGrant</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPermissionGrant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> fixed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultPermissionGrant</span><span class="params">(String name, <span class="keyword">boolean</span> fixed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.fixed = fixed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultPermissionGrant 对象的属性简单，这里不多看了！</p><h3 id="5-1-4-DPGrantPolicy-grantRuntimePermissionsLPw-默认授予核心方法"><a href="#5-1-4-DPGrantPolicy-grantRuntimePermissionsLPw-默认授予核心方法" class="headerlink" title="5.1.4 DPGrantPolicy.grantRuntimePermissionsLPw - 默认授予核心方法"></a>5.1.4 DPGrantPolicy.grantRuntimePermissionsLPw - 默认授予核心方法</h3><p>默认授予运行时权限，调用的是内部的两个 grantRuntimePermissionsLPw 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantRuntimePermissionsLPw</span><span class="params">(PackageParser.Package pkg, Set&lt;String&gt; permissions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> systemFixed, <span class="keyword">int</span> userId)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>]<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantRuntimePermissionsLPw</span><span class="params">(PackageParser.Package pkg, Set&lt;String&gt; permissions,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> systemFixed, <span class="keyword">boolean</span> isDefaultPhoneOrSms, <span class="keyword">int</span> userId)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>其中，方法一会调用方法二，这是参数 boolean systemFixed 设置的是 false！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantRuntimePermissionsLPw</span><span class="params">(PackageParser.Package pkg, Set&lt;String&gt; permissions,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> systemFixed, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    grantRuntimePermissionsLPw(pkg, permissions, systemFixed, <span class="keyword">false</span>, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用的是五参的同名方法：systemFixed 表示是否设置 system fix，isDefaultPhoneOrSms 表示是否是默认的 phone or sms app，permissions 为该 package 要被默认授予的运行时权限集合：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grantRuntimePermissionsLPw</span><span class="params">(PackageParser.Package pkg, Set&lt;String&gt; permissions,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> systemFixed, <span class="keyword">boolean</span> isDefaultPhoneOrSms, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】再次校验应用是否有请求权限！</span></span><br><span class="line">    <span class="keyword">if</span> (pkg.requestedPermissions.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得本次扫描的 system apk 的权限！</span></span><br><span class="line">    List&lt;String&gt; requestedPermissions = pkg.requestedPermissions;</span><br><span class="line">    Set&lt;String&gt; grantablePermissions = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果是默认的 phone app 或者 sms app，如果其更新过，我们会默认授予更新过的 app 申明的权限</span></span><br><span class="line">    <span class="comment">// 如果这是一个被更新过的其他类型的 system app，我们只会默认授予是那些 system 分区的被更新过得 app 申明过的权限！</span></span><br><span class="line">    <span class="keyword">if</span> (!isDefaultPhoneOrSms &amp;&amp; pkg.isUpdatedSystemApp()) &#123;</span><br><span class="line">        PackageSetting sysPs = mService.mSettings.getDisabledSystemPkgLPr(pkg.packageName);</span><br><span class="line">        <span class="keyword">if</span> (sysPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sysPs.pkg.requestedPermissions.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!requestedPermissions.equals(sysPs.pkg.requestedPermissions)) &#123;</span><br><span class="line">                <span class="comment">// 表示本次扫描的 package 申明过的权限；</span></span><br><span class="line">                grantablePermissions = <span class="keyword">new</span> ArraySet&lt;&gt;(requestedPermissions);</span><br><span class="line">                <span class="comment">// 替换为被更新过的 system app 申明的权限！！</span></span><br><span class="line">                requestedPermissions = sysPs.pkg.requestedPermissions;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】遍历该 package 申明过的所有权限；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> grantablePermissionCount = requestedPermissions.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grantablePermissionCount; i++) &#123;</span><br><span class="line">        String permission = requestedPermissions.get(i);</span><br><span class="line">        <span class="comment">//【4.1】如果这是一个被更新过的 system app，跳过那些 data 分区新 app 没有声明的权限！</span></span><br><span class="line">        <span class="keyword">if</span> (grantablePermissions != <span class="keyword">null</span> &amp;&amp; !grantablePermissions.contains(permission)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.2】接下来，就是授予权限权限的过程了！</span></span><br><span class="line">        <span class="keyword">if</span> (permissions.contains(permission)) &#123;</span><br><span class="line">            <span class="comment">//【5.1.1.3.1】获得权限的 flags；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> flags = mService.getPermissionFlags(permission, pkg.packageName, userId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If any flags are set to the permission, then it is either set in</span></span><br><span class="line">            <span class="comment">// its current state by the system or device/profile owner or the user.</span></span><br><span class="line">            <span class="comment">// In all these cases we do not want to clobber the current state.</span></span><br><span class="line">            <span class="comment">// Unless the caller wants to override user choices. The override is</span></span><br><span class="line">            <span class="comment">// to make sure we can grant the needed permission to the default</span></span><br><span class="line">            <span class="comment">// sms and phone apps after the user chooses this in the UI.</span></span><br><span class="line">            <span class="comment">//【4.2.1】如果该权限的 flags 没有设置任何标志位，或者是默认的 phone app 或者 sms app 会进入 IF 分支！</span></span><br><span class="line">            <span class="keyword">if</span> (flags == <span class="number">0</span> || isDefaultPhoneOrSms) &#123;</span><br><span class="line">                <span class="comment">//【4.2.1.1】对于 isDefaultPhoneOrSms 我们会再判断下是否设置了 system fix 或者 policy fix 标志位!</span></span><br><span class="line">                <span class="comment">// 如果设置了，那么我们不会修改标志位！</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> fixedFlags = PackageManager.FLAG_PERMISSION_SYSTEM_FIXED</span><br><span class="line">                        | PackageManager.FLAG_PERMISSION_POLICY_FIXED;</span><br><span class="line">                <span class="keyword">if</span> ((flags &amp; fixedFlags) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【4.2.1.2】这里调用了 PMS 的 grantRuntimePermission 方法，授予权限，不多说了！</span></span><br><span class="line">                mService.grantRuntimePermission(pkg.packageName, permission, userId);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"Granted "</span> + (systemFixed ? <span class="string">"fixed "</span> : <span class="string">"not fixed "</span>)</span><br><span class="line">                            + permission + <span class="string">" to default handler "</span> + pkg.packageName);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【4.2.1.3】更新该运行时权限的 flags，先只设置 FLAG_PERMISSION_GRANTED_BY_DEFAULT 标志位</span></span><br><span class="line">                <span class="comment">// 如果为 system fix，还会设置 FLAG_PERMISSION_SYSTEM_FIXED 位！</span></span><br><span class="line">                <span class="keyword">int</span> newFlags = PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">                <span class="keyword">if</span> (systemFixed) &#123;</span><br><span class="line">                    newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里调用了 PMS 的 updatePermissionFlags 方法，更新权限的 flags 为 newFlags！</span></span><br><span class="line">                mService.updatePermissionFlags(permission, pkg.packageName,</span><br><span class="line">                        newFlags, newFlags, userId);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4.2.2】如果权限被设置了 FLAG_PERMISSION_GRANTED_BY_DEFAULT 和 FLAG_PERMISSION_SYSTEM_FIXED 标志位</span></span><br><span class="line">            <span class="comment">// 但是本次授予是 no system fix，那么我们就要去掉 system fix 标志位！</span></span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (flags &amp; PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; !systemFixed) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"Granted not fixed "</span> + permission + <span class="string">" to default handler "</span></span><br><span class="line">                            + pkg.packageName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【4.2.2.1】更新权限的 flags 去掉 system fix 标志位！</span></span><br><span class="line">                mService.updatePermissionFlags(permission, pkg.packageName,</span><br><span class="line">                        PackageManager.FLAG_PERMISSION_SYSTEM_FIXED, <span class="number">0</span>, userId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法我们就分析到这里！</p><h4 id="5-1-4-1-PackageManagerS-getPermissionFlags"><a href="#5-1-4-1-PackageManagerS-getPermissionFlags" class="headerlink" title="5.1.4.1 PackageManagerS.getPermissionFlags"></a>5.1.4.1 PackageManagerS.getPermissionFlags</h4><p>该方法用于获得权限的 flags；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】首先是校验是否具有相应的权限！</span></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"getPermissionFlags"</span>);</span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】查询权限的 Flags！</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">        <span class="keyword">return</span> permissionsState.getPermissionFlags(name, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-1-4-1-1-PermissionsState-getPermissionFlags"><a href="#5-1-4-1-1-PermissionsState-getPermissionFlags" class="headerlink" title="5.1.4.1.1 PermissionsState.getPermissionFlags"></a>5.1.4.1.1 PermissionsState.getPermissionFlags</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionFlags</span><span class="params">(String name, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果是运行时权限的话，那就返回运行时权限的 flags</span></span><br><span class="line">    PermissionState installPermState = getInstallPermissionState(name);</span><br><span class="line">    <span class="keyword">if</span> (installPermState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> installPermState.getFlags();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果是安装时权限的话，那就返回安装时权限的 flags</span></span><br><span class="line">    PermissionState runtimePermState = getRuntimePermissionState(name, userId);</span><br><span class="line">    <span class="keyword">if</span> (runtimePermState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> runtimePermState.getFlags();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是具体的获取运行时权限或者安装时权限的权限状态的方法，很简单，不多说了！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PermissionState <span class="title">getInstallPermissionState</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPermissionState(name, UserHandle.USER_ALL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionState <span class="title">getRuntimePermissionState</span><span class="params">(String name, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line">    <span class="keyword">return</span> getPermissionState(name, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-2-清除那些陈旧不用的用户和应用"><a href="#5-2-清除那些陈旧不用的用户和应用" class="headerlink" title="5.2 清除那些陈旧不用的用户和应用"></a>5.2 清除那些陈旧不用的用户和应用</h2><p>代码段如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reconcileUsers(StorageManager.UUID_PRIVATE_INTERNAL);</span><br><span class="line">reconcileApps(StorageManager.UUID_PRIVATE_INTERNAL);</span><br></pre></td></tr></table></figure></p><h3 id="5-2-1-PackageManagerService-reconcileUsers"><a href="#5-2-1-PackageManagerService-reconcileUsers" class="headerlink" title="5.2.1 PackageManagerService.reconcileUsers"></a>5.2.1 PackageManagerService.reconcileUsers</h3><p>该方法会检测清除不用的设备用户：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconcileUsers</span><span class="params">(String volumeUuid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 收集 /data/user_de 目录下的所有文件；</span></span><br><span class="line">    Collections.addAll(files, FileUtils</span><br><span class="line">            .listFilesOrEmpty(Environment.getDataUserDeDirectory(volumeUuid)));</span><br><span class="line">    <span class="comment">// 收集 /data/user 目录下的所有文件；</span></span><br><span class="line">    Collections.addAll(files, FileUtils</span><br><span class="line">            .listFilesOrEmpty(Environment.getDataUserCeDirectory(volumeUuid)));</span><br><span class="line">    <span class="comment">// 收集 /data/system_de 目录下的所有文件；</span></span><br><span class="line">    Collections.addAll(files, FileUtils</span><br><span class="line">            .listFilesOrEmpty(Environment.getDataSystemDeDirectory()));</span><br><span class="line">    <span class="comment">// 收集 /data/system 目录下的所有文件；</span></span><br><span class="line">    Collections.addAll(files, FileUtils</span><br><span class="line">            .listFilesOrEmpty(Environment.getDataSystemCeDirectory()));</span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.isDirectory()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> userId;</span><br><span class="line">        <span class="keyword">final</span> UserInfo info;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = Integer.parseInt(file.getName());</span><br><span class="line">            <span class="comment">// 尝试获得设备用户对应的 UserInfo！</span></span><br><span class="line">            info = sUserManager.getUserInfo(userId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Invalid user directory "</span> + file);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断用户是否无效！</span></span><br><span class="line">        <span class="keyword">boolean</span> destroyUser = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logCriticalInfo(Log.WARN, <span class="string">"Destroying user directory "</span> + file</span><br><span class="line">                    + <span class="string">" because no matching user was found"</span>);</span><br><span class="line">            destroyUser = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mOnlyCore) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                UserManagerService.enforceSerialNumber(file, info.serialNumber);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                logCriticalInfo(Log.WARN, <span class="string">"Destroying user directory "</span> + file</span><br><span class="line">                        + <span class="string">" because we failed to enforce serial number: "</span> + e);</span><br><span class="line">                destroyUser = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.2.1.1】如果设备用户无效了，清楚该用户的所有数据！</span></span><br><span class="line">        <span class="keyword">if</span> (destroyUser) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                destroyUserDataLI(volumeUuid, userId,</span><br><span class="line">                        StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一步，收集了 /data/user_de，/data/user，/data/system_de 和 /data/system 目录下的文件，这些文件的名字，都是以 userId 开头的！</p><h4 id="5-2-1-1-PackageManagerService-destroyUserDataLI"><a href="#5-2-1-1-PackageManagerService-destroyUserDataLI" class="headerlink" title="5.2.1.1 PackageManagerService.destroyUserDataLI"></a>5.2.1.1 PackageManagerService.destroyUserDataLI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyUserDataLI</span><span class="params">(String volumeUuid, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StorageManager storage = mContext.getSystemService(StorageManager.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】通过 Installer 来删除该用户下的 app data, profile data, and media data</span></span><br><span class="line">        mInstaller.destroyUserData(volumeUuid, userId, flags);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】删除 system data！</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(volumeUuid, StorageManager.UUID_PRIVATE_INTERNAL)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_DE) != <span class="number">0</span>) &#123;</span><br><span class="line">                FileUtils.deleteContentsAndDir(Environment.getUserSystemDirectory(userId));</span><br><span class="line">                FileUtils.deleteContentsAndDir(Environment.getDataSystemDeDirectory(userId));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">                FileUtils.deleteContentsAndDir(Environment.getDataSystemCeDirectory(userId));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】取消挂载！</span></span><br><span class="line">        storage.destroyUserStorage(volumeUuid, userId, flags);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logCriticalInfo(Log.WARN,</span><br><span class="line">                <span class="string">"Failed to destroy user "</span> + userId + <span class="string">" on volume "</span> + volumeUuid + <span class="string">": "</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的作用很简单，不多说了！</p><h3 id="5-2-2-PackageManagerService-reconcileApps"><a href="#5-2-2-PackageManagerService-reconcileApps" class="headerlink" title="5.2.2 PackageManagerService.reconcileApps"></a>5.2.2 PackageManagerService.reconcileApps</h3><p>清除那些在该用户下已经卸载的，无效的应用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconcileApps</span><span class="params">(String volumeUuid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】手机 /data/app 目录下的所有文件</span></span><br><span class="line">    <span class="keyword">final</span> File[] files = FileUtils</span><br><span class="line">            .listFilesOrEmpty(Environment.getDataAppDirectory(volumeUuid));</span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPackage = (isApkFile(file) || file.isDirectory())</span><br><span class="line">                &amp;&amp; !PackageInstallerService.isStageName(file.getName());</span><br><span class="line">        <span class="keyword">if</span> (!isPackage) &#123;</span><br><span class="line">            <span class="comment">// Ignore entries which are not packages</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 再次解析该 package，返回 PackageLite 对象！</span></span><br><span class="line">            <span class="keyword">final</span> PackageLite pkg = PackageParser.parsePackageLite(file,</span><br><span class="line">                    PackageParser.PARSE_MUST_BE_APK);</span><br><span class="line">            <span class="comment">//【4.2.2.1】判断该 package 是否有效，无效会抛出一个异常！</span></span><br><span class="line">            assertPackageKnown(volumeUuid, pkg.packageName);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException | PackageManagerException e) &#123;</span><br><span class="line">            logCriticalInfo(Log.WARN, <span class="string">"Destroying "</span> + file + <span class="string">" due to: "</span> + e);</span><br><span class="line">            <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">                <span class="comment">//【4.2.2.2】package 无效，删除该 apk！</span></span><br><span class="line">                removeCodePathLI(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-1-PackageManagerService-assertPackageKnown"><a href="#5-2-2-1-PackageManagerService-assertPackageKnown" class="headerlink" title="5.2.2.1 PackageManagerService.assertPackageKnown"></a>5.2.2.1 PackageManagerService.assertPackageKnown</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertPackageKnown</span><span class="params">(String volumeUuid, String packageName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果重命名过了，转为以前的名字；</span></span><br><span class="line">        packageName = normalizePackageNameLPr(packageName);</span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="comment">//【2】如果系统中没有该 apk 的安装信息，或者其所处的 volume 异常，那么无效，抛出异常！</span></span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(<span class="string">"Package "</span> + packageName + <span class="string">" is unknown"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TextUtils.equals(volumeUuid, ps.volumeUuid)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(</span><br><span class="line">                    <span class="string">"Package "</span> + packageName + <span class="string">" found on unknown volume "</span> + volumeUuid</span><br><span class="line">                            + <span class="string">"; expected volume "</span> + ps.volumeUuid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于判断 package 是否有效！</p><h4 id="5-2-2-2-PackageManagerService-removeCodePathLI"><a href="#5-2-2-2-PackageManagerService-removeCodePathLI" class="headerlink" title="5.2.2.2 PackageManagerService.removeCodePathLI"></a>5.2.2.2 PackageManagerService.removeCodePathLI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeCodePathLI</span><span class="params">(File codePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (codePath.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstaller.rmPackageDir(codePath.getAbsolutePath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Failed to remove code path"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        codePath.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法删除指定的 apk 文件！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现，本文是作者原创，转载请说明出处！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ContentProvider篇  2 - ContentProvider 的启动</title>
    <link href="https://coolqi.top/2018/04/13/ContentProvider2-contentProviderStartProcess/"/>
    <id>https://coolqi.top/2018/04/13/ContentProvider2-contentProviderStartProcess/</id>
    <published>2018-04-13T12:46:25.000Z</published>
    <updated>2018-11-20T15:43:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 <strong>Android 7.1.1</strong>，分析 ContentProvider 的架构和原理。</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>ContentProvider 是进程间通信的利器之一，充当数据存储和出具共享的中间者，其和核心是 Binder 和匿名共享内存！</p><p>我们在访问一个 ContentProvider 的时候，一般情况下都会先拉起该 ContentProvider 所在的进程，然后对其的增删改查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ContentResolver cr = getContentResolver();</span><br><span class="line">Cursor cursor = cr.query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>下面我们来分析下，其主要的流程：</p><h1 id="1-ContextImpl"><a href="#1-ContextImpl" class="headerlink" title="1 ContextImpl"></a>1 ContextImpl</h1><h2 id="1-1-getContentResolver"><a href="#1-1-getContentResolver" class="headerlink" title="1.1 getContentResolver"></a>1.1 getContentResolver</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentResolver <span class="title">getContentResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mContentResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 mContentResolver 是一个 ApplicationContentResolver 的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ApplicationContentResolver mContentResolver;</span><br></pre></td></tr></table></figure><p>其创建是在 ContentImpl 初始化的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ContextImpl</span><span class="params">(@Nullable ContextImpl container, @NonNull ActivityThread mainThread,</span></span></span><br><span class="line"><span class="function"><span class="params">        @NonNull LoadedApk packageInfo, @Nullable String splitName,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable IBinder activityToken, @Nullable UserHandle user, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...<span class="comment">// 省略掉和 provider 无关的代码！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1.2】创建 ApplicationContentResolver 实例！</span></span><br><span class="line">    mContentResolver = <span class="keyword">new</span> ApplicationContentResolver(<span class="keyword">this</span>, mainThread, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-new-ApplicationContentResolver"><a href="#1-2-new-ApplicationContentResolver" class="headerlink" title="1.2 new ApplicationContentResolver"></a>1.2 new ApplicationContentResolver</h2><p>可以看到 ApplicationContentResolver 继承了 ContentResolver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContentResolver</span> <span class="keyword">extends</span> <span class="title">ContentResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityThread mMainThread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserHandle mUser;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationContentResolver</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, ActivityThread mainThread, UserHandle user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mMainThread = Preconditions.checkNotNull(mainThread);</span><br><span class="line">        mUser = Preconditions.checkNotNull(user);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，ApplicationContentResolver 继承了 ContentResolver 中和增删改查相关的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">Cursor <span class="title">query</span><span class="params">(...)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(...)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">Uri <span class="title">insert</span><span class="params">(...)</span> </span>&#123;...&#125;</span><br><span class="line">... ... ...</span><br></pre></td></tr></table></figure><p>下面，我们通过分析 query 接口，来了解下 ContentProvider 的启动流程！</p><h1 id="2-ContentResolver"><a href="#2-ContentResolver" class="headerlink" title="2 ContentResolver"></a>2 ContentResolver</h1><h2 id="2-1-query-查询"><a href="#2-1-query-查询" class="headerlink" title="2.1 query - 查询"></a>2.1 query - 查询</h2><p>下面我们来看下查询的调用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="meta">@Nullable</span> <span class="function">Cursor <span class="title">query</span><span class="params">(<span class="keyword">final</span> @RequiresPermission.Read @NonNull Uri uri,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable String[] projection, @Nullable String selection,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable String[] selectionArgs, @Nullable String sortOrder,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Nullable CancellationSignal cancellationSignal)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】检查 uri 是否为 null；</span></span><br><span class="line">    Preconditions.checkNotNull(uri, <span class="string">"uri"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【×3.1】获得 unstable Provider 对象！</span></span><br><span class="line">    IContentProvider unstableProvider = acquireUnstableProvider(uri);</span><br><span class="line">    <span class="keyword">if</span> (unstableProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IContentProvider stableProvider = <span class="keyword">null</span>;</span><br><span class="line">    Cursor qCursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = SystemClock.uptimeMillis();</span><br><span class="line"></span><br><span class="line">        ICancellationSignal remoteCancellationSignal = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cancellationSignal != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cancellationSignal.throwIfCanceled();</span><br><span class="line">            remoteCancellationSignal = unstableProvider.createCancellationSignal();</span><br><span class="line">            cancellationSignal.setRemote(remoteCancellationSignal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【2】通过 unstable Provider 查询，并返回游标 Cursor！</span></span><br><span class="line">            qCursor = unstableProvider.query(mPackageName, uri, projection,</span><br><span class="line">                    selection, selectionArgs, sortOrder, remoteCancellationSignal);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (DeadObjectException e) &#123;</span><br><span class="line">            <span class="comment">//【3】如果 query 时远程进程死亡，我们会尝试恢复，但是恢复时，我们会获取 stable provider！</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*3.2】处理 unstable Provider 进程死亡的清理操作！！</span></span><br><span class="line">            unstableProviderDied(unstableProvider);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【×3.3】获得 stable Provider 对象！</span></span><br><span class="line">            stableProvider = acquireProvider(uri);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stableProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】通过 stable Provider 查询，并返回游标 Cursor！</span></span><br><span class="line">            qCursor = stableProvider.query(mPackageName, uri, projection,</span><br><span class="line">                    selection, selectionArgs, sortOrder, remoteCancellationSignal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】强制执行 query 的操作，可能会失败抛出运行时异常！！</span></span><br><span class="line">        qCursor.getCount();</span><br><span class="line">        <span class="keyword">long</span> durationMillis = SystemClock.uptimeMillis() - startTime;</span><br><span class="line">        maybeLogQueryToEventLog(durationMillis, uri, projection, selection, sortOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】将查询结果 Cursor 封装成 CursorWrapperInner，并返回！！</span></span><br><span class="line">        <span class="comment">// 可以看到，我们最后访问的其实是 CursorWrapperInner！！</span></span><br><span class="line">        <span class="keyword">final</span> IContentProvider provider = (stableProvider != <span class="keyword">null</span>) ? stableProvider</span><br><span class="line">                : acquireProvider(uri);</span><br><span class="line">        <span class="keyword">final</span> CursorWrapperInner wrapper = <span class="keyword">new</span> CursorWrapperInner(qCursor, provider);</span><br><span class="line">        stableProvider = <span class="keyword">null</span>;</span><br><span class="line">        qCursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> wrapper;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">//【7】如果抛出运行时异常，ams 会杀掉该进程！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (qCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            qCursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cancellationSignal != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cancellationSignal.setRemote(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unstableProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            releaseUnstableProvider(unstableProvider);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stableProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            releaseProvider(stableProvider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里简单的说下，stable provider 和 unstable provider 的区别：</p><ul><li>获取 stable provider 的进程会因为 provider 所在进程死亡而被杀死；而获取 unstable provider 的进程则不会出现这种情况；</li></ul><p>具体的原因我们后面再分析！</p><p>这个流程很简单，不多说了！！</p><h3 id="2-1-1-acquireUnstableProvider-获取-unstable-provider"><a href="#2-1-1-acquireUnstableProvider-获取-unstable-provider" class="headerlink" title="2.1.1 acquireUnstableProvider - 获取 unstable provider"></a>2.1.1 acquireUnstableProvider - 获取 unstable provider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireUnstableProvider</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 uri 的 scheme 不是 "content"，那就返回 null！</span></span><br><span class="line">    <span class="keyword">if</span> (!SCHEME_CONTENT.equals(uri.getScheme())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果 uri 没有指定 authority，也返回 null；</span></span><br><span class="line">    String auth = uri.getAuthority();</span><br><span class="line">    <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【×3.1】继续调用！</span></span><br><span class="line">        <span class="keyword">return</span> acquireUnstableProvider(mContext, uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-acquireProvider-获取-stable-provider"><a href="#2-1-2-acquireProvider-获取-stable-provider" class="headerlink" title="2.1.2 acquireProvider - 获取 stable provider"></a>2.1.2 acquireProvider - 获取 stable provider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 uri 的 scheme 不是 "content"，那就返回 null！</span></span><br><span class="line">    <span class="keyword">if</span> (!SCHEME_CONTENT.equals(uri.getScheme())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果 uri 没有指定 authority，也返回 null；</span></span><br><span class="line">    <span class="keyword">final</span> String auth = uri.getAuthority();</span><br><span class="line">    <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【×3.3】继续调用！</span></span><br><span class="line">        <span class="keyword">return</span> acquireProvider(mContext, auth);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-ApplicationContentResolver"><a href="#3-ApplicationContentResolver" class="headerlink" title="3 ApplicationContentResolver"></a>3 ApplicationContentResolver</h1><h2 id="3-1-acquireUnstableProvider-获取-unstable-provider"><a href="#3-1-acquireUnstableProvider-获取-unstable-provider" class="headerlink" title="3.1 acquireUnstableProvider  - 获取 unstable provider"></a>3.1 acquireUnstableProvider  - 获取 unstable provider</h2><p>获取 unstable provider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> IContentProvider <span class="title">acquireUnstableProvider</span><span class="params">(Context c, String auth)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×4.1】进入 ActivityThread</span></span><br><span class="line">    <span class="keyword">return</span> mMainThread.acquireProvider(c,</span><br><span class="line">            ContentProvider.getAuthorityWithoutUserId(auth),</span><br><span class="line">            resolveUserIdFromAuthority(auth), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-unstableProviderDied"><a href="#3-2-unstableProviderDied" class="headerlink" title="3.2 unstableProviderDied"></a>3.2 unstableProviderDied</h2><p>处理 unstable provider 所在进程死亡后的工作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unstableProviderDied</span><span class="params">(IContentProvider icp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×4.2】进入 ActivityThread</span></span><br><span class="line">    mMainThread.handleUnstableProviderDied(icp.asBinder(), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-acquireProvider-获取-stable-provider"><a href="#3-3-acquireProvider-获取-stable-provider" class="headerlink" title="3.3 acquireProvider  - 获取 stable provider"></a>3.3 acquireProvider  - 获取 stable provider</h2><p>获取 stable provider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(Context context, String auth)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×4.1】进入 ActivityThread</span></span><br><span class="line">    <span class="keyword">return</span> mMainThread.acquireProvider(context,</span><br><span class="line">            ContentProvider.getAuthorityWithoutUserId(auth),</span><br><span class="line">            resolveUserIdFromAuthority(auth), <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 ApplicationContentResolver 最终都访问了 ActivityThread 中的逻辑！</p><h1 id="4-ActivityThread"><a href="#4-ActivityThread" class="headerlink" title="4 ActivityThread"></a>4 ActivityThread</h1><h2 id="4-1-acquireProvider-获取-provider"><a href="#4-1-acquireProvider-获取-provider" class="headerlink" title="4.1 acquireProvider - 获取 provider"></a>4.1 acquireProvider - 获取 provider</h2><p>无论是 unstable provider 还是 stable provider，最终都会调用 ActivityThread 的 acquireProvider 方法，参数传递：</p><ul><li><strong>String auth</strong>：authority 属性；</li><li><strong>int userId</strong>：设备用户 id；</li><li><strong>boolean stable</strong>：provider 的类型；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context c, String auth, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【×4.1.1】尝试查询一个已经存在的 provider，如果有，那就返回这个 provider！</span></span><br><span class="line">    <span class="keyword">final</span> IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IActivityManager.ContentProviderHolder holder = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×5.1】如果没有已经存在的，那就需要通过 ams 来获取！</span></span><br><span class="line">        holder = ActivityManagerNative.getDefault().getContentProvider(</span><br><span class="line">                getApplicationThread(), auth, userId, stable);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Failed to find provider info for "</span> + auth);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×6.4】增加引用计数，将 provider 封装为 ContentProviderHolder 然后返回！</span></span><br><span class="line">    holder = installProvider(c, holder, holder.info,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/*noisy*/</span>, holder.noReleaseNeeded, stable);</span><br><span class="line">    <span class="comment">//【1】最后返回 holder.provider！</span></span><br><span class="line">    <span class="keyword">return</span> holder.provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 holder 和 holder.provider 我们后面再分析！</p><p>继续来看：</p><h3 id="4-1-1-acquireExistingProvider"><a href="#4-1-1-acquireExistingProvider" class="headerlink" title="4.1.1 acquireExistingProvider"></a>4.1.1 acquireExistingProvider</h3><p>尝试获得已经存在的一个 provider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> IContentProvider <span class="title">acquireExistingProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context c, String auth, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mProviderMap) &#123;</span><br><span class="line">        <span class="comment">//【1】根据 authority 属性创建 ProviderKey 对象！</span></span><br><span class="line">        <span class="keyword">final</span> ProviderKey key = <span class="keyword">new</span> ProviderKey(auth, userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】尝试获得已经存在的 ProviderClientRecord 客户端对象！</span></span><br><span class="line">        <span class="keyword">final</span> ProviderClientRecord pr = mProviderMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (pr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】判断 provdier 所在的进程是否死亡，这里的 provider 其实是一个 Transport 对象，</span></span><br><span class="line">        <span class="comment">// 目标进程的 provider 被拉起是会创建！</span></span><br><span class="line">        IContentProvider provider = pr.mProvider;</span><br><span class="line">        IBinder jBinder = provider.asBinder();</span><br><span class="line">        <span class="keyword">if</span> (!jBinder.isBinderAlive()) &#123;</span><br><span class="line">            <span class="comment">//【3.1】如果 provider 所在进程死亡了，那么就返回 null！</span></span><br><span class="line">            Log.i(TAG, <span class="string">"Acquiring provider "</span> + auth + <span class="string">" for user "</span> + userId</span><br><span class="line">                    + <span class="string">": existing object's process dead"</span>);</span><br><span class="line">            <span class="comment">//【×4.1.1.1】处理进程死亡后，unstable providre 的引用计数！</span></span><br><span class="line">            handleUnstableProviderDiedLocked(jBinder, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】如果可以找到已经存在的合适的 provider，那么就增加客户端的引用计数！</span></span><br><span class="line">        ProviderRefCount prc = mProviderRefCountMap.get(jBinder);</span><br><span class="line">        <span class="keyword">if</span> (prc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【×4.1.1.2】增加客户端的引用计数！</span></span><br><span class="line">            incProviderRefLocked(prc, stable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要逻辑如下：</p><ul><li>尝试从 ActivityThread 的 mProviderMap 查询已存在相对应的 provider，若不存在，则返回 null；</li><li>如果 ActivityThread 存在该 provider ，但其所在的进程已经死亡，则调用 handleUnstableProviderDiedLocked 清理 provider 信息，并返回 null；</li><li>当 provider 记录存在，并且其进程仍然存活，则在 provider 引用计数不为空时继续增加引用计数。然后返回当前进程已经存在的 provider。</li></ul><h4 id="4-1-1-1-handleUnstableProviderDiedLocked"><a href="#4-1-1-1-handleUnstableProviderDiedLocked" class="headerlink" title="4.1.1.1 handleUnstableProviderDiedLocked"></a>4.1.1.1 handleUnstableProviderDiedLocked</h4><p>如果 provdier 所在的进程已经死亡，那么我们会将该 provider 从引用它的进程中的相关结构体中移除！</p><p>boolean fromClient 是否是客户端移除的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleUnstableProviderDiedLocked</span><span class="params">(IBinder provider, <span class="keyword">boolean</span> fromClient)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得该进程对该 provider 的引用对象！</span></span><br><span class="line">    ProviderRefCount prc = mProviderRefCountMap.get(provider);</span><br><span class="line">    <span class="keyword">if</span> (prc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG, <span class="string">"Cleaning up dead provider "</span></span><br><span class="line">                + provider + <span class="string">" "</span> + prc.holder.info.name);</span><br><span class="line">        <span class="comment">//【1.1】从引用计数 mProviderRefCountMap 中移除该 provider 的信息！</span></span><br><span class="line">        mProviderRefCountMap.remove(provider);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mProviderMap.size() - <span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            ProviderClientRecord pr = mProviderMap.valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pr != <span class="keyword">null</span> &amp;&amp; pr.mProvider.asBinder() == provider) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Removing dead content provider:"</span> + pr.mProvider.toString());</span><br><span class="line">                <span class="comment">//【1.2】从 mProviderMap 中移除该 provider 的信息！</span></span><br><span class="line">                mProviderMap.removeAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fromClient) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【5】通知 ams 该 provider 已经死亡！</span></span><br><span class="line">                ActivityManagerNative.getDefault().unstableProviderDied(</span><br><span class="line">                        prc.holder.connection);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="comment">//do nothing content provider object is dead any way</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑就不多说了！</p><h4 id="4-1-1-2-incProviderRefLocked"><a href="#4-1-1-2-incProviderRefLocked" class="headerlink" title="4.1.1.2 incProviderRefLocked"></a>4.1.1.2 incProviderRefLocked</h4><p>增加 provider 的引用计数， 参数 boolean stable 表示的是稳定引用，还是非稳定引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">incProviderRefLocked</span><span class="params">(ProviderRefCount prc, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】stable 引用进入这里！</span></span><br><span class="line">    <span class="keyword">if</span> (stable) &#123;</span><br><span class="line">        prc.stableCount += <span class="number">1</span>; <span class="comment">// 增加引用计数</span></span><br><span class="line">        <span class="keyword">if</span> (prc.stableCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> unstableDelta;</span><br><span class="line">            <span class="keyword">if</span> (prc.removePending) &#123; <span class="comment">// 如果此时我们正在移除 provider，那就取消移除！</span></span><br><span class="line">                unstableDelta = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef: stable "</span></span><br><span class="line">                            + <span class="string">"snatched provider from the jaws of death"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                prc.removePending = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//【1.1】移除 REMOVE_PROVIDER 消息！</span></span><br><span class="line">                mH.removeMessages(H.REMOVE_PROVIDER, prc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                unstableDelta = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef Now stable - "</span></span><br><span class="line">                            + prc.holder.info.name + <span class="string">": unstableDelta="</span></span><br><span class="line">                            + unstableDelta);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【×7.2】通知 ams，增加框架层的引用信息！</span></span><br><span class="line">                ActivityManagerNative.getDefault().refContentProvider(</span><br><span class="line">                        prc.holder.connection, <span class="number">1</span>, unstableDelta);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【2】no stable 引用进入这里；</span></span><br><span class="line">        prc.unstableCount += <span class="number">1</span>; <span class="comment">// 增加引用计数</span></span><br><span class="line">        <span class="keyword">if</span> (prc.unstableCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prc.removePending) &#123; <span class="comment">// 如果此时我们正在移除 provider，那就取消移除！</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef: unstable "</span></span><br><span class="line">                            + <span class="string">"snatched provider from the jaws of death"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1】移除 REMOVE_PROVIDER 消息！</span></span><br><span class="line">                prc.removePending = <span class="keyword">false</span>;</span><br><span class="line">                mH.removeMessages(H.REMOVE_PROVIDER, prc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                        Slog.v(TAG, <span class="string">"incProviderRef: Now unstable - "</span></span><br><span class="line">                                + prc.holder.info.name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【×7.2】通知 ams，增加框架层的引用信息！</span></span><br><span class="line">                    ActivityManagerNative.getDefault().refContentProvider(</span><br><span class="line">                            prc.holder.connection, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果是第一次引用，那么会做一些额外的处理！</p><h2 id="4-2-handleUnstableProviderDied"><a href="#4-2-handleUnstableProviderDied" class="headerlink" title="4.2 handleUnstableProviderDied"></a>4.2 handleUnstableProviderDied</h2><p>处理 unstable provider 死亡的清理操作，boolean fromClient 表示本次操作是否来自客户端进程，通过前面的参数传递                   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleUnstableProviderDied</span><span class="params">(IBinder provider, <span class="keyword">boolean</span> fromClient)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mProviderMap) &#123;</span><br><span class="line">        <span class="comment">//【×4.2.1】继续分析：</span></span><br><span class="line">        handleUnstableProviderDiedLocked(provider, fromClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了，继续看！</p><h3 id="4-2-1-handleUnstableProviderDiedLocked"><a href="#4-2-1-handleUnstableProviderDiedLocked" class="headerlink" title="4.2.1 handleUnstableProviderDiedLocked"></a>4.2.1 handleUnstableProviderDiedLocked</h3><p>根据参数，这里的 boolean fromClient 为 true，当该进程持有的 unstable provider 所在进程死亡后，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleUnstableProviderDiedLocked</span><span class="params">(IBinder provider, <span class="keyword">boolean</span> fromClient)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】尝试从当前进程的引用集合中获得该 provider 的引用计数对象，并移除！</span></span><br><span class="line">    ProviderRefCount prc = mProviderRefCountMap.get(provider);</span><br><span class="line">    <span class="keyword">if</span> (prc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG, <span class="string">"Cleaning up dead provider "</span></span><br><span class="line">                + provider + <span class="string">" "</span> + prc.holder.info.name);</span><br><span class="line">        mProviderRefCountMap.remove(provider);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=mProviderMap.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//【1.2】移除该进程持有的 provider 的 ProviderClientRecord 客户端对象！</span></span><br><span class="line">            ProviderClientRecord pr = mProviderMap.valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pr != <span class="keyword">null</span> &amp;&amp; pr.mProvider.asBinder() == provider) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Removing dead content provider:"</span> + pr.mProvider.toString());</span><br><span class="line">                mProviderMap.removeAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fromClient) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【×7.4】通知 ams，客户端进程移除了该 provider 相关的引用计数和客户端实例！</span></span><br><span class="line">                ActivityManagerNative.getDefault().unstableProviderDied(</span><br><span class="line">                        prc.holder.connection);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="comment">//do nothing content provider object is dead any way</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就不多说了！</p><h1 id="5-ActivityManagerService-系统进程1"><a href="#5-ActivityManagerService-系统进程1" class="headerlink" title="5 ActivityManagerService  - 系统进程1"></a>5 ActivityManagerService  - 系统进程1</h1><p>当我们拉起了 Content provider 所在的进程，并且执行了一些初始化的操作后，就需要将创建的 provider 注册到系统进程中进行管理！</p><h2 id="5-1-getContentProvider-Impl"><a href="#5-1-getContentProvider-Impl" class="headerlink" title="5.1 getContentProvider[Impl]"></a>5.1 getContentProvider[Impl]</h2><p>下面我们来看 ActivityManagerService 中的 getContentProvider 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ContentProviderHolder <span class="title">getContentProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        IApplicationThread caller, String name, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    enforceNotIsolatedCaller(<span class="string">"getContentProvider"</span>);</span><br><span class="line">    <span class="keyword">if</span> (caller == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String msg = <span class="string">"null IApplicationThread when getting content provider "</span></span><br><span class="line">                + name;</span><br><span class="line">        Slog.w(TAG, msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】调用了另外一个 getContentProviderImpl 方法！</span></span><br><span class="line">    <span class="keyword">return</span> getContentProviderImpl(caller, name, <span class="keyword">null</span>, stable, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看，getContentProviderImpl 方法的逻辑很长，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ContentProviderHolder <span class="title">getContentProviderImpl</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">        String name, IBinder token, <span class="keyword">boolean</span> stable, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】在 ams 中每一个的 provider 都是以 ContentProviderRecord 的形式保存的!</span></span><br><span class="line">    ContentProviderRecord cpr;</span><br><span class="line">    <span class="comment">//【2】用于保存和 provider 的连接关系！</span></span><br><span class="line">    ContentProviderConnection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//【3】provider 的信息对象，在应用程序安装的时候会解析保存！</span></span><br><span class="line">    ProviderInfo cpi = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="comment">//【4】判断访问者进程 r 是否存在，如果不存在，那就抛出异常，并返回！</span></span><br><span class="line">        ProcessRecord r = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r = getRecordForAppLocked(caller);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                        <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line">                      + <span class="string">" (pid="</span> + Binder.getCallingPid()</span><br><span class="line">                      + <span class="string">") when getting content provider "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> checkCrossUser = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        checkTime(startTime, <span class="string">"getContentProviderImpl: getProviderByName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】判断该 provider 是否已经 publish 到该 userId 中了！</span></span><br><span class="line">        cpr = mProviderMap.getProviderByName(name, userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果在 userId 下并没有 publish，那么就判断下，该 provider 是否只是给 USER_SYSTEM 使用的</span></span><br><span class="line">        <span class="comment">// 如果是，那么就要校验下是否是单例模式！</span></span><br><span class="line">        <span class="keyword">if</span> (cpr == <span class="keyword">null</span> &amp;&amp; userId != UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">            cpr = mProviderMap.getProviderByName(name, UserHandle.USER_SYSTEM);</span><br><span class="line">            <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cpi = cpr.info;</span><br><span class="line">                <span class="comment">//【5.1】如果该 provider 是给 USER_SYSTEM 使用的，那么只有该 provider 是单例模式，并且</span></span><br><span class="line">                <span class="comment">// 本地调用对于单例是有效的，那么才可以使用该 provider！</span></span><br><span class="line">                <span class="comment">//【×5.1.1.1】通过 isSingleton 判断是否是单例模式！</span></span><br><span class="line">                <span class="comment">//【×5.1.1.2】通过 isValidSingletonCall 方法判断方法访问单例 pvodier </span></span><br><span class="line">                <span class="keyword">if</span> (isSingleton(cpi.processName, cpi.applicationInfo,</span><br><span class="line">                        cpi.name, cpi.flags)</span><br><span class="line">                        &amp;&amp; isValidSingletonCall(r.uid, cpi.applicationInfo.uid)) &#123;</span><br><span class="line">                    <span class="comment">//【5.2】单例模式的 provider 运行在默认用户，所以 userId 被设置为了 USER_SYSTEM！</span></span><br><span class="line">                    <span class="comment">// 同时其他的用户可以访问！</span></span><br><span class="line">                    userId = UserHandle.USER_SYSTEM;</span><br><span class="line">                    checkCrossUser = <span class="keyword">false</span>; <span class="comment">// 不用校验 user 了！</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cpr = <span class="keyword">null</span>; <span class="comment">// 不是单例模式，进入这里！</span></span><br><span class="line">                    cpi = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】判断 provider 是否正在运行！</span></span><br><span class="line">        <span class="keyword">boolean</span> providerRunning = cpr != <span class="keyword">null</span> &amp;&amp; cpr.proc != <span class="keyword">null</span> &amp;&amp; !cpr.proc.killed;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】如果 provider 正在运行，即： cpr 不为 null，同时其进程存在，那么就直接返回该 provider！</span></span><br><span class="line">        <span class="keyword">if</span> (providerRunning) &#123;</span><br><span class="line">            cpi = cpr.info;</span><br><span class="line">            String msg;</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: before checkContentProviderPermission"</span>);</span><br><span class="line">            <span class="comment">//【×5.1.1.3】校验 provider 权限！</span></span><br><span class="line">            <span class="keyword">if</span> ((msg = checkContentProviderPermissionLocked(cpi, r, userId, checkCrossUser))</span><br><span class="line">                    != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: after checkContentProviderPermission"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.1.1.4】如果访问者进程存在，并且 provider 能够在访问者的进程中运行的话，进入这里！</span></span><br><span class="line">            <span class="comment">// 该 provider 支持 multi process，或者 provider 和访问者属于同一进程，并且所属 userId 相同！</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; cpr.canRunHere(r)) &#123;</span><br><span class="line">                <span class="comment">//【×5.1.1.5】那么这里会通过 provider 在 ams 中的 ContentProviderRecord 实例，创建一个</span></span><br><span class="line">                <span class="comment">// ContentProviderHolder 实例，同时设置 holder.connection 和 holder.provider 为 null；</span></span><br><span class="line">                <span class="comment">// 因为访问者会建立自己的本地 provider！</span></span><br><span class="line">                ContentProviderHolder holder = cpr.newHolder(<span class="keyword">null</span>);</span><br><span class="line">                holder.provider = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> holder;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: incProviderCountLocked"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【×5.1.1.6】增加 provider 引用计数，并返回连接对象 ContentProviderConnection！</span></span><br><span class="line">            conn = incProviderCountLocked(r, cpr, token, stable);</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span> &amp;&amp; (conn.stableCount+conn.unstableCount) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//【8】如果是第一次连接，那么会判断下访问者进程的 adj，如果优先级是可感知进程，或者比可感知进程高</span></span><br><span class="line">                <span class="comment">// 那么会调整 provider 所在进程在 lruProcess 中的位置！</span></span><br><span class="line">                <span class="keyword">if</span> (cpr.proc != <span class="keyword">null</span> &amp;&amp; r.setAdj &lt;= ProcessList.PERCEPTIBLE_APP_ADJ) &#123;</span><br><span class="line">                    checkTime(startTime, <span class="string">"getContentProviderImpl: before updateLruProcess"</span>);</span><br><span class="line">                    updateLruProcessLocked(cpr.proc, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                    checkTime(startTime, <span class="string">"getContentProviderImpl: after updateLruProcess"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: before updateOomAdj"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【9】调整 provider 所在进程的优先级！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> verifiedAdj = cpr.proc.verifiedAdj;</span><br><span class="line">            <span class="keyword">boolean</span> success = updateOomAdjLocked(cpr.proc);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【10】异常校验，如果优先级调整结果是成功的，但是 provider 的进程 adj 校验不过，并且 provider </span></span><br><span class="line">            <span class="comment">// 的进程不处于 alive 状态，那么这属于异常情况！</span></span><br><span class="line">            <span class="keyword">if</span> (success &amp;&amp; verifiedAdj != cpr.proc.setAdj &amp;&amp; !isProcessAliveLocked(cpr.proc)) &#123;</span><br><span class="line">                success = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【11】更新使用情况！</span></span><br><span class="line">            maybeUpdateProviderUsageStatsLocked(r, cpr.info.packageName, name);</span><br><span class="line"></span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: after updateOomAdj"</span>);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.i(TAG_PROVIDER, <span class="string">"Adjust success: "</span> + success);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【12】如果 success 为 false，说明出现了异常，比如 provider 的进程被杀死了。</span></span><br><span class="line">            <span class="comment">// 那么我们需要启动一个新的进程，并且确认 provider 进程的死亡不会杀掉我们的进程！</span></span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Existing provider "</span> + cpr.name.flattenToShortString()</span><br><span class="line">                        + <span class="string">" is crashing; detaching "</span> + r);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【×5.1.1.7】减少 provider 引用计数，因为前面尝试增加了！</span></span><br><span class="line">                <span class="comment">// 并判断取消的引用是否是该进程对 provider 的最后引用！</span></span><br><span class="line">                <span class="keyword">boolean</span> lastRef = decProviderCountLocked(conn, cpr, token, stable);</span><br><span class="line">                checkTime(startTime, <span class="string">"getContentProviderImpl: before appDied"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【12.1】这个是处理 provider 进程死亡后的相关工作，这里不关注！</span></span><br><span class="line">                appDiedLocked(cpr.proc);</span><br><span class="line"></span><br><span class="line">                checkTime(startTime, <span class="string">"getContentProviderImpl: after appDied"</span>);</span><br><span class="line">                <span class="keyword">if</span> (!lastRef) &#123;</span><br><span class="line">                    <span class="comment">//【12.2】如果取消的引用不是该进程对 provider 的最后引用，返回一个 null！</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【12.3】设置 providerRunning 为 false，conn 为 null，下面我们会继续处理！</span></span><br><span class="line">                providerRunning = <span class="keyword">false</span>;</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cpr.proc.verifiedAdj = cpr.proc.setAdj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【8】如果 provider 没有在运行，进入这里！！</span></span><br><span class="line">        <span class="keyword">if</span> (!providerRunning) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                checkTime(startTime, <span class="string">"getContentProviderImpl: before resolveContentProvider"</span>);</span><br><span class="line">                <span class="comment">//【8.1】查询 provider 的信息；</span></span><br><span class="line">                cpi = AppGlobals.getPackageManager().</span><br><span class="line">                    resolveContentProvider(name,</span><br><span class="line">                        STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS, userId);</span><br><span class="line">                checkTime(startTime, <span class="string">"getContentProviderImpl: after resolveContentProvider"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cpi == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.2】如果 provider 是单例模式，同时且满足访问单例的条件，那么我们才允许访问 provider！</span></span><br><span class="line">            <span class="comment">//【×5.1.1.1】通过 isSingleton 判断是否是单例模式！</span></span><br><span class="line">            <span class="comment">//【×5.1.1.2】通过 isValidSingletonCall 方法判断是否可以访问单例 provider！</span></span><br><span class="line">            <span class="keyword">boolean</span> singleton = isSingleton(cpi.processName, cpi.applicationInfo,</span><br><span class="line">                    cpi.name, cpi.flags)</span><br><span class="line">                    &amp;&amp; isValidSingletonCall(r.uid, cpi.applicationInfo.uid);</span><br><span class="line">            <span class="keyword">if</span> (singleton) &#123; <span class="comment">// 如果是单例访问，那么 userId 为 USER_SYSTEM！</span></span><br><span class="line">                userId = UserHandle.USER_SYSTEM;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.2】获得 provider 在该 userId 下的 ApplicationInfo</span></span><br><span class="line">            cpi.applicationInfo = getAppInfoForUser(cpi.applicationInfo, userId);</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: got app info for user"</span>);</span><br><span class="line"></span><br><span class="line">            String msg;</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: before checkContentProviderPermission"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【×5.1.1.3】检验访问者是否有权限访问 provider！</span></span><br><span class="line">            <span class="keyword">if</span> ((msg = checkContentProviderPermissionLocked(cpi, r, userId, !singleton))</span><br><span class="line">                    != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: after checkContentProviderPermission"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.3】如果该 provider 是运行在其他进程中的，但是系统进程没有启动完成，</span></span><br><span class="line">            <span class="comment">// 那么也无法启动 provider 所在进程，抛出异常！！</span></span><br><span class="line">            <span class="keyword">if</span> (!mProcessesReady</span><br><span class="line">                    &amp;&amp; !cpi.processName.equals(<span class="string">"system"</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"Attempt to launch content provider before system ready"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.4】确保 provider 所在的设备用户处于运行状态！</span></span><br><span class="line">            <span class="keyword">if</span> (!mUserController.isUserRunningLocked(userId, <span class="number">0</span>)) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Unable to launch app "</span></span><br><span class="line">                        + cpi.applicationInfo.packageName + <span class="string">"/"</span></span><br><span class="line">                        + cpi.applicationInfo.uid + <span class="string">" for provider "</span></span><br><span class="line">                        + name + <span class="string">": user "</span> + userId + <span class="string">" is stopped"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【8.5】封装 provider 的组件信息！</span></span><br><span class="line">            ComponentName comp = <span class="keyword">new</span> ComponentName(cpi.packageName, cpi.name);</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: before getProviderByClass"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.1.2.1】尝试通过组件名获得 provider 实例！</span></span><br><span class="line">            cpr = mProviderMap.getProviderByClass(comp, userId);</span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: after getProviderByClass"</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> firstClass = cpr == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.6】如果该 provider 并没有 publish 到系统中，说明这是第一次！</span></span><br><span class="line">            <span class="comment">// 那么我们会创建一个 ContentProviderRecord 实例！</span></span><br><span class="line">            <span class="keyword">if</span> (firstClass) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【8.6.1】如果运行任何组件前要重新确认权限，那么这里会拉起权限确认！</span></span><br><span class="line">                <span class="keyword">if</span> (Build.PERMISSIONS_REVIEW_REQUIRED) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!requestTargetProviderPermissionsReviewIfNeededLocked(cpi, r, userId)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    checkTime(startTime, <span class="string">"getContentProviderImpl: before getApplicationInfo"</span>);</span><br><span class="line">                    <span class="comment">//【8.6.2】获得应用程序的 ApplicationInfo 实例！！</span></span><br><span class="line">                    ApplicationInfo ai =</span><br><span class="line">                        AppGlobals.getPackageManager().</span><br><span class="line">                            getApplicationInfo(</span><br><span class="line">                                    cpi.applicationInfo.packageName,</span><br><span class="line">                                    STOCK_PM_FLAGS, userId);</span><br><span class="line">                    checkTime(startTime, <span class="string">"getContentProviderImpl: after getApplicationInfo"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (ai == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"No package info for content provider "</span></span><br><span class="line">                                + cpi.name);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【8.6.3】根据本次访问的 userId，动态调整 ApplicationInfo 的信息！</span></span><br><span class="line">                    ai = getAppInfoForUser(ai, userId);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【×5.1.2.2】创建 provider 的 ContentProviderRecord 实例！！</span></span><br><span class="line">                    cpr = <span class="keyword">new</span> ContentProviderRecord(<span class="keyword">this</span>, cpi, ai, comp, singleton);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Binder.restoreCallingIdentity(ident);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: now have ContentProviderRecord"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.1.1.4】如果访问者进程存在，并且 provider 能够在访问者的进程中运行的话，进入这里！</span></span><br><span class="line">            <span class="comment">// 该 provider 支持 multi process，或者 provider 和访问者属于同一进程，并且所属 userId 相同！</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; cpr.canRunHere(r)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【×5.1.1.5】那么这里会通过 provider 在 ams 中的 ContentProviderRecord 实例，创建一个</span></span><br><span class="line">                <span class="comment">// ContentProviderHolder 实例，同时设置 holder.connection 和 holder.provider 为 null；</span></span><br><span class="line">                <span class="comment">//（holder.provider 在前面 new ContentProviderRecord 时就是 null 的）</span></span><br><span class="line">                <span class="comment">// 因为访问者会建立自己的本地 provider！！</span></span><br><span class="line">                <span class="keyword">return</span> cpr.newHolder(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.w(TAG_PROVIDER, <span class="string">"LAUNCHING REMOTE PROVIDER (myuid "</span></span><br><span class="line">                        + (r != <span class="keyword">null</span> ? r.uid : <span class="keyword">null</span>) + <span class="string">" pruid "</span> + cpr.appInfo.uid + <span class="string">"): "</span></span><br><span class="line">                        + cpr.info.name + <span class="string">" callers="</span> + Debug.getCallers(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.7】判断 provider 是否正在启动中，每一个正在启动的 provider 都会被加入到 </span></span><br><span class="line">            <span class="comment">// mLaunchingProviders 列表中！！！</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mLaunchingProviders.size();</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="comment">//【8.7.1】如果该 provider 正在启动，那么 i 不会超过 N！</span></span><br><span class="line">                <span class="keyword">if</span> (mLaunchingProviders.get(i) == cpr) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【8.8】如果 provider 还没有启动，那么我们会先启动 orovider！</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= N) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        checkTime(startTime, <span class="string">"getContentProviderImpl: before set stopped state"</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//【8.8.1】provider 所属的 package 不能处于 stop 状态！</span></span><br><span class="line">                        AppGlobals.getPackageManager().setPackageStoppedState(</span><br><span class="line">                                cpr.appInfo.packageName, <span class="keyword">false</span>, userId);</span><br><span class="line"></span><br><span class="line">                        checkTime(startTime, <span class="string">"getContentProviderImpl: after set stopped state"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                        Slog.w(TAG, <span class="string">"Failed trying to unstop package "</span></span><br><span class="line">                                + cpr.appInfo.packageName + <span class="string">": "</span> + e);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    checkTime(startTime, <span class="string">"getContentProviderImpl: looking for process record"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【8.8.2】获得 provider 所属的进程！</span></span><br><span class="line">                    ProcessRecord proc = getProcessRecordLocked(</span><br><span class="line">                            cpi.processName, cpr.appInfo.uid, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【8.8.3】如果 provider 所属进程已经启动了，那我们就拉起该 provider！！</span></span><br><span class="line">                    <span class="keyword">if</span> (proc != <span class="keyword">null</span> &amp;&amp; proc.thread != <span class="keyword">null</span> &amp;&amp; !proc.killed) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.d(TAG_PROVIDER,</span><br><span class="line">                                <span class="string">"Installing in existing process "</span> + proc);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!proc.pubProviders.containsKey(cpi.name)) &#123;</span><br><span class="line">                            checkTime(startTime, <span class="string">"getContentProviderImpl: scheduling install"</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//【8.8.3.1】如果该 provider 不在该进程的 pubProviders，将其添加其中！</span></span><br><span class="line">                            proc.pubProviders.put(cpi.name, cpr);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">//【×6.1】进入 provider 所在进程，拉起 provider！</span></span><br><span class="line">                                proc.thread.scheduleInstallProvider(cpi);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        checkTime(startTime, <span class="string">"getContentProviderImpl: before start process"</span>);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//【8.8.4】如果该 provider 所在进程未启动，那么就启动所在进程！</span></span><br><span class="line">                        proc = startProcessLocked(cpi.processName,</span><br><span class="line">                                cpr.appInfo, <span class="keyword">false</span>, <span class="number">0</span>, <span class="string">"content provider"</span>,</span><br><span class="line">                                <span class="keyword">new</span> ComponentName(cpi.applicationInfo.packageName,</span><br><span class="line">                                        cpi.name), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">                        checkTime(startTime, <span class="string">"getContentProviderImpl: after start process"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (proc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Slog.w(TAG, <span class="string">"Unable to launch app "</span></span><br><span class="line">                                    + cpi.applicationInfo.packageName + <span class="string">"/"</span></span><br><span class="line">                                    + cpi.applicationInfo.uid + <span class="string">" for provider "</span></span><br><span class="line">                                    + name + <span class="string">": process is bad"</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【8.8.4.1】设置 cpr.launchingApp 为 proc，表示正在等待该进程启动！</span></span><br><span class="line">                    cpr.launchingApp = proc;</span><br><span class="line">                    <span class="comment">//【8.8.4.2】将该 provider 加入到 mLaunchingProviders 中，表示其正在启动！</span></span><br><span class="line">                    mLaunchingProviders.add(cpr);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    Binder.restoreCallingIdentity(origId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            checkTime(startTime, <span class="string">"getContentProviderImpl: updating data structures"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【9】将 provider 加入的 mProviderMap 中！</span></span><br><span class="line">            <span class="keyword">if</span> (firstClass) &#123;</span><br><span class="line">                mProviderMap.putProviderByClass(comp, cpr);</span><br><span class="line">            &#125;</span><br><span class="line">            mProviderMap.putProviderByName(name, cpr);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.1.1.6】增加 provider 引用计数，并返回连接对象 ContentProviderConnection！！</span></span><br><span class="line">            conn = incProviderCountLocked(r, cpr, token, stable);</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                conn.waiting = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        checkTime(startTime, <span class="string">"getContentProviderImpl: done!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【9】等待 provider publish 完成！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (cpr) &#123;</span><br><span class="line">        <span class="comment">//【9.1】当 cpr.provider 为 null 的时候，说明 provider 还没有 publish 完成，所以这里会持续等待！！</span></span><br><span class="line">        <span class="keyword">while</span> (cpr.provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cpr.launchingApp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【9.3】 cpr.launchingApp 表示其正在等待启动的进程，如果为 null，说明无法启动 provider 所在</span></span><br><span class="line">                <span class="comment">// 的进程，那么就返回 null！</span></span><br><span class="line">                Slog.w(TAG, <span class="string">"Unable to launch app "</span></span><br><span class="line">                        + cpi.applicationInfo.packageName + <span class="string">"/"</span></span><br><span class="line">                        + cpi.applicationInfo.uid + <span class="string">" for provider "</span></span><br><span class="line">                        + name + <span class="string">": launching app became null"</span>);</span><br><span class="line">                EventLog.writeEvent(EventLogTags.AM_PROVIDER_LOST_PROCESS,</span><br><span class="line">                        UserHandle.getUserId(cpi.applicationInfo.uid),</span><br><span class="line">                        cpi.applicationInfo.packageName,</span><br><span class="line">                        cpi.applicationInfo.uid, name);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU,</span><br><span class="line">                        <span class="string">"Waiting to start provider "</span> + cpr</span><br><span class="line">                        + <span class="string">" launchingApp="</span> + cpr.launchingApp);</span><br><span class="line">                <span class="comment">//【9.4】如果此时创建了连接对象，那么设置 conn.waiting 为 true，表示等待 provider 的 publish！！ </span></span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.waiting = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cpr.wait(); <span class="comment">// Binder 线程加入了该对象的等待队列中等待条件满足！</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.waiting = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【10】provider 启动完成了，返回一个 Holder 对象，此时我们已经创建了连接对象 conn！</span></span><br><span class="line">    <span class="comment">// 同时 cpr.provider 也不为 null；</span></span><br><span class="line">    <span class="keyword">return</span> cpr != <span class="keyword">null</span> ? cpr.newHolder(conn) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ams 中有如下的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于保存正在启动的 provider！</span></span><br><span class="line"><span class="keyword">final</span> ArrayList&lt;ContentProviderRecord&gt; mLaunchingProviders</span><br><span class="line">        = <span class="keyword">new</span> ArrayList&lt;ContentProviderRecord&gt;();</span><br></pre></td></tr></table></figure><h3 id="5-1-1-Provider-正在运行的情况"><a href="#5-1-1-Provider-正在运行的情况" class="headerlink" title="5.1.1  Provider 正在运行的情况"></a>5.1.1  Provider 正在运行的情况</h3><h4 id="5-1-1-1-isSingleton"><a href="#5-1-1-1-isSingleton" class="headerlink" title="5.1.1.1 isSingleton"></a>5.1.1.1 isSingleton</h4><p>判断该 provider 时候是否是单例模式！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String componentProcessName, ApplicationInfo aInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">        String className, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (UserHandle.getAppId(aInfo.uid) &gt;= Process.FIRST_APPLICATION_UID) &#123;</span><br><span class="line">        <span class="comment">//【1】如果 provider 所属应用的 uid 大于等于 FIRST_APPLICATION_UID，那么其必须要设置 FLAG_SINGLE_USER</span></span><br><span class="line">        <span class="comment">// 标志位，同时也要被授予 INTERACT_ACROSS_USERS 权限才行！</span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; ServiceInfo.FLAG_SINGLE_USER) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ActivityManager.checkUidPermission(</span><br><span class="line">                    INTERACT_ACROSS_USERS,</span><br><span class="line">                    aInfo.uid) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                ComponentName comp = <span class="keyword">new</span> ComponentName(aInfo.packageName, className);</span><br><span class="line">                String msg = <span class="string">"Permission Denial: Component "</span> + comp.flattenToShortString()</span><br><span class="line">                        + <span class="string">" requests FLAG_SINGLE_USER, but app does not hold "</span></span><br><span class="line">                        + INTERACT_ACROSS_USERS;</span><br><span class="line">                Slog.w(TAG, msg);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"system"</span>.equals(componentProcessName)) &#123;</span><br><span class="line">        <span class="comment">//【2】如果 1 满足，那么 provider 所在进程必须是 system 进程！</span></span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((flags &amp; ServiceInfo.FLAG_SINGLE_USER) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【3】如果 1 和 2 都不满足，那么必须是 Phone app 或者 persistent apps，才能提供单例 provider！</span></span><br><span class="line">        result = UserHandle.isSameApp(aInfo.uid, Process.PHONE_UID)</span><br><span class="line">                || (aInfo.flags &amp; ApplicationInfo.FLAG_PERSISTENT) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU,</span><br><span class="line">            <span class="string">"isSingleton("</span> + componentProcessName + <span class="string">", "</span> + aInfo + <span class="string">", "</span> + className + <span class="string">", 0x"</span></span><br><span class="line">            + Integer.toHexString(flags) + <span class="string">") = "</span> + result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>属性：</strong></p><p>android:singleUser，取值为 true 或者 false，如果为 true，那么该 privider 将会是一个单例组件，系统中将有且只会存在一个单例组件运行在所有的设备用户下！</p><p>判断一个 provider 是否是单例模式，要满足一下条件之一：</p><ul><li>如果 provider 所属 appId 大于等于 FIRST_APPLICATION_UID，并且其 flags 设置了 FLAG_SINGLE_USER 位，同时其被授予了 INTERACT_ACROSS_USERS 权限；</li></ul><p><br></p><ul><li>如果条件 1 不满足，那么如果 provider 所属进程是 system 进程，那么其就是单例的！</li></ul><p><br></p><ul><li>条件 1，2 都不满足，如果 provider 所属进程不是系统进程，同时其设置了 FLAG_SINGLE_USER 位，那么其所属应必须用是 phone app 或者是 persistent app，那么才是单例的！ </li></ul><p>逻辑很简单，不多说了！</p><h4 id="5-1-1-2-isValidSingletonCall"><a href="#5-1-1-2-isValidSingletonCall" class="headerlink" title="5.1.1.2 isValidSingletonCall"></a>5.1.1.2 isValidSingletonCall</h4><p>用于判断调用单例 provider 的操作是否有效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValidSingletonCall</span><span class="params">(<span class="keyword">int</span> callingUid, <span class="keyword">int</span> componentUid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> componentAppId = UserHandle.getAppId(componentUid);</span><br><span class="line">    <span class="comment">//【1】对于单例模式，调用者和 provider 必须属于同一个应用，或者 provider 组件属于 system/phone</span></span><br><span class="line">    <span class="comment">// 或者 provider 组件有垮用户的权限！</span></span><br><span class="line">    <span class="keyword">return</span> UserHandle.isSameApp(callingUid, componentUid)</span><br><span class="line">            || componentAppId == Process.SYSTEM_UID</span><br><span class="line">            || componentAppId == Process.PHONE_UID</span><br><span class="line">            || ActivityManager.checkUidPermission(INTERACT_ACROSS_USERS_FULL, componentUid)</span><br><span class="line">                    == PackageManager.PERMISSION_GRANTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否可以访问单例 provider，至少要满足以下的条件之一：</p><ul><li>单例的 provider 组件和调用者是同一个 app；</li><li>单例的 provider 是 system uid 或者 phone uid；</li><li>单例的 provider 所属应用有 INTERACT_ACROSS_USERS_FULL 的权限！</li></ul><p>不多说了！</p><h4 id="5-1-1-3-checkContentProviderPermissionLocked"><a href="#5-1-1-3-checkContentProviderPermissionLocked" class="headerlink" title="5.1.1.3 checkContentProviderPermissionLocked"></a>5.1.1.3 checkContentProviderPermissionLocked</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> String <span class="title">checkContentProviderPermissionLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ProviderInfo cpi, ProcessRecord r, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> checkUser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingPid = (r != <span class="keyword">null</span>) ? r.pid : Binder.getCallingPid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = (r != <span class="keyword">null</span>) ? r.uid : Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">boolean</span> checkedGrants = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkUser) &#123;</span><br><span class="line">        <span class="comment">// Looking for cross-user grants before enforcing the typical cross-users permissions</span></span><br><span class="line">        <span class="keyword">int</span> tmpTargetUserId = mUserController.unsafeConvertIncomingUserLocked(userId);</span><br><span class="line">        <span class="keyword">if</span> (tmpTargetUserId != UserHandle.getUserId(callingUid)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkAuthorityGrants(callingUid, cpi, tmpTargetUserId, checkUser)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            checkedGrants = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, <span class="keyword">false</span>,</span><br><span class="line">                ALLOW_NON_FULL, <span class="string">"checkContentProviderPermissionLocked "</span> + cpi.authority, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (userId != tmpTargetUserId) &#123;</span><br><span class="line">            <span class="comment">// When we actually went to determine the final targer user ID, this ended</span></span><br><span class="line">            <span class="comment">// up different than our initial check for the authority.  This is because</span></span><br><span class="line">            <span class="comment">// they had asked for USER_CURRENT_OR_SELF and we ended up switching to</span></span><br><span class="line">            <span class="comment">// SELF.  So we need to re-check the grants again.</span></span><br><span class="line">            checkedGrants = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (checkComponentPermission(cpi.readPermission, callingPid, callingUid,</span><br><span class="line">            cpi.applicationInfo.uid, cpi.exported)</span><br><span class="line">            == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (checkComponentPermission(cpi.writePermission, callingPid, callingUid,</span><br><span class="line">            cpi.applicationInfo.uid, cpi.exported)</span><br><span class="line">            == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PathPermission[] pps = cpi.pathPermissions;</span><br><span class="line">    <span class="keyword">if</span> (pps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = pps.length;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            PathPermission pp = pps[i];</span><br><span class="line">            String pprperm = pp.getReadPermission();</span><br><span class="line">            <span class="keyword">if</span> (pprperm != <span class="keyword">null</span> &amp;&amp; checkComponentPermission(pprperm, callingPid, callingUid,</span><br><span class="line">                    cpi.applicationInfo.uid, cpi.exported)</span><br><span class="line">                    == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String ppwperm = pp.getWritePermission();</span><br><span class="line">            <span class="keyword">if</span> (ppwperm != <span class="keyword">null</span> &amp;&amp; checkComponentPermission(ppwperm, callingPid, callingUid,</span><br><span class="line">                    cpi.applicationInfo.uid, cpi.exported)</span><br><span class="line">                    == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!checkedGrants &amp;&amp; checkAuthorityGrants(callingUid, cpi, userId, checkUser)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String msg;</span><br><span class="line">    <span class="keyword">if</span> (!cpi.exported) &#123;</span><br><span class="line">        msg = <span class="string">"Permission Denial: opening provider "</span> + cpi.name</span><br><span class="line">                + <span class="string">" from "</span> + (r != <span class="keyword">null</span> ? r : <span class="string">"(null)"</span>) + <span class="string">" (pid="</span> + callingPid</span><br><span class="line">                + <span class="string">", uid="</span> + callingUid + <span class="string">") that is not exported from uid "</span></span><br><span class="line">                + cpi.applicationInfo.uid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg = <span class="string">"Permission Denial: opening provider "</span> + cpi.name</span><br><span class="line">                + <span class="string">" from "</span> + (r != <span class="keyword">null</span> ? r : <span class="string">"(null)"</span>) + <span class="string">" (pid="</span> + callingPid</span><br><span class="line">                + <span class="string">", uid="</span> + callingUid + <span class="string">") requires "</span></span><br><span class="line">                + cpi.readPermission + <span class="string">" or "</span> + cpi.writePermission;</span><br><span class="line">    &#125;</span><br><span class="line">    Slog.w(TAG, msg);</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-4-ContentProviderRecord-canRunHere"><a href="#5-1-1-4-ContentProviderRecord-canRunHere" class="headerlink" title="5.1.1.4 ContentProviderRecord.canRunHere"></a>5.1.1.4 ContentProviderRecord.canRunHere</h4><p>判断该 provider 是否可以在指定的进程中运行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRunHere</span><span class="params">(ProcessRecord app)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】provider 设置了 multiprocess 属性，或者 provider 的进程是该进程</span></span><br><span class="line">    <span class="comment">// 并且该 provider 所属 userId 和该进程所属应用程序的 userId 一样（相同用户下）！</span></span><br><span class="line">    <span class="keyword">return</span> (info.multiprocess || info.processName.equals(app.processName))</span><br><span class="line">            &amp;&amp; uid == app.info.uid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！</p><h4 id="5-1-1-5-ContentProviderRecord-newHolder"><a href="#5-1-1-5-ContentProviderRecord-newHolder" class="headerlink" title="5.1.1.5 ContentProviderRecord.newHolder"></a>5.1.1.5 ContentProviderRecord.newHolder</h4><p>根据系统中已经 publish 的 provider，创建一个 ContentProviderHolder 对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentProviderHolder <span class="title">newHolder</span><span class="params">(ContentProviderConnection conn)</span> </span>&#123;</span><br><span class="line">    ContentProviderHolder holder = <span class="keyword">new</span> ContentProviderHolder(info);</span><br><span class="line">    holder.provider = provider;</span><br><span class="line">    holder.noReleaseNeeded = noReleaseNeeded;</span><br><span class="line">    holder.connection = conn;</span><br><span class="line">    <span class="keyword">return</span> holder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 ContentProviderHolder，我们后面会分析！</p><h4 id="5-1-1-6-incProviderCountLocked"><a href="#5-1-1-6-incProviderCountLocked" class="headerlink" title="5.1.1.6 incProviderCountLocked"></a>5.1.1.6 incProviderCountLocked</h4><p>增加 provider 的引用计数，参数 r 是访问 provider 的进程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ContentProviderConnection <span class="title">incProviderCountLocked</span><span class="params">(ProcessRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> ContentProviderRecord cpr, IBinder externalProcessToken, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断下访问者进程是否存在！</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.conProviders.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//【1.1】如果进程存在（当然是存在的），那就依次遍历其持有的 provider connection 对象！</span></span><br><span class="line">            <span class="comment">// 找到该进程持有的对该 provider 的连接对象！</span></span><br><span class="line">            ContentProviderConnection conn = r.conProviders.get(i);</span><br><span class="line">            <span class="keyword">if</span> (conn.provider == cpr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG_PROVIDER,</span><br><span class="line">                        <span class="string">"Adding provider requested by "</span></span><br><span class="line">                        + r.processName + <span class="string">" from process "</span></span><br><span class="line">                        + cpr.info.processName + <span class="string">": "</span> + cpr.name.flattenToShortString()</span><br><span class="line">                        + <span class="string">" scnt="</span> + conn.stableCount + <span class="string">" uscnt="</span> + conn.unstableCount);</span><br><span class="line">                <span class="comment">//【1.2】如果是访问的是 stable provider，增加 stable count！</span></span><br><span class="line">                <span class="keyword">if</span> (stable) &#123;</span><br><span class="line">                    conn.stableCount++;</span><br><span class="line">                    conn.numStableIncs++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【1.3】如果是访问的是 unstable provider，增加 unstable count！</span></span><br><span class="line">                    conn.unstableCount++;</span><br><span class="line">                    conn.numUnstableIncs++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.4】返回该 connection 对象！</span></span><br><span class="line">                <span class="keyword">return</span> conn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*5.1.1.6.1】如果找不到，说明是第一次访问该 provider，那就先创建</span></span><br><span class="line">        <span class="comment">// 一个 ContentProviderConnection 对象！！</span></span><br><span class="line">        ContentProviderConnection conn = <span class="keyword">new</span> ContentProviderConnection(cpr, r);</span><br><span class="line">        <span class="comment">//【1.5】增加引用计数！</span></span><br><span class="line">        <span class="keyword">if</span> (stable) &#123;</span><br><span class="line">            conn.stableCount = <span class="number">1</span>;</span><br><span class="line">            conn.numStableIncs = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.unstableCount = <span class="number">1</span>;</span><br><span class="line">            conn.numUnstableIncs = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1.6】将其添加到 ContentProviderRecord.connections 集合中；</span></span><br><span class="line">        cpr.connections.add(conn);</span><br><span class="line">        <span class="comment">//【1.7】将其添加到 ProcessRecord.conProviders 集合中；</span></span><br><span class="line">        r.conProviders.add(conn);</span><br><span class="line">        startAssociationLocked(r.uid, r.processName, r.curProcState,</span><br><span class="line">                cpr.uid, cpr.name, cpr.info.processName); <span class="comment">// 用于记录进程间的关联性的，这里先不关注！</span></span><br><span class="line">        <span class="comment">//【1.8】返回该新建的连接对象！</span></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    cpr.addExternalProcessHandleLocked(externalProcessToken);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h5 id="5-1-1-6-1-new-ContentProviderConnection"><a href="#5-1-1-6-1-new-ContentProviderConnection" class="headerlink" title="5.1.1.6.1 new ContentProviderConnection"></a>5.1.1.6.1 new ContentProviderConnection</h5><p>创建连接对象，本质上是一个 Binder 对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentProviderConnection</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ContentProviderRecord provider; <span class="comment">// provider 对象；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ProcessRecord client; <span class="comment">// 连接到该 provider 的进程；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> stableCount; <span class="comment">// stable provider 的引用计数；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> unstableCount; <span class="comment">// unstable provider 的引用计数；</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> waiting; <span class="comment">// 是否正在等待 provider publish，被锁保护！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> dead; <span class="comment">// provider 是否死亡！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numStableIncs; <span class="comment">// 用于调试！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> numUnstableIncs;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentProviderConnection</span><span class="params">(ContentProviderRecord _provider, ProcessRecord _client)</span> </span>&#123;</span><br><span class="line">        provider = _provider;</span><br><span class="line">        client = _client;</span><br><span class="line">        createTime = SystemClock.elapsedRealtime();</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据结构都很简答，不多说了！！</p><h4 id="5-1-1-7-decProviderCountLocked"><a href="#5-1-1-7-decProviderCountLocked" class="headerlink" title="5.1.1.7 decProviderCountLocked"></a>5.1.1.7 decProviderCountLocked</h4><p>减少 provider 的引用计数，参数 conn 是该 provider 的连接对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">decProviderCountLocked</span><span class="params">(ContentProviderConnection conn,</span></span></span><br><span class="line"><span class="function"><span class="params">        ContentProviderRecord cpr, IBinder externalProcessToken, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】获得该连接对象链接的 provider 对爱 ContentProviderRecord！</span></span><br><span class="line">        cpr = conn.provider;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG_PROVIDER,</span><br><span class="line">                <span class="string">"Removing provider requested by "</span></span><br><span class="line">                + conn.client.processName + <span class="string">" from process "</span></span><br><span class="line">                + cpr.info.processName + <span class="string">": "</span> + cpr.name.flattenToShortString()</span><br><span class="line">                + <span class="string">" scnt="</span> + conn.stableCount + <span class="string">" uscnt="</span> + conn.unstableCount);</span><br><span class="line">        <span class="comment">//【2】减少该连接对象的相应引用计数！</span></span><br><span class="line">        <span class="keyword">if</span> (stable) &#123;</span><br><span class="line">            conn.stableCount--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            conn.unstableCount--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】判断是否是该 provider 的最后一个引用，即本次减少引用后，该连接对象的 stable count </span></span><br><span class="line">        <span class="comment">// 和 unstable count 都是 0。</span></span><br><span class="line">        <span class="keyword">if</span> (conn.stableCount == <span class="number">0</span> &amp;&amp; conn.unstableCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】ContentProviderRecord.connections 移除该连接对象；</span></span><br><span class="line">            cpr.connections.remove(conn);</span><br><span class="line">            <span class="comment">//【3.2】从该连接对象的所属进程中移除自身！</span></span><br><span class="line">            conn.client.conProviders.remove(conn);</span><br><span class="line">            <span class="keyword">if</span> (conn.client.setProcState &lt; ActivityManager.PROCESS_STATE_LAST_ACTIVITY) &#123;</span><br><span class="line">                <span class="comment">// The client is more important than last activity -- note the time this</span></span><br><span class="line">                <span class="comment">// is happening, so we keep the old provider process around a bit as last</span></span><br><span class="line">                <span class="comment">// activity to avoid thrashing it.</span></span><br><span class="line">                <span class="keyword">if</span> (cpr.proc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cpr.proc.lastProviderTime = SystemClock.uptimeMillis();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stopAssociationLocked(conn.client.uid, conn.client.processName, cpr.uid, cpr.name);</span><br><span class="line">            <span class="comment">//【3.3】返回 true，说明取消的是最后一个引用！</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cpr.removeExternalProcessHandleLocked(externalProcessToken);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="5-1-2-Provider-没在运行的情况"><a href="#5-1-2-Provider-没在运行的情况" class="headerlink" title="5.1.2  Provider 没在运行的情况"></a>5.1.2  Provider 没在运行的情况</h3><h4 id="5-1-2-1-ProviderMap"><a href="#5-1-2-1-ProviderMap" class="headerlink" title="5.1.2.1 ProviderMap"></a>5.1.2.1 ProviderMap</h4><p>在 ams 有一个这样的数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProviderMap mProviderMap = <span class="keyword">new</span> ProviderMap(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>用来记录系统中所有 publish 的 provider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ProviderMap"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DBG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mAm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】单例 provdier 集合，key 为 authority，value 为 ContentProviderRecord 实例！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ContentProviderRecord&gt; mSingletonByName</span><br><span class="line">            = <span class="keyword">new</span> HashMap&lt;String, ContentProviderRecord&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;ComponentName, ContentProviderRecord&gt; mSingletonByClass</span><br><span class="line">            = <span class="keyword">new</span> HashMap&lt;ComponentName, ContentProviderRecord&gt;();</span><br><span class="line">    <span class="comment">//【2】非单例 provdier 集合，key 为 userId，value 是 authority 和 ContentProviderRecord 的映射！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;HashMap&lt;String, ContentProviderRecord&gt;&gt; mProvidersByNamePerUser</span><br><span class="line">            = <span class="keyword">new</span> SparseArray&lt;HashMap&lt;String, ContentProviderRecord&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;HashMap&lt;ComponentName, ContentProviderRecord&gt;&gt; mProvidersByClassPerUser</span><br><span class="line">            = <span class="keyword">new</span> SparseArray&lt;HashMap&lt;ComponentName, ContentProviderRecord&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    ProviderMap(ActivityManagerService am) &#123;</span><br><span class="line">        mAm = am;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！</p><p>同时也提供了如下的 get set 接口：</p><p> 5.1.2.2.1 ProviderMap.get</p><h4 id="5-1-2-2-new-ContentProviderRecord"><a href="#5-1-2-2-new-ContentProviderRecord" class="headerlink" title="5.1.2.2 new ContentProviderRecord"></a>5.1.2.2 new ContentProviderRecord</h4><p>创建一个 ContentProviderRecord 实例，用于在系统进程中描述一个 provider！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentProviderRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ActivityManagerService service; <span class="comment">// ams 实力</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ProviderInfo info; <span class="comment">// provider 的信息对象；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid; <span class="comment">// 所属应用的 uid；</span></span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo appInfo; <span class="comment">// 所属应用程序的信息；</span></span><br><span class="line">    <span class="keyword">final</span> ComponentName name; <span class="comment">// provider 对应的组件名实例；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> singleton; <span class="comment">// 是否是单例模式；</span></span><br><span class="line">    <span class="keyword">public</span> IContentProvider provider;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> noReleaseNeeded;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】所有连接到该 provider 的进程的连接对象！</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ContentProviderConnection&gt; connections</span><br><span class="line">            = <span class="keyword">new</span> ArrayList&lt;ContentProviderConnection&gt;();</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//final HashSet&lt;ProcessRecord&gt; clients = new HashSet&lt;ProcessRecord&gt;();</span></span><br><span class="line">    <span class="comment">// Handles for non-framework processes supported by this provider</span></span><br><span class="line">    HashMap&lt;IBinder, ExternalProcessHandle&gt; externalProcessTokenToHandle;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Count for external process for which we have no handles.</span></span><br><span class="line">    <span class="keyword">int</span> externalProcessNoHandleCount;</span><br><span class="line">    ProcessRecord proc; <span class="comment">//【2】所在进程</span></span><br><span class="line">    ProcessRecord launchingApp; <span class="comment">//【3】等待启动的进程！</span></span><br><span class="line">    String stringName;</span><br><span class="line">    String shortStringName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentProviderRecord</span><span class="params">(ActivityManagerService _service, ProviderInfo _info,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApplicationInfo ai, ComponentName _name, <span class="keyword">boolean</span> _singleton)</span> </span>&#123;</span><br><span class="line">        service = _service;</span><br><span class="line">        info = _info;</span><br><span class="line">        uid = ai.uid;</span><br><span class="line">        appInfo = ai;</span><br><span class="line">        name = _name;</span><br><span class="line">        singleton = _singleton;</span><br><span class="line">        noReleaseNeeded = uid == <span class="number">0</span> || uid == Process.SYSTEM_UID;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析！</p><h3 id="5-1-3-ActivityManagerProxy-getContentProvider"><a href="#5-1-3-ActivityManagerProxy-getContentProvider" class="headerlink" title="5.1.3 ActivityManagerProxy.getContentProvider"></a>5.1.3 ActivityManagerProxy.getContentProvider</h3><p>对于 getContentProvider，我们再去看下 ActivityManagerProxy 中是如何调用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ContentProviderHolder <span class="title">getContentProvider</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">        String name, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> stable)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IActivityManager.descriptor);</span><br><span class="line">    data.writeStrongBinder(caller != <span class="keyword">null</span> ? caller.asBinder() : <span class="keyword">null</span>);</span><br><span class="line">    data.writeString(name);</span><br><span class="line">    data.writeInt(userId);</span><br><span class="line">    data.writeInt(stable ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    mRemote.transact(GET_CONTENT_PROVIDER_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    reply.readException();</span><br><span class="line">    <span class="keyword">int</span> res = reply.readInt();</span><br><span class="line">    ContentProviderHolder cph = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.3.1】调用了 ContentProviderHolder.CREATOR 的 createFromParcel 方法！</span></span><br><span class="line">        cph = ContentProviderHolder.CREATOR.createFromParcel(reply);</span><br><span class="line">    &#125;</span><br><span class="line">    data.recycle();</span><br><span class="line">    reply.recycle();</span><br><span class="line">    <span class="keyword">return</span> cph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getContentProvider 会返回一个 ContentProviderHolder 实例，ContentProviderHolder 看源码，实现了 Parcelable 接口，可以序列化!</p><h4 id="5-1-3-1-ContentProviderHolder-CREATOR-createFromParcel"><a href="#5-1-3-1-ContentProviderHolder-CREATOR-createFromParcel" class="headerlink" title="5.1.3.1 ContentProviderHolder.CREATOR.createFromParcel"></a>5.1.3.1 ContentProviderHolder.CREATOR.createFromParcel</h4><p>我们来看下 ContentProviderHolder.CREATOR 的 createFromParcel 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;ContentProviderHolder&gt; CREATOR</span><br><span class="line">        = <span class="keyword">new</span> Parcelable.Creator&lt;ContentProviderHolder&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentProviderHolder <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【*5.1.3.2】这里是通过服务端进程返回的 Parcel，再创建了一个 ContentProviderHolder！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContentProviderHolder(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ContentProviderHolder[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContentProviderHolder[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-2-new-ContentProviderHolder-Parcel"><a href="#5-1-3-2-new-ContentProviderHolder-Parcel" class="headerlink" title="5.1.3.2 new ContentProviderHolder[Parcel]"></a>5.1.3.2 new ContentProviderHolder[Parcel]</h4><p>这里通过 ContentProviderHolder 另外一个构造器创建了访问者进程中的 ContentProviderHolder 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ContentProviderHolder</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">    info = ProviderInfo.CREATOR.createFromParcel(source);</span><br><span class="line">    <span class="comment">//【1】初始化 provider 实例！</span></span><br><span class="line">    provider = ContentProviderNative.asInterface(</span><br><span class="line">            source.readStrongBinder());</span><br><span class="line">    connection = source.readStrongBinder();</span><br><span class="line">    noReleaseNeeded = source.readInt() != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道在 provider 的宿主进程里，这里的 provider 是 Transport 实例！！</p><p>但是在访问者进程中，这里的 provider 是一个 ContentProviderProxy 实例，也就是 Transport 的客户端代理对象！</p><p>这样访问者进程就可以通过 ContentProviderProxy -&gt; Transport 来跨进程通信啦！！</p><h1 id="6-ActivityThread"><a href="#6-ActivityThread" class="headerlink" title="6 ActivityThread"></a>6 ActivityThread</h1><h2 id="6-1-provider-未启动但是其进程已经启动"><a href="#6-1-provider-未启动但是其进程已经启动" class="headerlink" title="6.1 provider 未启动但是其进程已经启动"></a>6.1 provider 未启动但是其进程已经启动</h2><h3 id="6-1-1-scheduleInstallProvider"><a href="#6-1-1-scheduleInstallProvider" class="headerlink" title="6.1.1 scheduleInstallProvider"></a>6.1.1 scheduleInstallProvider</h3><p>发送了 INSTALL_PROVIDER 消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleInstallProvider</span><span class="params">(ProviderInfo provider)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】发送了 INSTALL_PROVIDER 消息！</span></span><br><span class="line">    sendMessage(H.INSTALL_PROVIDER, provider);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-1-2-H-handleMessage-INSTALL-PROVIDER"><a href="#6-1-2-H-handleMessage-INSTALL-PROVIDER" class="headerlink" title="6.1.2 H.handleMessage[INSTALL_PROVIDER]"></a>6.1.2 H.handleMessage[INSTALL_PROVIDER]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> INSTALL_PROVIDER:</span><br><span class="line">    <span class="comment">//【6.1.3】安装 provider！</span></span><br><span class="line">    handleInstallProvider((ProviderInfo) msg.obj);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="6-1-3-handleInstallProvider"><a href="#6-1-3-handleInstallProvider" class="headerlink" title="6.1.3 handleInstallProvider"></a>6.1.3 handleInstallProvider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleInstallProvider</span><span class="params">(ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×6.3】安装 content provider！</span></span><br><span class="line">        installContentProviders(mInitialApplication, Lists.newArrayList(info));</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        StrictMode.setThreadPolicy(oldPolicy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！！</p><h2 id="6-2-provider-未启动同时其进程也未启动"><a href="#6-2-provider-未启动同时其进程也未启动" class="headerlink" title="6.2 provider 未启动同时其进程也未启动"></a>6.2 provider 未启动同时其进程也未启动</h2><h3 id="6-2-1-AMS-attachApplicationLocked"><a href="#6-2-1-AMS-attachApplicationLocked" class="headerlink" title="6.2.1 AMS.attachApplicationLocked"></a>6.2.1 AMS.attachApplicationLocked</h3><p>startProcessLocked 方法，先会调用 attachApplicationLocked 方法，这里省略掉了和 ContentProvider 无关的逻辑和代码：</p><p>attachApplicationLocked 我们在进程的启动中有分析过！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> pid)</span> </span>&#123;</span><br><span class="line">    ... ... ... ...</span><br><span class="line">    <span class="comment">//【×6.2.1.1】获得进程中需要 install 和 publish 的 provider！</span></span><br><span class="line">    <span class="keyword">boolean</span> normalMode = mProcessesReady || isAllowedWhileBooting(app.info);</span><br><span class="line">    List&lt;ProviderInfo&gt; providers = normalMode ? generateApplicationProvidersLocked(app) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【×6.2.1.2】如果有 provider 正在等待该进程启动，那么就设置超时消息！</span></span><br><span class="line">    <span class="keyword">if</span> (providers != <span class="keyword">null</span> &amp;&amp; checkAppInLaunchingProvidersLocked(app)) &#123;</span><br><span class="line">        Message msg = mHandler.obtainMessage(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG);</span><br><span class="line">        msg.obj = app;</span><br><span class="line">        mHandler.sendMessageDelayed(msg, CONTENT_PROVIDER_PUBLISH_TIMEOUT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ... ... ... ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【×6.2.2】bind 应用程序进程，这个地方，我们将 providers 作为参数传递到了 bindApplication</span></span><br><span class="line">        <span class="comment">// 方法里！</span></span><br><span class="line">        thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</span><br><span class="line">                profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</span><br><span class="line">                app.instrumentationUiAutomationConnection, testMode,</span><br><span class="line">                mBinderTransactionTrackingEnabled, enableTrackAllocation,</span><br><span class="line">                isRestrictedBackupMode || !normalMode, app.persistent,</span><br><span class="line">                <span class="keyword">new</span> Configuration(mConfiguration), app.compat,</span><br><span class="line">                getCommonServicesLocked(app.isolated),</span><br><span class="line">                mCoreSettingsObserver.getCoreSettingsLocked());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】更新 lru 进程列表！</span></span><br><span class="line">        updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Exception thrown during bind of "</span> + app, e);</span><br><span class="line">        app.resetPackageList(mProcessStats);</span><br><span class="line">        app.unlinkDeathRecipient();</span><br><span class="line">        startProcessLocked(app, <span class="string">"bind fail"</span>, processName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-1-1-generateApplicationProvidersLocked"><a href="#6-2-1-1-generateApplicationProvidersLocked" class="headerlink" title="6.2.1.1 generateApplicationProvidersLocked"></a>6.2.1.1 generateApplicationProvidersLocked</h4><p>收集该进程中需要启动的 provider！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ProviderInfo&gt; <span class="title">generateApplicationProvidersLocked</span><span class="params">(ProcessRecord app)</span> </span>&#123;</span><br><span class="line">    List&lt;ProviderInfo&gt; providers = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得该进程中所有 provider！</span></span><br><span class="line">        providers = AppGlobals.getPackageManager()</span><br><span class="line">                .queryContentProviders(app.processName, app.uid,</span><br><span class="line">                        STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS</span><br><span class="line">                                | MATCH_DEBUG_TRIAGED_MISSING)</span><br><span class="line">                .getList();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU,</span><br><span class="line">            <span class="string">"generateApplicationProvidersLocked, app.info.uid = "</span> + app.uid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> userId = app.userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】遍历获得的所有的 provider！</span></span><br><span class="line">    <span class="keyword">if</span> (providers != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> N = providers.size();</span><br><span class="line">        app.pubProviders.ensureCapacity(N + app.pubProviders.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            ProviderInfo cpi =</span><br><span class="line">                (ProviderInfo)providers.get(i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【×5.1.1.1】判断 provider 是否是单例模式的！</span></span><br><span class="line">            <span class="keyword">boolean</span> singleton = isSingleton(cpi.processName, cpi.applicationInfo,</span><br><span class="line">                    cpi.name, cpi.flags);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2.1】如果 provider 是单例模式，那么他们只能在默认用户下的进程中运行，如果</span></span><br><span class="line">            <span class="comment">// 进程的所属用户不是默认用户，那就不能运行！</span></span><br><span class="line">            <span class="keyword">if</span> (singleton &amp;&amp; UserHandle.getUserId(app.uid) != UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                <span class="comment">//【2.1.1】将该 provider 从集合中移除！</span></span><br><span class="line">                providers.remove(i);</span><br><span class="line">                N--;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.3】创建 provider 对应的组件对象，并创建 provider 对应的 ContentProviderRecord 实例</span></span><br><span class="line">            <span class="comment">// 将其添加到 mProviderMap 和 mProviderMap 中！</span></span><br><span class="line">            ComponentName comp = <span class="keyword">new</span> ComponentName(cpi.packageName, cpi.name);</span><br><span class="line">            ContentProviderRecord cpr = mProviderMap.getProviderByClass(comp, userId);</span><br><span class="line">            <span class="keyword">if</span> (cpr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cpr = <span class="keyword">new</span> ContentProviderRecord(<span class="keyword">this</span>, cpi, app.info, comp, singleton);</span><br><span class="line">                mProviderMap.putProviderByClass(comp, cpr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU,</span><br><span class="line">                    <span class="string">"generateApplicationProvidersLocked, cpi.uid = "</span> + cpr.uid);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.4】将该 provdier 添加到所属进程的 app.pubProviders 集合中！</span></span><br><span class="line">            app.pubProviders.put(cpi.name, cpr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2.5】如果 provider 不是 multiprocess；</span></span><br><span class="line">            <span class="comment">// 或者 provider 是 multiprocess 同时其宿主进程名不是 android，我们会将其所属包名加入到该进程中！</span></span><br><span class="line">            <span class="keyword">if</span> (!cpi.multiprocess || !<span class="string">"android"</span>.equals(cpi.packageName)) &#123;</span><br><span class="line">                <span class="comment">// 如果是平台组件的话，那么是不会加入的，因为其属于框架层！</span></span><br><span class="line">                app.addPackage(cpi.applicationInfo.packageName, cpi.applicationInfo.versionCode,</span><br><span class="line">                        mProcessStats);</span><br><span class="line">            &#125;</span><br><span class="line">            notifyPackageUse(cpi.applicationInfo.packageName,</span><br><span class="line">                             PackageManager.NOTIFY_PACKAGE_USE_CONTENT_PROVIDER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】返回要启动的 provider！</span></span><br><span class="line">    <span class="keyword">return</span> providers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就不多说了！！</p><h4 id="6-2-1-2-checkAppInLaunchingProvidersLocked"><a href="#6-2-1-2-checkAppInLaunchingProvidersLocked" class="headerlink" title="6.2.1.2 checkAppInLaunchingProvidersLocked"></a>6.2.1.2 checkAppInLaunchingProvidersLocked</h4><p>判断是否有 content provider 等待该进程的启动！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkAppInLaunchingProvidersLocked</span><span class="params">(ProcessRecord app)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历 mLaunchingProviders 集合，如果有 provider 所属进程属于该 process，返回 true！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mLaunchingProviders.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        ContentProviderRecord cpr = mLaunchingProviders.get(i);</span><br><span class="line">        <span class="keyword">if</span> (cpr.launchingApp == app) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-2-handleBindApplication"><a href="#6-2-2-handleBindApplication" class="headerlink" title="6.2.2 handleBindApplication"></a>6.2.2 handleBindApplication</h3><p>startProcessLocked 方法，最后会调用 handleBindApplication 方法，这里省略掉了和 ContentProvider 无关的逻辑和代码：</p><p>handleBindApplication 我们在进程的启动中有分析过！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</span><br><span class="line">    ... ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</span><br><span class="line">        mInitialApplication = app;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</span><br><span class="line">                <span class="comment">//【×6.3】安装 content provider！！</span></span><br><span class="line">                installContentProviders(app, data.providers);</span><br><span class="line">                mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstrumentation.onCreate(data.instrumentationArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Exception thrown in onCreate() of "</span></span><br><span class="line">                + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to create application "</span> + app.getClass().getName()</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        StrictMode.setThreadPolicy(savedPolicy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-installContentProviders-安装-provider"><a href="#6-3-installContentProviders-安装-provider" class="headerlink" title="6.3 installContentProviders - 安装 provider"></a>6.3 installContentProviders - 安装 provider</h2><p>安装 contentprovider：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installContentProviders</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Context context, List&lt;ProviderInfo&gt; providers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】该进程中的所有 provider！</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;IActivityManager.ContentProviderHolder&gt; results =</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;IActivityManager.ContentProviderHolder&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ProviderInfo cpi : providers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">            buf.append(<span class="string">"Pub "</span>);</span><br><span class="line">            buf.append(cpi.authority);</span><br><span class="line">            buf.append(<span class="string">": "</span>);</span><br><span class="line">            buf.append(cpi.name);</span><br><span class="line">            Log.i(TAG, buf.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【×6.4】封装 provider！</span></span><br><span class="line">        IActivityManager.ContentProviderHolder cph = installProvider(context, <span class="keyword">null</span>, cpi,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*noisy*/</span>, <span class="keyword">true</span> <span class="comment">/*noReleaseNeeded*/</span>, <span class="keyword">true</span> <span class="comment">/*stable*/</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【2】设置 ContentProviderHolder 的 noReleaseNeeded 属性</span></span><br><span class="line">        <span class="comment">// 同时将其添加到 results 集合中！</span></span><br><span class="line">        <span class="keyword">if</span> (cph != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cph.noReleaseNeeded = <span class="keyword">true</span>;</span><br><span class="line">            results.add(cph);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×7.1】将 provider 注册到 ams 中！</span></span><br><span class="line">        ActivityManagerNative.getDefault().publishContentProviders(</span><br><span class="line">            getApplicationThread(), results);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们要注意下参数：</p><ul><li><strong>Context context</strong>：进程的上下文环境！</li><li><strong>IActivityManager.ContentProviderHolder holder</strong>：null</li><li><strong>ProviderInfo info</strong>：provider 的信息对象；</li><li><strong>boolean noisy</strong>：false</li><li><strong>boolean noReleaseNeeded</strong>：true</li><li><strong>boolean stable</strong>：true</li></ul><h2 id="6-4-installProvider"><a href="#6-4-installProvider" class="headerlink" title="6.4 installProvider"></a>6.4 installProvider</h2><p>封装 provider，返回对应的 ContentProviderHolder 实例，注意，这里由于 provider 的进程刚启动，所以 installProvider 的 </p><p>IActivityManager.ContentProviderHolder holder 参数为 null！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IActivityManager.<span class="function">ContentProviderHolder <span class="title">installProvider</span><span class="params">(Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">        IActivityManager.ContentProviderHolder holder, ProviderInfo info,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> noisy, <span class="keyword">boolean</span> noReleaseNeeded, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    ContentProvider localProvider = <span class="keyword">null</span>;</span><br><span class="line">    IContentProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果 if 条件满足，说明进程要创建自己的本地 provider 实例！！</span></span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span> || holder.provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER || noisy) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Loading provider "</span> + info.authority + <span class="string">": "</span></span><br><span class="line">                    + info.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1.1】获取 Context 上下文环境！</span></span><br><span class="line">        Context c = <span class="keyword">null</span>;</span><br><span class="line">        ApplicationInfo ai = info.applicationInfo;</span><br><span class="line">        <span class="keyword">if</span> (context.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = context;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInitialApplication != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                mInitialApplication.getPackageName().equals(ai.packageName)) &#123;</span><br><span class="line">            c = mInitialApplication;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = context.createPackageContext(ai.packageName,</span><br><span class="line">                        Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Unable to get context for package "</span> +</span><br><span class="line">                  ai.packageName +</span><br><span class="line">                  <span class="string">" while loading content provider "</span> +</span><br><span class="line">                  info.name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> java.lang.ClassLoader cl = c.getClassLoader();</span><br><span class="line">            <span class="comment">//【×6.4.1】第一次创建时，会通过反射，创建 ContentProvider 对象！</span></span><br><span class="line">            localProvider = (ContentProvider)cl.</span><br><span class="line">                loadClass(info.name).newInstance();</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//【×6.4.2】获得内部的 IContentProvider 对象，用于 Binder 通信；</span></span><br><span class="line">            <span class="comment">// 返回的是其内部的一个 Transport 实例！</span></span><br><span class="line">            provider = localProvider.getIContentProvider();</span><br><span class="line">            <span class="keyword">if</span> (provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failed to instantiate class "</span> +</span><br><span class="line">                      info.name + <span class="string">" from sourceDir "</span> +</span><br><span class="line">                      info.applicationInfo.sourceDir);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(</span><br><span class="line">                TAG, <span class="string">"Instantiating local provider "</span> + info.name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*6.4.3】设置 Context，解析保存 providerInfo 中的信息！</span></span><br><span class="line">            localProvider.attachInfo(c, info);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.lang.Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(<span class="keyword">null</span>, e)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        <span class="string">"Unable to get provider "</span> + info.name</span><br><span class="line">                        + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【1.2】如果 if 条件不满足，说明进程不需要创建本地 provider 而是需要获得远程的 provider 连接对象！</span></span><br><span class="line">        <span class="comment">// holder.provider 就是 6.4.2.1 的 Transport 实例，后面我们再看！！</span></span><br><span class="line">        provider = holder.provider;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG, <span class="string">"Installing external provider "</span> + info.authority + <span class="string">": "</span></span><br><span class="line">                + info.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IActivityManager.ContentProviderHolder retHolder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mProviderMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_PROVIDER) Slog.v(TAG, <span class="string">"Checking to add "</span> + provider</span><br><span class="line">                + <span class="string">" / "</span> + info.name);</span><br><span class="line">        <span class="comment">//【2】获得 provider 的 Transport 对象！</span></span><br><span class="line">        IBinder jBinder = provider.asBinder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】如果进程需要创建自己的 local provider（比如 multi process 情况下），</span></span><br><span class="line">        <span class="comment">// 那么此时 localProvider 不为 null！</span></span><br><span class="line">        <span class="keyword">if</span> (localProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】创建对应的 ComponentName！</span></span><br><span class="line">            ComponentName cname = <span class="keyword">new</span> ComponentName(info.packageName, info.name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.2】判断当前进程中是否已经有该 provider 对应的 ProviderClientRecord，当然，</span></span><br><span class="line">            <span class="comment">// 如果是第一次创建，是不会有的；</span></span><br><span class="line">            ProviderClientRecord pr = mLocalProvidersByName.get(cname);</span><br><span class="line">            <span class="keyword">if</span> (pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"installProvider: lost the race, "</span></span><br><span class="line">                            + <span class="string">"using existing local provider"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【3.2.1】获得其 Transport 实例</span></span><br><span class="line">                provider = pr.mProvider;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.4.4】如果本地还未创建，那就创建 ContentProviderHolder 对象！</span></span><br><span class="line">                <span class="comment">// 并设置 holder.provider！！</span></span><br><span class="line">                holder = <span class="keyword">new</span> IActivityManager.ContentProviderHolder(info);</span><br><span class="line">                holder.provider = provider;</span><br><span class="line">                holder.noReleaseNeeded = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【*6.4.5】处理 authority 返回一个 ProviderClientRecord 对象！</span></span><br><span class="line">                pr = installProviderAuthoritiesLocked(provider, localProvider, holder);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.3】将应用关系保存到进程内部的指定集合中！</span></span><br><span class="line">                mLocalProviders.put(jBinder, pr);</span><br><span class="line">                mLocalProvidersByName.put(cname, pr);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2.4】将创建的 Holder 保存到 retHolder 中；</span></span><br><span class="line">            retHolder = pr.mHolder;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4】如果进程不需要创建自己的 local provider，而是需要访问远程的 provider，</span></span><br><span class="line">            <span class="comment">// 那么我们需要和远程的 provider，建立引用关系！</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4.1】尝试根据 provider 的 Transport 对象，获得其对应的引用计数对象！</span></span><br><span class="line">            ProviderRefCount prc = mProviderRefCountMap.get(jBinder);</span><br><span class="line">            <span class="keyword">if</span> (prc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【2.5.1】如果引用计数对象存在，那就增加引用计数！</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"installProvider: lost the race, updating ref count"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!noReleaseNeeded) &#123; <span class="comment">// 如果需要 release 的话，我们会增加引用，同时释放掉旧的引用；</span></span><br><span class="line">                    <span class="comment">//【1.3.6】增加引用计数！</span></span><br><span class="line">                    incProviderRefLocked(prc, stable);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【×2.2】释放旧的引用！</span></span><br><span class="line">                        ActivityManagerNative.getDefault().removeContentProvider(</span><br><span class="line">                                holder.connection, stable);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【2.5.2】如果引用计数对象为 null，那就会创建引用计数对象，这里会分为稳定引用和不稳定引用！</span></span><br><span class="line">                ProviderClientRecord client = installProviderAuthoritiesLocked(</span><br><span class="line">                        provider, localProvider, holder);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【2.3.7】创建引用计数对象！</span></span><br><span class="line">                <span class="keyword">if</span> (noReleaseNeeded) &#123; <span class="comment">// 如果这个引用无需释放，那么会设置为 1000！</span></span><br><span class="line">                    prc = <span class="keyword">new</span> ProviderRefCount(holder, client, <span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prc = stable</span><br><span class="line">                            ? <span class="keyword">new</span> ProviderRefCount(holder, client, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">                            : <span class="keyword">new</span> ProviderRefCount(holder, client, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 Transport 和引用计数对象的映射关系保存到 mProviderRefCountMap 中！</span></span><br><span class="line">                mProviderRefCountMap.put(jBinder, prc);</span><br><span class="line">            &#125;</span><br><span class="line">            retHolder = prc.holder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】返回创建的 Holder！</span></span><br><span class="line">    <span class="keyword">return</span> retHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 ActivityThread 中有如下和 provider 相关的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于保存 Transport 和对其他进程中的 provider 的引用计数 ProviderRefCount 的映射关系！</span></span><br><span class="line"><span class="keyword">final</span> ArrayMap&lt;IBinder, ProviderRefCount&gt; mProviderRefCountMap</span><br><span class="line">                                            = <span class="keyword">new</span> ArrayMap&lt;IBinder, ProviderRefCount&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】用于保存 Transport 和 ProviderClientRecord 的映射关系！</span></span><br><span class="line"><span class="keyword">final</span> ArrayMap&lt;IBinder, ProviderClientRecord&gt; mLocalProviders</span><br><span class="line">                                            = <span class="keyword">new</span> ArrayMap&lt;IBinder, ProviderClientRecord&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】用于保存 provide ComponentName 和 ProviderClientRecord 的映射关系！</span></span><br><span class="line"><span class="keyword">final</span> ArrayMap&lt;ComponentName, ProviderClientRecord&gt; mLocalProvidersByName </span><br><span class="line">                                            = <span class="keyword">new</span> ArrayMap&lt;ComponentName, ProviderClientRecord&gt;();</span><br></pre></td></tr></table></figure><h3 id="6-4-1-new-ContentProvider"><a href="#6-4-1-new-ContentProvider" class="headerlink" title="6.4.1 new ContentProvider"></a>6.4.1 new ContentProvider</h3><p>创建 ContentProvider 实例，表示该进程中的 provider！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentProvider</span> <span class="keyword">implements</span> <span class="title">ComponentCallbacks2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ContentProvider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext = <span class="keyword">null</span>; <span class="comment">// provider 所在进程的上下文环境；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMyUid; <span class="comment">// 所在进程 uid</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mAuthority;</span><br><span class="line">    <span class="keyword">private</span> String[] mAuthorities;</span><br><span class="line">    <span class="keyword">private</span> String mReadPermission; <span class="comment">// 读权限</span></span><br><span class="line">    <span class="keyword">private</span> String mWritePermission; <span class="comment">// 写权限</span></span><br><span class="line">    <span class="keyword">private</span> PathPermission[] mPathPermissions; <span class="comment">// path 权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mExported; <span class="comment">// 是否 export 属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mNoPerms;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSingleUser; <span class="comment">// 是否是 single user</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; mCallingPackage = <span class="keyword">new</span> ThreadLocal&lt;String&gt;(); <span class="comment">// 访问该 provider 的应用包名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Transport mTransport = <span class="keyword">new</span> Transport(); <span class="comment">// 这个很重要，下面会分析！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不多说！</p><h3 id="6-4-2-ContentProvider-getIContentProvider"><a href="#6-4-2-ContentProvider-getIContentProvider" class="headerlink" title="6.4.2 ContentProvider.getIContentProvider"></a>6.4.2 ContentProvider.getIContentProvider</h3><p>返回内部的一个 Transport 实例，该实例实现了 IContentProvider 接口！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IContentProvider <span class="title">getIContentProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.4.2.1】返回内部的 Transport 实例！</span></span><br><span class="line">    <span class="keyword">return</span> mTransport;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-2-1-new-Transport"><a href="#6-4-2-1-new-Transport" class="headerlink" title="6.4.2.1 new Transport"></a>6.4.2.1 new Transport</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transport</span> <span class="keyword">extends</span> <span class="title">ContentProviderNative</span> </span>&#123;</span><br><span class="line">    AppOpsManager mAppOpsManager = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> mReadOp = AppOpsManager.OP_NONE;</span><br><span class="line">    <span class="keyword">int</span> mWriteOp = AppOpsManager.OP_NONE;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transport 继承了 ContentProviderNative，其本质上是一个 Binder 对象，用于跨进程通信，作为 Binder 通信的服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentProviderNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">IContentProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentProviderNative</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        attachInterface(<span class="keyword">this</span>, descriptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IContentProvider <span class="title">asInterface</span><span class="params">(IBinder obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        IContentProvider in =</span><br><span class="line">            (IContentProvider)obj.queryLocalInterface(descriptor);</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> in;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContentProviderProxy(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getProviderName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        ... ... ... <span class="comment">// 省略这部分逻辑，后面再分析！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 返回的是自身！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看！！</p><h3 id="6-4-3-ContentProvider-attachInfo-2-gt-3"><a href="#6-4-3-ContentProvider-attachInfo-2-gt-3" class="headerlink" title="6.4.3 ContentProvider.attachInfo[2]-&gt;[3]"></a>6.4.3 ContentProvider.attachInfo[2]-&gt;[3]</h3><p>attachInfo 方法的作用是，解析 provider 的属性！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】调用三参数方法！</span></span><br><span class="line">    attachInfo(context, info, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attachInfo</span><span class="params">(Context context, ProviderInfo info, <span class="keyword">boolean</span> testing)</span> </span>&#123;</span><br><span class="line">    mNoPerms = testing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】将当前进程的 Context 保存到 mContext 中！</span></span><br><span class="line">        mContext = context;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2】初始化内部 Transport 的 appOps 属性！</span></span><br><span class="line">            mTransport.mAppOpsManager = (AppOpsManager) context.getSystemService(</span><br><span class="line">                    Context.APP_OPS_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】初始化 uid</span></span><br><span class="line">        mMyUid = Process.myUid();</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【*6.4.3.1】解析 provider 的属性！</span></span><br><span class="line">            setReadPermission(info.readPermission);</span><br><span class="line">            setWritePermission(info.writePermission);</span><br><span class="line">            setPathPermissions(info.pathPermissions);</span><br><span class="line">            mExported = info.exported;</span><br><span class="line">            mSingleUser = (info.flags &amp; ProviderInfo.FLAG_SINGLE_USER) != <span class="number">0</span>;</span><br><span class="line">            setAuthorities(info.authority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*6.4.3.2】拉起 provider 的 onCreate 方法！</span></span><br><span class="line">        ContentProvider.<span class="keyword">this</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="6-4-3-1-parse-attribute"><a href="#6-4-3-1-parse-attribute" class="headerlink" title="6.4.3.1 parse attribute"></a>6.4.3.1 parse attribute</h4><ul><li><strong>读/写权限</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setReadPermission</span><span class="params">(@Nullable String permission)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】读权限；</span></span><br><span class="line">    mReadPermission = permission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setWritePermission</span><span class="params">(@Nullable String permission)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】写权限；</span></span><br><span class="line">    mWritePermission = permission;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Path 权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPathPermissions</span><span class="params">(@Nullable PathPermission[] permissions)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】path  权限；</span></span><br><span class="line">    mPathPermissions = permissions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>authority 权限</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(String authorities)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (authorities != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (authorities.indexOf(<span class="string">';'</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            mAuthority = authorities;</span><br><span class="line">            mAuthorities = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mAuthority = <span class="keyword">null</span>;</span><br><span class="line">            mAuthorities = authorities.split(<span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>不多说了！</p><h4 id="6-4-3-2-ContentProvider-onCreate-生命周期方法-onCreate"><a href="#6-4-3-2-ContentProvider-onCreate-生命周期方法-onCreate" class="headerlink" title="6.4.3.2 ContentProvider.onCreate - 生命周期方法 onCreate"></a>6.4.3.2 ContentProvider.onCreate - 生命周期方法 onCreate</h4><p>拉起 provider 的 onCreate 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>当然，这个方法是抽象方法，因为我们 ContentProvider 这个类本身就是抽喜类，我们要实现自己的 provider 实例！！</p><h3 id="6-4-4-new-ContentProviderHolder"><a href="#6-4-4-new-ContentProviderHolder" class="headerlink" title="6.4.4 new ContentProviderHolder"></a>6.4.4 new ContentProviderHolder</h3><p>创建 ContentProviderHolder 对象！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentProviderHolder</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ProviderInfo info; <span class="comment">// provider 数据对象！</span></span><br><span class="line">    <span class="keyword">public</span> IContentProvider provider; <span class="comment">// 就是 Transport 对象！</span></span><br><span class="line">    <span class="keyword">public</span> IBinder connection; <span class="comment">// provider 连接对象！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> noReleaseNeeded;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContentProviderHolder</span><span class="params">(ProviderInfo _info)</span> </span>&#123;</span><br><span class="line">        info = _info;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了 ContentProviderHolder 是实现了 Parcelable 接口，可以跨进程传输！！</p><p>不多说，继续看：</p><h3 id="6-4-5-installProviderAuthoritiesLocked"><a href="#6-4-5-installProviderAuthoritiesLocked" class="headerlink" title="6.4.5 installProviderAuthoritiesLocked"></a>6.4.5 installProviderAuthoritiesLocked</h3><p>处理 provider 的 authority 属性，同时创建 ProviderClientRecord 对象并返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ProviderClientRecord <span class="title">installProviderAuthoritiesLocked</span><span class="params">(IContentProvider provider,</span></span></span><br><span class="line"><span class="function"><span class="params">        ContentProvider localProvider, IActivityManager.ContentProviderHolder holder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 provider 的 authority 属性！</span></span><br><span class="line">    <span class="keyword">final</span> String auths[] = holder.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = UserHandle.getUserId(holder.info.applicationInfo.uid); <span class="comment">// 应用程序的目标 userId</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*6.4.5.1】创建了 provider 对应的 ProviderClientRecord 对象！</span></span><br><span class="line">    <span class="keyword">final</span> ProviderClientRecord pcr = <span class="keyword">new</span> ProviderClientRecord(</span><br><span class="line">            auths, provider, localProvider, holder);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//【2】将该 provider 的 authority 和其 ProviderClientRecord 的映射关系，保存到</span></span><br><span class="line">    <span class="comment">// mProviderMap 中！</span></span><br><span class="line">    <span class="keyword">for</span> (String auth : auths) &#123;</span><br><span class="line">        <span class="comment">//【*6.4.5.2】创建 ProviderKey 对象！</span></span><br><span class="line">        <span class="keyword">final</span> ProviderKey key = <span class="keyword">new</span> ProviderKey(auth, userId);</span><br><span class="line">        <span class="keyword">final</span> ProviderClientRecord existing = mProviderMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.1】已存在，就不会添加！</span></span><br><span class="line">            Slog.w(TAG, <span class="string">"Content provider "</span> + pcr.mHolder.info.name</span><br><span class="line">                    + <span class="string">" already published as "</span> + auth);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mProviderMap.put(key, pcr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】返回 ProviderClientRecord 实例！</span></span><br><span class="line">    <span class="keyword">return</span> pcr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ActivityThread 中有一个 mProviderMap 哈希表：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】保存该 authority 属性和其所属 provider 的 ProviderClientRecord 映射关系！</span></span><br><span class="line"><span class="keyword">final</span> ArrayMap&lt;ProviderKey, ProviderClientRecord&gt; mProviderMap</span><br><span class="line">    = <span class="keyword">new</span> ArrayMap&lt;ProviderKey, ProviderClientRecord&gt;();</span><br></pre></td></tr></table></figure></p><p>继续看！</p><h4 id="6-4-5-1-new-ProviderClientRecord"><a href="#6-4-5-1-new-ProviderClientRecord" class="headerlink" title="6.4.5.1 new ProviderClientRecord"></a>6.4.5.1 new ProviderClientRecord</h4><p>创建 ProviderClientRecord 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderClientRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String[] mNames; <span class="comment">// authority 属性！</span></span><br><span class="line">    <span class="keyword">final</span> IContentProvider mProvider; <span class="comment">// Transport 对象；</span></span><br><span class="line">    <span class="keyword">final</span> ContentProvider mLocalProvider; <span class="comment">// ContentProvider 实例；</span></span><br><span class="line">    <span class="keyword">final</span> IActivityManager.ContentProviderHolder mHolder; <span class="comment">// Holder 对象；</span></span><br><span class="line"></span><br><span class="line">    ProviderClientRecord(String[] names, IContentProvider provider,</span><br><span class="line">            ContentProvider localProvider,</span><br><span class="line">            IActivityManager.ContentProviderHolder holder) &#123;</span><br><span class="line">        mNames = names;</span><br><span class="line">        mProvider = provider;</span><br><span class="line">        mLocalProvider = localProvider;</span><br><span class="line">        mHolder = holder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说！！</p><h4 id="6-4-5-2-new-ProviderKey"><a href="#6-4-5-2-new-ProviderKey" class="headerlink" title="6.4.5.2 new ProviderKey"></a>6.4.5.2 new ProviderKey</h4><p>创建 authority 属性对应的 ProviderKey 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String authority; <span class="comment">// authority 属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProviderKey</span><span class="params">(String authority, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authority = authority;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说！</p><h3 id="6-4-6-incProviderRefLocked"><a href="#6-4-6-incProviderRefLocked" class="headerlink" title="6.4.6 incProviderRefLocked"></a>6.4.6 incProviderRefLocked</h3><p>增加 provider 的引用计数， 参数 boolean stable 表示的是稳定引用，还是非稳定引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">incProviderRefLocked</span><span class="params">(ProviderRefCount prc, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】stable 引用进入这里！</span></span><br><span class="line">    <span class="keyword">if</span> (stable) &#123;</span><br><span class="line">        prc.stableCount += <span class="number">1</span>; <span class="comment">// 增加客户端引用计数</span></span><br><span class="line">        <span class="keyword">if</span> (prc.stableCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> unstableDelta;</span><br><span class="line">            <span class="keyword">if</span> (prc.removePending) &#123; <span class="comment">// 如果此时我们正在移除 provider，那就取消移除！</span></span><br><span class="line">                unstableDelta = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef: stable "</span></span><br><span class="line">                            + <span class="string">"snatched provider from the jaws of death"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                prc.removePending = <span class="keyword">false</span>;</span><br><span class="line">                mH.removeMessages(H.REMOVE_PROVIDER, prc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                unstableDelta = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef Now stable - "</span></span><br><span class="line">                            + prc.holder.info.name + <span class="string">": unstableDelta="</span></span><br><span class="line">                            + unstableDelta);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【*7.3】增加系统进程中 provider 的引用计数！</span></span><br><span class="line">                ActivityManagerNative.getDefault().refContentProvider(</span><br><span class="line">                        prc.holder.connection, <span class="number">1</span>, unstableDelta);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【2】no stable 引用进入这里；</span></span><br><span class="line">        prc.unstableCount += <span class="number">1</span>; <span class="comment">// 增加客户端引用计数</span></span><br><span class="line">        <span class="keyword">if</span> (prc.unstableCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prc.removePending) &#123; <span class="comment">// 如果此时我们正在移除 provider，那就取消移除！</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                    Slog.v(TAG, <span class="string">"incProviderRef: unstable "</span></span><br><span class="line">                            + <span class="string">"snatched provider from the jaws of death"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                prc.removePending = <span class="keyword">false</span>;</span><br><span class="line">                mH.removeMessages(H.REMOVE_PROVIDER, prc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_PROVIDER) &#123;</span><br><span class="line">                        Slog.v(TAG, <span class="string">"incProviderRef: Now unstable - "</span></span><br><span class="line">                                + prc.holder.info.name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【*7.3】增加系统进程中 provider 的引用计数！</span></span><br><span class="line">                    ActivityManagerNative.getDefault().refContentProvider(</span><br><span class="line">                            prc.holder.connection, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果是第一次引用，那么会做一些额外的处理！</p><h3 id="6-4-7-new-ProviderRefCount"><a href="#6-4-7-new-ProviderRefCount" class="headerlink" title="6.4.7 new ProviderRefCount"></a>6.4.7 new ProviderRefCount</h3><p>创建一个 provider 的引用计数对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderRefCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> IActivityManager.ContentProviderHolder holder;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ProviderClientRecord client;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> stableCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> unstableCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果为 true，那么 stable 和 unstable 的引用计数都为 0，同时 ams 准备移除引用计数</span></span><br><span class="line">    <span class="comment">// 但是在 ams 中依然持有一个 unstable 的引用！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> removePending;</span><br><span class="line"></span><br><span class="line">    ProviderRefCount(IActivityManager.ContentProviderHolder inHolder,</span><br><span class="line">            ProviderClientRecord inClient, <span class="keyword">int</span> sCount, <span class="keyword">int</span> uCount) &#123;</span><br><span class="line">        holder = inHolder;</span><br><span class="line">        client = inClient;</span><br><span class="line">        stableCount = sCount;</span><br><span class="line">        unstableCount = uCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看到这里！</p><h1 id="7-ActivityManagerService-系统进程2"><a href="#7-ActivityManagerService-系统进程2" class="headerlink" title="7 ActivityManagerService - 系统进程2"></a>7 ActivityManagerService - 系统进程2</h1><p>这里我们又从 provider 进程进入了系统进程！</p><h2 id="7-1-publishContentProviders"><a href="#7-1-publishContentProviders" class="headerlink" title="7.1 publishContentProviders"></a>7.1 publishContentProviders</h2><p>publishContentProviders 用于将 provider publish 到系统中！</p><p>首先来看下 ActivityManagerNative 中的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PUBLISH_CONTENT_PROVIDERS_TRANSACTION: &#123;</span><br><span class="line">    data.enforceInterface(IActivityManager.descriptor);</span><br><span class="line">    IBinder b = data.readStrongBinder();</span><br><span class="line">    <span class="comment">//【1】获得 provider 所在的进程的 ApplicationThreadProxy</span></span><br><span class="line">    IApplicationThread app = ApplicationThreadNative.asInterface(b);</span><br><span class="line">    <span class="comment">//【2】这里是从 provider 的 Holder 对象！</span></span><br><span class="line">    ArrayList&lt;ContentProviderHolder&gt; providers =</span><br><span class="line">        data.createTypedArrayList(ContentProviderHolder.CREATOR);</span><br><span class="line">    <span class="comment">//【3】调用 ams 的 publishContentProviders 方法！</span></span><br><span class="line">    publishContentProviders(app, providers);</span><br><span class="line">    reply.writeNoException();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，进入了 ActivityManagerService 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishContentProviders</span><span class="params">(IApplicationThread caller,</span></span></span><br><span class="line"><span class="function"><span class="params">        List&lt;ContentProviderHolder&gt; providers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (providers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceNotIsolatedCaller(<span class="string">"publishContentProviders"</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】获得 provider 所在的进程 ProcessRecord！</span></span><br><span class="line">        <span class="keyword">final</span> ProcessRecord r = getRecordForAppLocked(caller);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU, <span class="string">"ProcessRecord uid = "</span> + r.uid);</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line">                  + <span class="string">" (pid="</span> + Binder.getCallingPid()</span><br><span class="line">                  + <span class="string">") when publishing content providers"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = providers.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            ContentProviderHolder src = providers.get(i);</span><br><span class="line">            <span class="keyword">if</span> (src == <span class="keyword">null</span> || src.info == <span class="keyword">null</span> || src.provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2】我们知道 provider 对应的 ContentProviderRecord 在前面就已经添加到 r.pubProviders 中了！</span></span><br><span class="line">            ContentProviderRecord dst = r.pubProviders.get(src.info.name);</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MU) Slog.v(TAG_MU, <span class="string">"ContentProviderRecord uid = "</span> + dst.uid);</span><br><span class="line">            <span class="keyword">if</span> (dst != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【2.1】将 ContentProviderRecord 实例添加到 ProviderMap 中！</span></span><br><span class="line">                ComponentName comp = <span class="keyword">new</span> ComponentName(dst.info.packageName, dst.info.name);</span><br><span class="line">                mProviderMap.putProviderByClass(comp, dst);</span><br><span class="line">                String names[] = dst.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">                    mProviderMap.putProviderByName(names[j], dst);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> launchingCount = mLaunchingProviders.size();</span><br><span class="line">                <span class="keyword">int</span> j;</span><br><span class="line">                <span class="comment">//【2.2】判断其是否在 mLaunchingProviders 中，如果有，那就从中移除！</span></span><br><span class="line">                <span class="keyword">boolean</span> wasInLaunchingProviders = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; launchingCount; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mLaunchingProviders.get(j) == dst) &#123;</span><br><span class="line">                        mLaunchingProviders.remove(j);</span><br><span class="line">                        wasInLaunchingProviders = <span class="keyword">true</span>;</span><br><span class="line">                        j--;</span><br><span class="line">                        launchingCount--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.3】移除 provider publish 超时消息！</span></span><br><span class="line">                <span class="keyword">if</span> (wasInLaunchingProviders) &#123;</span><br><span class="line">                    mHandler.removeMessages(CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG, r);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (dst) &#123;</span><br><span class="line">                    <span class="comment">//【2.4】更新 ContentProviderRecord 中的属性，包括 dst.provider 等等！</span></span><br><span class="line">                    dst.provider = src.provider;</span><br><span class="line">                    dst.proc = r;</span><br><span class="line">                    <span class="comment">//【important】这里调用了 Object.notifyAll 方法，唤醒在等待队列中等待的 Binder 线程</span></span><br><span class="line">                    <span class="comment">// 这里就回到了 5.1 getContentProvider[Impl] 方法中了！</span></span><br><span class="line">                    dst.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新进程的优先级！</span></span><br><span class="line">                updateOomAdjLocked(r);</span><br><span class="line">                <span class="comment">// 更新进程的使用情况！</span></span><br><span class="line">                maybeUpdateProviderUsageStatsLocked(r, src.info.packageName,</span><br><span class="line">                        src.info.authority);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Binder.restoreCallingIdentity(origId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！</p><h2 id="7-2-removeContentProvider"><a href="#7-2-removeContentProvider" class="headerlink" title="7.2 removeContentProvider"></a>7.2 removeContentProvider</h2><p>减少系统进程中的 provider 的引用计数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> REMOVE_CONTENT_PROVIDER_TRANSACTION: &#123;</span><br><span class="line">    data.enforceInterface(IActivityManager.descriptor);</span><br><span class="line">    IBinder b = data.readStrongBinder();</span><br><span class="line">    <span class="keyword">boolean</span> stable = data.readInt() != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//【1】调用了 removeContentProvider 方法！</span></span><br><span class="line">    removeContentProvider(b, stable);</span><br><span class="line">    reply.writeNoException();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeContentProvider</span><span class="params">(IBinder connection, <span class="keyword">boolean</span> stable)</span> </span>&#123;</span><br><span class="line">    enforceNotIsolatedCaller(<span class="string">"removeContentProvider"</span>);</span><br><span class="line">    <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            ContentProviderConnection conn;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】获得 ContentProviderConnection 连接对象！</span></span><br><span class="line">                conn = (ContentProviderConnection)connection;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">                String msg =<span class="string">"removeContentProvider: "</span> + connection</span><br><span class="line">                        + <span class="string">" not a ContentProviderConnection"</span>;</span><br><span class="line">                Slog.w(TAG, msg);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"connection is null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【×5.1.1.7】减少对 provider 的引用计数！</span></span><br><span class="line">            <span class="keyword">if</span> (decProviderCountLocked(conn, <span class="keyword">null</span>, <span class="keyword">null</span>, stable)) &#123;</span><br><span class="line">                updateOomAdjLocked(); <span class="comment">// 调整进程优先级！</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(ident);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就不多说了！</p><h2 id="7-3-refContentProvider"><a href="#7-3-refContentProvider" class="headerlink" title="7.3 refContentProvider"></a>7.3 refContentProvider</h2><p>增加系统进程中的 provider 的引用计数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">refContentProvider</span><span class="params">(IBinder connection, <span class="keyword">int</span> stable, <span class="keyword">int</span> unstable)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Parcel data = Parcel.obtain();</span><br><span class="line">    Parcel reply = Parcel.obtain();</span><br><span class="line">    data.writeInterfaceToken(IActivityManager.descriptor);</span><br><span class="line">    data.writeStrongBinder(connection);</span><br><span class="line">    data.writeInt(stable);</span><br><span class="line">    data.writeInt(unstable);</span><br><span class="line">    mRemote.transact(REF_CONTENT_PROVIDER_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    reply.readException();</span><br><span class="line">    <span class="keyword">boolean</span> res = reply.readInt() != <span class="number">0</span>;</span><br><span class="line">    data.recycle();</span><br><span class="line">    reply.recycle();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">refContentProvider</span><span class="params">(IBinder connection, <span class="keyword">int</span> stable, <span class="keyword">int</span> unstable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 ContentProviderConnection 连接对象！</span></span><br><span class="line">    ContentProviderConnection conn;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = (ContentProviderConnection)connection;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        String msg =<span class="string">"refContentProvider: "</span> + connection</span><br><span class="line">                + <span class="string">" not a ContentProviderConnection"</span>;</span><br><span class="line">        Slog.w(TAG, msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"connection is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stable &gt; <span class="number">0</span>) &#123; <span class="comment">// 统计总的引用数，debug 用不关注！</span></span><br><span class="line">            conn.numStableIncs += stable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】调整 stable connect 计数！</span></span><br><span class="line">        stable = conn.stableCount + stable;</span><br><span class="line">        <span class="keyword">if</span> (stable &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"stableCount &lt; 0: "</span> + stable);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (unstable &gt; <span class="number">0</span>) &#123; <span class="comment">// 统计总的引用数，debug 用不关注！</span></span><br><span class="line">            conn.numUnstableIncs += unstable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】调整 unstable connect 计数！</span></span><br><span class="line">        unstable = conn.unstableCount + unstable;</span><br><span class="line">        <span class="keyword">if</span> (unstable &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"unstableCount &lt; 0: "</span> + unstable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((stable+unstable) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ref counts can't go to zero here: stable="</span></span><br><span class="line">                    + stable + <span class="string">" unstable="</span> + unstable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】更新 ContentProviderConnection 中的引用计数！</span></span><br><span class="line">        conn.stableCount = stable;</span><br><span class="line">        conn.unstableCount = unstable;</span><br><span class="line">        <span class="keyword">return</span> !conn.dead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="7-4-unstableProviderDied"><a href="#7-4-unstableProviderDied" class="headerlink" title="7.4 unstableProviderDied"></a>7.4 unstableProviderDied</h2><p>处理 unstable provider 进程的死亡后事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unstableProviderDied</span><span class="params">(IBinder connection)</span> </span>&#123;</span><br><span class="line">    ContentProviderConnection conn;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得引用的连接对象！</span></span><br><span class="line">        conn = (ContentProviderConnection)connection;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        String msg =<span class="string">"refContentProvider: "</span> + connection</span><br><span class="line">                + <span class="string">" not a ContentProviderConnection"</span>;</span><br><span class="line">        Slog.w(TAG, msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"connection is null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】获得该 conn 对象绑定着的 provider，这里是返回 provider 内部的 Transport 实例！</span></span><br><span class="line">    IContentProvider provider;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        provider = conn.provider.provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (provider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】判读客户端的连接是否仍然存在，如果是，那就直接返回！</span></span><br><span class="line">    <span class="keyword">if</span> (provider.asBinder().pingBinder()) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"unstableProviderDied: caller "</span> + Binder.getCallingUid()</span><br><span class="line">                    + <span class="string">" says "</span> + conn + <span class="string">" died, but we don't agree"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】从处理进程死亡的后事！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【4.1】发生了神奇的变化，返回！</span></span><br><span class="line">        <span class="keyword">if</span> (conn.provider.provider != provider) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4.2】如果进程已经被清理了，那就返回！</span></span><br><span class="line">        ProcessRecord proc = conn.provider.proc;</span><br><span class="line">        <span class="keyword">if</span> (proc == <span class="keyword">null</span> || proc.thread == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Slog.i(TAG, <span class="string">"Process "</span> + proc.processName + <span class="string">" (pid "</span> + proc.pid</span><br><span class="line">                + <span class="string">") early provider death"</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【4.3】处理进程的死亡后事！</span></span><br><span class="line">            appDiedLocked(proc);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>我们来看下 provider 相关的类图：</p><p><img src="http://static.zybuluo.com/Coolqi/bbpfu2ji0g1badsutpkh0m1m/ContentProvider-N.png" alt="ContentProvider-N.png-486.9kB"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 &lt;strong&gt;Android 7.1.1&lt;/strong&gt;，分析 ContentProvider 的架构和原理。&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ContentProvider内容提供者" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ContentProvider%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E8%80%85/"/>
    
    
      <category term="ContentProvider内容提供者" scheme="https://coolqi.top/tags/ContentProvider%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E8%80%85/"/>
    
  </entry>
  
</feed>
