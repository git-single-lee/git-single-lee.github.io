<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coolqi`s Blog</title>
  
  <subtitle>Every day is always sleepy.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coolqi.top/"/>
  <updated>2019-09-20T14:09:19.158Z</updated>
  <id>https://coolqi.top/</id>
  
  <author>
    <name>Coolqi.Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventBus 第四篇 - 发送消息</title>
    <link href="https://coolqi.top/2019/09/13/Eventbus-4-postMessage/"/>
    <id>https://coolqi.top/2019/09/13/Eventbus-4-postMessage/</id>
    <published>2019-09-13T12:46:25.000Z</published>
    <updated>2019-09-20T14:09:19.158Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第四篇，主要分析发送消息的流程；</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们回顾下 eventbus 的使用：</p><ul><li>发送普通的消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(messageEvent);</span><br></pre></td></tr></table></figure><ul><li>发送 sticky 消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(messageEvent)</span><br></pre></td></tr></table></figure><p>这里我们来分析下 <strong>post</strong> 的流程，也是最后一篇了；</p><h1 id="2-EventBus"><a href="#2-EventBus" class="headerlink" title="2 EventBus"></a>2 EventBus</h1><h2 id="2-1-post"><a href="#2-1-post" class="headerlink" title="2.1 post"></a>2.1 post</h2><p>发送普通消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1】获取当前线程的 PostingThreadState 实例；</span></span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">    <span class="comment">//【2】获取每个线程的事件队列 queue；</span></span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(event);</span><br><span class="line">    <span class="comment">//【3】如果当前的状态不是正在 posting；</span></span><br><span class="line">    <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">        <span class="comment">//【4】判断当前是否是主线程；</span></span><br><span class="line">        postingState.isMainThread = isMainThread();</span><br><span class="line">        <span class="comment">//【5】将 posting 状态设置为 true；</span></span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【4】事件队列不为 Empty，所以要分发事件；</span></span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.1.1】分发单个消息；</span></span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段逻辑不是很复杂！！</p><p>isMainThread 方法很简单，就不多说了。。。</p><h3 id="2-1-1-postSingleEvent"><a href="#2-1-1-postSingleEvent" class="headerlink" title="2.1.1 postSingleEvent"></a>2.1.1 postSingleEvent</h3><p>发送单个事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取事件的 class 实例；</span></span><br><span class="line">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】如果允许继承的话，那就要针对事件类型做处理，因为可能有继承的关系；</span></span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.1.1.1】查询所有的事件类型；</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            <span class="comment">//【--&gt;2.1.2】开始根据每一种事件类型去分发事件（多态）；</span></span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.1.2】开始根据传入的事件类型去分发事件（无需继承）；</span></span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】处理没有订阅者的情况；</span></span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            logger.log(Level.FINE, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventBus  中有一个 eventTypesCache 的 hash：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>key 是事件的 class，而 value 是一个 list，用于保存 class 和其 superClass，以及其他的所有接口；</p><p>因为如果允许事件继承的话，那么根据多态的概念，必须要收集所有的父类和接口；</p><h4 id="2-1-1-1-lookupAllEventTypes"><a href="#2-1-1-1-lookupAllEventTypes" class="headerlink" title="2.1.1.1  lookupAllEventTypes"></a>2.1.1.1  lookupAllEventTypes</h4><p>查询所有的事件类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; lookupAllEventTypes(Class&lt;?&gt; eventClass) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (eventTypesCache) &#123;</span><br><span class="line">        <span class="comment">//【1】从 eventTypesCache 中获取事件 class 对应的事件类型列表；</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = eventTypesCache.get(eventClass);</span><br><span class="line">        <span class="keyword">if</span> (eventTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Class&lt;?&gt; clazz = eventClass;</span><br><span class="line">            <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                eventTypes.add(clazz);</span><br><span class="line">                <span class="comment">//【--&gt;2.1.1.2】添加接口，也就是获取 class 的所有接口；</span></span><br><span class="line">                addInterfaces(eventTypes, clazz.getInterfaces());、</span><br><span class="line">                <span class="comment">//【2】获取其父类，继续遍历；</span></span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3】最后放到 cache 目录中；</span></span><br><span class="line">            eventTypesCache.put(eventClass, eventTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eventTypes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这<strong>部分的代码</strong>，<strong>主要逻辑如下</strong>：</p><ul><li>将 <strong>eventClass</strong> 加入到 <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li><li><strong>向上遍历</strong>，对于每一个 <strong>super class</strong>，都会将其加入到  <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li><li>对于<strong>每个 class</strong>，将其直接实现和间接实现的所有接口，都添加到 <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li></ul><h4 id="2-1-1-2-addInterfaces"><a href="#2-1-1-2-addInterfaces" class="headerlink" title="2.1.1.2 addInterfaces"></a>2.1.1.2 addInterfaces</h4><p>添加接口集合，就是事件类实现的所有接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInterfaces</span><span class="params">(List&lt;Class&lt;?&gt;&gt; eventTypes, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历所有的接口，将其收集到 eventTypes 中；</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; interfaceClass : interfaces) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!eventTypes.contains(interfaceClass)) &#123;</span><br><span class="line">            eventTypes.add(interfaceClass);</span><br><span class="line">            <span class="comment">//【--&gt;】处理的接口的接口；</span></span><br><span class="line">            addInterfaces(eventTypes, interfaceClass.getInterfaces());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单！</p><h3 id="2-1-2-postSingleEventForEventType"><a href="#2-1-2-postSingleEventForEventType" class="headerlink" title="2.1.2  postSingleEventForEventType"></a>2.1.2  postSingleEventForEventType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】首先去查询该事件是否已经有订阅关系了，这个关系在 register 的时候会确定；</span></span><br><span class="line">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】存在订阅关系的话，那就 post 消息；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//【2.1】处理每一个订阅关系；</span></span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.event = event;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.1】分发事件；</span></span><br><span class="line">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                <span class="comment">//【2.2】判断是否取消事件分发；</span></span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123; <span class="comment">// 如果要取消分发，那么会跳出循环；</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单；</p><h4 id="2-2-1-postToSubscription-线程模式处理"><a href="#2-2-1-postToSubscription-线程模式处理" class="headerlink" title="2.2.1 postToSubscription - 线程模式处理"></a>2.2.1 postToSubscription - 线程模式处理</h4><p>分发事件，根据订阅方法的线程模式启动不同的 poster；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSTING:</span><br><span class="line">            <span class="comment">//【1】POSTING，就在事件分发的线程分发订阅；</span></span><br><span class="line">            <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="comment">//【2】MAIN，在主线程分发订阅，这里会判断是否已经在 main 线程，</span></span><br><span class="line">            <span class="comment">// 如果是的话，那就直接分发订阅，否则就通过 mainThreadPoster 分发；</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event); <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.1.2】加入队列；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">            <span class="comment">//【3】BACKGROUND，通过子线程分发订阅，如果当前是在 main 线程，</span></span><br><span class="line">            <span class="comment">// 那就通过 backgroundPoster 新起一个线程分发，如果当前是在自线程，那就当前线程分发；</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.2.2】加入队列；</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event); <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            <span class="comment">//【4】ASYNC，异步分发订阅，通过 asyncPoster 每次都新起一个线程分发；</span></span><br><span class="line">            asyncPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.3.2】加入队列；</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到了四种不同的线程模式，每种模式有着不同的处理！</p><p>同时也看到了一个重要的数据结构：Poster</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Poster mainThreadPoster; <span class="comment">// 主线程 poster，指向一个 HandlerPoster 实例；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BackgroundPoster backgroundPoster; <span class="comment">// 后台线程 poster</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AsyncPoster asyncPoster; <span class="comment">// 异步 poster</span></span><br></pre></td></tr></table></figure><p>对于 mainThreadPoster，他是在 AndroidHandlerMainThreadSupport 中创建的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HandlerPoster(eventBus, looper, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="2-2-2-invokeSubscriber"><a href="#2-2-2-invokeSubscriber" class="headerlink" title="2.2.2 invokeSubscriber"></a>2.2.2 invokeSubscriber</h3><p>分发订阅，也就是调用订阅者的方法处理订阅事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】method.invoke 反射调用；</span></span><br><span class="line">        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        handleSubscriberException(subscription, event, e.getCause());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了；</p><h2 id="2-2-postSticky"><a href="#2-2-postSticky" class="headerlink" title="2.2 postSticky"></a>2.2 postSticky</h2><p>发送粘性消息，这可以看到，该方法会将 <strong>event</strong> 保存到 <strong>stickyEvents</strong> 表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postSticky</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (stickyEvents) &#123;</span><br><span class="line">        <span class="comment">//【1】保存到 stickyEvents 中；</span></span><br><span class="line">        stickyEvents.put(event.getClass(), event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.1】发送该消息；</span></span><br><span class="line">    post(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面 <strong>register</strong> 的时候，我们有分析过在 <strong>register</strong> 时会立刻处理 <strong>Sticky</strong> 事件的分发；</p><p>这里就不再多说了；</p><h1 id="3-PostingThreadState"><a href="#3-PostingThreadState" class="headerlink" title="3 PostingThreadState"></a>3 PostingThreadState</h1><p>这个类用于保存 <strong>thread post</strong> 的状态，在 <strong>EventBus</strong> 中有个 <strong>ThreadLocal</strong> 成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1】创建 PostingThreadState 对象；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用于保存每一个线程的 <strong>post</strong> 状态！！</p><h2 id="3-1-成员变量"><a href="#3-1-成员变量" class="headerlink" title="3.1 成员变量"></a>3.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 事件队列；</span></span><br><span class="line">    <span class="keyword">boolean</span> isPosting; <span class="comment">// 线程是否正在 post 消息；</span></span><br><span class="line">    <span class="keyword">boolean</span> isMainThread; <span class="comment">// post 的线程是否是主线程；</span></span><br><span class="line">    Subscription subscription; <span class="comment">// 订阅关系；</span></span><br><span class="line">    Object event; <span class="comment">// 正在 post 的事件，会从 eventQueue 按照顺序来分发；</span></span><br><span class="line">    <span class="keyword">boolean</span> canceled; <span class="comment">// 是否被取消了；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Poster"><a href="#4-Poster" class="headerlink" title="4 Poster"></a>4 Poster</h1><p>poster 用于订阅事件的最终分发，所有的 Poster 都实现了下面的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Posts events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> William Ferguson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Poster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enqueue an event to be posted for a particular subscription.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subscription Subscription which will receive the event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event        Event that will be posted to subscribers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着分析：</p><h2 id="4-1-HandlerPoster"><a href="#4-1-HandlerPoster" class="headerlink" title="4.1 HandlerPoster"></a>4.1 HandlerPoster</h2><p>处理 main thread 的事件分发：</p><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 正在分发的 post 队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxMillisInsideHandleMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handlerActive; <span class="comment">// 是否处于激活状态；</span></span><br></pre></td></tr></table></figure><p>参数 maxMillisInsideHandleMessage 表示处理消息的函数的执行事件，单位是毫秒，传入的是 10；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---&gt; [AndroidHandlerMainThreadSupport.java]</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HandlerPoster(eventBus, looper, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 AndroidHandlerMainThreadSupport 创建了一个 HandlerPoster，他会作为 EventBus 单例的成员变量；</p><h3 id="4-1-2-enqueue"><a href="#4-1-2-enqueue" class="headerlink" title="4.1.2 enqueue"></a>4.1.2 enqueue</h3><p>添加 post 到队列 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">            handlerActive = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【3】发送消息；</span></span><br><span class="line">            <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerPoster 本质上是一个 handler！</p><h3 id="4-1-3-run"><a href="#4-1-3-run" class="headerlink" title="4.1.3 run"></a>4.1.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="comment">//【1】一个 while 循环，处理 PendingPostQueue 中所有的 post 操作；</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;7.3】post 出队列；</span></span><br><span class="line">            PendingPost pendingPost = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;7.3】第一次为 null，post 出队列；</span></span><br><span class="line">                    pendingPost = queue.poll();</span><br><span class="line">                    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">            eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">            <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line">            <span class="comment">//【2】判断了函数的执行时间，如果大于 10 毫秒，那么说明主线程比较卡顿，</span></span><br><span class="line">            <span class="comment">// 这里会再次发送消息，然后立刻退出循环，这是防止 while 循环堵塞主线程；</span></span><br><span class="line">            <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3】设置为 true，handlerActive 会被设置为 rescheduled</span></span><br><span class="line">                <span class="comment">// 因为上面已经再次发送了消息。</span></span><br><span class="line">                rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        handlerActive = rescheduled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，主线程的分发策略是：</p><ul><li>尽可能一次性处理完成 <strong>PendingPostQueue</strong> 中的所有消息；</li><li>如果某个消息的处理时间超过 <strong>10</strong> 毫秒，说明主线程很卡，那么就会退出 <strong>while</strong> 循环；</li></ul><h2 id="4-2-BackgroundPoster"><a href="#4-2-BackgroundPoster" class="headerlink" title="4.2 BackgroundPoster"></a>4.2 BackgroundPoster</h2><p>处理 background thread 的事件分发：</p><h3 id="4-2-1-成员变量"><a href="#4-2-1-成员变量" class="headerlink" title="4.2.1 成员变量"></a>4.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 消息队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> executorRunning; <span class="comment">// 线程池是否在运行；</span></span><br></pre></td></tr></table></figure><p>可以看到 BackgroundPoster 是一个 Runnable；</p><h3 id="4-2-2-enqueue"><a href="#4-2-2-enqueue" class="headerlink" title="4.2.2 enqueue"></a>4.2.2 enqueue</h3><p>添加消息到 poster 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!executorRunning) &#123; <span class="comment">// executorRunning 设置为 true；</span></span><br><span class="line">            executorRunning = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.3】执行 BackgroundPoster;</span></span><br><span class="line">            eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方加了锁，这是因为 <strong>post</strong> 方法可以在多线程调用；</p><h3 id="4-2-3-run"><a href="#4-2-3-run" class="headerlink" title="4.2.3 run"></a>4.2.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】post 出队列，这里有个超时处理：</span></span><br><span class="line">                PendingPost pendingPost = queue.poll(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123; <span class="comment">// 这里加锁了；</span></span><br><span class="line">                        <span class="comment">//【2】如果为 null，那就再次检查，如果依然为 null</span></span><br><span class="line">                        <span class="comment">// 那就退出 run 执行，executorRunning 设置为 false；</span></span><br><span class="line">                        pendingPost = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            executorRunning = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">                eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + <span class="string">" was interruppted"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        executorRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个线程因为 while (true) 一直处于 runnable/running 的状态；</p><h2 id="4-3-AsyncPoster"><a href="#4-3-AsyncPoster" class="headerlink" title="4.3 AsyncPoster"></a>4.3 AsyncPoster</h2><p>处理 async thread 的事件分发：</p><h3 id="4-3-1-成员变量"><a href="#4-3-1-成员变量" class="headerlink" title="4.3.1 成员变量"></a>4.3.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-enqueue"><a href="#4-3-2-enqueue" class="headerlink" title="4.3.2 enqueue"></a>4.3.2 enqueue</h3><p>添加消息到 poster 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">    queue.enqueue(pendingPost);</span><br><span class="line">    eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个人地方竟然没有加锁，奇怪啊～</p><h3 id="4-3-3-run"><a href="#4-3-3-run" class="headerlink" title="4.3.3 run"></a>4.3.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;7.3】post 出队列；</span></span><br><span class="line">    PendingPost pendingPost = queue.poll();</span><br><span class="line">    <span class="keyword">if</span>(pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No pending post available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">    eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-PendingPost"><a href="#6-PendingPost" class="headerlink" title="6 PendingPost"></a>6 PendingPost</h1><p>表示一个正在分发的 post。</p><h2 id="6-1-成员变量"><a href="#6-1-成员变量" class="headerlink" title="6.1 成员变量"></a>6.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPost</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存 post，用于复用；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;PendingPost&gt; pendingPostPool = <span class="keyword">new</span> ArrayList&lt;PendingPost&gt;(); </span><br><span class="line">    Object event; <span class="comment">// 要分发的事件；</span></span><br><span class="line">    Subscription subscription; <span class="comment">// 订阅关系；</span></span><br><span class="line">    PendingPost next; <span class="comment">// 下一个要分发的 post，用户构成链表结构；！</span></span><br></pre></td></tr></table></figure><h2 id="6-2-obtainPendingPost"><a href="#6-2-obtainPendingPost" class="headerlink" title="6.2 obtainPendingPost"></a>6.2 obtainPendingPost</h2><p>获取一个 <strong>PendingPost</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PendingPost <span class="title">obtainPendingPost</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = pendingPostPool.size();</span><br><span class="line">        <span class="comment">//【1】优先从 pendingPostPool 中获取；</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            PendingPost pendingPost = pendingPostPool.remove(size - <span class="number">1</span>);</span><br><span class="line">            pendingPost.event = event;</span><br><span class="line">            pendingPost.subscription = subscription;</span><br><span class="line">            pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> pendingPost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】没有的话，再创建新的；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PendingPost(event, subscription);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有加锁的！</p><h2 id="6-3-releasePendingPost"><a href="#6-3-releasePendingPost" class="headerlink" title="6.3 releasePendingPost"></a>6.3 releasePendingPost</h2><p>消息 <strong>post</strong> 完成后，会缓存 <strong>post</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releasePendingPost</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">    pendingPost.event = <span class="keyword">null</span>;</span><br><span class="line">    pendingPost.subscription = <span class="keyword">null</span>;</span><br><span class="line">    pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">        <span class="comment">//【1】缓存已经 post 的消息的 PendingPost！！！</span></span><br><span class="line">        <span class="keyword">if</span> (pendingPostPool.size() &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">            pendingPostPool.add(pendingPost);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：pendingPostPool 不会超过 10000 个；</p><h1 id="7-PendingPostQueue"><a href="#7-PendingPostQueue" class="headerlink" title="7 PendingPostQueue"></a>7 PendingPostQueue</h1><p>这是一个由链表构成的 正在分发的 post 的队列！</p><h2 id="7-1-成员变量"><a href="#7-1-成员变量" class="headerlink" title="7.1 成员变量"></a>7.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPostQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PendingPost head; <span class="comment">// 队列头；</span></span><br><span class="line">    <span class="keyword">private</span> PendingPost tail; <span class="comment">// 队列尾；</span></span><br></pre></td></tr></table></figure><p>内部有队列头和队列尾两个属性；</p><p>这个方法的 <strong>enqueue</strong> 和 <strong>poll</strong> 是加锁的～</p><h2 id="7-2-enqueue"><a href="#7-2-enqueue" class="headerlink" title="7.2 enqueue"></a>7.2 enqueue</h2><p>将 PendingPost 放入到队列中，默认是加入到队尾，该方法是加锁了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"null cannot be enqueued"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】入队列；</span></span><br><span class="line">    <span class="keyword">if</span> (tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tail.next = pendingPost;</span><br><span class="line">        tail = pendingPost;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = tail = pendingPost;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Head present, but no tail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】提醒其他阻塞的线程；</span></span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-poll"><a href="#7-3-poll" class="headerlink" title="7.3 poll"></a>7.3 poll</h2><p>PendingPost 出队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】从 head 出队列，更改指针；</span></span><br><span class="line">    PendingPost pendingPost = head;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pendingPost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">(<span class="keyword">int</span> maxMillisToWait)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【2】这个方法会在队列为 null 的时候，等待一会儿；</span></span><br><span class="line">        wait(maxMillisToWait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> poll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>到这里，EventBus 就整完了，驾鹤西去呦～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://coolqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第三篇 - 初始化、注册和取消注册</title>
    <link href="https://coolqi.top/2019/09/10/Eventbus-3-getDefaultAndRegister/"/>
    <id>https://coolqi.top/2019/09/10/Eventbus-3-getDefaultAndRegister/</id>
    <published>2019-09-10T12:46:25.000Z</published>
    <updated>2019-09-16T14:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第三篇，主要分析 初始化，注册和取消注册；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以看成是 Handler + Thread 的替代品。</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们在使用的过程中，需要先进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>当我们的组件在销毁以后，就要执行取消注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>本篇文章，主要分析 register 和 unregister 的流程！</p><h1 id="2-EventBus"><a href="#2-EventBus" class="headerlink" title="2 EventBus"></a>2 EventBus</h1><p>EventBus 这个类是总的入口，我们可以通过 getDefault 返回默认配置的 EventBus，也可以通过 EventBusBuilder 去自定义配置：</p><p>EventBus 使用了单例模式！</p><h2 id="2-1-成员属性"><a href="#2-1-成员属性" class="headerlink" title="2.1 成员属性"></a>2.1 成员属性</h2><p>我们先去看看 EventBus 的成员属性，当然我们后面也会详细分析：</p><ul><li><strong>核心的变量：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存了</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 保存了 [订阅事件 class 实例 --&gt; 该事件的订阅关系的 list] 的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line"><span class="comment">// 保存了 [订阅者实例 --&gt; 订阅事件 class 的 list] 的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line"><span class="comment">// 保存了 [粘性订阅事件 class 实例 --&gt; 粘性订阅事件实例] 的映射关系，只要是已经发送过的 sticky event 都会被加入这里；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存每个 post 线程的状态；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;4】保存主线程的支持类，对 Looper 的封装；@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MainThreadSupport mainThreadSupport; </span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;4】用于分发消息；@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Poster mainThreadPoster;  <span class="comment">// 用于主线程的消息分发处理；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BackgroundPoster backgroundPoster; <span class="comment">// 用于后台线程的消息分发处理；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AsyncPoster asyncPoster; <span class="comment">// 用于异步线程的消息分发处理；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;5】用于查找订阅方法；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriberMethodFinder subscriberMethodFinder;</span><br></pre></td></tr></table></figure><ul><li><strong>其他的变量：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance; <span class="comment">//【1】EventBus 的单例对象；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EventBusBuilder DEFAULT_BUILDER = <span class="keyword">new</span> EventBusBuilder(); <span class="comment">//【--&gt;3.1】默认配置的 EventBusBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executorService; <span class="comment">// 线程池，用于分发异步和后台的消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> throwSubscriberException; <span class="comment">// 这些变量请参考 EventBusBuidler，这里不再多说！</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> logSubscriberExceptions;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> logNoSubscriberMessages;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sendSubscriberExceptionEvent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sendNoSubscriberEvent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> eventInheritance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> indexCount; <span class="comment">// subscriberInfoIndex 实例的个数；</span></span><br></pre></td></tr></table></figure><p>这里我简单的解释下：</p><ul><li>mainThreadPoster，backgroundPoster，asyncPoster 用于不同类型消息的分发，它们都是实现了 Post 接口，后面我们分析的时候再看！</li><li>currentPostingThreadState 是一个 ThreadLocal 变量，每个 post 线程都会有一个 PostingThreadState 属性，表示 post 的状态！</li><li>SubscriberMethodFinder 用于查找订阅方法；    </li></ul><h2 id="2-2-创建-EventBus-实例"><a href="#2-2-创建-EventBus-实例" class="headerlink" title="2.2 创建 EventBus 实例"></a>2.2 创建 EventBus 实例</h2><p>EventBus 提供了多种创建方式，既可以通过单例模式创建一个统一的 EventBus 对象，也可以创建多个 EventBus 实例，每个实例都是一个单独的作用域！</p><h3 id="2-2-1-getDefault"><a href="#2-2-1-getDefault" class="headerlink" title="2.2.1 getDefault"></a>2.2.1 getDefault</h3><p>单例模式方法，创建默认的 EventBus：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.2】构造器；</span></span><br><span class="line">                defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-new-EventBus"><a href="#2-2-2-new-EventBus" class="headerlink" title="2.2.2 new EventBus"></a>2.2.2 new EventBus</h3><p>非单例模式方法，两个构造器，默认构造器会传入一个默认的 <code>DEFAULT_BUILDER</code>，另一个需要传入指定的 EventBusBuilder 实例；</p><p>但是，我们只能通过无参数的构造器创建非单例的  EventBus 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】默认的构造器是通过默认的 builder 对象处理的；【--&gt;2.1】默认的 buidler 实例；</span></span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_BUILDER); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】通过建造者模式来初始化，注意这个构造器是 protected 的，我们无法访问！</span></span><br><span class="line">    EventBus(EventBusBuilder builder) &#123; </span><br><span class="line">        <span class="comment">//【--&gt;3.2.3】通过 EventBusBuilder 初始化 log 系统；</span></span><br><span class="line">        logger = builder.getLogger();</span><br><span class="line">        subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//【--&gt;3.2.1】通过 EventBusBuilder 初始化 mainThread 相关变量；</span></span><br><span class="line">        mainThreadSupport = builder.getMainThreadSupport();</span><br><span class="line">      </span><br><span class="line">        mainThreadPoster = mainThreadSupport != <span class="keyword">null</span> ? mainThreadSupport.createPoster(<span class="keyword">this</span>) : <span class="keyword">null</span>;</span><br><span class="line">        backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</span><br><span class="line">        asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【--&gt;3.1】通过 EventBusBuilder 初始化 EventBus 内部的变量：</span></span><br><span class="line">        indexCount = builder.subscriberInfoIndexes != <span class="keyword">null</span> ? builder.subscriberInfoIndexes.size() : <span class="number">0</span>;</span><br><span class="line">        subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</span><br><span class="line">                builder.strictMethodVerification, builder.ignoreGeneratedIndex); <span class="comment">//【--&gt;5.2】创建 SubscriberMethodFinder 对象；</span></span><br><span class="line">        logSubscriberExceptions = builder.logSubscriberExceptions;</span><br><span class="line">        logNoSubscriberMessages = builder.logNoSubscriberMessages;</span><br><span class="line">        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</span><br><span class="line">        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</span><br><span class="line">        throwSubscriberException = builder.throwSubscriberException;</span><br><span class="line">        eventInheritance = builder.eventInheritance;</span><br><span class="line">        executorService = builder.executorService;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过建造者模式来初始化部分变量，同时也会对其他变量做默认的初始化；</p><h3 id="2-2-3-通过-EventBusBuilder-创建"><a href="#2-2-3-通过-EventBusBuilder-创建" class="headerlink" title="2.2.3 通过 EventBusBuilder 创建"></a>2.2.3 通过 EventBusBuilder 创建</h3><p>EventBusBuilder 也提供了两个方法，通过 build 模式创建 EventBus 实例！</p><h4 id="2-2-3-1-installDefaultEventBus"><a href="#2-2-3-1-installDefaultEventBus" class="headerlink" title="2.2.3.1 installDefaultEventBus"></a>2.2.3.1 installDefaultEventBus</h4><p>单例模式方法，创建默认的 EventBus，但是如果已经创建了 EventBus 的单例，那就不能调用这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBus <span class="title">installDefaultEventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (EventBus.defaultInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Default instance already exists."</span> +</span><br><span class="line">                    <span class="string">" It may be only set once before it's used the first time to ensure consistent behavior."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.2】通过 build 方法创建单例！</span></span><br><span class="line">        EventBus.defaultInstance = build();</span><br><span class="line">        <span class="keyword">return</span> EventBus.defaultInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-build"><a href="#2-2-3-2-build" class="headerlink" title="2.2.3.2 build"></a>2.2.3.2 build</h4><p>这个方法可以用与创建非单例的 EventBus 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBus <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】调用一参数构造器；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EventBus(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-register-注册"><a href="#2-3-register-注册" class="headerlink" title="2.3 register - 注册"></a>2.3 register - 注册</h2><p>我们来看 register  的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取订阅者的 class 对象；</span></span><br><span class="line">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">    <span class="comment">//【--&gt;5.3】查询订阅者的方法；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.3.1】建立订阅关系；</span></span><br><span class="line">            subscribe(subscriber, subscriberMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程简单，不多说了；</p><p>注意：这里的 subscriberClass 是调用 register 方法所在的类；</p><h3 id="2-3-1-subscribe"><a href="#2-3-1-subscribe" class="headerlink" title="2.3.1 subscribe"></a>2.3.1 subscribe</h3><p>创建订阅关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取事件类型 eventType</span></span><br><span class="line">    Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">    <span class="comment">//【--&gt;7.1】创建订阅关系；</span></span><br><span class="line">    Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</span><br><span class="line">    <span class="comment">//【2】获取该 eventType 对应的订阅关系的 list；</span></span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions); <span class="comment">// 初始化操作；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></span><br><span class="line">                    + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】调整优先级顺序，订阅关系的 list 是以 priority 从小到大排序的；</span></span><br><span class="line">    <span class="comment">// 将订阅关系加入到 subscriptionsByEventType 中；</span></span><br><span class="line">    <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class="line">            subscriptions.add(i, newSubscription);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】将订阅者实例和要订阅的 eventType 的 class 实例保存到 subscribedEvents 中；</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        typesBySubscriber.put(subscriber, subscribedEvents); <span class="comment">// 初始化；</span></span><br><span class="line">    &#125;</span><br><span class="line">    subscribedEvents.add(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】方法订阅的事件是 sticky 的，特殊处理；；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberMethod.sticky) &#123;</span><br><span class="line">        <span class="comment">//【5.1】如果允许事件继承，默认是为 true 的，可以去看 EventBusBuilder；</span></span><br><span class="line">        <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">            <span class="comment">//【5.2】获取已经存在的 sticky 事件；</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">                <span class="comment">//【5.3】因为可能一个父类有多个子类，所以这里要处理所有的 sticky event。</span></span><br><span class="line">                <span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                    Object stickyEvent = entry.getValue();</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2】分发 sticky Event</span></span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.4】如果不允许事件继承，那就只能找对应类型的 sticky event。</span></span><br><span class="line">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">            <span class="comment">//【--&gt;2.3.2】分发 sticky Event</span></span><br><span class="line">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程：</p><ul><li>将订阅关系保存到对应的缓存中；</li><li>处理 sticky 事件的分发；</li></ul><p>这里的 eventInheritance 是啥意思呢，其实就是事件继承关系：</p><p>比如 MessageEvent2 继承了 MessageEvent，那么如果订阅方法的参数是 MessageEvent，而粘性事件是 MessageEvent2，那么我们依然可以分发该消息；</p><h3 id="2-3-2-checkPostStickyEventToSubscription"><a href="#2-3-2-checkPostStickyEventToSubscription" class="headerlink" title="2.3.2 checkPostStickyEventToSubscription"></a>2.3.2 checkPostStickyEventToSubscription</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPostStickyEventToSubscription</span><span class="params">(Subscription newSubscription, Object stickyEvent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.3】分发 event；</span></span><br><span class="line">        postToSubscription(newSubscription, stickyEvent, isMainThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)<br>–&gt; Strange corner case, which we don’t take care of here.</p><h3 id="2-3-3-postToSubscription"><a href="#2-3-3-postToSubscription" class="headerlink" title="2.3.3 postToSubscription"></a>2.3.3 postToSubscription</h3><p>对于 sticky event 这个和粘性广播的道理是一样，如果它之前就已经分发过，那么他会被存储在系统里，下一个订阅者一旦注册，那就能够收到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSTING:</span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN_ORDERED:</span><br><span class="line">            <span class="keyword">if</span> (mainThreadPoster != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// temporary: technically not correct as poster not decoupled from subscriber</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里开始事件的 post 了！</p><p>event post 这里我们不关注，后面会分析；</p><h2 id="2-4-unregister-反注册"><a href="#2-4-unregister-反注册" class="headerlink" title="2.4 unregister - 反注册"></a>2.4 unregister - 反注册</h2><p>我们来看看反注册的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.4.1】解除订阅；</span></span><br><span class="line">            unsubscribeByEventType(subscriber, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        typesBySubscriber.remove(subscriber);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(Level.WARNING, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-unsubscribeByEventType"><a href="#2-4-1-unsubscribeByEventType" class="headerlink" title="2.4.1 unsubscribeByEventType"></a>2.4.1 unsubscribeByEventType</h3><p>这个方法很简单，就是将订阅关系移除掉；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribeByEventType</span><span class="params">(Object subscriber, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】从 subscriptionsByEventType 返回 eventType 的所有订阅关系；</span></span><br><span class="line">    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//【2】处理当前订阅者的订阅关系，设置为 no active，同时从集合中移除；</span></span><br><span class="line">            Subscription subscription = subscriptions.get(i);</span><br><span class="line">            <span class="keyword">if</span> (subscription.subscriber == subscriber) &#123;</span><br><span class="line">                subscription.active = <span class="keyword">false</span>;</span><br><span class="line">                subscriptions.remove(i);</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h1 id="3-EventBusBuilder"><a href="#3-EventBusBuilder" class="headerlink" title="3 EventBusBuilder"></a>3 EventBusBuilder</h1><p>建造者模式，用于自定义 EventBus 的配置，并创建 EventBus 实例：</p><h2 id="3-1-成员变量"><a href="#3-1-成员变量" class="headerlink" title="3.1 成员变量"></a>3.1 成员变量</h2><p>我们来看下成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内置的默认线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> logSubscriberExceptions = <span class="keyword">true</span>; <span class="comment">// 是否记录订阅者的异常信息；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> logNoSubscriberMessages = <span class="keyword">true</span>; <span class="comment">// </span></span><br><span class="line">    <span class="keyword">boolean</span> sendSubscriberExceptionEvent = <span class="keyword">true</span>; <span class="comment">// 是否发送订阅异常的事件；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> sendNoSubscriberEvent = <span class="keyword">true</span>; <span class="comment">// 是否发送没有订阅者的消息；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> throwSubscriberException; <span class="comment">// 是否抛出订阅异常，用于 debug；默认为 false；</span></span><br><span class="line">    <span class="keyword">boolean</span> eventInheritance = <span class="keyword">true</span>; <span class="comment">// 是否开启事件继承机制，默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> ignoreGeneratedIndex; <span class="comment">// 是否强制使用反射，即使开启了 Apt 特性；默认为 false；</span></span><br><span class="line">    <span class="keyword">boolean</span> strictMethodVerification; <span class="comment">// 是否强制方法校验；默认为 false；</span></span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE; <span class="comment">// 线程池，用于分发异步和后台的消息；默认为 DEFAULT_EXECUTOR_SERVICE</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; skipMethodVerificationForClasses; <span class="comment">// 用于保存哪些跳过方法校验的 class</span></span><br><span class="line">    List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes; <span class="comment">// 用于保存 SubscriberInfoIndex 实例，也就是 APT 技术生成的动态 java 类；</span></span><br><span class="line">    </span><br><span class="line">    Logger logger; <span class="comment">// log 系统；</span></span><br><span class="line">    MainThreadSupport mainThreadSupport; <span class="comment">// 用于提供对主线程的支持，指向 AndroidHandlerMainThreadSupport 实例；</span></span><br><span class="line"></span><br><span class="line">    EventBusBuilder() &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果我们使用默认的 EventBusBuilder 来初始化 EventBus 的话，那么 EventBusBuilder 的方法会返回属性的默认值：</p><p>这里我简单的说下：</p><ul><li>阿道夫</li><li>安抚</li><li>党法</li></ul><h2 id="3-2-方法"><a href="#3-2-方法" class="headerlink" title="3.2 方法"></a>3.2 方法</h2><p>前面我们顺便看了下通过 EventBusBuilder  创建 EventBus 的相关方法，这里就不再看了，我们来看下 EventBusBuilder 其中的部分方法：</p><h3 id="3-2-1-getMainThreadSupport"><a href="#3-2-1-getMainThreadSupport" class="headerlink" title="3.2.1 getMainThreadSupport"></a>3.2.1 getMainThreadSupport</h3><p>获取主线程的支持对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MainThreadSupport <span class="title">getMainThreadSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainThreadSupport != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mainThreadSupport;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (AndroidLogger.isAndroidLogAvailable()) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.1.1】获取主线程的 looper 对象；</span></span><br><span class="line">        Object looperOrNull = getAndroidMainLooperOrNull();</span><br><span class="line">        <span class="keyword">return</span> looperOrNull == <span class="keyword">null</span> ? <span class="keyword">null</span> :</span><br><span class="line">          <span class="comment">//【--&gt;4】创建 AndroidHandlerMainThreadSupport 实例对象；</span></span><br><span class="line">                <span class="keyword">new</span> MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-1-getAndroidMainLooperOrNull"><a href="#3-2-1-1-getAndroidMainLooperOrNull" class="headerlink" title="3.2.1.1 getAndroidMainLooperOrNull"></a>3.2.1.1 getAndroidMainLooperOrNull</h4><p>获取主线程的 looper 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">getAndroidMainLooperOrNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.getMainLooper();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h3 id="3-2-2-addIndex"><a href="#3-2-2-addIndex" class="headerlink" title="3.2.2 addIndex"></a>3.2.2 addIndex</h3><p>改方法用于将通过 EventBus 的 annotation preprocessor 生成的 SubscriberInfoIndex 子类实例，加入到 EventBusBuilder.subscriberInfoIndexes 中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBusBuilder <span class="title">addIndex</span><span class="params">(SubscriberInfoIndex index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (subscriberInfoIndexes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriberInfoIndexes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    subscriberInfoIndexes.add(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h3 id="3-2-3-getLogger"><a href="#3-2-3-getLogger" class="headerlink" title="3.2.3 getLogger"></a>3.2.3 getLogger</h3><p>获取 log 系统：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Logger <span class="title">getLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// also check main looper to see if we have "good" Android classes (not Stubs etc.)</span></span><br><span class="line">        <span class="keyword">return</span> AndroidLogger.isAndroidLogAvailable() &amp;&amp; getAndroidMainLooperOrNull() != <span class="keyword">null</span></span><br><span class="line">                ? <span class="keyword">new</span> AndroidLogger(<span class="string">"EventBus"</span>) :</span><br><span class="line">                <span class="keyword">new</span> Logger.SystemOutLogger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-MainThreadSupport"><a href="#4-MainThreadSupport" class="headerlink" title="4 MainThreadSupport"></a>4 MainThreadSupport</h1><p>是一个接口，AndroidHandlerMainThreadSupport 内部类实现了该接口，作为主线程的支持类，是对 looper 对象的封装；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainThreadSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isMainThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AndroidHandlerMainThreadSupport</span> <span class="keyword">implements</span> <span class="title">MainThreadSupport</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】主线程的 looper 对象；</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Looper looper;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AndroidHandlerMainThreadSupport</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.looper = looper;</span><br><span class="line">        &#125;</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先不看 AndroidHandlerMainThreadSupport 的其他方法，后面会分析。</p><p>暂时只需要知道，AndroidHandlerMainThreadSupport 的 createPoster 方法会创建一个 <strong>HandlerPoster</strong> 实例，他是 Handler 的子类，同时实现了 Poster 接口！</p><p>看到这里，其实能猜到，HandlerPoster 会持有主线程的 Looper 对象，像主线程发送消息！！</p><h1 id="5-SubscriberMethodFinder"><a href="#5-SubscriberMethodFinder" class="headerlink" title="5 SubscriberMethodFinder"></a>5 SubscriberMethodFinder</h1><p>该类用于查找订阅者的方法：</p><h2 id="5-1-成员变量"><a href="#5-1-成员变量" class="headerlink" title="5.1 成员变量"></a>5.1 成员变量</h2><p>我们来看一些核心的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BRIDGE = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x1000</span>;</span><br><span class="line"><span class="comment">// 方法校验位。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;</span><br><span class="line"><span class="comment">// 方法缓存，key 为订阅者的 class 实例，value 为订阅方法的 list；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下三个变量的值来自 EventBusBuilder，意思我已经解释过了；</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> strictMethodVerification;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ignoreGeneratedIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存 FindState 对象，每一个 FindState 用于记录查询订阅方法的结果和状态；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FindState[] FIND_STATE_POOL = <span class="keyword">new</span> FindState[POOL_SIZE];</span><br></pre></td></tr></table></figure><p>这里可以看到，subscriberInfoIndexes 是要手动设置到 EventBusBuilder 中；</p><h2 id="5-2-new-SubscriberMethodFinder"><a href="#5-2-new-SubscriberMethodFinder" class="headerlink" title="5.2 new SubscriberMethodFinder"></a>5.2 new SubscriberMethodFinder</h2><ul><li>参数 <strong>List<subscriberinfoindex> subscriberInfoIndexes</subscriberinfoindex></strong>：表示 SubscriberInfoIndex 集合，就是通过 APT 技术生成的，存储了订阅方法的对象；</li><li>参数 <strong>boolean strictMethodVerification</strong>：是否强制方法校验，默认为 false；</li><li>参数 <strong>boolean ignoreGeneratedIndex</strong>：是否强制使用反射，即使开启了 APT 特性；默认为 false；</li></ul><p>以上参数值均来自于 EventBusBuilder 中的默认值/自定义值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SubscriberMethodFinder(List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes, <span class="keyword">boolean</span> strictMethodVerification,</span><br><span class="line">                       <span class="keyword">boolean</span> ignoreGeneratedIndex) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriberInfoIndexes = subscriberInfoIndexes;</span><br><span class="line">    <span class="keyword">this</span>.strictMethodVerification = strictMethodVerification;</span><br><span class="line">    <span class="keyword">this</span>.ignoreGeneratedIndex = ignoreGeneratedIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-findSubscriberMethods"><a href="#5-3-findSubscriberMethods" class="headerlink" title="5.3 findSubscriberMethods"></a>5.3 findSubscriberMethods</h2><p>查询订阅者拥有的订阅方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】默认从方法 cache 中查询；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果从方法 cache中查询不到，那就判断是否不使用 GeneratedIndex；</span></span><br><span class="line">    <span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.1】不使用的话，就通过反射的方式访问方法；</span></span><br><span class="line">        subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.2】使用的话，就通过 GeneratedIndex 获取方法；</span></span><br><span class="line">        subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</span><br><span class="line">                + <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】加入到方法 cache 中去；</span></span><br><span class="line">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ignoreGeneratedIndex 默认是 false 的；</p><p>核心代码在 <strong>findUsingReflection</strong> 和 <strong>findUsingInfo</strong> 中！</p><h3 id="5-3-1-findUsingReflection-反射获取"><a href="#5-3-1-findUsingReflection-反射获取" class="headerlink" title="5.3.1 findUsingReflection - 反射获取"></a>5.3.1 findUsingReflection - 反射获取</h3><p>我们来看下通过反射是如何获取的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingReflection</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.4】返回一个 FindState 对象，用于记录查询的结果和状态；</span></span><br><span class="line">    FindState findState = prepareFindState();</span><br><span class="line">    <span class="comment">//【--&gt;6.2】初始化 FindState；</span></span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.5】通过发射的方式收集注解方法；</span></span><br><span class="line">        findUsingReflectionInSingleClass(findState);</span><br><span class="line">        <span class="comment">//【--&gt;6.3】处理其 superClass；</span></span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;5.6】返回所有的订阅方法；</span></span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 subscriberClass 是调用 register 方法所在的类，所以找父类肯定是向上搜索；</p><p>对于每一个调用了 register 的 class，都会创建一个 FindState 对象，保存相关信息；</p><h3 id="5-3-2-findUsingInfo-APT-获取"><a href="#5-3-2-findUsingInfo-APT-获取" class="headerlink" title="5.3.2 findUsingInfo - APT 获取"></a>5.3.2 findUsingInfo - APT 获取</h3><p>开启了 APT 预处理技术的话，那就通过动态生成的类获取，这个过程比反射更快；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.4】返回一个 FindState 对象，用于记录查询的结果和状态；</span></span><br><span class="line">    FindState findState = prepareFindState();</span><br><span class="line">    <span class="comment">//【--&gt;6.2】初始化 FindState；</span></span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.2.1】返回订阅者对应的 SubscriberInfo 实例，保存到 findState.subscriberInfo 中；</span></span><br><span class="line">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">        <span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1】返回 SubscriberInfo 的所有订阅方法 SubscriberMethod[]；</span></span><br><span class="line">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">            <span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;6.4】对方法做检查，和反射调用一个吊样；</span></span><br><span class="line">                <span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">                    <span class="comment">//【2】检查没啥问题，就加入到 findState.subscriberMethods 中；</span></span><br><span class="line">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【--&gt;5.5】如果订阅者没有对应的 SubscriberInfo 实例，通过发射的方式收集注解方法；</span></span><br><span class="line">            findUsingReflectionInSingleClass(findState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;6.3】处理其 superClass；</span></span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;5.6】返回所有的订阅方法；</span></span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里会优先获取通过 APT 技术生成的类，如果没有对应的 SubscriberInfo，那就仍然通过反射来获取方法 Method；</p><p>这里的 subscriberClass 是调用 register 方法所在的类，所以找父类肯定是向上搜索；</p><h4 id="5-3-2-1-getSubscriberInfo"><a href="#5-3-2-1-getSubscriberInfo" class="headerlink" title="5.3.2.1 getSubscriberInfo"></a>5.3.2.1 getSubscriberInfo</h4><p>返回订阅者对应的 SubscriberInfo 实例，前面我们知道 findState.subscriberInfo  在初始化的时候是 null 的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是针对于继承关系的，因为是先处理子类，再处理父类，所以先处理的子类的话，findState.subscriberInfo 肯定不是 null</span></span><br><span class="line">    <span class="comment">// 那么就要通过 subscriberInfo.getSuperSubscriberInfo() 获取父类的 SubscriberInfo。</span></span><br><span class="line">    <span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span> &amp;&amp; findState.subscriberInfo.getSuperSubscriberInfo() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();</span><br><span class="line">        <span class="comment">//【2】额外还要做一次 class 判断，因为 while 循环会调整 clazz；</span></span><br><span class="line">        <span class="keyword">if</span> (findState.clazz == superclassInfo.getSubscriberClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> superclassInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】通过 subscriberInfoIndexes 来查找，getSubscriberInfo 方法是动态类的内置方法，通过 class 实例获取 SubscriberInfo；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberInfoIndexes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberInfoIndex index : subscriberInfoIndexes) &#123;</span><br><span class="line">            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们知道，通过前面的分析，每一个订阅者都是一个 SubscriberInfo 实例！</p><h2 id="5-4-prepareFindState"><a href="#5-4-prepareFindState" class="headerlink" title="5.4 prepareFindState"></a>5.4 prepareFindState</h2><p>主要是为每个 find 操作，创建一个 FindState 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FindState <span class="title">prepareFindState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (FIND_STATE_POOL) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">            FindState state = FIND_STATE_POOL[i];</span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                FIND_STATE_POOL[i] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;6】返回了一个 FindState 实例；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FindState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，<strong>FIND_STATE_POOL</strong> 是空的，所以会创建一个新的 <strong>FindState</strong> 实例；</p><h2 id="5-5-findUsingReflectionInSingleClass"><a href="#5-5-findUsingReflectionInSingleClass" class="headerlink" title="5.5 findUsingReflectionInSingleClass"></a>5.5 findUsingReflectionInSingleClass</h2><p>通过反射的方式获取注册方法，通过 SubscriberMethod 实例封装，保存到 findState.subscriberMethods 中：</p><p>参数为 FindState 实例，这里获取方法的是通过 findState.clazz，这个要注意；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    Method[] methods;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【0】这个方法比 getMethods 快，特别是当订阅者是像活动这样的方法很多的类的时候；</span></span><br><span class="line">        methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">        <span class="comment">// 可能会抛出 java.lang.NoClassDefFoundError, see [https://github.com/greenrobot/EventBus/issues/149]</span></span><br><span class="line">        <span class="comment">// 这里会使用 getMethods() 方法获取，注意，会跳过父类；</span></span><br><span class="line">        methods = findState.clazz.getMethods();</span><br><span class="line">        findState.skipSuperClasses = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">        <span class="comment">//【1】这里是对 method 方法访问域做校验，必须是 public，不能是 abstract 和 static 的；</span></span><br><span class="line">        <span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//【1.1】获取方法对应的注解 Subscribe，只处理被该注解修饰的方法;</span></span><br><span class="line">                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</span><br><span class="line">                <span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1.2】获取方法对应的参数；</span></span><br><span class="line">                    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//【--&gt;6.4】检查要添加方法的信息，没问题的话，就创建方法对应的 SubscriberMethod，添加到 findState.subscriberMethods；</span></span><br><span class="line">                    <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                        <span class="comment">//【1.3】获取订阅的分发线程信息；</span></span><br><span class="line">                        ThreadMode threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                        <span class="comment">//【1.4】创建方法对应的 SubscriberMethod，添加到 findState.subscriberMethods；</span></span><br><span class="line">                        <span class="comment">// SubscriberMethod 参数：订阅方法 method，订阅事件的 class 实例 eventType，线程模式 threadMode，优先级，粘性；</span></span><br><span class="line">                        findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode,</span><br><span class="line">                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                <span class="comment">//【2】如果开启方法校验，那么被 @Subscribe 修饰的方法只能一个参数；</span></span><br><span class="line">                String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName +</span><br><span class="line">                        <span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">            String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</span><br><span class="line">                    <span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>strictMethodVerification</strong> 表示是否强制校验方法的访问修饰符；</p><h2 id="5-6-getMethodsAndRelease"><a href="#5-6-getMethodsAndRelease" class="headerlink" title="5.6 getMethodsAndRelease"></a>5.6 getMethodsAndRelease</h2><p>返回收集到的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">getMethodsAndRelease</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】通过 FindState 获取查询到的方法；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(findState.subscriberMethods);</span><br><span class="line">    <span class="comment">//【--&gt;6.5】clear 掉缓存；</span></span><br><span class="line">    findState.recycle();</span><br><span class="line">    <span class="keyword">synchronized</span> (FIND_STATE_POOL) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FIND_STATE_POOL[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                FIND_STATE_POOL[i] = findState; <span class="comment">// 将这个对象缓存下来，防止频繁的创建 FindState 对象；</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-FindState"><a href="#6-FindState" class="headerlink" title="6 FindState"></a>6 FindState</h1><p>FindState 是 SubscriberMethodFinder 的内部类，用于保存查询的结果和状态信息（包括子类和父类）：</p><h2 id="6-1-成员变量"><a href="#6-1-成员变量" class="headerlink" title="6.1 成员变量"></a>6.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FindState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存订阅者的方法 SubscriberMethod；</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 保存订阅事件 class 实例 和 [订阅方法 Method/所属 FindState] 的映射关系；</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Class, Object&gt; anyMethodByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 保存了 methodKey 和 method 所属的订阅类的 class 实例；</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Class&gt; subscriberClassByMethodKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 用于生成 subscriberClassByMethodKey 中的 methodKey</span></span><br><span class="line">    <span class="keyword">final</span> StringBuilder methodKeyBuilder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; subscriberClass; <span class="comment">// 订阅者 class 实例，也就是调用 register 方法的类；</span></span><br><span class="line">    Class&lt;?&gt; clazz; <span class="comment">// 初始化时，取值和 subscriberClass 一样，但是在处理继承关系时，会转为 superClass</span></span><br><span class="line">    <span class="keyword">boolean</span> skipSuperClasses; <span class="comment">// 是否 skip 父类，初始化为 false；</span></span><br><span class="line">    SubscriberInfo subscriberInfo; <span class="comment">// 订阅者信息，开启了 APT 才有，否则为 null；</span></span><br></pre></td></tr></table></figure><ul><li>subscriberClassByMethodKey：如果存在继承关系，同时方法有覆盖，那么以子类为准；</li></ul><h2 id="6-2-initForSubscriber"><a href="#6-2-initForSubscriber" class="headerlink" title="6.2 initForSubscriber"></a>6.2 initForSubscriber</h2><p>初始化操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initForSubscriber</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】初始化：subscriberClass == clazz</span></span><br><span class="line">    <span class="keyword">this</span>.subscriberClass = clazz = subscriberClass;</span><br><span class="line">    skipSuperClasses = <span class="keyword">false</span>;</span><br><span class="line">    subscriberInfo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-moveToSuperclass"><a href="#6-3-moveToSuperclass" class="headerlink" title="6.3 moveToSuperclass"></a>6.3 moveToSuperclass</h2><p>跳转到 superClass，处理父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveToSuperclass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果要跳过 superClass，那么 clazz 为 null；</span></span><br><span class="line">    <span class="keyword">if</span> (skipSuperClasses) &#123;</span><br><span class="line">        clazz = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】获取其 superClass；</span></span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">        String clazzName = clazz.getName();</span><br><span class="line">        <span class="comment">//【3】跳过系统的类；</span></span><br><span class="line">        <span class="keyword">if</span> (clazzName.startsWith(<span class="string">"java."</span>) || clazzName.startsWith(<span class="string">"javax."</span>) || clazzName.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            clazz = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了；</p><h2 id="6-4-checkAdd"><a href="#6-4-checkAdd" class="headerlink" title="6.4 checkAdd"></a>6.4 checkAdd</h2><p>检查要添加方法的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkAdd</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里会将订阅事件 class 实例 --&gt; 订阅方法 Method 放入 anyMethodByEventType 中；</span></span><br><span class="line">    <span class="comment">// 同时会返回以之前已经存在的 value；</span></span><br><span class="line">    Object existing = anyMethodByEventType.put(eventType, method);</span><br><span class="line">    <span class="keyword">if</span> (existing == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【2】如果是第一次添加，那么 check 成功，直接返回 true；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】如果之前添加过 eventType，说明可能一个类有多个处理该 eventType 的函数；</span></span><br><span class="line">        <span class="comment">// 也有可能是有继承关系，此时处理的是父类的方法，子类覆盖了父类的同名方法；</span></span><br><span class="line">        <span class="keyword">if</span> (existing <span class="keyword">instanceof</span> Method) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;6.4.1】检查已经添加的方法 existing 的方法签名，只有第二次处理同一个 eventType 才会进入这里</span></span><br><span class="line">            <span class="comment">// 此时该方法是会返回 true 的，因为第一次添加的 method 还没有做签名校验；</span></span><br><span class="line">            <span class="keyword">if</span> (!checkAddWithMethodSignature((Method) existing, eventType)) &#123;</span><br><span class="line">                <span class="comment">// Paranoia check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】这里很奇怪，直接将之前的 Method 替换成了 FindState 实例；</span></span><br><span class="line">            <span class="comment">// 如果有多个方法都处理同一个 eventType 的话，显然 value 就不是 Method 的实例了；</span></span><br><span class="line">            anyMethodByEventType.put(eventType, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;6.4.1】检查新添加的方法 method 的方法签名；</span></span><br><span class="line">        <span class="keyword">return</span> checkAddWithMethodSignature(method, eventType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，作者其实在注释里面也有说明：有两级的检查：</p><ul><li>第一级：检查时间类型；</li><li>第二级：检查方法签名；</li></ul><p>可能有多个处理该 eventType 的函数：</p><ul><li>只有第一次添加会进入 <code>if (existing instanceof Method) {</code> 分支；</li><li>第二次就会将 anyMethodByEventType 中的 value 从 Method 变为 FindState，那么就不会进入 <code>if (existing instanceof Method) {</code> 分支了；</li><li>无论一类多方法，还是继承一方法，都是上面的流程；</li></ul><p>（但是看作者的注释：貌似没有考虑一个订阅者有多个监听相同事件类型的方法。）</p><p>如果该 checkAdd 方法返回的是 false，那么 @Subscribe 修饰的方法就不会被收集！！！</p><h3 id="6-4-1-checkAddWithMethodSignature"><a href="#6-4-1-checkAddWithMethodSignature" class="headerlink" title="6.4.1 checkAddWithMethodSignature"></a>6.4.1 checkAddWithMethodSignature</h3><p>检查方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAddWithMethodSignature</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">    methodKeyBuilder.append(method.getName());</span><br><span class="line">    methodKeyBuilder.append(<span class="string">'&gt;'</span>).append(eventType.getName());</span><br><span class="line">    <span class="comment">//【1】生成 methodKey：methodName&gt;eventTypeName</span></span><br><span class="line">    String methodKey = methodKeyBuilder.toString();</span><br><span class="line">    <span class="comment">//【2】获取方法所在的类 class 实例；</span></span><br><span class="line">    Class&lt;?&gt; methodClass = method.getDeclaringClass();</span><br><span class="line">    <span class="comment">//【3】将 methodKey 和 methodClass 的映射关系放入 subscriberClassByMethodKey 中，同时返回旧的 value；</span></span><br><span class="line">    Class&lt;?&gt; methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);</span><br><span class="line">    <span class="comment">//【4】这里针对 old class 实例和 new class 做了比较；</span></span><br><span class="line">    <span class="comment">// 如果是第一次 add ，或者有 old class 实例，同时 old class 是 new class 的 super class</span></span><br><span class="line">    <span class="comment">// 那么就用 new class 替换旧的值；</span></span><br><span class="line">    <span class="keyword">if</span> (methodClassOld == <span class="keyword">null</span> || methodClassOld.isAssignableFrom(methodClass)) &#123;</span><br><span class="line">        <span class="comment">// Only add if not already found in a sub class</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Revert the put, old class is further down the class hierarchy</span></span><br><span class="line">        subscriberClassByMethodKey.put(methodKey, methodClassOld); <span class="comment">// 恢复旧的值；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实际上是方法的签名：方法名&gt;参数</p><p>对于同一个类，如果有多个函数处理同一个 eventType，显然方法签名是不一样的，那么这个 checkAddWithMethodSignature 返回的是 true；</p><p>对于继承关系，对于子类和父类有相同的方法签名的情况，以子类为准，也就是说父类的同名同参方法是不会被收集的 checkAddWithMethodSignature 返回的是 false；；</p><h2 id="6-5-recycle"><a href="#6-5-recycle" class="headerlink" title="6.5 recycle"></a>6.5 recycle</h2><p>回收内部的变量，就是 clear 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    subscriberMethods.clear();</span><br><span class="line">    anyMethodByEventType.clear();</span><br><span class="line">    subscriberClassByMethodKey.clear();</span><br><span class="line">    methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">    subscriberClass = <span class="keyword">null</span>;</span><br><span class="line">    clazz = <span class="keyword">null</span>;</span><br><span class="line">    skipSuperClasses = <span class="keyword">false</span>;</span><br><span class="line">    subscriberInfo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不多说了，啊哈哈哈哈哈～～</p><h1 id="7-Subscription"><a href="#7-Subscription" class="headerlink" title="7 Subscription"></a>7 Subscription</h1><p>表示一种订阅关系；</p><h2 id="7-1-成员变量"><a href="#7-1-成员变量" class="headerlink" title="7.1 成员变量"></a>7.1 成员变量</h2><p>我们来看下成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object subscriber; <span class="comment">// 订阅者；</span></span><br><span class="line">    <span class="keyword">final</span> SubscriberMethod subscriberMethod; <span class="comment">// 订阅方法；</span></span><br></pre></td></tr></table></figure><h2 id="7-2-new-Subscription"><a href="#7-2-new-Subscription" class="headerlink" title="7.2 new Subscription"></a>7.2 new Subscription</h2><p>创建订阅关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Subscription(Object subscriber, SubscriberMethod subscriberMethod) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriber = subscriber; <span class="comment">// 订阅者；</span></span><br><span class="line">    <span class="keyword">this</span>.subscriberMethod = subscriberMethod; <span class="comment">// 订阅方法；</span></span><br><span class="line">    active = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>我们分析了 EventBus 的创建，注册和反注册，整个初始化和注册的过程主要分为下面的基本：</p><ul><li>通过 EventBusBuilder 创建 EventBus；</li><li>EventBus 收集当前类以及其父类所有的订阅方法；</li><li>根据事件类型和每一个订阅方法，创建订阅关系；</li></ul><p>遗留了如下的几个问题：</p><ul><li>post 操作的执行流程；</li><li>不同线程模式的消息是如何分发和处理的；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://coolqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第二篇 - Subscribe 注解处理</title>
    <link href="https://coolqi.top/2019/08/27/Eventbus-2-SubscribeProcessor/"/>
    <id>https://coolqi.top/2019/08/27/Eventbus-2-SubscribeProcessor/</id>
    <published>2019-08-27T12:46:25.000Z</published>
    <updated>2019-09-16T14:13:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第二篇，主要分析 Subscribe 注解的处理；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以捆成是 Handler + Thread 的替代品。</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们在使用的过程中，需要设置接收消息的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">   ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解  Subscribe 可以说是 EventBus 的核心了，我们知道，3.x 版本之前，EventBus 使用的是运行时注解，其实就是 Java 的反射机制，但是这带来了性能的损耗！</p><p>因此，从 3.x 开始，Eventbus 引入了编译时注解处理的特性，核心类就是 EventBusAnnotationProcessor！ </p><p>我们来看看注解的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</span><br><span class="line">    <span class="function">ThreadMode <span class="title">threadMode</span><span class="params">()</span> <span class="keyword">default</span> ThreadMode.POSTING</span>; <span class="comment">// 线程模型：默认 POSTING</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sticky</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>; <span class="comment">// 默认非粘性；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> 0</span>; <span class="comment">// 优先级为 0；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Subscribe 用于修饰方法，并且可以保留到运行时，这是因为默认情况下，EventBus 是通过运行时注解，反射加载方法的，除非开启编译时注解处理机制；</p><h1 id="2-EventBusAnnotationProcessor-Subscribe-处理"><a href="#2-EventBusAnnotationProcessor-Subscribe-处理" class="headerlink" title="2 EventBusAnnotationProcessor - Subscribe 处理"></a>2 EventBusAnnotationProcessor - Subscribe 处理</h1><p>浏览 EventBus 的源码目录，我们能看到处理 Subscribe 注解的是 EventBusAnnotationProcessor 类，依然是编译时注解，动态生成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"org.greenrobot.eventbus.Subscribe"</span>)</span><br><span class="line"><span class="meta">@SupportedOptions</span>(value = &#123;<span class="string">"eventBusIndex"</span>, <span class="string">"verbose"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusAnnotationProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>可以看到，它支持的只有一个注解：Subscribe</p><p>同时他支持两个配置属性：</p><ul><li>eventBusIndex：是否开启编译时注解处理，这个特性是 3.x 版本新增的，也就是将运行时的处理放到了编译时注解处理，动态生成 java 代码，用于提升框架的性能；</li><li>verbose：用于控制 log，调试使用；</li></ul><p>这两个属性是在 gradle 中配置的；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="string">eventBusIndex:</span><span class="string">'com.monster.android.wild.MyEventBusIndex'</span>, <span class="string">verbose :</span> <span class="string">"true"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    api <span class="string">'org.greenrobot:eventbus:3.1.0'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.greenrobot:eventbus-annotation-processor:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在下面的分析中就能看到，注解处理器对于这几个参数的处理：</p><h2 id="2-1-成员变量"><a href="#2-1-成员变量" class="headerlink" title="2.1 成员变量"></a>2.1 成员变量</h2><p>EventBusAnnotationProcessor 内部如下的变量和常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_EVENT_BUS_INDEX = <span class="string">"eventBusIndex"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_VERBOSE = <span class="string">"verbose"</span>;</span><br></pre></td></tr></table></figure><p>上面的变量用于获取 gradle 的环境变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存订阅者（类）和其订阅方法（注解修饰的方法）的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass = <span class="keyword">new</span> ListMap&lt;&gt;(); </span><br><span class="line"><span class="comment">// 保存需要跳过的订阅者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;TypeElement&gt; classesToSkip = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> writerRoundDone;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> round;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> verbose;</span><br></pre></td></tr></table></figure><h2 id="2-2-process"><a href="#2-2-process" class="headerlink" title="2.2 process"></a>2.2 process</h2><p>依然是核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">  Messager messager = processingEnv.getMessager();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//【1】获取 eventBusIndex 编译属性，并判断是否有设置这个，没有的话就不处理；</span></span><br><span class="line">    String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="keyword">null</span>) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"No option "</span> + OPTION_EVENT_BUS_INDEX +</span><br><span class="line">                            <span class="string">" passed to annotation processor"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断是否要输出 log；</span></span><br><span class="line">    verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));</span><br><span class="line">    <span class="comment">//【3】获取动态创建的 java 类的类名；</span></span><br><span class="line">    <span class="keyword">int</span> lastPeriod = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">    String indexPackage = lastPeriod != -<span class="number">1</span> ? index.substring(<span class="number">0</span>, lastPeriod) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    round++;</span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"Processing round "</span> + round + <span class="string">", new annotations: "</span> +</span><br><span class="line">                            !annotations.isEmpty() + <span class="string">", processingOver: "</span> + env.processingOver());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env.processingOver()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!annotations.isEmpty()) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR,</span><br><span class="line">                              <span class="string">"Unexpected processing state: annotations still available after processing over"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (annotations.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writerRoundDone) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.ERROR,</span><br><span class="line">                            <span class="string">"Unexpected processing state: annotations still available after writing."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.1】收集注解 Subscribe 修饰的元素；</span></span><br><span class="line">    collectSubscribers(annotations, env, messager);</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】检查某些注解是否要忽略；</span></span><br><span class="line">    checkForSubscribersToSkip(messager, indexPackage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!methodsByClass.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">//【--&gt;2.2.3】如果收集到了被注解修饰的方法，那么就动态创建 java 类；</span></span><br><span class="line">      createInfoIndexFile(index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.WARNING, <span class="string">"No @Subscribe annotations found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    writerRoundDone = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Unexpected error in EventBusAnnotationProcessor: "</span> + e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程很简单，不多 say；</p><h3 id="2-2-1-collectSubscribers-收集"><a href="#2-2-1-collectSubscribers-收集" class="headerlink" title="2.2.1 collectSubscribers - 收集"></a>2.2.1 collectSubscribers - 收集</h3><p>收集注解 Subscribe 修饰的元素；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectSubscribers</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeElement annotation : annotations) &#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = env.getElementsAnnotatedWith(annotation); <span class="comment">// 获得 Subscribe 修饰的所有元素；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element <span class="keyword">instanceof</span> ExecutableElement) &#123;</span><br><span class="line">                ExecutableElement method = (ExecutableElement) element;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.1.1】检查注解修饰的方法是否满足条件；</span></span><br><span class="line">                <span class="keyword">if</span> (checkHasNoErrors(method, messager)) &#123;</span><br><span class="line">                    <span class="comment">//【1】获得方法所属的类元素，加入到 methodsByClass 哈希表中；</span></span><br><span class="line">                    TypeElement classElement = (TypeElement) method.getEnclosingElement();</span><br><span class="line">                    methodsByClass.putElement(classElement, method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"@Subscribe is only valid for methods"</span>, element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-1-checkHasNoErrors"><a href="#2-2-1-1-checkHasNoErrors" class="headerlink" title="2.2.1.1 checkHasNoErrors"></a>2.2.1.1 checkHasNoErrors</h4><p>检查是否有错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkHasNoErrors</span><span class="params">(ExecutableElement element, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】方法不能是 static 的；</span></span><br><span class="line">    <span class="keyword">if</span> (element.getModifiers().contains(Modifier.STATIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must not be static"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】方法必须是 public 的；</span></span><br><span class="line">    <span class="keyword">if</span> (!element.getModifiers().contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must be public"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】方法必须至少有一个 param；</span></span><br><span class="line">    List&lt;? extends VariableElement&gt; parameters = ((ExecutableElement) element).getParameters();</span><br><span class="line">    <span class="keyword">if</span> (parameters.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must have exactly 1 parameter"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说；</p><h3 id="2-2-2-checkForSubscribersToSkip"><a href="#2-2-2-checkForSubscribersToSkip" class="headerlink" title="2.2.2 checkForSubscribersToSkip"></a>2.2.2 checkForSubscribersToSkip</h3><p>跳过一些订阅者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForSubscribersToSkip</span><span class="params">(Messager messager, String myPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历收集到所有的订阅者；</span></span><br><span class="line">    <span class="keyword">for</span> (TypeElement skipCandidate : methodsByClass.keySet()) &#123;</span><br><span class="line">        TypeElement subscriberClass = skipCandidate;</span><br><span class="line">        <span class="keyword">while</span> (subscriberClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2.1】判断下注解方法所属的类是否满足条件，如果不满足，加入到 classesToSkip 跳过；</span></span><br><span class="line">            <span class="keyword">if</span> (!isVisible(myPackage, subscriberClass)) &#123;</span><br><span class="line">                <span class="comment">//【2】将要跳过的 class 加入到 classesToSkip 集合中；</span></span><br><span class="line">                <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                    String msg;</span><br><span class="line">                    <span class="keyword">if</span> (subscriberClass.equals(skipCandidate)) &#123; <span class="comment">// 是当前类，还是父类呢？</span></span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because class is not public"</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because "</span> + skipCandidate +</span><br><span class="line">                                <span class="string">" has a non-public super class"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3】处理类（包括父类）所有的注解方法：</span></span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberClass);</span><br><span class="line">            <span class="keyword">if</span> (methods != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【3.1】遍历该类的注解方法，处理方法的参数；</span></span><br><span class="line">                <span class="keyword">for</span> (ExecutableElement method : methods) &#123;</span><br><span class="line">                    String skipReason = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//【3.2】获取注解方法的第一个参数（意味着第一个参数必须是消息对象）</span></span><br><span class="line">                    VariableElement param = method.getParameters().get(<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">//【--&gt;2.2.2.2】获取被注解方法的参数类型；</span></span><br><span class="line">                    TypeMirror typeMirror = getParamTypeMirror(param, messager);</span><br><span class="line">                    <span class="comment">//【3.3】如果参数的类型不是类/接口，那么就跳过该类；</span></span><br><span class="line">                    <span class="keyword">if</span> (!(typeMirror <span class="keyword">instanceof</span> DeclaredType) ||</span><br><span class="line">                            !(((DeclaredType) typeMirror).asElement() <span class="keyword">instanceof</span> TypeElement)) &#123;</span><br><span class="line">                        skipReason = <span class="string">"event type cannot be processed"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3.4】如果上面满足条件，那就判断下参数是否可以访问；</span></span><br><span class="line">                    <span class="keyword">if</span> (skipReason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();</span><br><span class="line">                        <span class="comment">//【--&gt;2.2.2.1】判断下注解方法所属的类是否满足条件，如果不满足，加入到 classesToSkip 跳过；</span></span><br><span class="line">                        <span class="keyword">if</span> (!isVisible(myPackage, eventTypeElement)) &#123;</span><br><span class="line">                            skipReason = <span class="string">"event type is not public"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (skipReason != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="comment">//【3.2】将要跳过的 class 加入到 classesToSkip 集合中；</span></span><br><span class="line">                        <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                        <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                            String msg = <span class="string">"Falling back to reflection because "</span> + skipReason;</span><br><span class="line">                            <span class="keyword">if</span> (!subscriberClass.equals(skipCandidate)) &#123;</span><br><span class="line">                                msg += <span class="string">" (found in super class for "</span> + skipCandidate + <span class="string">")"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2.3】获取其父类对应的元素，然后 while 循环继续处理其 super class；</span></span><br><span class="line">            subscriberClass = getSuperclass(subscriberClass); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，默认我们获得的是注解方法所在的当前类，但是 while 循环还会继续处理其父类；</p><ul><li>先处理子类，再处理父类；</li><li>被注解的方法的第一个参数必须是要处理的消息；</li><li>消息类型必须是类/接口的实现；</li></ul><h4 id="2-2-2-1-isVisible"><a href="#2-2-2-1-isVisible" class="headerlink" title="2.2.2.1 isVisible"></a>2.2.2.1 isVisible</h4><p>用来判断注解方法所属的类是否满足条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVisible</span><span class="params">(String myPackage, TypeElement typeElement)</span> </span>&#123;</span><br><span class="line">    Set&lt;Modifier&gt; modifiers = typeElement.getModifiers();</span><br><span class="line">    <span class="keyword">boolean</span> visible;</span><br><span class="line">    <span class="comment">//【1】该类必须是 public 的；</span></span><br><span class="line">    <span class="keyword">if</span> (modifiers.contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        visible = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//【2】该类不能是 private/protected 的；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) &#123;</span><br><span class="line">        visible = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】默认访问权限；</span></span><br><span class="line">        <span class="comment">//【--&gt;2.2.2.1.1】获得注解方法所属类的包元素名（包名）；</span></span><br><span class="line">        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();</span><br><span class="line">        <span class="keyword">if</span> (myPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            visible = subscriberPackage.length() == <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 正常情况进入这里：</span></span><br><span class="line">            <span class="comment">//【3】就是说注解方法所说的类必须和 eventBusIndex 指定的要动态生成的 java 类属于同一个包下；</span></span><br><span class="line">            visible = myPackage.equals(subscriberPackage); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数 myPackage</strong> 是我们 eventBusIndex 指定的要动态生成的 java 类的 class Name；</p><p><strong>参数 TypeElement typeElement</strong> 则是注解方法所在的类元素；</p><p>可以看到，注解方法所属的类必须要满足一下的条件：</p><ul><li>如果是 <strong>public</strong>，那就是可见的 visible 为 true；</li><li>如果是 <strong>private/protected</strong>，那就是不可见的；</li><li>如果是 <strong>default</strong>，那么 必须和 <strong>eventBusIndex</strong> 指定的要动态生成的 <strong>java</strong> 类属于同一个包下；</li></ul><h5 id="2-2-2-1-1-getPackageElement"><a href="#2-2-2-1-1-getPackageElement" class="headerlink" title="2.2.2.1.1 getPackageElement"></a>2.2.2.1.1 getPackageElement</h5><p>获得注解方法所属类的包元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageElement <span class="title">getPackageElement</span><span class="params">(TypeElement subscriberClass)</span> </span>&#123;</span><br><span class="line">    Element candidate = subscriberClass.getEnclosingElement();</span><br><span class="line">    <span class="comment">//【1】这里的 while 不断循环处理，直到 candidate 是一个包元素；</span></span><br><span class="line">    <span class="keyword">while</span> (!(candidate <span class="keyword">instanceof</span> PackageElement)) &#123;</span><br><span class="line">        candidate = candidate.getEnclosingElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PackageElement) candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了 <strong>TypeElement. getenclosingelement()</strong> 的方法：</p><blockquote><p>返回封装此元素（非严格意义上）的最里层元素。</p><p>如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素。<br>如果此元素是顶层类型，则返回它的包。<br>如果此元素是一个包，则返回 null。<br>如果此元素是一个类型参数，则返回 null。</p></blockquote><h4 id="2-2-2-2-getParamTypeMirror"><a href="#2-2-2-2-getParamTypeMirror" class="headerlink" title="2.2.2.2 getParamTypeMirror"></a>2.2.2.2 getParamTypeMirror</h4><p>获取注解方法的参数的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TypeMirror <span class="title">getParamTypeMirror</span><span class="params">(VariableElement param, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取参数的类型；</span></span><br><span class="line">    TypeMirror typeMirror = param.asType();</span><br><span class="line">    <span class="comment">// Check for generic type</span></span><br><span class="line">    <span class="keyword">if</span> (typeMirror <span class="keyword">instanceof</span> TypeVariable) &#123;</span><br><span class="line">        <span class="comment">//【1.1】判断参数类型是否有上边界，如果有的话，那就使用上边界为参数类型；</span></span><br><span class="line">        TypeMirror upperBound = ((TypeVariable) typeMirror).getUpperBound();</span><br><span class="line">        <span class="keyword">if</span> (upperBound <span class="keyword">instanceof</span> DeclaredType) &#123; <span class="comment">// 上边界是类或接口类型；</span></span><br><span class="line">            <span class="keyword">if</span> (messager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"Using upper bound type "</span> + upperBound +</span><br><span class="line">                        <span class="string">" for generic parameter"</span>, param);</span><br><span class="line">            &#125;</span><br><span class="line">            typeMirror = upperBound; <span class="comment">// 就将上边界类型作为参数类型：</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> typeMirror;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们用到了这个方法 <strong>TypeVariable.getUpperBound()</strong></p><blockquote><p>返回：此类型变量的上边界</p><p>如果此类型变量被声明为没有明确上边界，则结果为 <code>java.lang.object</code>。<br>如果此类型变量被声明为有多个上边界，则结果是一个交集类型（建模为 <code>declaredtype</code>）。<br>通过检查结果的超类型，可以发现个别边界。</p></blockquote><p>这个是什么意思呢？举个简单的栗子，下面是我们的消息类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMessage</span> </span>&#123;&#125; <span class="comment">// 返回上边界 BaseMessage，为了使用多态；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;      <span class="comment">// 返回 Message 对应的类型；</span></span><br></pre></td></tr></table></figure><p>这样解释就简单了吧！</p><h4 id="2-2-2-3-getSuperclass"><a href="#2-2-2-3-getSuperclass" class="headerlink" title="2.2.2.3 getSuperclass"></a>2.2.2.3 getSuperclass</h4><p>获取当前类的父类元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TypeElement <span class="title">getSuperclass</span><span class="params">(TypeElement type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果当前元素类型是类或者接口，才会获取父类；</span></span><br><span class="line">    <span class="keyword">if</span> (type.getSuperclass().getKind() == TypeKind.DECLARED) &#123;</span><br><span class="line">        <span class="comment">//【1.1】获取其直接父类；</span></span><br><span class="line">        TypeElement superclass = (TypeElement) processingEnv.getTypeUtils().asElement(type.getSuperclass());</span><br><span class="line">        String name = superclass.getQualifiedName().toString();</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"java."</span>) || name.startsWith(<span class="string">"javax."</span>) || name.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            <span class="comment">//【1.1.1】过滤掉 java/javax/android 系统类；</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> superclass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeKind 是枚举，保存了 Java 定义的所有的类型数据！</p><h3 id="2-2-3-createInfoIndexFile"><a href="#2-2-3-createInfoIndexFile" class="headerlink" title="2.2.3 createInfoIndexFile"></a>2.2.3 createInfoIndexFile</h3><p>动态生成 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createInfoIndexFile</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】创建 JavaFileObject 对象，用于生成 java 类；</span></span><br><span class="line">        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index);</span><br><span class="line">        <span class="comment">//【2】生成 java 包名（eventBusIndex 最后一个 . 前面的字符串）和 java 类名（eventBusIndex 最后一个 . 后面的字符串）；</span></span><br><span class="line">        <span class="keyword">int</span> period = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        String myPackage = period &gt; <span class="number">0</span> ? index.substring(<span class="number">0</span>, period) : <span class="keyword">null</span>;</span><br><span class="line">        String clazz = index.substring(period + <span class="number">1</span>);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(sourceFile.openWriter());</span><br><span class="line">        <span class="keyword">if</span> (myPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            writer.write(<span class="string">"package "</span> + myPackage + <span class="string">";\n\n"</span>); <span class="comment">// 动态 java 类的包名；</span></span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SimpleSubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberMethodInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.ThreadMode;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.HashMap;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.Map;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"/** This class is generated by EventBus, do not edit. */\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"public class "</span> + clazz + <span class="string">" implements SubscriberInfoIndex &#123;\n"</span>); <span class="comment">// 动态 java 类的类名</span></span><br><span class="line">        writer.write(<span class="string">"    private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    static &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\n\n"</span>);</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1】写入注解生成的信息；</span></span><br><span class="line">        writeIndexLines(writer, myPackage);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    private static void putIndex(SubscriberInfo info) &#123;\n"</span>); <span class="comment">// 写入内部的 putIndex 方法；</span></span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    @Override\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    public SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) &#123;\n"</span>); <span class="comment">// 写入的 getSubscriberInfo 方法；</span></span><br><span class="line">        writer.write(<span class="string">"        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        if (info != null) &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return info;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125; else &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return null;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"&#125;\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not write source for "</span> + index, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">//Silent</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码有些 low，竟然是硬编码写进去的；</p><p>生成了的代码会涉及到如下的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SimpleSubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberMethodInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfoIndex;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.ThreadMode;</span><br></pre></td></tr></table></figure><p>可以看到，这几个类定义在 eventbus 模块里，简单的说下：</p><ul><li><strong>SimpleSubscriberInfo</strong>：表示一个订阅者，就是 Subscribe 注解所在的类；</li><li><strong>SubscriberMethodInfo</strong>：表示一个订阅方法，就是 Subscribe 注解的方法；</li><li><strong>SubscriberInfo</strong>：接口，SimpleSubscriberInfo 继承了 AbstractSubscriberInfo，而 AbstractSubscriberInfo 实现了  SubscriberInfo 接口，<strong>适配器模式</strong>；</li><li><strong>SubscriberInfoIndex</strong>：接口，我们动态生成的 Java 类，实现了该接口；</li><li><strong>ThreadMode</strong>：枚举类型，表示线程类型；</li></ul><p>这里我们不多关注；</p><h4 id="2-2-3-1-writeIndexLines"><a href="#2-2-3-1-writeIndexLines" class="headerlink" title="2.2.3.1 writeIndexLines"></a>2.2.3.1 writeIndexLines</h4><p>这里就是将 methodsByClass 中收集到的信息写入到动态 java 类中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeIndexLines</span><span class="params">(BufferedWriter writer, String myPackage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历 methodsByClass 哈希表，跳过 classesToSkip 中的元素；</span></span><br><span class="line">    <span class="keyword">for</span> (TypeElement subscriberTypeElement : methodsByClass.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (classesToSkip.contains(subscriberTypeElement)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1.1】获得注解方法所在的类名；</span></span><br><span class="line">        String subscriberClass = getClassString(subscriberTypeElement, myPackage);</span><br><span class="line">        <span class="comment">//【--&gt;2.2.2.1】判断下动态 java 类所在的包是否可以访问注解所在类，可以的话，才写入！ </span></span><br><span class="line">        <span class="keyword">if</span> (isVisible(myPackage, subscriberTypeElement)) &#123;</span><br><span class="line">            writeLine(writer, <span class="number">2</span>,</span><br><span class="line">                    <span class="string">"putIndex(new SimpleSubscriberInfo("</span> + subscriberClass + <span class="string">".class,"</span>,</span><br><span class="line">                    <span class="string">"true,"</span>, <span class="string">"new SubscriberMethodInfo[] &#123;"</span>); <span class="comment">// 这个我就不分析了，一行一行的写入呗；</span></span><br><span class="line">            <span class="comment">//【2】获取注解的方法；</span></span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberTypeElement);</span><br><span class="line">            <span class="comment">//【--&gt;2.2.3.1.2】将方法信息写入到 java 类中；</span></span><br><span class="line">            writeCreateSubscriberMethods(writer, methods, <span class="string">"new SubscriberMethodInfo"</span>, myPackage);</span><br><span class="line">            writer.write(<span class="string">"        &#125;));\n\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writer.write(<span class="string">"        // Subscriber not visible to index: "</span> + subscriberClass + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个参数表示的是否检查父类：<strong>shouldCheckSuperclass</strong>，传入的是 true；</p><h5 id="2-2-3-1-1-getClassString"><a href="#2-2-3-1-1-getClassString" class="headerlink" title="2.2.3.1.1 getClassString"></a>2.2.3.1.1 getClassString</h5><p>获取类名；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getClassString</span><span class="params">(TypeElement typeElement, String myPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2.1.1】获取注解所在的类的包元素；</span></span><br><span class="line">    PackageElement packageElement = getPackageElement(typeElement);</span><br><span class="line">    <span class="comment">//【1】获取所在包名；</span></span><br><span class="line">    String packageString = packageElement.getQualifiedName().toString();</span><br><span class="line">    <span class="comment">//【2】获取类的全限定名；</span></span><br><span class="line">    String className = typeElement.getQualifiedName().toString();</span><br><span class="line">    <span class="keyword">if</span> (packageString != <span class="keyword">null</span> &amp;&amp; !packageString.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (packageString.equals(myPackage)) &#123;</span><br><span class="line">            <span class="comment">//【3】如果注解所在的类和动态生成的 java 类的包名一样；就截掉全限定名的包名部分（因为在同一个包嘛）</span></span><br><span class="line">            className = cutPackage(myPackage, className);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageString.equals(<span class="string">"java.lang"</span>)) &#123;</span><br><span class="line">            className = typeElement.getSimpleName().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用内部的 cutPackage 去截取类名！</p><p>代码简单，就 String 的基本操作。。。</p><h5 id="2-2-3-1-2-writeCreateSubscriberMethods"><a href="#2-2-3-1-2-writeCreateSubscriberMethods" class="headerlink" title="2.2.3.1.2 writeCreateSubscriberMethods"></a>2.2.3.1.2 writeCreateSubscriberMethods</h5><p>将方法信息写入到 java 类中，参数 <strong>String callPrefix</strong> 的值：”new SubscriberMethodInfo”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCreateSubscriberMethods</span><span class="params">(BufferedWriter writer, List&lt;ExecutableElement&gt; methods,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          String callPrefix, String myPackage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历方法 list；</span></span><br><span class="line">    <span class="keyword">for</span> (ExecutableElement method : methods) &#123;</span><br><span class="line">        List&lt;? extends VariableElement&gt; parameters = method.getParameters();</span><br><span class="line">        TypeMirror paramType = getParamTypeMirror(parameters.get(<span class="number">0</span>), <span class="keyword">null</span>); <span class="comment">//【--&gt;2.2.2.2】注解方法的参数的类型;</span></span><br><span class="line">        TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);</span><br><span class="line">        <span class="comment">//【1.1】获取方法名；</span></span><br><span class="line">        String methodName = method.getSimpleName().toString();</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1.2】获取方法参数（事件）的类名；</span></span><br><span class="line">        String eventClass = getClassString(paramElement, myPackage) + <span class="string">".class"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.3】获取 Subscribe 注解对象；</span></span><br><span class="line">        Subscribe subscribe = method.getAnnotation(Subscribe.class);</span><br><span class="line">        List&lt;String&gt; parts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        parts.add(callPrefix + <span class="string">"(\""</span> + methodName + <span class="string">"\","</span>); <span class="comment">//【1.4】第一个参数：methodName；</span></span><br><span class="line">        String lineEnd = <span class="string">"),"</span>;</span><br><span class="line">        <span class="comment">//【1.5】处理注解的 priority、sticky、threadMode 属性；</span></span><br><span class="line">        <span class="keyword">if</span> (subscribe.priority() == <span class="number">0</span> &amp;&amp; !subscribe.sticky()) &#123; <span class="comment">// 如果优先级为 0（默认）并且不是 sticky 事件，那么会进入 if；</span></span><br><span class="line">            <span class="comment">// 如果是默认类型的线程池，只要写入事件的类名；</span></span><br><span class="line">            <span class="comment">// 不是默认线程，那么还要写入线程枚举类型；</span></span><br><span class="line">            <span class="keyword">if</span> (subscribe.threadMode() == ThreadMode.POSTING) &#123;</span><br><span class="line">                parts.add(eventClass + lineEnd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parts.add(eventClass + <span class="string">","</span>);</span><br><span class="line">                parts.add(<span class="string">"ThreadMode."</span> + subscribe.threadMode().name() + lineEnd); <span class="comment">// 处理线程类型；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果指定了优先级，或者是粘性事件，这里会写入事件的类名，线程枚举类型，优先级，粘性状态；</span></span><br><span class="line">            parts.add(eventClass + <span class="string">","</span>);</span><br><span class="line">            parts.add(<span class="string">"ThreadMode."</span> + subscribe.threadMode().name() + <span class="string">","</span>);</span><br><span class="line">            parts.add(subscribe.priority() + <span class="string">","</span>);</span><br><span class="line">            parts.add(subscribe.sticky() + lineEnd);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLine(writer, <span class="number">3</span>, parts.toArray(<span class="keyword">new</span> String[parts.size()]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">            processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, <span class="string">"Indexed @Subscribe at "</span> +</span><br><span class="line">                    method.getEnclosingElement().getSimpleName() + <span class="string">"."</span> + methodName +</span><br><span class="line">                    <span class="string">"("</span> + paramElement.getSimpleName() + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是处理注解方法和注解参数的过程；</p><h1 id="3-动态-Java-类实例"><a href="#3-动态-Java-类实例" class="headerlink" title="3 动态 Java 类实例"></a>3 动态 Java 类实例</h1><p>我们可以看下动态生成的 Java 类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coolqi.top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SimpleSubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberMethodInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfoIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.ThreadMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** This class is generated by EventBus, do not edit. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleAppIndex</span> <span class="keyword">implements</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SUBSCRIBER_INDEX = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();</span><br><span class="line">      </span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.EditPicActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread2"</span>, com.coolqi.common.beans.MessageEvent.class,</span><br><span class="line">                    ThreadMode.ASYNC, <span class="number">1</span>, <span class="keyword">true</span>),</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.ChangeDateActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.normal.ExhibitionWebFragment.class, <span class="keyword">true</span>,</span><br><span class="line">                <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onShowMessageChatNumberEvent"</span>, com.gensee.kzkt_res.bean.MessageChatNumber.class),</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIndex</span><span class="params">(SubscriberInfo info)</span> </span>&#123;</span><br><span class="line">        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面我们简单的看下涉及到的类和接口，这些类都位于 eventbus 模块中！</p><p>后面再分析的时候，我们就不再过多关注这些类了！</p><h2 id="3-1-SubscriberInfoIndex"><a href="#3-1-SubscriberInfoIndex" class="headerlink" title="3.1 SubscriberInfoIndex"></a>3.1 SubscriberInfoIndex</h2><p>接口，动态生成的类实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】用于获取订阅信息；</span></span><br><span class="line">    <span class="function">SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-SubscriberInfo"><a href="#3-2-SubscriberInfo" class="headerlink" title="3.2 SubscriberInfo"></a>3.2 SubscriberInfo</h2><p>接口，订阅者类实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SubscriberInfo</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; getSubscriberClass(); <span class="comment">// 获取订阅者对应的类；</span></span><br><span class="line"></span><br><span class="line">    SubscriberMethod[] getSubscriberMethods(); <span class="comment">// 获取订阅方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="function">SubscriberInfo <span class="title">getSuperSubscriberInfo</span><span class="params">()</span></span>; <span class="comment">// 获取父类订阅者；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldCheckSuperclass</span><span class="params">()</span></span>; <span class="comment">// 是否检查父类，动态生成时，传入的是 true；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-AbstractSubscriberInfo"><a href="#3-3-AbstractSubscriberInfo" class="headerlink" title="3.3 AbstractSubscriberInfo"></a>3.3 AbstractSubscriberInfo</h2><p>抽象类，实现了 <strong>SubscriberInfo</strong> 接口，并实现了其部分接口，<strong>适配器模式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubscriberInfo</span> <span class="keyword">implements</span> <span class="title">SubscriberInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class subscriberClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends SubscriberInfo&gt; superSubscriberInfoClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> shouldCheckSuperclass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractSubscriberInfo</span><span class="params">(Class subscriberClass, Class&lt;? extends SubscriberInfo&gt; superSubscriberInfoClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">boolean</span> shouldCheckSuperclass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subscriberClass = subscriberClass; <span class="comment">// 订阅者类；</span></span><br><span class="line">        <span class="keyword">this</span>.superSubscriberInfoClass = superSubscriberInfoClass; <span class="comment">// 订阅者的父类订阅者，processor 动态生成时传入的是 null；</span></span><br><span class="line">        <span class="keyword">this</span>.shouldCheckSuperclass = shouldCheckSuperclass; <span class="comment">//  是否检查父类，processor 动态生成时传入的是 true；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getSubscriberClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSuperSubscriberInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(superSubscriberInfoClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> superSubscriberInfoClass.newInstance(); <span class="comment">// 返回父类订阅者的实例；</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldCheckSuperclass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shouldCheckSuperclass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是创建订阅方法；</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType, ThreadMode threadMode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createSubscriberMethod(methodName, eventType, threadMode, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType, ThreadMode threadMode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">int</span> priority, <span class="keyword">boolean</span> sticky)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 显然这里是通过反射的方式来创建！</span></span><br><span class="line">            Method method = subscriberClass.getDeclaredMethod(methodName, eventType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode, priority, sticky);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not find subscriber method in "</span> + subscriberClass +</span><br><span class="line">                    <span class="string">". Maybe a missing ProGuard rule?"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-SimpleSubscriberInfo"><a href="#3-4-SimpleSubscriberInfo" class="headerlink" title="3.4 SimpleSubscriberInfo"></a>3.4 SimpleSubscriberInfo</h2><p>订阅类，继承了 AbstractSubscriberInfo 类，<strong>适配器模式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSubscriberInfo</span> <span class="keyword">extends</span> <span class="title">AbstractSubscriberInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SubscriberMethodInfo[] methodInfos; <span class="comment">// 保存的是订阅方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSubscriberInfo</span><span class="params">(Class subscriberClass, <span class="keyword">boolean</span> shouldCheckSuperclass, SubscriberMethodInfo[] methodInfos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subscriberClass, <span class="keyword">null</span>, shouldCheckSuperclass); <span class="comment">//【--&gt;3.3】抽象类的方法；</span></span><br><span class="line">        <span class="keyword">this</span>.methodInfos = methodInfos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> SubscriberMethod[] getSubscriberMethods() &#123; <span class="comment">// 返回所有的订阅方法；</span></span><br><span class="line">        <span class="keyword">int</span> length = methodInfos.length;</span><br><span class="line">        SubscriberMethod[] methods = <span class="keyword">new</span> SubscriberMethod[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            SubscriberMethodInfo info = methodInfos[i];</span><br><span class="line">            <span class="comment">//【--&gt;3.3】注意并不是直接返回，而是返回了一份拷贝，防止修改；</span></span><br><span class="line">            methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,</span><br><span class="line">                    info.priority, info.sticky);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章，分析了 eventbus 的注解是如何处理的，生成了哪些类，类的关系如何（适配器模式）；</p><p>下篇文章，分析 register 的过程；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://coolqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第一篇 - 基本使用</title>
    <link href="https://coolqi.top/2019/08/19/Eventbus-1-baseUsages/"/>
    <id>https://coolqi.top/2019/08/19/Eventbus-1-baseUsages/</id>
    <published>2019-08-19T12:46:25.000Z</published>
    <updated>2019-08-27T14:28:00.642Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第一篇，主要总结下基本的使用；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以捆成是 Handler + Thread 的替代品。</p><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>Eventbus 的引入没有 ARouter 那么复杂，他的核心 api 和 AnnotationProcessor 是在同一个 jar 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure><p>以上就是引入的方式，很简单；</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h1><p>Eventbus 的使用还是很简单的。</p><ul><li>首先，<strong>我们要在组件生命周期的开始 register、生命周期的结束 unregister</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>我们之后将组件 register 到 EventBus 中，该组件才能监听到事件；</p><p>当然，当组件生命周期结束后，需要 unregister！</p><ul><li>接着，<strong>我们要定义接收 Event 的方法</strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(MessageEvent event)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 EventBus 中，处理 event 的方法需要被注解  @Subscribe 修饰，这是因为 EventBus 的机制，提供了一个 EventBusAnnotationProcessor，他负责自动处理   @Subscribe 修饰的方法，动态生成管理集合。</p><p>在事件分发的时候，会自动调用我们的方法；</p><p>对于注解 @Subscribe，我们可以设置其属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN, sticky = <span class="keyword">true</span>, priority = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>1、threadMode 用于指定线程模型（默认为 POSTING ），EventBus 提供了四种线程模型，下面会简单介绍；</p><p>2、sticky 表示方法是否开启粘性事件；</p><p>3、priority 表示多个订阅者收到事件的优先级顺序；</p><ul><li>最后，我们要<strong>发送消息</strong></li></ul><p>消息这里分为普通消息和粘性消息，和 broadcast 很类似哦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(..)</span><br><span class="line"></span><br><span class="line">EventBus.getDefault().post(...)</span><br></pre></td></tr></table></figure><p>对于普通消息和粘性消息的处理，后面再分析。</p><p>方法很简答，就不多说了～～</p><h1 id="3-线程模型"><a href="#3-线程模型" class="headerlink" title="3 线程模型"></a>3 线程模型</h1><p>EventBus 提供了四种线程模型，定义在 ThreadMode.java 中：</p><ul><li><strong>POSTING</strong></li></ul><p>这是默认的线程模型，发布事件和接收事件在同一个线程进行，不要做耗时操作，因为可能是在 UI 线程，导致 ANR；</p><ul><li><strong>MAIN</strong></li></ul><p>接收事件在 UI 线程中进行；不要做耗时操作，会导致 ANR；</p><ul><li><strong>BACKGROUND</strong></li></ul><p>如果发送事件是在 UI 线程，那么接收事件会在一个新的子线程；</p><p>如果发送事件是在子线程，那么接收事件和发送事件会在同一个子线程；</p><p>不能处理 UI 相关操作！</p><ul><li><strong>ASYNC</strong></li></ul><p>接收事件始终会在一个新的子线程中，不能处理 UI 相关操作！</p><blockquote><p>这里简单分析了下线程模型，我们后面在分析源码的时候，再来分析每种线程模型的处理方式；</p></blockquote><h1 id="4-整体架构初识"><a href="#4-整体架构初识" class="headerlink" title="4 整体架构初识"></a>4 整体架构初识</h1><p>可以看到这种订阅和接收的关系，很类似于 Rxjava 的模式，其实就是观察者模式，这里直接引用 EventBus 官方的一张图来说明下：</p><p><img src="https://upload-images.jianshu.io/upload_images/1445591-f2ea964c3de37488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本篇文章就到这里了，下一篇会从 @Subscribe 注解的处理入手，看下 EventBus 是如何处理该注解的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://coolqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第三篇 - Native 调用 H5 代码</title>
    <link href="https://coolqi.top/2019/05/23/JsBridge3-Native--%3EH5Codes/"/>
    <id>https://coolqi.top/2019/05/23/JsBridge3-Native--&gt;H5Codes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-05T21:48:34.437Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 android 中，我们通过如下方式，使用 jsBridge 框架来和 H5 通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>这里涉及到 2 个交互接口：</p><ul><li>webView.callHandler：有回调；</li><li>webView.send：没有回调；</li></ul><p>下面我会来分析下这两个方法的调用链，这会涉及到 jsBridge 中其他的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|____Message.java</span><br><span class="line">|____WebViewJavascriptBridge.java</span><br><span class="line">|____DefaultHandler.java</span><br><span class="line">|____BridgeWebView.java</span><br><span class="line">|____BridgeWebViewClient.java</span><br><span class="line">|____CallBackFunction.java</span><br><span class="line">|____BridgeHandler.java</span><br><span class="line">|____BridgeUtil.java</span><br></pre></td></tr></table></figure><p>在分析交互流程的时候，我们会详细分析每个类的内部逻辑！</p><h1 id="2-BridgeWebView"><a href="#2-BridgeWebView" class="headerlink" title="2 BridgeWebView"></a>2 BridgeWebView</h1><p>我们从 BridgeWebView 开始，先看看内部的一些重要成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】native 的回调函数 map，key 是 id，value 是具体的回调对象；</span></span><br><span class="line">Map&lt;String, CallBackFunction&gt; responseCallbacks = <span class="keyword">new</span> HashMap&lt;String, CallBackFunction&gt;();</span><br><span class="line"><span class="comment">//【2】native 处理 js 消息的 handler map，key 是 handler name，value 是具体的 handler</span></span><br><span class="line">Map&lt;String, BridgeHandler&gt; messageHandlers = <span class="keyword">new</span> HashMap&lt;String, BridgeHandler&gt;();</span><br><span class="line"><span class="comment">//【3】默认的 handler，默认是它处理 js 的消息；</span></span><br><span class="line">BridgeHandler defaultHandler = <span class="keyword">new</span> DefaultHandler();</span><br><span class="line"><span class="comment">//【4】native 发送给 js 的 message 列表；</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Message&gt; startupMessage = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br></pre></td></tr></table></figure></p><p>不多说了。</p><h2 id="2-1-callHandler"><a href="#2-1-callHandler" class="headerlink" title="2.1 callHandler"></a>2.1 callHandler</h2><p>我们先分析有回调的接口的交互流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callHandler 方法指定了 js 使用哪个 Handler 处理 native 的消息！</p><p>这里指定了 js 用于处理的 handler name 是 “functionInJs”！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callHandler</span><span class="params">(String handlerName, String data, CallBackFunction callBack)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2】调用另外一个方法：</span></span><br><span class="line">    doSend(handlerName, data, callBack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去看看 doSend 方法：</p><h2 id="2-2-doSend"><a href="#2-2-doSend" class="headerlink" title="2.2 doSend"></a>2.2 doSend</h2><p>继续分析 doSend 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String handlerName, String data, CallBackFunction responseCallback)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//【1】创建一个消息；</span></span><br><span class="line">Message m = <span class="keyword">new</span> Message();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(data)) &#123;</span><br><span class="line">    <span class="comment">//【2】设置 data 数据；</span></span><br><span class="line">m.setData(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【3】如果需要回调，那么会创建回调 id（String）</span></span><br><span class="line"><span class="keyword">if</span> (responseCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT, ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));</span><br><span class="line">responseCallbacks.put(callbackStr, responseCallback);</span><br><span class="line">m.setCallbackId(callbackStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4】如果指定了 handler，那么设置 handlerName；</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(handlerName)) &#123;</span><br><span class="line">m.setHandlerName(handlerName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【*2.3】将消息送入队列；</span></span><br><span class="line">queueMessage(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，会创建一个 Message 对象，封装要发给 js 的消息；</p><p>同时注意到，native 的回调并没有传递给 js，而是保存在了内部的一个 responseCallbacks 哈希表中；</p><p>实际传递给 js 的是 callbackId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.data  <span class="comment">// native 发送的数据</span></span><br><span class="line">Message.callbackId  <span class="comment">// native 回调函数的 id</span></span><br><span class="line">Message.handlerName <span class="comment">// js 处理数据的 handlerName；</span></span><br></pre></td></tr></table></figure><p>最后就是把 message 放入到 message list；</p><h2 id="2-3-queueMessage"><a href="#2-3-queueMessage" class="headerlink" title="2.3 queueMessage"></a>2.3 queueMessage</h2><p>将 message 放入到 message list；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【1】将消息加入到 message list 中；</span></span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【*2.4】特殊情况，直接发送 message！</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里默认是会将 message 添加到 startupMessage 消息列表中，然后 webview 会处理 message list！</p><p>那么在哪里会处理呢？</p><p>前面我们分析过，在网页加载好后，会出发 BridgeWebViewClient.onPageFinished 方法，就会启动 native 的消息处理循环！</p><p><strong>见 【3.1】 节</strong>；</p><h2 id="2-4-dispatchMessage"><a href="#2-4-dispatchMessage" class="headerlink" title="2.4 dispatchMessage"></a>2.4 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*4.2】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【1】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【2】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【3】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【*<span class="number">5.1</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_HANDLE_MESSAGE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._handleMessageFromNative('%s');"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，执行的 js 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</span><br></pre></td></tr></table></figure><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p><h2 id="2-5-handlerReturnData"><a href="#2-5-handlerReturnData" class="headerlink" title="2.5 handlerReturnData"></a>2.5 handlerReturnData</h2><p>拦截 url 并处理信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">f.onCallBack(data);</span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebViewClient"><a href="#3-BridgeWebViewClient" class="headerlink" title="3 BridgeWebViewClient"></a>3 BridgeWebViewClient</h1><p>WebViewClient 是用于处理各种事件的回调。</p><h2 id="3-1-onPageFinished"><a href="#3-1-onPageFinished" class="headerlink" title="3.1 onPageFinished"></a>3.1 onPageFinished</h2><p>当 H5 页面加载完成后，会 WebViewClient 方法会处罚；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    <span class="comment">//【1】动态注入 js 协议脚本，这个我们之前有讲过；</span></span><br><span class="line">    <span class="keyword">if</span> (BridgeWebView.toLoadJs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*2.5】这里会遍历 BridgeWebView.startupMessage 分发 native 消息；</span></span><br><span class="line">    <span class="keyword">if</span> (webView.getStartupMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Message m : webView.getStartupMessage()) &#123;</span><br><span class="line">            <span class="comment">//【*2.5】分发 native 消息；</span></span><br><span class="line">            webView.dispatchMessage(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*2.3】注意：这里将 BridgeWebView.startupMessage 设置为 null 了</span></span><br><span class="line">        <span class="comment">// 那么下次就不用将消息加入 list 了，而是直接 dispatch 了！</span></span><br><span class="line">        webView.setStartupMessage(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】调用其他函数处理 url！</span></span><br><span class="line">    onCustomPageFinishd(view,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来最终调用了 webView.dispatchMessage 方法！</p><h2 id="3-2-shouldOverrideUrlLoading"><a href="#3-2-shouldOverrideUrlLoading" class="headerlink" title="3.2 shouldOverrideUrlLoading"></a>3.2 shouldOverrideUrlLoading</h2><p>我们来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得动态创建的 url</span></span><br><span class="line">        url = URLDecoder.decode(url, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.2】此时是返回数据，url 携带数据；</span></span><br><span class="line">    <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_RETURN_DATA)) &#123;</span><br><span class="line">        <span class="comment">//【*3.5】native 解析 js 返回的数据；</span></span><br><span class="line">        webView.handlerReturnData(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.1】此时是提醒 native，js 有数据返回；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_OVERRIDE_SCHEMA)) &#123; </span><br><span class="line">        <span class="comment">//【*3.3】native 再次和 js 通信，获取数据；</span></span><br><span class="line">        webView.flushMessageQueue();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 定义了如下的 url 前缀规则：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_OVERRIDE_SCHEMA = <span class="string">"yy://"</span>;</span><br><span class="line"><span class="comment">//【1】表示 js 有数据返回，提醒 native 去读取数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_RETURN_DATA = YY_OVERRIDE_SCHEMA + <span class="string">"return/"</span>;</span><br><span class="line"><span class="comment">//【2】该 url 会携带 js 返回的数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_FETCH_QUEUE = YY_RETURN_DATA + <span class="string">"_fetchQueue/"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-flushMessageQueue"><a href="#3-3-flushMessageQueue" class="headerlink" title="3.3 flushMessageQueue"></a>3.3 flushMessageQueue</h2><p>核心方法，从 js 的队列里获取要发送给 native 的 message：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.4】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//【*3.3.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    <span class="comment">//【3.1】获得 native 在 callHandler 是设定的回调函数！</span></span><br><span class="line">CallBackFunction function = responseCallbacks.get(responseId);</span><br><span class="line"><span class="comment">//【3.2】获得回调数据；</span></span><br><span class="line">String responseData = m.getResponseData();</span><br><span class="line"><span class="comment">//【--&gt;*2.1】native 处理数据，这里又回到了 callHandler 哪里！</span></span><br><span class="line">function.onCallBack(responseData);</span><br><span class="line"><span class="comment">//【3.3】移除 native 注册的回调函数！</span></span><br><span class="line">responseCallbacks.remove(responseId);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这种情况是属于，js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"><span class="comment">//【--&gt;*2.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面部分的代码（【4】)），是和 H5 调用 Native 代码相关的，我们不过多关注！</p><p>BridgeUtil 定义了指定 js 协议的 _fetchQueue 方法的命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_FETCH_QUEUE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._fetchQueue();"</span>;</span><br></pre></td></tr></table></figure></p><p>下面去看一下 loadUrl：</p><h2 id="3-4-loadUrl"><a href="#3-4-loadUrl" class="headerlink" title="3.4 loadUrl"></a>3.4 loadUrl</h2><p>参数 jsUrl 是 <strong>javascript:WebViewJavascriptBridge._fetchQueue();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.1】BridgeUtil.parseFunctionName 对 jsUrl 做了处理，以结果作为 key！</p><p>处理入下：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>这样是有好处了，因为 returnCallback 根据协议是可以复用的，所以这里也保存在了 responseCallbacks 中！！</p><p><br></p><p>responseCallbacks 之前我们有分析过！<strong>此时 responseCallbacks 放入了 2 个 native 的回调！</strong></p><h2 id="3-5-handlerReturnData"><a href="#3-5-handlerReturnData" class="headerlink" title="3.5 handlerReturnData"></a>3.5 handlerReturnData</h2><p>改方法用于处理 js 返回给 native 的回调数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【*7.3」获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.2】BridgeUtil.getFunctionFromReturnUrl 对 url 再次做了处理，前面在 【3.3】 flushMessageQueue，我们将另一个解析回调以 _fetchQueue 为 key，保存到了 responseCallbacks 中，这里是触发他的时候了！</p><h1 id="4-Message"><a href="#4-Message" class="headerlink" title="4 Message"></a>4 Message</h1><p>该对象用于封装 native 和 js 交互的信息：</p><h2 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1 属性"></a>4.1 属性</h2><p>我们来看看他的基本属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// native --&gt; js: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line">   <span class="comment">// js --&gt; native: js 回调的 id，用于处理 native 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String callbackId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// js --&gt; native: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String responseId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js --&gt; native: js 发送给 native 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String responseData; <span class="comment">// js 的回调信息，json string；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: native 发送给 js 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String data; </span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: 处理 native 信息的 js handler name；</span></span><br><span class="line"><span class="keyword">private</span> String handlerName;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="4-2-toJson"><a href="#4-2-toJson" class="headerlink" title="4.2 toJson"></a>4.2 toJson</h2><p>将 Message 转为 json string！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JSONObject jsonObject= <span class="keyword">new</span> JSONObject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jsonObject.put(CALLBACK_ID_STR, getCallbackId()); <span class="comment">// callbackId</span></span><br><span class="line">        jsonObject.put(DATA_STR, getData()); <span class="comment">// data</span></span><br><span class="line">        jsonObject.put(HANDLER_NAME_STR, getHandlerName()); <span class="comment">// handlerName</span></span><br><span class="line">        String data = getResponseData();</span><br><span class="line">        <span class="comment">//【3】这个地方我有些疑问，不知道作者为啥这样写</span></span><br><span class="line">        <span class="comment">// 值永远会被第三个覆盖掉；</span></span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(data)) &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, <span class="keyword">new</span> JSONTokener(data).nextValue());</span><br><span class="line">        &#125;</span><br><span class="line">        jsonObject.put(RESPONSE_DATA_STR, getResponseData()); <span class="comment">// responseData</span></span><br><span class="line">        jsonObject.put(RESPONSE_ID_STR, getResponseId()); <span class="comment">// responseId</span></span><br><span class="line">        <span class="keyword">return</span> jsonObject.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的参数我就不说了，很简单！</p><h1 id="5-WebViewJavascriptBridge"><a href="#5-WebViewJavascriptBridge" class="headerlink" title="5 WebViewJavascriptBridge"></a>5 WebViewJavascriptBridge</h1><p>最后进入了通信协议 js 脚本：</p><h2 id="5-1-handleMessageFromNative"><a href="#5-1-handleMessageFromNative" class="headerlink" title="5.1 _handleMessageFromNative"></a>5.1 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*5.2】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="5-2-dispatchMessageFromNative"><a href="#5-2-dispatchMessageFromNative" class="headerlink" title="5.2 _dispatchMessageFromNative"></a>5.2 _dispatchMessageFromNative</h2><p>js 处理 native 层的消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【1】获得 message json 对象；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这个地方是 js 回调的地方，我们先不看；</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】很显然，此时会进入这里，因为我们设置了 callbackId！</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【3】获得 callbackId！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                <span class="comment">//【*5.2.1】创建 js 回调函数，当回调触发后，会执行 doSend 方法！</span></span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*5.3】将结果以回调形式发送给 native！</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        <span class="comment">//【4】注意这里，Message.callbackId 的值赋给了 Message.responseId</span></span><br><span class="line">                        <span class="comment">// Message.responseData 用于保存回调数据；</span></span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】选择合适的 handler 去处理 native message。</span></span><br><span class="line">            <span class="comment">// 没有指定 handler，就用默认的！</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.1】handler 其实就是一个函数，这个在通信协议 js 有分析过！</span></span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后会选择合适的 handler，将 native message 和 js 回调函数交给 handler 处理！</p><h2 id="5-3-doSend"><a href="#5-3-doSend" class="headerlink" title="5.3 _doSend"></a>5.3 _doSend</h2><p>将结果以回调形式发送给 native！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】responseCallback 不为 null，说明 native 需要回调通知，这里将 responseCallback</span></span><br><span class="line">    <span class="comment">// 保存到 responseCallbacks 的意义是：可以建立双向通信！</span></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【2】为该 responseCallback 创建 id，并将 id：responseCallback 的映射关系</span></span><br><span class="line">        <span class="comment">// 保存到 responseCallbacks 数组中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】将 id 保存到 message.callbackId 中；！</span></span><br><span class="line">        <span class="comment">// 因为此时 message 用于保存 js 发给 native 的数据，所以 message.callbackId 保存了 js 的回调函数，</span></span><br><span class="line">        <span class="comment">// 这样 native 就可以和 js 双向通信了！</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】将消息保存到 sendMessageQueue 中，然后创建 url，</span></span><br><span class="line">    <span class="comment">//【*3.2】这样 BridgeWebViewClient.shouldOverrideUrlLoading 就能拦截这个 url 了；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>responseCallback 实际上是 js 处理 native 消息的回调函数，这里给 responseCallback 也分配了一个 id，并保存到 responseCallbacks 中！</p><p>目的很明显，是为了建立双向通信！</p><p><br></p><p>到这里 Message 中的数据发生了变化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.responseId  <span class="comment">// native 的回调函数 id</span></span><br><span class="line">Message.callbackId  <span class="comment">// js 的回调函数 id</span></span><br><span class="line">Message.responseData <span class="comment">// js 发送的回调数据；</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>这里创建了一个 url：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//__QUEUE_MESSAGE__/</span></span><br></pre></td></tr></table></figure><p>这个方法会导致 BridgeWebViewClient.shouldOverrideUrlLoading 触发！</p><h2 id="5-4-fetchQueue"><a href="#5-4-fetchQueue" class="headerlink" title="5.4 _fetchQueue"></a>5.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.2.2】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里生成了一个新的 url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//://return/_fetchQueue/[&#123;"responseId":"xxxxxxx","responseData":"xxxxxxxxxx"&#125;]</span></span><br></pre></td></tr></table></figure><p>再次回到了 shouldOverrideUrlLoading：</p><h1 id="6-H5-页面初始化-js-脚本"><a href="#6-H5-页面初始化-js-脚本" class="headerlink" title="6 H5 页面初始化 js 脚本"></a>6 H5 页面初始化 js 脚本</h1><p>在 jsBridge 框架中，当 js 协议脚本被动态注入到 H5 中时，会触发 H5 页面中的初始化 js 脚本，该脚本会初始化 js 的 handler：</p><h2 id="6-1-connectWebViewJavascriptBridge"><a href="#6-1-connectWebViewJavascriptBridge" class="headerlink" title="6.1 connectWebViewJavascriptBridge"></a>6.1 connectWebViewJavascriptBridge</h2><p>可以看到，H5 页面注册的 js handler 的名字就是 “functionInJs” 这个和前面 callHandler 相符合了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="comment">//【1】后面的 function 就是我们的 handler。</span></span><br><span class="line">    bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">        <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">            <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">            <span class="comment">//【*5.2.1】js 处理完 message 后，回调 responseCallback 接口！</span></span><br><span class="line">            <span class="comment">// 其实就是【*5.2】创建的回调，会触发 _doSend 方法！</span></span><br><span class="line">            responseCallback(responseData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个在前面的 js 通信协议中有分析过，不多说了！</p><h1 id="7-BridgeUtil"><a href="#7-BridgeUtil" class="headerlink" title="7 BridgeUtil"></a>7 BridgeUtil</h1><p>工具类，包含一些解析方法和协议头常量：</p><h2 id="7-1-parseFunctionName"><a href="#7-1-parseFunctionName" class="headerlink" title="7.1 parseFunctionName"></a>7.1 parseFunctionName</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url 的一个例子：javascript:WebViewJavascriptBridge._fetchQueue();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseFunctionName</span><span class="params">(String jsUrl)</span></span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回_fetchQueue</span></span><br><span class="line"><span class="keyword">return</span> jsUrl.replace(<span class="string">"javascript:WebViewJavascriptBridge."</span>, <span class="string">""</span>).replaceAll(<span class="string">"\\(.*\\);"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 js 创建 url，通知 native 有回调消息后调用的！</p><h2 id="7-2-getFunctionFromReturnUrl"><a href="#7-2-getFunctionFromReturnUrl" class="headerlink" title="7.2 getFunctionFromReturnUrl"></a>7.2 getFunctionFromReturnUrl</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFunctionFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】去掉 "yy://return/";</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line"><span class="comment">//【2】去掉 "/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]"</span></span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//【3】我们得到了 key，也就是 functionName；</span></span><br><span class="line"><span class="keyword">return</span> functionAndData[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的！</p><h2 id="7-3-getDataFromReturnUrl"><a href="#7-3-getDataFromReturnUrl" class="headerlink" title="7.3 getDataFromReturnUrl"></a>7.3 getDataFromReturnUrl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(url.startsWith(YY_FETCH_QUEUE)) &#123;</span><br><span class="line"><span class="comment">//【1】返回了 [&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="keyword">return</span> url.replace(YY_FETCH_QUEUE, EMPTY_STR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// temp = _fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"Javascript Says Right back aka!"&#125;]</span></span><br><span class="line"><span class="comment">//【2】对另外一种情况的处理</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; functionAndData.length; i++) &#123;</span><br><span class="line">sb.append(functionAndData[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//【3】返回结果是一样的！</span></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的，并且在【7.2】调用以后才调用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第四篇 - H5 调用 Native 代码</title>
    <link href="https://coolqi.top/2019/05/23/JsBridge4-H5--%3ENativeCodes/"/>
    <id>https://coolqi.top/2019/05/23/JsBridge4-H5--&gt;NativeCodes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-07T00:42:28.696Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 js 中，我们通过如下方式，使用 jsBridge 框架来和 Native 通信：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line"><span class="comment">//【1】通过 js 通信协议 send 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">    data</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】通过 js 通信协议 callHandler 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">    <span class="string">'submitFromWeb'</span></span><br><span class="line">    , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>send 方法</strong>；用客户端默认的 handler 处理；</li><li><strong>callHandler 方法</strong>：用指定的 handler 处理；</li></ul><p>下面我们来分析下 callHandler 和 send 方法！</p><h1 id="2-WebViewJavascriptBridge"><a href="#2-WebViewJavascriptBridge" class="headerlink" title="2 WebViewJavascriptBridge"></a>2 WebViewJavascriptBridge</h1><p>接下来进入了 js 通信协议文件中：</p><h2 id="2-1-send"><a href="#2-1-send" class="headerlink" title="2.1 send"></a>2.1 send</h2><p>用客户端默认的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-callHandler"><a href="#2-2-callHandler" class="headerlink" title="2.2 callHandler"></a>2.2 callHandler</h2><p>用指定的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-doSend"><a href="#2-3-doSend" class="headerlink" title="2.3 _doSend"></a>2.3 _doSend</h2><p>最后都调用了 _doSend 的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sendMessage add message, 触发native处理 sendMessage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;  </span><br><span class="line">        <span class="comment">//【1】创建了一个 calbackId，并将 id 和 callback 的映射关系保存到 responseCallbacks 中；</span></span><br><span class="line">        <span class="comment">// 将 callbackId 保存到 message 中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】将消息保存到 sendMessageQueue 中，创建动态 url，通知 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【3】yy://__QUEUE_MESSAGE__，最终会触发如下方法</span></span><br><span class="line">    <span class="comment">//【--&gt;*3.1】BridgeWebView.flushMessageQueue</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在前面分析过了，和前面的类似。</p><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.flushMessageQueue</span><br></pre></td></tr></table></figure><h2 id="2-4-fetchQueue"><a href="#2-4-fetchQueue" class="headerlink" title="2.4 _fetchQueue"></a>2.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;*3.3】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里生成了一个新的 url：</p><blockquote><p>yy://://return/_fetchQueue/[{“responseId”:”xxxxxxx”,”responseData”:”xxxxxxxxxx”}]</p></blockquote><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.handlerReturnData</span><br></pre></td></tr></table></figure><h2 id="2-5-handleMessageFromNative"><a href="#2-5-handleMessageFromNative" class="headerlink" title="2.5 _handleMessageFromNative"></a>2.5 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;*2.6】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="2-6-dispatchMessageFromNative"><a href="#2-6-dispatchMessageFromNative" class="headerlink" title="2.6 _dispatchMessageFromNative"></a>2.6 _dispatchMessageFromNative</h2><p>js 处理 native 层的回调消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【1】这里 js 处理消息回调，不多说了！</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这里是处理 java 回调的，之前分析过；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebView"><a href="#3-BridgeWebView" class="headerlink" title="3 BridgeWebView"></a>3 BridgeWebView</h1><h2 id="3-1-flushMessageQueue"><a href="#3-1-flushMessageQueue" class="headerlink" title="3.1 flushMessageQueue"></a>3.1 flushMessageQueue</h2><p>native 读取 js 的命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.2】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*3.1.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。</span></span><br><span class="line"><span class="comment">// 此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    ... ... ... ...<span class="comment">// 这里前面有分析过；</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这里是我们要关注的地方：</span></span><br><span class="line">    <span class="comment">// 这种情况是属于 js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;*3.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的 message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看大了，给 js 反馈回调的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br></pre></td></tr></table></figure><p>js 传入的 callbackId 被设置到了 responseId 上了；</p><h2 id="3-2-loadUrl"><a href="#3-2-loadUrl" class="headerlink" title="3.2 loadUrl"></a>3.2 loadUrl</h2><p>参数 jsUrl 是 javascript:WebViewJavascriptBridge._fetchQueue();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有分析过，对 js 命令做了处理，生成了 key：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>用于保存回调；</p><h2 id="3-3-handlerReturnData"><a href="#3-3-handlerReturnData" class="headerlink" title="3.3 handlerReturnData"></a>3.3 handlerReturnData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【--&gt;3*7.2】获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.1.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发前面的 _fetchQueue 对应的回调；</p><h2 id="3-4-queueMessage"><a href="#3-4-queueMessage" class="headerlink" title="3.4 queueMessage"></a>3.4 queueMessage</h2><p>加入 message list：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.5】分发 message 给 js；</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-dispatchMessage"><a href="#3-5-dispatchMessage" class="headerlink" title="3.5 dispatchMessage"></a>3.5 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【2】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【3】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【4】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【--&gt;*<span class="number">2.5</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><blockquote><p>final static String JS_HANDLE_MESSAGE_FROM_JAVA =<br>“javascript:WebViewJavascriptBridge._handleMessageFromNative(‘%s’);”;</p></blockquote><p>可以看到，执行的 js 代码如下：</p><blockquote><p>javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</p></blockquote><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第二篇 - js 通信协议分析</title>
    <link href="https://coolqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/"/>
    <id>https://coolqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/</id>
    <published>2019-05-21T12:46:25.000Z</published>
    <updated>2019-07-03T22:46:15.585Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-初步分析"><a href="#1-初步分析" class="headerlink" title="1 初步分析"></a>1 初步分析</h1><p>下面分析下 jsBridge 框架的通信协议，他是实际上是一个 js 文件，位于 assets 目录下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>这个 js 文件作为协议，决定了 H5 和 Native 代码通信方式和通信数据！</p><p><br> </p><p>这里就有一个问题了，他是如何被加载并生效的呢，有两种方式：</p><ul><li>第一种方式：通过 H5 直接加载；</li><li>第二种方式：通过动态注入的方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br></pre></td></tr></table></figure><p>我们的 jsBridge 框架也是用的第二种方式，具体的逻辑我们后面再分析；</p><h1 id="2-协议代码分析"><a href="#2-协议代码分析" class="headerlink" title="2 协议代码分析"></a>2 协议代码分析</h1><p>下面我们分析下 js 协议代码的逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断变量 WebViewJavascriptBridge 是否初始化过了；</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这里来看的话，其实他是一个 js function，当我们将 js 动态注入到 H5 中时，这么这个 function 就会执行；</p><h2 id="2-1-内部关键变量"><a href="#2-1-内部关键变量" class="headerlink" title="2.1 内部关键变量"></a>2.1 内部关键变量</h2><p>js 文件中定义了一些关键的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> messagingIframe; <span class="comment">// 这两个变量用与 android 获取 js 的数据；</span></span><br><span class="line"><span class="keyword">var</span> bizMessagingIframe;</span><br><span class="line"><span class="keyword">var</span> sendMessageQueue = [];  <span class="comment">// 发送的消息队列，H5 传递给 Native</span></span><br><span class="line"><span class="keyword">var</span> receiveMessageQueue = []; <span class="comment">// 接受的消息队列，Native 传递给 H5</span></span><br><span class="line"><span class="keyword">var</span> messageHandlers = &#123;&#125;; <span class="comment">// js 处理 native 消息的 handler 数组！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CUSTOM_PROTOCOL_SCHEME = <span class="string">'yy'</span>; <span class="comment">// 消息的 scheme，类似与 file，content；</span></span><br><span class="line"><span class="keyword">var</span> QUEUE_HAS_MESSAGE = <span class="string">'__QUEUE_MESSAGE__/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> responseCallbacks = &#123;&#125;; <span class="comment">// js 端的回调数组；</span></span><br><span class="line"><span class="keyword">var</span> uniqueId = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个很重要，window.WebViewJavascriptBridge 是 H5 和 Native 通信的</span></span><br><span class="line"><span class="comment">// 关键点！</span></span><br><span class="line"><span class="keyword">var</span> WebViewJavascriptBridge = <span class="built_in">window</span>.WebViewJavascriptBridge = &#123;</span><br><span class="line">    init: init,</span><br><span class="line">    send: send,</span><br><span class="line">    registerHandler: registerHandler,</span><br><span class="line">    callHandler: callHandler,</span><br><span class="line">    _fetchQueue: _fetchQueue,</span><br><span class="line">    _handleMessageFromNative: _handleMessageFromNative</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面最关键的一个对象就是 WebViewJavascriptBridge，H5 和 Native 都会通过它。</p><p>这个 window.WebViewJavascriptBridge 内部包含了一些函数对象，这些 function 都定义在 js 内部！</p><h2 id="2-2-动态注入初始化"><a href="#2-2-动态注入初始化" class="headerlink" title="2.2 动态注入初始化"></a>2.2 动态注入初始化</h2><p>这里是很关键的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">//【1】创建消息队列，一个是 index，一个是消息体；</span></span><br><span class="line">_createQueueReadyIframe(doc);</span><br><span class="line">_createQueueReadyIframe4biz(doc);</span><br><span class="line"><span class="comment">//【2】创建一个 event，类型为 'WebViewJavascriptBridgeReady'</span></span><br><span class="line"><span class="comment">// 然后分发 event；</span></span><br><span class="line"><span class="keyword">var</span> readyEvent = doc.createEvent(<span class="string">'Events'</span>);</span><br><span class="line">readyEvent.initEvent(<span class="string">'WebViewJavascriptBridgeReady'</span>);</span><br><span class="line">readyEvent.bridge = WebViewJavascriptBridge;</span><br><span class="line">doc.dispatchEvent(readyEvent); <span class="comment">//【*2.2.1】关键点！！</span></span><br></pre></td></tr></table></figure><p>在动态注入的时候，会执行初始化的操作：</p><ul><li>创建了一个 event；</li><li>初始化 event，事件类型为 ‘WebViewJavascriptBridgeReady’；</li><li>readyEvent.bridge 设置为我们上面创建的 ‘WebViewJavascriptBridgeReady’ 对象；</li><li>doc.dispatchEvent 分发 event；</li></ul><p><br></p><p><strong>这个 event 是在哪里做响应</strong>的呢？</p><p>是在 H5 里面，这个 H5 在加载时候，会执行内部 js 脚本，并通过 document.addEventListener 方法设置该 event 的监听器；</p><h3 id="2-2-1-H5-加载启动-event-监听"><a href="#2-2-1-H5-加载启动-event-监听" class="headerlink" title="2.2.1 H5 加载启动 event 监听"></a>2.2.1 H5 加载启动 event 监听</h3><p>H5 的页面里面，是有下面的一段 js 脚本，在 webview.loadUrl 后会直接加载该 js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">... ... ...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectWebViewJavascriptBridge</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="comment">//【2】如果 window.WebViewJavascriptBridge 已经存在</span></span><br><span class="line">        <span class="comment">// 直接执行函数闭包；</span></span><br><span class="line">        callback(WebViewJavascriptBridge)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】否则我们就注册一个 EventListener，监听 WebViewJavascriptBridgeReady 事件；</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(</span><br><span class="line">            <span class="string">'WebViewJavascriptBridgeReady'</span></span><br><span class="line">            , <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 事件出发后，执行函数闭包；</span></span><br><span class="line">                callback(WebViewJavascriptBridge)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】执行 connectWebViewJavascriptBridge 方法，传入了一个 js 闭包;</span></span><br><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//【*2.2.2】下一步初始化！</span></span><br><span class="line">     ... ... ... ...</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，window.WebViewJavascriptBridge 不存在，那么会注册一个 EventListener！</p><p>等待 event 触发后，执行 callback！</p><h3 id="2-2-2-event-出发点后下一步初始化"><a href="#2-2-2-event-出发点后下一步初始化" class="headerlink" title="2.2.2 event 出发点后下一步初始化"></a>2.2.2 event 出发点后下一步初始化</h3><p>callback 实际上就是闭包，参数 bridge 就是 js 协议中创建的 var WebViewJavascriptBridge：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 init 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'JS got a message'</span>, message);</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        <span class="string">'Javascript Responds'</span>: <span class="string">'测试中文!'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'JS responding with'</span>, data);</span><br><span class="line">        <span class="comment">//【1】函数闭包出发后，会回调 responseCallback</span></span><br><span class="line">        responseCallback(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 registerHandler 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">        <span class="comment">//【2】函数闭包出发后，会回调 responseCallback，通知 native；</span></span><br><span class="line">        responseCallback(responseData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于 init 和 registerHandler 我们会在下面分析：</p><h2 id="2-3-核心函数"><a href="#2-3-核心函数" class="headerlink" title="2.3 核心函数"></a>2.3 核心函数</h2><p>下面来分析下关键的协议函数：</p><h3 id="2-3-1-init"><a href="#2-3-1-init" class="headerlink" title="2.3.1 init"></a>2.3.1 init</h3><p>init 方法用于设置 <strong>js 处理 native 消息的默认 handler</strong>：</p><p>同时也会<strong>分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">messageHandler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (WebViewJavascriptBridge._messageHandler) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'WebViewJavascriptBridge.init called twice'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】设置 js 用于处理 native 消息的 handler</span></span><br><span class="line">    <span class="comment">// 实际上就是【*2.2.2】中的函数闭包；</span></span><br><span class="line">    WebViewJavascriptBridge._messageHandler = messageHandler;</span><br><span class="line">    <span class="comment">//【2】分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</span></span><br><span class="line">    <span class="keyword">var</span> receivedMessages = receiveMessageQueue;</span><br><span class="line">    receiveMessageQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; receivedMessages.length; i++) &#123;</span><br><span class="line">        <span class="comment">//【*2.3.3】分发来自 native 的消息；</span></span><br><span class="line">        _dispatchMessageFromNative(receivedMessages[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 messageHandler 就是【*2.2.2】中的函数闭包；</p><h3 id="2-3-2-registerHandler"><a href="#2-3-2-registerHandler" class="headerlink" title="2.3.2 registerHandler"></a>2.3.2 registerHandler</h3><p><strong>注册特定的消息处理 handler</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerHandler</span>(<span class="params">handlerName, handler</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】实际上就是向数组中放值；</span></span><br><span class="line">    messageHandlers[handlerName] = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>messageHandlers 之前有说过，是 js 处理 native 消息的 handler 数组！</p><ul><li>index 是 handler 的名称，根据前面代码，名称是 “functionInJs”；</li><li>value 是一个函数闭包；</li></ul><h3 id="2-3-3-dispatchMessageFromNative"><a href="#2-3-3-dispatchMessageFromNative" class="headerlink" title="2.3.3 _dispatchMessageFromNative"></a>2.3.3 _dispatchMessageFromNative</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>分发来自 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【2】JSON 字符串转化 JSON 对象 message；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【2】这里我们知道 native 发送消息完成，接下来 js 会处理消息，并将结果</span></span><br><span class="line">        <span class="comment">// 通过 callback 传递给 native 层；</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            <span class="comment">//【2.1】如果 native 指定了消息的 responseId，这种情况对应的情况是：</span></span><br><span class="line">            <span class="comment">// js 发送消息给 native，此时 native 发送回调消息给 js；</span></span><br><span class="line">            <span class="comment">// 那么我们就要在 responseCallback 数组中找到对应的 responseCallback</span></span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.2】然后执行 js 的 callback；</span></span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="comment">//【2.3】删掉该 callback</span></span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2.4】没有指定 responseId，但是指定了 callbackId，这种情况对应的是：</span></span><br><span class="line">            <span class="comment">// native 发送消息给 js，此时 js 发送回调消息给 native；</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【2.4.1】获得 callbackId，并创建一个 responseCallback</span></span><br><span class="line">                <span class="comment">// 实际上就是一个函数闭包，该闭包会执行 _doSend 方法！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*2.3.4】发送回调给 native，但是此时是不触发的，出发的点在下面；</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.5】找到处理 native 消息的 handler，如果没有指定 handlerName</span></span><br><span class="line">            <span class="comment">// 那么就是 init 方法注册的默认 handler；否则就是特定的 handler</span></span><br><span class="line">            <span class="comment">// 其实就是前面 "functionInJs" 对应的 handler；</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.6】这个 handler 其实就是一个函数闭包，见【*2.2.2】，最后会回调</span></span><br><span class="line">            <span class="comment">// responseCallback 接口，就是上面的 function；</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里看起来，似乎很清晰呢；</p><h3 id="2-3-4-doSend"><a href="#2-3-4-doSend" class="headerlink" title="2.3.4 _doSend"></a>2.3.4 _doSend</h3><p>这个方法是 <strong>js 层</strong>调用，用于<strong>发送消息给 native 端</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【1】计算回调 id；</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="comment">//【2】以 index 为回调 id，value 为具体的回调接口的形式，保存到 responseCallbacks 数组重；</span></span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】message.callbackId 为计算出的回调 id；</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】将该 message 加入到 sendMessageQueue 队列中，要发送给 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【6】这个地方会通过 messagingIframe.src 生成一个 Url，这会被 Webview.shouldOverrideUrlLoading 拦截到；</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意第二个参数 responseCallback：</p><ul><li>如果 responseCallback 不为 null，说明本次消息需要回调通知；</li><li>如果 responseCallback 为 null，说明不需要回调通知；</li></ul><p>该方法创建了一个动态的 url，这会被 Webview.shouldOverrideUrlLoading 拦截到，这是该库 android 获得 js 数据的方式；</p><p>但是这里并不是真正获取数据的地方，该 url 会触发一次 Webview.shouldOverrideUrlLoading；</p><p>然后 android 又会调用 js 的 _fetchQueue 方法，这时，又会生成一个 url，这个 url 才会保存了要传递给 android 的消息；</p><p>具体可以看 2.3.8 的 _fetchQueue 方法；</p><h3 id="2-3-5-callHandler"><a href="#2-3-5-callHandler" class="headerlink" title="2.3.5 callHandler"></a>2.3.5 callHandler</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><ul><li><strong>handlerName</strong>：js 处理消息的 handler 名称，这个 handler 是 <strong>native 层注册到 js 的</strong>；</li><li><strong>data</strong>：native 层传递的数据；</li><li><strong>responseCallback</strong>：接受回调的接口，native 层处理完数据会回调；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.3.4】调用 _doSend 方法发送消息给 js，注意这里第二个参数</span></span><br><span class="line">    <span class="comment">// 不为 null，因为 js 短需要收到回调；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里第二个参数不为 null，因为 js 短需要收到回调；</p><p>该方法设置 handlerName，所以 native 会使用指定 handlerName 的 handler 去处理；</p><h3 id="2-3-6-send"><a href="#2-3-6-send" class="headerlink" title="2.3.6 send"></a>2.3.6 send</h3><p>这个方法也是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，他并没有设置 handlerName，所以 native 会使用默认的 handler 去处理；</p><h3 id="2-3-7-handleMessageFromNative"><a href="#2-3-7-handleMessageFromNative" class="headerlink" title="2.3.7 _handleMessageFromNative"></a>2.3.7 _handleMessageFromNative</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>以 json string 的形式发送数据给 js</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那就直接添加到 receiveMessageQueue 队列中去；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3.3】处理 native 传递的数据；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很简单，就不多说了；</p><h3 id="2-3-8-fetchQueue"><a href="#2-3-8-fetchQueue" class="headerlink" title="2.3.8 _fetchQueue"></a>2.3.8 _fetchQueue</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>用于获取 sendMessageQueue 队列中的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后通过 shouldOverrideUrlLoading 方法拦截，捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，不多说了，关于 H5 和 Native 通信的流程，后续再分析！</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>关于 js 通信协议的相关分析到这里就结束了。</p><p>这里我自己也有点疑惑，对于 android 获取 js 数据的方式，该库并没有使用 @JavascriptInterface 注解，通过如下方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebView.addJavascriptInterface(<span class="keyword">new</span> WebData(), <span class="string">"webdata"</span>);</span><br></pre></td></tr></table></figure><p>通过查阅相关资料，可能有如下的原因：</p><ul><li><strong>安全隐患</strong>：这是因为同源规则 (SOP) 不适用与该方法，加上第三方 JavaScript 库或来自一个陌生域名的 iframe 可能在 Java 层访问这些被暴露的方法。因此，攻击者可通过一个 XSS 漏洞执行原生代码或者注入病毒代码到应用程序中。</li><li><strong>兼容性</strong>：JavaScript 层中暴露的 Java 对象的所有公有方法在 Android 版本低于 JerryBean MRI(API Level 17) 以下时可访问。而在 Google API 17 （4.２）以上，暴露的函数必须通过 @JavaScriptInterface 注释来防止方法的暴露</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-初步分析&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第一篇 - 框架整体结构和基本使用</title>
    <link href="https://coolqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/"/>
    <id>https://coolqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/</id>
    <published>2019-05-20T12:46:25.000Z</published>
    <updated>2019-07-03T22:41:04.612Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1 工程结构"></a>1 工程结构</h1><p>我们先来看看 lib 的主要文件结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|____src</span><br><span class="line">| |____main</span><br><span class="line">| | |____java</span><br><span class="line">| | | |____com</span><br><span class="line">| | | | |____github</span><br><span class="line">| | | | | |____lzyzsd</span><br><span class="line">| | | | | | |____jsbridge</span><br><span class="line">| | | | | | | |____Message.java</span><br><span class="line">| | | | | | | |____WebViewJavascriptBridge.java</span><br><span class="line">| | | | | | | |____DefaultHandler.java</span><br><span class="line">| | | | | | | |____BridgeWebView.java</span><br><span class="line">| | | | | | | |____BridgeWebViewClient.java</span><br><span class="line">| | | | | | | |____CallBackFunction.java</span><br><span class="line">| | | | | | | |____BridgeHandler.java</span><br><span class="line">| | | | | | | |____BridgeUtil.java</span><br><span class="line">| | |____assets</span><br><span class="line">| | | |____WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>可以看到，核心的代码在 asserts 和 jsbridge 目录下。</p><ul><li>js 文件是是通信的协议，H5 会出发 js 脚本中的语句，然后把通信的数据传递给 WebView；</li><li>jsbridge 目录下的 .java 文件则是和 Native 层的逻辑相关；</li></ul><p>这里先不详细分析每个文件的具体逻辑，我们后面分析交互流程的时候会讲；</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h1><p>具体的使用主要分为如下几个部分，我会将 Demo 中的一些重点代码块，用注视标注出来：</p><h2 id="2-1-初始化-BridgeWebView："><a href="#2-1-初始化-BridgeWebView：" class="headerlink" title="2.1 初始化 BridgeWebView："></a>2.1 初始化 BridgeWebView：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webView = (BridgeWebView) findViewById(R.id.webView);</span><br><span class="line">button = (Button) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】设置默认的消息处理回调；</span></span><br><span class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</span><br><span class="line"><span class="comment">//【2】设置 WebChromeClient 对象，无关不分析；</span></span><br><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，这里的 WebChromeClient 其实没有太大的用处，而真正有用的是其内部的：WebViewClient 对象，这个我们后面单独去分析 BridgeWebView 的时候，就知道 WebViewClient 的具体逻辑了；</p><h2 id="2-2-注册回调-Handler-到-webview-中："><a href="#2-2-注册回调-Handler-到-webview-中：" class="headerlink" title="2.2 注册回调 Handler 到 webview 中："></a>2.2 注册回调 Handler 到 webview 中：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】加载 H5 页面；</span></span><br><span class="line">webView.loadUrl(<span class="string">"file:///android_asset/demo.html"</span>);</span><br><span class="line"><span class="comment">//【2】注册了一个 BridgeHandler 回调对象，用于处理 js 的消息并回调通知；</span></span><br><span class="line">webView.registerHandler(<span class="string">"submitFromWeb"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</span><br><span class="line">Log.i(TAG, <span class="string">"handler = submitFromWeb, data from web = "</span> + data);</span><br><span class="line">        function.onCallBack(<span class="string">"submitFromWeb exe, response data 中文 from Java"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>BridgeHandler 是一个接口，面向接口编程，前面的 DefaultHandler 实现了这个接口！</p><p>可以看到 BridgeHandler 是用于处理 H5 发送给 Native 的消息的；</p><p>而 CallBackFunction 则是用于回调结果给 H5；</p><h2 id="2-3-Native-向-H5-发送消息，并接受回调"><a href="#2-3-Native-向-H5-发送消息，并接受回调" class="headerlink" title="2.3 Native 向 H5 发送消息，并接受回调"></a>2.3 Native 向 H5 发送消息，并接受回调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>可以看到，上面给出了有回调和没有回调的两种通信方式；</p><p>具体的调用逻辑，我们后面再分析！</p><h2 id="2-4-H5-向-Native-发送消息，并接受回调"><a href="#2-4-H5-向-Native-发送消息，并接受回调" class="headerlink" title="2.4 H5 向 Native 发送消息，并接受回调"></a>2.4 H5 向 Native 发送消息，并接受回调</h2><p>这个地方就比较复杂了，我们要从 H5 中看起；</p><ul><li>H5 触发 js 的函数，指定具体的 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，特定 handler 处理！</span></span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">        <span class="string">'submitFromWeb'</span></span><br><span class="line">        , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到了 ‘submitFromWeb’，这和前面的 registerHandler 相呼应了！</p><ul><li>H5 触发 js 的函数，默认 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，默认 handler 处理！</span></span><br><span class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">        data</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和前面的 DefaultHandler 相呼应了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-工程结构&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://coolqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第七篇 - 路由跳转/数据传递 (arouter-api)</title>
    <link href="https://coolqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/"/>
    <id>https://coolqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/</id>
    <published>2019-05-09T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:26.563Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的路由跳转的过程，以及变量/数据的传递，这篇文章将是本系列的最后一篇（后续会抽时间写其他的）！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-路由跳转"><a href="#1-路由跳转" class="headerlink" title="1 路由跳转"></a>1 路由跳转</h1><p>我们来看看</p><h2 id="1-1-跳转方式"><a href="#1-1-跳转方式" class="headerlink" title="1.1 跳转方式"></a>1.1 跳转方式</h2><p>ARouter 支持两种方式来跳转：</p><ul><li>path 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>)  <span class="comment">// 指定 path</span></span><br><span class="line">            .navigation();</span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(); <span class="comment">// 显示指定分组</span></span><br></pre></td></tr></table></figure><ul><li>uri 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uri uri;</span><br><span class="line">ARouter.getInstance().build(uri).navigation(); <span class="comment">// 指定 uri</span></span><br></pre></td></tr></table></figure><ul><li>我们可以设置跳转请求码和跳转回调</li></ul><p>这种调用方式相当于原生的 startActivityForResult：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(<span class="keyword">this</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>同时我们也可以指定跳转回调：<strong>NavigationCallback</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>处理跳转的结果；</p><ul><li>我们也可以设置跳过所有的拦截器</li></ul><p>我们知道 actiivty 的跳转是收到拦截器的限制的，但是 PostCard 提供了接口，能够跳过所有的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用绿色通道(跳过所有的拦截器)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>).greenChannel().navigation();</span><br></pre></td></tr></table></figure><p>这里的 greenChannel 方法我们前面有分析过，不多说了！</p><h3 id="1-1-1-Uri-跳转的特殊性"><a href="#1-1-1-Uri-跳转的特殊性" class="headerlink" title="1.1.1 Uri 跳转的特殊性"></a>1.1.1 Uri 跳转的特殊性</h3><p>这里要单独讲下 uri 跳转的特殊性，ARouter 通过新建一个没有 UI 的界面作为跳板来统一处理，scheme 是 arouter 的跳转请求！</p><ul><li>需要新建一个 activity 来接收 uri，没有 ui 界面，这是关键点！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AndroidManifest.xml 中要指定该 activity 监听的 schame 事件是：<strong>arouter://m.aliyun.com</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- App Links --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:autoVerify</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"http"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"https"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于这个 activity 作为外界的统一入口，H5 或者 native 通过 intent 匹配，将数据传递给这个 activity，然后这个 activity 解析数据，将 uri 叫给 ARouter 最终实现跳转！</p><p>详细分析：Uri 的组成为：<strong>scheme://host:port/path?query</strong>，我们通过中转 activity 匹配 <strong>scheme://host:port</strong> 部分，截获 Uri，然后通过 getPath 就可以回去到 Path，这个 Path 需要和 @Route 的 path 匹配，这样就可以实现跳转了！</p><p>可以看出这个过程就是 <strong>intent 的匹配！</strong></p><h2 id="1-2-数据传递"><a href="#1-2-数据传递" class="headerlink" title="1.2 数据传递"></a>1.2 数据传递</h2><p>以上的两种跳转方式，都可以传递数据，我们来看下数据传递的方式：</p><ul><li>直接传递 Bundle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bundle params = <span class="keyword">new</span> Bundle();</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .with(params)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>注意：这个方法会覆盖掉 PostCast 内部默认创建的 Bundle；</p><ul><li>指定启动 Flag</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .withFlags();</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><ul><li>支持传递各种基本类型数据、对象、数组、List、可序列化数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>).withAction(..)</span><br><span class="line">    .withBoolean(String key, <span class="keyword">boolean</span> value)</span><br><span class="line">    .withBundle(String key, Bundle value)</span><br><span class="line">    .withByte(String key, <span class="keyword">byte</span> value)</span><br><span class="line">    .withCharSequenceArrayList(String key, ArrayList&lt;CharSequence&gt; value)</span><br><span class="line">    .withParcelable(String key, Parcelable value)</span><br><span class="line">    .withSerializable(String key, Serializable value)</span><br><span class="line">    .withStringArrayList(String key, ArrayList&lt;String&gt; value)</span><br><span class="line">    .withObject(<span class="meta">@Nullable</span> String key, <span class="meta">@Nullable</span> Object value)</span><br><span class="line">    ... ... ... <span class="comment">// 接口太多了，省略下，其实这些接口对应的是 Bundle 中的方法！</span></span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>这些数据都会被加入到 PostCard 内部的默认创建的 Bundle 中，其实这些方法对应的就是 Bundle 中的方法！</p><ul><li>支持设置转场动画</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转场动画(常规方式)</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)</span><br><span class="line">    .navigation(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转场动画(API16+)</span></span><br><span class="line">ActivityOptionsCompat compat = ActivityOptionsCompat.</span><br><span class="line">    makeScaleUpAnimation(v, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withOptionsCompat(compat)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><h3 id="1-2-1-对象传递的特殊"><a href="#1-2-1-对象传递的特殊" class="headerlink" title="1.2.1 对象传递的特殊"></a>1.2.1 对象传递的特殊</h3><p>对于自定义的对象，不能确保它可序列化，所以这里通过 SerializationService 将其转为了 jsonstring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">withObject</span><span class="params">(@Nullable String key, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    mBundle.putString(key, serializationService.object2Json(value));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-跳转流程"><a href="#2-跳转流程" class="headerlink" title="2 跳转流程"></a>2 跳转流程</h1><p>下面，我们重点分析路由跳转的流程，和数据传递的流程，忽略掉一些之前已经见过的流程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(...); --&gt; _ARouter.getInstance().build(...);</span><br></pre></td></tr></table></figure><p>无论是 path 跳转，还是 uri 跳转，ARouter 都会调用 _ARouter 的方法！</p><h2 id="2-1-ARouter-build"><a href="#2-1-ARouter-build" class="headerlink" title="2.1 _ARouter.build"></a>2.1 _ARouter.build</h2><p>无论是 build(path)，还是  build(uri)，最终创建的 PostCard 都是一样的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));  <span class="comment">// 通过 path 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == uri || TextUtils.isEmpty(uri.toString())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            uri = pService.forUri(uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(uri.getPath(), extractGroup(uri.getPath()), uri, <span class="keyword">null</span>); <span class="comment">// 通过 uri 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Postcard"><a href="#2-2-Postcard" class="headerlink" title="2.2 Postcard"></a>2.2 Postcard</h2><h3 id="2-2-1-new-Postcard"><a href="#2-2-1-new-Postcard" class="headerlink" title="2.2.1 new Postcard"></a>2.2.1 new Postcard</h3><p>创建一个新的 Postcard：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path);</span><br><span class="line">    setGroup(group);</span><br><span class="line">    setUri(uri);</span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过 Uri 创建的话，会多设置一个 Uri 的属性；</p><h3 id="2-2-2-navigation"><a href="#2-2-2-navigation" class="headerlink" title="2.2.2 navigation"></a>2.2.2 navigation</h3><p>最核心的就后面的两个方法，支持传入 requestCode 和 NavigationCallback 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    navigation(mContext, requestCode, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ARouter.getInstance().navigation(mContext, <span class="keyword">this</span>, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ARouter.getInstance().navigation，我们知道最后会调用 _ARouter.getInstance().navigation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(...) --&gt; _ARouter.getInstance().navigation(...);</span><br></pre></td></tr></table></figure><h2 id="2-3-ARouter-navigation"><a href="#2-3-ARouter-navigation" class="headerlink" title="2.3 _ARouter.navigation"></a>2.3 _ARouter.navigation</h2><p>这里我们可以看到回调的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1】完善跳转信息；</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service/Fragment 是会跳过拦截器的，对于 activity 默认是不会跳过的，当然了可动态设置；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-LogisticsCenter-completion"><a href="#2-3-1-LogisticsCenter-completion" class="headerlink" title="2.3.1 LogisticsCenter.completion"></a>2.3.1 LogisticsCenter.completion</h3><p>完善登陆信息，这里前面有说过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">//【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>,</span><br><span class="line">                                                    postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.3.1】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1.1】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的，主要是 IProvider 类型；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是</p><h4 id="2-3-1-1-数据传递-important"><a href="#2-3-1-1-数据传递-important" class="headerlink" title="2.3.1.1  数据传递 - important"></a>2.3.1.1  数据传递 - important</h4><p>这里我们要重点看下 PostCard 中的数据是如何处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">postcard.setType(routeMeta.getType()); </span><br><span class="line">postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">postcard.setExtra(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】注意这里是处理 uri 的数据</span></span><br><span class="line">Uri rawUri = postcard.getUri();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">  <span class="comment">//【--&gt;2.3.1.2】获得 uri 的数据；</span></span><br><span class="line">  Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">  <span class="comment">//【2】RouteMeta 的 paramsType 保存了被 @AutoWired 注解的参数和类型的枚举序号的映射关系；</span></span><br><span class="line">  Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">  <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">      <span class="comment">//【--&gt;2.3.1.3】将传递的数据设置到 Postcard 中，调用 Postcard.withXXX 方法；</span></span><br><span class="line">      setValue(postcard,</span><br><span class="line">               params.getValue(), <span class="comment">// 变量类型的枚举序号；</span></span><br><span class="line">               params.getKey(), <span class="comment">// 变量名/注解name值</span></span><br><span class="line">               resultMap.get(params.getKey())); <span class="comment">// uri 写到的变量的值；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】将被 @AutoWired 注解的变量的变量名/注解name值以 String[] 形式保存到 PostCard.Bundle 中；</span></span><br><span class="line">    postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//【4】将 uri 保存到 PostCard.Bundle 中，</span></span><br><span class="line">  postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个常量的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-TextUtils-splitQueryParameters"><a href="#2-3-1-2-TextUtils-splitQueryParameters" class="headerlink" title="2.3.1.2 TextUtils.splitQueryParameters"></a>2.3.1.2 TextUtils.splitQueryParameters</h4><p>将 uri 后缀保存的 key-value 的键值对转为 Map&lt;String, String&gt;：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">splitQueryParameters</span><span class="params">(Uri rawUri)</span> </span>&#123;</span><br><span class="line">    String query = rawUri.getEncodedQuery();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (query == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> next = query.indexOf(<span class="string">'&amp;'</span>, start);</span><br><span class="line">        <span class="keyword">int</span> end = (next == -<span class="number">1</span>) ? query.length() : next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> separator = query.indexOf(<span class="string">'='</span>, start);</span><br><span class="line">        <span class="keyword">if</span> (separator &gt; end || separator == -<span class="number">1</span>) &#123;</span><br><span class="line">            separator = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = query.substring(start, separator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(name)) &#123;</span><br><span class="line">            String value = (separator == end ? <span class="string">""</span> : query.substring(separator + <span class="number">1</span>, end));</span><br><span class="line">            paramMap.put(Uri.decode(name), Uri.decode(value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move start to end of name.</span></span><br><span class="line">        start = end + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (start &lt; query.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(paramMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-LogisticsCenter-setValue"><a href="#2-3-1-3-LogisticsCenter-setValue" class="headerlink" title="2.3.1.3 LogisticsCenter.setValue"></a>2.3.1.3 LogisticsCenter.setValue</h4><p>将传递的数据设置进入 Postcard 中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Postcard postcard, Integer typeDef, String key, String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != typeDef) &#123;</span><br><span class="line">            <span class="comment">//【1】根据类型的枚举序号，匹配对应的 withXXX 方法，将值设置到内部的 Bundle 中！</span></span><br><span class="line">            <span class="keyword">if</span> (typeDef == TypeKind.BOOLEAN.ordinal()) &#123;</span><br><span class="line">                postcard.withBoolean(key, Boolean.parseBoolean(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.BYTE.ordinal()) &#123;</span><br><span class="line">                postcard.withByte(key, Byte.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.SHORT.ordinal()) &#123;</span><br><span class="line">                postcard.withShort(key, Short.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.INT.ordinal()) &#123;</span><br><span class="line">                postcard.withInt(key, Integer.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.LONG.ordinal()) &#123;</span><br><span class="line">                postcard.withLong(key, Long.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.FLOAT.ordinal()) &#123;</span><br><span class="line">                postcard.withFloat(key, Float.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.DOUBLE.ordinal()) &#123;</span><br><span class="line">                postcard.withDouble(key, Double.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.STRING.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.PARCELABLE.ordinal()) &#123;</span><br><span class="line">                <span class="comment">// TODO : How to description parcelable value with string?</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.OBJECT.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">// Compatible compiler sdk 1.0.3, in that version, the string type = 18</span></span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postcard.withString(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"LogisticsCenter setValue failed! "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h3 id="2-3-2-ARouter-navigation"><a href="#2-3-2-ARouter-navigation" class="headerlink" title="2.3.2 _ARouter._navigation"></a>2.3.2 _ARouter._navigation</h3><p>可以看到，启动过的过程就是将 Postcard 中的数据设置到 intent 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line">    <span class="comment">//【1】根据跳转类型处理不同的目标；</span></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">//【1.1】创建 activity；</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.2】设置目标启动的 flags</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.3】设置 action！</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【--&gt;2.3.2.1】执行启动；</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider(); <span class="comment">// 这个是针对 Provider 的；</span></span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            <span class="comment">//【1.4】针对于 brocastreceiver，contenprovider，fragment，会拿到其实例！</span></span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【1.4.1】针对于 fragment，还会设置 Arguments；</span></span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD: <span class="comment">// 其他情况没有；</span></span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对于 brocastreceiver，contenprovider，fragment，会拿到其实例，针对于 fragment，还会设置 Arguments！</p><h4 id="2-3-2-1-ARouter-startActivity"><a href="#2-3-2-1-ARouter-startActivity" class="headerlink" title="2.3.2.1 _ARouter.startActivity"></a>2.3.2.1 _ARouter.startActivity</h4><p>这就是最后启动过程了，其实很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">int</span> requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里根据 requestCode 有不同的调用方式；</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;  <span class="comment">// Need start for result</span></span><br><span class="line">        <span class="keyword">if</span> (currentContext <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            ActivityCompat.startActivityForResult((Activity) currentContext, intent, requestCode, postcard.getOptionsBundle());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warning(Consts.TAG, <span class="string">"Must use [navigation(activity, ...)] to support [startActivityForResult]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ActivityCompat.startActivity(currentContext, intent, postcard.getOptionsBundle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((-<span class="number">1</span> != postcard.getEnterAnim() &amp;&amp; -<span class="number">1</span> != postcard.getExitAnim()) &amp;&amp; currentContext <span class="keyword">instanceof</span> Activity) &#123;    <span class="comment">// Old version.</span></span><br><span class="line">        ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.3】启动完成，回调 NavigationCallback</span></span><br><span class="line">        callback.onArrival(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>这里的 postcard.getOptionsBundle() 会返回一个 Bundle 是用来保存额外的启动参数，比如动画等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> Bundle optionsCompat;     </span><br><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">getOptionsBundle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> optionsCompat;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-跳转回调"><a href="#2-4-跳转回调" class="headerlink" title="2.4 跳转回调"></a>2.4 跳转回调</h2><p>我们看看 NavigationCallback 的相关接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigationCallback</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.3】跳转成功后会回调；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>到这里 ARouter 分析就暂告一段落了；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第六篇 - 自动注入 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/"/>
    <id>https://coolqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/</id>
    <published>2019-04-30T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:34.960Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的自动注入原理！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-自动注入"><a href="#1-自动注入" class="headerlink" title="1 自动注入"></a>1 自动注入</h1><p>我们在跳转的过程中，可能会传递一些数据，在原生的机制里面，我们是通过 Intent 来传递数据的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">intent.getXXXX();</span><br></pre></td></tr></table></figure><p>但是这需要我们手动的获取传递的值，ARouter 提供了一种更方便的方法：<strong>自动注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">String key1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_test1);</span><br><span class="line"></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要实现自动注入，对于变量要通过 @Autowired 注解，同时要使用  ARouter.getInstance().inject(this) 方法关联变量；</p><p>其实自动注入依然是通过 intent 来传递值的</p><h1 id="2-注解处理-Autowired"><a href="#2-注解处理-Autowired" class="headerlink" title="2 注解处理 - Autowired"></a>2 注解处理 - Autowired</h1><p>我们来回顾下对于 @Autowired 的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired 注解是由 AutowiredProcessor 解析并处理，这里我们<strong>不再关注注解的处理</strong>了，ok？</p><p>直接来看生成的类！</p><h2 id="2-1-动态生成类"><a href="#2-1-动态生成类" class="headerlink" title="2.1 动态生成类"></a>2.1 动态生成类</h2><p>这里我们以 activity 为例子，下面我们一次性把<strong>所有可以自动注入的变量类</strong>型都加进来；</p><h3 id="2-1-1-被注解的类"><a href="#2-1-1-被注解的类" class="headerlink" title="2.1.1 被注解的类"></a>2.1.1 被注解的类</h3><ul><li><strong>TestInjectActivity</strong>，用于接受 intent 传递的值；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestInjectActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"str1"</span>)</span><br><span class="line">    String str;  <span class="comment">// string</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"bool1"</span>)</span><br><span class="line">    <span class="keyword">boolean</span> bool; <span class="comment">// boolean</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"shortNum1"</span>)</span><br><span class="line">    <span class="keyword">short</span> shortNum; <span class="comment">// short</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> intNum;  <span class="comment">// int</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span>[] intNumArray; <span class="comment">//int[]</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">long</span> longNum;  <span class="comment">// long</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"charStr1"</span>)</span><br><span class="line">    <span class="keyword">char</span> charStr; <span class="comment">// char</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"floatNum1"</span>)</span><br><span class="line">    <span class="keyword">float</span> floatNum; <span class="comment">// float</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">float</span>[] floatNumArray; <span class="comment">// float[]</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"doubleNum"</span>)</span><br><span class="line">    <span class="keyword">double</span> doubleNum;  <span class="comment">// double</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"mapStr"</span>)</span><br><span class="line">    Map&lt;String, String&gt; mapStr; <span class="comment">// map</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestOne&gt; objList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestOne testOne;</span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestOneParcelable testOneParcelable; <span class="comment">// Parcelable</span></span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestTwoParcelable TestTwoParcelable; <span class="comment">// Serializable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/test/TestHelloInterface"</span>)</span><br><span class="line">    HelloInterface helloInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneParcelable</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;  <span class="comment">// 实现了 Parcelable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;TestOneParcelable&gt; CREATOR</span><br><span class="line">             = <span class="keyword">new</span> Parcelable.Creator&lt;TestOneParcelable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> TestOneParcelable <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> TestOneParcelable[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TestOneParcelable[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            dest.writeString(one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestTwoParcelable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">// 实现了 Serializable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span> </span>&#123; <span class="comment">// 自定义的类</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123; <span class="comment">// 用于暴漏服务的接口</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个 TestInjectActivity 定义了一些需要自动赋值的成员！</p><ul><li><strong>TestSerializationService</strong>：用于序列化自定义的类对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestSerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123; <span class="comment">// 用于序列化自定义对象；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestHelloInterface</strong>：暴漏的服务，具体的实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/Test/TestHelloInterface"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloInterface</span> <span class="keyword">implements</span> <span class="title">TestInjectActivity</span>.<span class="title">HelloInterface</span> </span>&#123; <span class="comment">// 用于实现具体的服务；</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面是简单的例子！</p><h3 id="2-1-2-动态生成类"><a href="#2-1-2-动态生成类" class="headerlink" title="2.1.2  动态生成类"></a>2.1.2  动态生成类</h3><p>我们去看看动态生成的类，动态生成的类所在的包名和自动注入的类的包名是一样的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取序列化服务；</span></span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    <span class="comment">//【2】获取目标 activity</span></span><br><span class="line">    TestInjectActivity substitute = (TestInjectActivity)target;</span><br><span class="line">    <span class="comment">//【3】通过 getIntent 来处理传递的数据；</span></span><br><span class="line">    substitute.str = substitute.getIntent().getStringExtra(<span class="string">"str1"</span>);</span><br><span class="line">    substitute.bool = substitute.getIntent().getBooleanExtra(<span class="string">"bool1"</span>, substitute.bool);</span><br><span class="line">    substitute.shortNum = substitute.getIntent().getShortExtra(<span class="string">"shortNum1"</span>, substitute.shortNum);</span><br><span class="line">    substitute.intNum = substitute.getIntent().getIntExtra(<span class="string">"intNum"</span>, substitute.intNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.intNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"intNumArray"</span>), </span><br><span class="line">                                                                <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">int</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'intNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.longNum = substitute.getIntent().getLongExtra(<span class="string">"longNum"</span>, substitute.longNum);</span><br><span class="line">    substitute.charStr = substitute.getIntent().getCharExtra(<span class="string">"charStr1"</span>, substitute.charStr);</span><br><span class="line">    substitute.floatNum = substitute.getIntent().getFloatExtra(<span class="string">"floatNum1"</span>, substitute.floatNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.floatNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"floatNumArray"</span>), </span><br><span class="line">                                                                  <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">float</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'floatNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.doubleNum = substitute.getIntent().getDoubleExtra(<span class="string">"doubleNum"</span>, substitute.doubleNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.mapStr = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"mapStr"</span>), </span><br><span class="line">                                                           <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;Map&lt;String, String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'mapStr' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.objList = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"objList"</span>), </span><br><span class="line">                                                         <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;List&lt;TestInjectActivity.TestOne&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'objList' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.testOne = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"testOne"</span>), </span><br><span class="line">                                                          <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestOne&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'testOne' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.testOneParcelable = substitute.getIntent().getParcelableExtra(<span class="string">"testOneParcelable"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.TestTwoParcelable = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"TestTwoParcelable"</span>), </span><br><span class="line">                                                    <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestTwoParcelable&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'TestTwoParcelable' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.helloInterface = (TestInjectActivity.HelloInterface)ARouter.getInstance().build(<span class="string">"/test/TestHelloInterface"</span>).navigation();;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实这个和之前分析注解解析的时候的模版类是一一对应的。</p><p><strong>可以看到</strong>：</p><ul><li>基本类型，直接通过 intent 的相关方法来处理；</li><li>数组，list，map，自定义类对象，都是通过序列化服务 serializationService 来处理的，也就是说要先将其转为 jsonString，然后保存到 intent 中；</li></ul><p>这里我们就不看 AutoWired 的注解解析了，大家可以直接看前面的文章；</p><h1 id="3-inject-自动注入"><a href="#3-inject-自动注入" class="headerlink" title="3 inject - 自动注入"></a>3 inject - 自动注入</h1><p>下面我们来分析下自动注入的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br></pre></td></tr></table></figure><p>这个是核心的方法！</p><h2 id="3-1-ARouter-inject"><a href="#3-1-ARouter-inject" class="headerlink" title="3.1 ARouter.inject"></a>3.1 ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2】进入 _ARouter</span></span><br><span class="line">    _ARouter.inject(thiz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-ARouter-inject"><a href="#3-2-ARouter-inject" class="headerlink" title="3.2 _ARouter.inject"></a>3.2 _ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回 AutowiredServiceImpl 服务</span></span><br><span class="line">    AutowiredService autowiredService = ((AutowiredService) ARouter.getInstance().build(<span class="string">"/arouter/service/autowired"</span>).navigation());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != autowiredService) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.3.1】通过 AutowiredServiceImpl 自动注入</span></span><br><span class="line">        autowiredService.autowire(thiz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“/arouter/service/autowired” 对应的 service 是 AutowiredServiceImpl，他是 ARouter 系统 Service，实现了 AutowiredService 接口！</p><p>它和 InterceptorServiceImpl 的作用很类似，获取方式这里就不再分析了！</p><h2 id="3-3-AutowiredServiceImpl"><a href="#3-3-AutowiredServiceImpl" class="headerlink" title="3.3 AutowiredServiceImpl"></a>3.3 AutowiredServiceImpl</h2><p>我们来看看 AutowiredServiceImpl 的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/autowired"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredServiceImpl</span> <span class="keyword">implements</span> <span class="title">AutowiredService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LruCache&lt;String, ISyringe&gt; classCache; </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackList;</span><br></pre></td></tr></table></figure><p>内部有一个 LruCache 缓存对象：key 是自动注入的类的全限定名（activity/fragment），value 是 <code>activityName$$ARouter$$Autowired</code> 的实例；</p><p>黑名单 blackList  用于保存哪些无法自动注入的类，value 是 自动注入的类的全限定名（activity/fragment；</p><h3 id="3-3-1-autowire"><a href="#3-3-1-autowire" class="headerlink" title="3.3.1 autowire"></a>3.3.1 autowire</h3><p>我们来看看他是如何处理的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autowire</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取自动注入的类的全限定名；</span></span><br><span class="line">    String className = instance.getClass().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blackList.contains(className)) &#123;</span><br><span class="line">            <span class="comment">//【2】判断是否已经添加到了 classCache 缓存中了；</span></span><br><span class="line">            ISyringe autowiredHelper = classCache.get(className);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == autowiredHelper) &#123; </span><br><span class="line">                <span class="comment">//【3】没有的话就通过反射创建 ISyringe 的实例，其实就是我们解析 AutoWired 的时候生成的：TestInjectActivity$$ARouter$$Autowired</span></span><br><span class="line">                <span class="comment">// 这里会创建其实例；</span></span><br><span class="line">                autowiredHelper = (ISyringe) Class.forName(instance.getClass().getName() + SUFFIX_AUTOWIRED).getConstructor().newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】调用其 inject 方法！</span></span><br><span class="line">            autowiredHelper.inject(instance);</span><br><span class="line">            <span class="comment">//【5】将其加入到缓存中；</span></span><br><span class="line">            classCache.put(className, autowiredHelper);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        blackList.add(className);    <span class="comment">// This instance need not autowired.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SUFFIX_AUTOWIRED 定义在 Consts 中，值为：<code>$$ARouter$$Autowired</code>!!</p><p>这里只是用 <code>TestInjectActivity$$ARouter$$Autowire</code>举个例子，实际上这个类的类名、包名和具体的业务相关；</p><p>后面的逻辑就不多说了，大家去看 inject 方法，一幕了然！</p><h1 id="4-SerializationService"><a href="#4-SerializationService" class="headerlink" title="4 SerializationService"></a>4 SerializationService</h1><p>我们来看看如何序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123; <span class="comment">// TestInjectActivity$$ARouter$$Autowired 使用的是这个方法；</span></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(input, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要自己实现一个 SerializationService，前面的动态生成类，使用了 parseObject 方法，将 jsonString 转为了 Object！</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本篇文章我们分析了 inject 的方法流程，但是我们遗留的下面的问题：</p><ul><li>ARouter 自动注入的值是如何传递的；</li></ul><p>我们会在路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第五篇 - 服务和拦截器 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/"/>
    <id>https://coolqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/</id>
    <published>2019-04-25T12:46:25.000Z</published>
    <updated>2019-08-09T13:23:53.716Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法！</p><h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1 开篇"></a>1 开篇</h1><p>这篇文章分析下 ARouter 的 Service 和 Interceptor，二者有如下的区别：</p><h2 id="1-1-实现接口不同"><a href="#1-1-实现接口不同" class="headerlink" title="1.1 实现接口不同"></a>1.1 实现接口不同</h2><ul><li>Service 直接或者间接的实现了 IProvider 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 直接或者间接的实现了 IInterceptor 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IInterceptor</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-注解不同"><a href="#1-2-注解不同" class="headerlink" title="1.2 注解不同"></a>1.2 注解不同</h2><ul><li>Service 使用 @Route  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/single"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleService</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 使用 @Interceptor  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">7</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Interceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-逻辑处理不同"><a href="#1-3-逻辑处理不同" class="headerlink" title="1.3 逻辑处理不同"></a>1.3 逻辑处理不同</h2><ul><li>拦截器会在 ARouter 初始化 init 的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。<pre><code>- 这个下面可以看到，内部有一个同步锁来控制；</code></pre></li><li>服务没有该限制，某一服务可能在 App 整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作；</li></ul><h1 id="1-服务-Service"><a href="#1-服务-Service" class="headerlink" title="1 服务 Service"></a>1 服务 Service</h1><h2 id="1-1-服务统一接口"><a href="#1-1-服务统一接口" class="headerlink" title="1.1 服务统一接口"></a>1.1 服务统一接口</h2><p>ARouter 已经帮我们提供了一些 Service 统一接口，对于对内对外提供特定的功能模版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  468 May  8 20:46 AutowiredService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  424 May  8 20:46 ClassLoaderService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  590 May  8 20:46 DegradeService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  575 May  8 20:46 InterceptorService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  555 May  8 20:46 PathReplaceService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  656 May  8 20:46 PretreatmentService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  974 May  8 20:46 SerializationService.java</span><br></pre></td></tr></table></figure><ul><li><strong>AutowiredService</strong>：用于处理 Autowired 注解的变量的 Service，ARouter 内置了一个 AutowiredServiceImpl 实现了 AutowiredService，我们在分析 inject 的时候，再讲；</li><li><strong>ClassLoaderService</strong>：针对于 installrun 的 Service；</li><li><strong>DegradeService</strong>：用于在跳转不成功的情况下，做降级处理；</li><li><strong>InterceptorService</strong>：用于处理 Interceptor 的 Service，ARouter 内置了一个 InterceptorServiceImpl 实现了 InterceptorService，用于初始化所有的  Interceptor 和处理拦截，我们下面分析；</li><li><strong>PathReplaceService</strong>：用于对路由的 path 做预处理；</li><li><strong>PretreatmentService</strong>；用于在跳转之前做预处理操作；</li><li><strong>SerializationService</strong>：用于序列化 Object 对象，和 Autowired 注解配合使用，我们在分析 inject 的时候，再讲；</li></ul><h2 id="1-2-获取服务"><a href="#1-2-获取服务" class="headerlink" title="1.2 获取服务"></a>1.2 获取服务</h2><p>ARouter 是通过路由跳转的方式获取服务的，我们来回顾 init 的流程：</p><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br></pre></td></tr></table></figure><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br></pre></td></tr></table></figure><p>之前在分析 init 的过程中，我们又遇到好几个获取 Service 的地方，上面是举了其中几个栗子！</p><ul><li>获取序列化服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br></pre></td></tr></table></figure><p>  上面的代码是在处理 @Autowired 注解的时候，也就是 arouter complier 编译的时候处理的，用于传递自定义的对象；</p><h2 id="1-3-获取流程分析"><a href="#1-3-获取流程分析" class="headerlink" title="1.3 获取流程分析"></a>1.3 获取流程分析</h2><p>通过上面可以知道，获取一个 Service 的方法有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(xxxx.class);</span><br><span class="line"></span><br><span class="line">ARouter.getInstance().build(path).navigation();</span><br></pre></td></tr></table></figure><p>下面我们会分析下这两种方式的流程！</p><p><strong>有些代码在前面的路由处理过程中分析了，这里不会再重复分析。</strong></p><h3 id="1-3-1-navigation-className-class"><a href="#1-3-1-navigation-className-class" class="headerlink" title="1.3.1 navigation(className.class)"></a>1.3.1 navigation(className.class)</h3><p>第一种方式是传入 Service 的父类，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(service.class);</span><br><span class="line">_ARouter.getInstance().navigation(service);</span><br><span class="line">    Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">               Postcard postcard = Warehouse.providersIndex.get(serviceName);</span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些奇葩的</p><h4 id="1-3-1-1-ARouter-navigation"><a href="#1-3-1-1-ARouter-navigation" class="headerlink" title="1.3.1.1 _ARouter.navigation"></a>1.3.1.1 _ARouter.navigation</h4><p>我回顾下 _ARouter.navigation 方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//【2】获取 Serivce；</span></span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心处理：</p><ul><li>LogisticsCenter.buildProvider</li><li>LogisticsCenter.completion</li></ul><h4 id="1-3-1-2-LogisticsCenter-buildProvider"><a href="#1-3-1-2-LogisticsCenter-buildProvider" class="headerlink" title="1.3.1.2 LogisticsCenter.buildProvider"></a>1.3.1.2 LogisticsCenter.buildProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Warehouse.providersIndex 保存的是如下的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br></pre></td></tr></table></figure><h4 id="1-3-1-3-LogisticsCenter-completion"><a href="#1-3-1-3-LogisticsCenter-completion" class="headerlink" title="1.3.1.3 LogisticsCenter.completion"></a>1.3.1.3 LogisticsCenter.completion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.3】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有所谓的 “按组加载”</p><p>可以看到，最后获取了 Service，并调用了其 init 方法；</p><p>最后将获得的 Service 保存到了 Postcard 中；</p><h3 id="1-3-2-build-path-navigation"><a href="#1-3-2-build-path-navigation" class="headerlink" title="1.3.2 build(path).navigation()"></a>1.3.2 build(path).navigation()</h3><p>第二种方式是通过 path 来查找 Service，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(path).navigation() </span><br><span class="line">      Postcard postcard = _ARouter.getInstance().build(path)</span><br><span class="line">      Object object = Postcard.navigation();</span><br><span class="line">           Object object = ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback)</span><br><span class="line">           Object object = _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback)      </span><br><span class="line"> LogisticsCenter.completion(postcard);       </span><br><span class="line">                     Object object = _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些非核心的代码；</p><h4 id="1-3-2-1-ARouter-navigation"><a href="#1-3-2-1-ARouter-navigation" class="headerlink" title="1.3.2.1 _ARouter.navigation"></a>1.3.2.1 _ARouter.navigation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service 是会跳过拦截器的；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-4-ARouter-navigation"><a href="#1-3-2-4-ARouter-navigation" class="headerlink" title="1.3.2.4 _ARouter._navigation"></a>1.3.2.4 _ARouter._navigation</h4><p>最终处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            ... ... ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【1】返回了 iprovider 实例，就是我们的 Service 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            ... ... ...</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，我们获得了 Service 对象！</p><h2 id="1-4-内置服务"><a href="#1-4-内置服务" class="headerlink" title="1.4 内置服务"></a>1.4 内置服务</h2><p>我们来看看内置服务接口！</p><p>对与 AutowiredService，InterceptorService，SerializationService 我们后面会分析，这里就不重点分析了，累！</p><h3 id="1-4-1-DegradeService"><a href="#1-4-1-DegradeService" class="headerlink" title="1.4.1 DegradeService"></a>1.4.1 DegradeService</h3><p>降级服务，当跳转失败后，可以在这里做处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DegradeService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-PathReplaceService"><a href="#1-4-2-PathReplaceService" class="headerlink" title="1.4.2 PathReplaceService"></a>1.4.2 PathReplaceService</h3><p>路径 path 替换服务，我们可以在启动跳转之前，对 path 进行拦截，替换新的 path： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h3 id="1-4-3-PretreatmentService"><a href="#1-4-3-PretreatmentService" class="headerlink" title="1.4.3 PretreatmentService"></a>1.4.3 PretreatmentService</h3><p>跳转预处理服务，我们可以在启动跳转之前，针对跳转路由数据做预处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h1 id="2-拦截器-Interceptor"><a href="#2-拦截器-Interceptor" class="headerlink" title="2 拦截器 Interceptor"></a>2 拦截器 Interceptor</h1><h2 id="2-1-InterceptorServiceImpl-统一管理拦截器"><a href="#2-1-InterceptorServiceImpl-统一管理拦截器" class="headerlink" title="2.1 InterceptorServiceImpl - 统一管理拦截器"></a>2.1 InterceptorServiceImpl - 统一管理拦截器</h2><p>在 ARouter 框架里面，有一个 InterceptorServiceImpl 服务，用于统一管理 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不多说了，这个是获取拦截器管理服务的方式，流程上面分析了；</p><h2 id="2-2-初始化-Interceptor"><a href="#2-2-初始化-Interceptor" class="headerlink" title="2.2 初始化 Interceptor"></a>2.2 初始化 Interceptor</h2><p>Interceptor 的初始化由 InterceptorServiceImpl 完成，</p><p>核心的逻辑在 <strong>LogisticsCenter.completion</strong> 中！</p><h3 id="2-2-1-LogisticsCenter-completion"><a href="#2-2-1-LogisticsCenter-completion" class="headerlink" title="2.2.1 LogisticsCenter.completion"></a>2.2.1 LogisticsCenter.completion</h3><p>这里我们省略掉无关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">    ... ... ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ... ... ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【2.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【1.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1.2.1】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【---&gt;2.2.2】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【1.2.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2.3】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【1.2.4】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回顾</strong>：</p><p>我们知道在路由初始化的过程中，afterInit 会获得 InterceptorServiceImpl 方法并执行其 init 的初始化操作！</p><h3 id="2-2-2-InterceptorServiceImpl-init"><a href="#2-2-2-InterceptorServiceImpl-init" class="headerlink" title="2.2.2 InterceptorServiceImpl.init"></a>2.2.2 InterceptorServiceImpl.init</h3><p>在 InterceptorServiceImpl 的 init 方法中，会获取所有的 Interceptor，并对其做初始化操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【2】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【3】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>; <span class="comment">//【4】init 状态设置为 true；</span></span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123; <span class="comment">//【5】当 init 操作完成后 notifyAll 通知等待 init 的线程；</span></span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是在由线程池管理的字现场中执行 init 操作！</p><p>注意，这里有一个同步锁，如果在路由的时候，发现 interceptorHasInit 为 false，那么会调用 interceptorInitLock.wait 进入阻塞状态，等待初始化完成，被 notifyAll 唤醒！</p><h2 id="2-3-拦截操作"><a href="#2-3-拦截操作" class="headerlink" title="2.3 拦截操作"></a>2.3 拦截操作</h2><p>我们来看看拦截操作是如何做的，核心代码在 _ARouter.navigation 中：</p><h3 id="2-3-1-ARouter-navigation"><a href="#2-3-1-ARouter-navigation" class="headerlink" title="2.3.1 _ARouter.navigation"></a>2.3.1 _ARouter.navigation</h3><p>我们只关注核心的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;  <span class="comment">//【--&gt;2.3.1.1】处理拦截结果；</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里传入了一个拦截结果回调：</p><h4 id="2-3-1-1-InterceptorCallback"><a href="#2-3-1-1-InterceptorCallback" class="headerlink" title="2.3.1.1 InterceptorCallback"></a>2.3.1.1 InterceptorCallback</h4><p>位于 callback 包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterceptorCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-InterceptorServiceImpl-doInterceptions"><a href="#2-3-2-InterceptorServiceImpl-doInterceptions" class="headerlink" title="2.3.2 InterceptorServiceImpl.doInterceptions"></a>2.3.2 InterceptorServiceImpl.doInterceptions</h3><p>当我们路由跳转时，如果指定了 Interceptor，那么就要执行拦截操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInterceptions</span><span class="params">(<span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != Warehouse.interceptors &amp;&amp; Warehouse.interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2.1】判断下 init 操作是否完成；</span></span><br><span class="line">        checkInterceptorsInitStatus();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!interceptorHasInit) &#123;</span><br><span class="line">            callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"Interceptors initialization takes too much time."</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">        LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【2】创建了一个 CountDownLatch 对象，这个对象以 Warehouse.interceptors 的 size 为计数基准；</span></span><br><span class="line">                <span class="comment">// 没处理一个 inteceptor，计数减一，知道计数为 0，才会释放持有的锁！；</span></span><br><span class="line">                CancelableCountDownLatch interceptorCounter = <span class="keyword">new</span> CancelableCountDownLatch(Warehouse.interceptors.size());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】执行拦截操作！</span></span><br><span class="line">                    _excute(<span class="number">0</span>, interceptorCounter, postcard);</span><br><span class="line">                    <span class="comment">//【3】调用 await，子线程进入等待中；</span></span><br><span class="line">                    interceptorCounter.await(postcard.getTimeout(), TimeUnit.SECONDS);</span><br><span class="line">                  </span><br><span class="line">                    <span class="comment">//【4】拦截器处理完成（CountDownLatch 计数归 0），或者 await 超时退出；</span></span><br><span class="line">                    <span class="keyword">if</span> (interceptorCounter.getCount() &gt; <span class="number">0</span>) &#123; <span class="comment">// Cancel the navigation this time, if it hasn't return anythings.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"The interceptor processing timed out."</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != postcard.getTag()) &#123; <span class="comment">// Maybe some exception in the tag.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(postcard.getTag().toString()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback.onContinue(postcard);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    callback.onInterrupt(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback.onContinue(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实可以看出，拦截器使用了责任链模式！</p><p>这里有一个新的类型：CancelableCountDownLatch，其实就是一个 CountDownLatch，代码很简单，不多说了！</p><h4 id="2-3-2-1-checkInterceptorsInitStatus"><a href="#2-3-2-1-checkInterceptorsInitStatus" class="headerlink" title="2.3.2.1 checkInterceptorsInitStatus"></a>2.3.2.1 checkInterceptorsInitStatus</h4><p>判断是否初始化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInterceptorsInitStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">        <span class="comment">//【1】主要是判断 interceptorHasInit 是否为 true！</span></span><br><span class="line">        <span class="keyword">while</span> (!interceptorHasInit) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】进入等待状态，超时时间是 10s！</span></span><br><span class="line">                interceptorInitLock.wait(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Interceptor init cost too much time error! reason = ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorInitLock 是 InterceptorServiceImpl 内部的一个锁对象；</p><h4 id="2-3-2-2-excute"><a href="#2-3-2-2-excute" class="headerlink" title="2.3.2.2 _excute"></a>2.3.2.2 _excute</h4><p>index 的值为 0，开始执行拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">_excute</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index, <span class="keyword">final</span> CancelableCountDownLatch counter, <span class="keyword">final</span> Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; Warehouse.interceptors.size()) &#123;</span><br><span class="line">            <span class="comment">//【1】获得 index 对应的拦截器；</span></span><br><span class="line">            IInterceptor iInterceptor = Warehouse.interceptors.get(index);</span><br><span class="line">            <span class="comment">//【2】执行拦截器的 process 方法，同时传入一个回调：【--&gt;2.3.1.1】InterceptorCallback</span></span><br><span class="line">            iInterceptor.process(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.1】不拦截，CountDownLatch 计数减去 1；</span></span><br><span class="line">                    counter.countDown();</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】继续调用 _excute 方法，index 加一，下一个拦截器；</span></span><br><span class="line">                    _excute(index + <span class="number">1</span>, counter, postcard);  <span class="comment">// When counter is down, it will be execute continue ,but index bigger than interceptors size, then U know.</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.2】拦截，CountDownLatch 计数归 0；</span></span><br><span class="line">                    postcard.setTag(<span class="keyword">null</span> == exception ? <span class="keyword">new</span> HandlerException(<span class="string">"No message."</span>) : exception.getMessage());    <span class="comment">// save the exception message for backup.</span></span><br><span class="line">                    counter.cancel();</span><br><span class="line">                    <span class="comment">// Be attention, maybe the thread in callback has been changed,</span></span><br><span class="line">                    <span class="comment">// then the catch block(L207) will be invalid.</span></span><br><span class="line">                    <span class="comment">// The worst is the thread changed to main thread, then the app will be crash, if you throw this exception!</span></span><br><span class="line"><span class="comment">//                    if (!Looper.getMainLooper().equals(Looper.myLooper())) &#123;    // You shouldn't throw the exception if the thread is main thread.</span></span><br><span class="line"><span class="comment">//                        throw new HandlerException(exception.getMessage());</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程很简单，不多说了。</p><h1 id="3-线程池"><a href="#3-线程池" class="headerlink" title="3 线程池"></a>3 线程池</h1><p>刚刚我们有看到，拦截器的初始化和拦截都是在子线程中做的，ARouter 通过内部的一个线程池来管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultPoolExecutor.java  <span class="comment">// 线程池</span></span><br><span class="line">DefaultThreadFactory.java  <span class="comment">// 线程工厂</span></span><br></pre></td></tr></table></figure><h2 id="3-1-线程池初始化"><a href="#3-1-线程池初始化" class="headerlink" title="3.1 线程池初始化"></a>3.1 线程池初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">_ARouter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【1】DefaultPoolExecutor 是 _ARouter 的静态变量；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance();</span><br></pre></td></tr></table></figure><p>然后再初始化 LogisticsCenter 的时候传递给了 LogisticsCenter；</p><h2 id="3-2-DefaultPoolExecutor"><a href="#3-2-DefaultPoolExecutor" class="headerlink" title="3.2 DefaultPoolExecutor"></a>3.2 DefaultPoolExecutor</h2><p>我们来看下线程池的构造，这里要重点看看线程池的核心参数：</p><h3 id="3-2-1-getInstance"><a href="#3-2-1-getInstance" class="headerlink" title="3.2.1 getInstance"></a>3.2.1 getInstance</h3><p>单例模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultPoolExecutor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DefaultPoolExecutor.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;3.2.2】创建线程池；</span></span><br><span class="line">                instance = <span class="keyword">new</span> DefaultPoolExecutor(</span><br><span class="line">                        INIT_THREAD_COUNT,</span><br><span class="line">                        MAX_THREAD_COUNT,</span><br><span class="line">                        SURPLUS_THREAD_LIFE,</span><br><span class="line">                        TimeUnit.SECONDS,</span><br><span class="line">                        <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">64</span>),</span><br><span class="line">                        <span class="keyword">new</span> DefaultThreadFactory());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-new-DefaultPoolExecutor"><a href="#3-2-2-new-DefaultPoolExecutor" class="headerlink" title="3.2.2 new DefaultPoolExecutor"></a>3.2.2 new DefaultPoolExecutor</h3><p>我们来研究下 DefaultPoolExecutor 的一些核心参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DefaultPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, </span></span></span><br><span class="line"><span class="function"><span class="params">                            ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, <span class="keyword">new</span> RejectedExecutionHandler() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">             ARouter.logger.error(Consts.TAG, <span class="string">"Task rejected, too many task!"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 DefaultPoolExecutor 内部的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors(); <span class="comment">// Java 虚拟机的可用的处理器数量；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_THREAD_COUNT = CPU_COUNT + <span class="number">1</span>;  <span class="comment">// 核心线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_THREAD_COUNT = INIT_THREAD_COUNT;  <span class="comment">// 最大线程数；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SURPLUS_THREAD_LIFE = <span class="number">30L</span>; <span class="comment">// 空闲线程在</span></span><br></pre></td></tr></table></figure><p>可以看到，线程池的参数如下：</p><ul><li>corePoolSize：核心线程数是可用的处理器数量 + 1；</li><li>maximumPoolSize：最大线程数是可用的处理器数量；</li><li>keepAliveTime：空闲线程存活时间：30s；</li><li>workQueue：阻塞队列是 ArrayBlockingQueue，数组实现的阻塞队列，有界 64；</li><li>threadFactory：线程工厂类，自定义的 DefaultThreadFactory 类；</li><li>RejectedExecutionHandler：线程池在无法处理添加的 runnnable 时的处理机制，这里是自定义了一个 RejectedExecutionHandler，只是打印了一个 Log；</li></ul><h2 id="3-3-DefaultThreadFactory"><a href="#3-3-DefaultThreadFactory" class="headerlink" title="3.3 DefaultThreadFactory"></a>3.3 DefaultThreadFactory</h2><p>ARouter 内部自定义的线程工厂类，DefaultThreadFactory 需要实现 ThreadFactory 接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里通过 SecurityManager 来设置 thread 的 group；</span></span><br><span class="line">    SecurityManager s = System.getSecurityManager();</span><br><span class="line">    group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">    namePrefix = <span class="string">"ARouter task pool No."</span> + poolNumber.getAndIncrement() + <span class="string">", thread No."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看 newThread 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(@NonNull Runnable runnable)</span> </span>&#123;</span><br><span class="line">    String threadName = namePrefix + threadNumber.getAndIncrement();</span><br><span class="line">    ARouter.logger.info(Consts.TAG, <span class="string">"Thread production, name is ["</span> + threadName + <span class="string">"]"</span>);</span><br><span class="line">    <span class="comment">//【1】创建线程，一个线程对应一个 runnable；</span></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(group, runnable, threadName, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (thread.isDaemon()) &#123;   <span class="comment">//【2】设为非后台线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thread.getPriority() != Thread.NORM_PRIORITY) &#123; <span class="comment">// 【2】优先级为 normal</span></span><br><span class="line">        thread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】捕获多线程处理中的异常</span></span><br><span class="line">    thread.setUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</span><br><span class="line">            ARouter.logger.info(Consts.TAG, <span class="string">"Running task appeared exception! Thread ["</span> + thread.getName() + <span class="string">"], because ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 的服务和拦截器的相关机制</p><ul><li>拦截器的初始化和拦截操作都是在子线程中处理的，拦截器使用了责任链模式；</li><li>子线程通过线程池管理，采用了单例模式；</li><li>拦截器是使用了责任链模式，通过它使用 CountDownLatch 来实现了路由等待的操作；</li></ul><p>但是遗留了几个问题：</p><ul><li>AutowiredService 和 AutowiredServiceImpl 是如何工作的；</li><li>ClassLoaderService 是如何工作的；</li></ul><p>我们下次再说～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第四篇 - 路由初始化 (arouter-api)</title>
    <link href="https://coolqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/"/>
    <id>https://coolqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/</id>
    <published>2019-04-23T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:46.859Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>绘图工具：PlantXML</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>我们先来看看模块结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">└── com</span><br><span class="line">    └── alibaba</span><br><span class="line">        └── android</span><br><span class="line">            └── arouter</span><br><span class="line">                ├── base</span><br><span class="line">                │   └── UniqueKeyTreeMap.java</span><br><span class="line">                ├── core</span><br><span class="line">                │   ├── AutowiredLifecycleCallback.java</span><br><span class="line">                │   ├── AutowiredServiceImpl.java</span><br><span class="line">                │   ├── InstrumentationHook.java</span><br><span class="line">                │   ├── InterceptorServiceImpl.java</span><br><span class="line">                │   ├── LogisticsCenter.java</span><br><span class="line">                │   └── Warehouse.java</span><br><span class="line">                ├── exception</span><br><span class="line">                │   ├── HandlerException.java</span><br><span class="line">                │   ├── InitException.java</span><br><span class="line">                │   └── NoRouteFoundException.java</span><br><span class="line">                ├── facade</span><br><span class="line">                │   ├── Postcard.java</span><br><span class="line">                │   ├── callback</span><br><span class="line">                │   │   ├── InterceptorCallback.java</span><br><span class="line">                │   │   ├── NavCallback.java</span><br><span class="line">                │   │   └── NavigationCallback.java</span><br><span class="line">                │   ├── service</span><br><span class="line">                │   │   ├── AutowiredService.java</span><br><span class="line">                │   │   ├── ClassLoaderService.java</span><br><span class="line">                │   │   ├── DegradeService.java</span><br><span class="line">                │   │   ├── InterceptorService.java</span><br><span class="line">                │   │   ├── PathReplaceService.java</span><br><span class="line">                │   │   ├── PretreatmentService.java</span><br><span class="line">                │   │   └── SerializationService.java</span><br><span class="line">                │   └── template</span><br><span class="line">                │       ├── IInterceptor.java</span><br><span class="line">                │       ├── IInterceptorGroup.java</span><br><span class="line">                │       ├── ILogger.java</span><br><span class="line">                │       ├── IPolicy.java</span><br><span class="line">                │       ├── IProvider.java</span><br><span class="line">                │       ├── IProviderGroup.java</span><br><span class="line">                │       ├── IRouteGroup.java</span><br><span class="line">                │       ├── IRouteRoot.java</span><br><span class="line">                │       └── ISyringe.java</span><br><span class="line">                ├── launcher</span><br><span class="line">                │   ├── ARouter.java</span><br><span class="line">                │   └── _ARouter.java</span><br><span class="line">                ├── thread</span><br><span class="line">                │   ├── CancelableCountDownLatch.java</span><br><span class="line">                │   ├── DefaultPoolExecutor.java</span><br><span class="line">                │   └── DefaultThreadFactory.java</span><br><span class="line">                └── utils</span><br><span class="line">                    ├── ClassUtils.java</span><br><span class="line">                    ├── Consts.java</span><br><span class="line">                    ├── DefaultLogger.java</span><br><span class="line">                    ├── MapUtils.java</span><br><span class="line">                    ├── PackageUtils.java</span><br><span class="line">                    └── TextUtils.java</span><br></pre></td></tr></table></figure><p> 可以看到，有如下的 package：</p><ul><li><strong>base</strong>：数据缓存类，内部提供了一个 treeMap 实现，用于存储 intercepter；</li><li><strong>core</strong>：核心类，ARouter的核心功能都在这里实现；</li><li><strong>exception</strong>：异常相关，主要是定义了内部的一些异常；</li><li><strong>facade</strong>：通过外观模式对外提供统一的接口，下面有三个子包：<ul><li><strong>callback</strong>：提供回调接口，以及默认的回调处理；</li><li><strong>service</strong>：ARouter 内部已经实现的一些 Service，对外提供拦截等功能；</li><li><strong>template</strong>：包含模版，提供了大量的模版接口，可以通过实现接口，配合注解，实现自定义的功能；</li></ul></li><li><strong>launcher</strong>：ARouter 的入口；</li><li><strong>thread</strong>：线程操作类；</li><li><strong>utils</strong>：提供多个工具类</li></ul><h1 id="2-初始化方法"><a href="#2-初始化方法" class="headerlink" title="2  初始化方法"></a>2  初始化方法</h1><p>我们在使用时，必须要做初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两行必须写在 init 之前，否则这些配置在 init 过程中将无效；     </span></span><br><span class="line"><span class="comment">//【1】打印日志；</span></span><br><span class="line">ARouter.openLog();</span><br><span class="line"><span class="comment">//【2】开启调试模式（如果在 InstantRun 模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险）；</span></span><br><span class="line">ARouter.openDebug();</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在 Application 中初始化；</span></span><br></pre></td></tr></table></figure><p>接下来，我们来看看 init 的过程：</p><h1 id="3-Launcher-包"><a href="#3-Launcher-包" class="headerlink" title="3 Launcher 包"></a>3 Launcher 包</h1><h2 id="3-1-ARouter"><a href="#3-1-ARouter" class="headerlink" title="3.1 ARouter"></a>3.1 ARouter</h2><p>ARouter 是整个库的入口！</p><h3 id="3-1-1-成员变量"><a href="#3-1-1-成员变量" class="headerlink" title="3.1.1 成员变量"></a>3.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Key of raw uri</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ILogger logger;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-init"><a href="#3-1-2-init" class="headerlink" title="3.1.2 init"></a>3.1.2 init</h3><p>我们来看看 init 初始化的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        logger = _ARouter.logger;</span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init start."</span>);</span><br><span class="line">        <span class="comment">//【--&gt;3.2.2】执行初始化；</span></span><br><span class="line">        hasInit = _ARouter.init(application);</span><br><span class="line">        <span class="keyword">if</span> (hasInit) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.2.3】执行初始化后面的操作；</span></span><br><span class="line">            _ARouter.afterInit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init over."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-getInstance"><a href="#3-1-3-getInstance" class="headerlink" title="3.1.3 getInstance"></a>3.1.3 getInstance</h3><p>获得 ARouter 的实例（单例模式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouter::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】ARouter 的构造器方法体是空的；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> ARouter(); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了单例模式创建：ARouter ！</p><h3 id="3-1-4-build"><a href="#3-1-4-build" class="headerlink" title="3.1.4 build"></a>3.1.4 build</h3><p>afterInit 方法中传入了 “/arouter/service/interceptor” 参数，创建跳转信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.4】返回 _ARouter 的实例</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.5】创建跳转信息；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().build(path);</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不关注其他的方法；</span></span><br></pre></td></tr></table></figure><p>ARouter 提供了下面的多个方法用于创建跳转信息：</p><ul><li><p><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法；</p></li><li><p><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</p></li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>可以看到，最后调用的是 _ARouter 的方法，注意这个方法返回的是：</p><ul><li><strong>Postcard</strong>：继承了 RouteMeta，用于封装跳转信息；</li></ul><h3 id="3-1-5-navigation"><a href="#3-1-5-navigation" class="headerlink" title="3.1.5 navigation"></a>3.1.5 navigation</h3><p>执行跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】通过跳转，返回服务对象；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(service);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context mContext, Postcard postcard, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】执行跳转，这也是真正的跳转接口；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARouter 提供了 2 个跳转接口：</p><ul><li><code>navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>，实际上并不是跳转接口；</li><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>这篇博文先不讲 <strong>navigation</strong>，我们分析初始化 init 的过程：</p><ul><li><code>interceptorService = (InterceptorService) ARouter.getInstance().build(&quot;/arouter/service/interceptor&quot;).navigation();</code>    <ul><li>在执行 <strong>afterInit</strong> 的时候，<strong>会通过 navigation 方法返回 InterceptorServiceIpml 实例</strong>，这个方法我们跟踪了代码，调的是第二个 <strong>navigation</strong> 方法；</li></ul></li><li><code>PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</code><ul><li>而在获得  InterceptorService 实例的时候，会<strong>先调用 build 方法</strong>，获得 <strong>PathReplaceService</strong> 实例，这里就是<strong>第一个 navigation 方法</strong>，但是这里我们不分析它；</li><li>实际上 <strong>PathReplaceService 和 InterceptorServiceImpl 的获取方式是一样的</strong>！</li></ul></li></ul><h2 id="3-2-ARouter"><a href="#3-2-ARouter" class="headerlink" title="3.2 _ARouter"></a>3.2 _ARouter</h2><h3 id="3-2-1-成员变量"><a href="#3-2-1-成员变量" class="headerlink" title="3.2.1 成员变量"></a>3.2.1 成员变量</h3><p>下面是 _ARouter 的成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG); <span class="comment">// Log 系统，位于 utils 包；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance(); <span class="comment">// 线程池对象，由 DefaultPoolExecutor 创建；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InterceptorService interceptorService; <span class="comment">// 用于执行所有的 Interceptor；</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-init"><a href="#3-2-2-init" class="headerlink" title="3.2.2 init"></a>3.2.2 init</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    mContext = application;</span><br><span class="line">    <span class="comment">//【--&gt;4.1.2】初始化 LogisticsCenter</span></span><br><span class="line">    LogisticsCenter.init(mContext, executor);</span><br><span class="line">    logger.info(Consts.TAG, <span class="string">"ARouter init success!"</span>);</span><br><span class="line">    hasInit = <span class="keyword">true</span>; <span class="comment">// 判断是否 init；</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()); <span class="comment">// 主线程的 handler</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化 LogisticsCenter 的时候，传入了一个线程池！</p><h3 id="3-2-3-afterInit"><a href="#3-2-3-afterInit" class="headerlink" title="3.2.3 afterInit"></a>3.2.3 afterInit</h3><p> 在 ARouter 执行完成初始化之后，会触发 interceptor 的 init 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.3】获取 ARouter 的实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;3.1.4】build 跳转信息，返回一个 PostCard 实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;6.1.3】执行 PostCard 的 nativagation 方法，获得系统服务 InterceptorServiceImpl 实例；</span></span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，获取 InterceptorServiceImpl 实例，是通过 PostCard.navigation 方法的！</p><p><strong>build 的参数传入的是 “/arouter/service/interceptor”</strong>，这里我们要获取一个 InterceptorServiceImpl 实例 ！</p><h3 id="3-2-4-getInstance"><a href="#3-2-4-getInstance" class="headerlink" title="3.2.4 getInstance"></a>3.2.4 getInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> _ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouterCore::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (_ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】_ARouter 的构造器是空的，就不再分析了；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> _ARouter();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单例模式创建 _ARouter 对象；</p><h3 id="3-2-5-build"><a href="#3-2-5-build" class="headerlink" title="3.2.5 build"></a>3.2.5 build</h3><p>ARouter.build 的方法，最后会掉到 _ARouter 中来；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 path，并对 path 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】调用第三个方法：</span></span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不看其他的 build 方法！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path, String group)</span> </span>&#123; <span class="comment">// Route,path, Route.group；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || TextUtils.isEmpty(group)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 uri，并对 uri 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;5.1】返回跳转信息；</span></span><br><span class="line">        <span class="comment">//【--&gt;6.1.1】创建跳转实例 Postcard；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(path, group);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，也是有三个重载函数：</p><ul><li><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法，这个方法会调用第二个；</li><li><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>（注意：这里有一个 <strong>PathReplaceService</strong>，用于在跳转前，拦截 path，并对 path 做处理，这个 Service 和路由跳转有关系，初始化这里我们先不过多分析！）</p><h4 id="3-2-5-1-extractGroup"><a href="#3-2-5-1-extractGroup" class="headerlink" title="3.2.5.1 extractGroup"></a>3.2.5.1 extractGroup</h4><p>这个方法的作用是对 path 做修正，看 path 是否正确，同时根据 path 生成 group：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">extractGroup</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】校验 path 是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed, the path must be start with"</span> </span><br><span class="line">                                   + <span class="string">"'/' and contain more than 2 '/'!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3】根据 path 生成 group；</span></span><br><span class="line">        String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed! There's nothing between 2 '/'!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultGroup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-navigation"><a href="#3-2-6-navigation" class="headerlink" title="3.2.6 navigation"></a>3.2.6 navigation</h3><p>最后会进入 _ARouter 的 navigation 方法中，我们看到，该方法的逻辑还是很多的，注意，这里我们传入的 callback 是 null 的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*important】这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 PretreatmentService 服务，对 Postcard 做预处理；</span></span><br><span class="line">    <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.2】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">///【1】当完善失败，则通过 callback.onLost 提示用户！</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*important】如果没有指定 callback，显然通过降级服务处理！</span></span><br><span class="line">            <span class="comment">// 这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 DegradeService 服务，对 Postcard 做预处理；</span></span><br><span class="line">            <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【2】回调 onFound 方法，表示跳转信息有效；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;6.1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【*important】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_ARouter 也提供了 2 个跳转接口</strong>：</p><ul><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>同样的，我们也只看 <code>init</code>的过程，也就是获取 <strong>InterceptorServiceImpl</strong> 实例的过程，这个过程调用的是上面的四参方法；</p><ul><li><p><code>&lt;T&gt; T navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.4】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>实际上并不是跳转接口，<strong>PathReplaceService</strong>，<strong>PretreatmentService</strong>，<strong>DegradeService</strong> 都是通过这个方法获取！</p><p>我们后面统一进行分析！</p><h3 id="3-2-7-navigation"><a href="#3-2-7-navigation" class="headerlink" title="3.2.7 _navigation"></a>3.2.7 _navigation</h3><p>最后会调用 _navigation 返回我们的 InterceptorServiceImpl 实例，我们知道 <strong>InterceptorServiceImpl 是 PROVIDER 类型的</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">// Build intent</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set flags.</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set Actions</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Navigation in main looper.</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【over】返回了 iprovider 实例，就是我们的 InterceptorServiceImpl 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到其他类型的处理，我们在路由跳转的时候再分析；</p><h1 id="4-core-包"><a href="#4-core-包" class="headerlink" title="4 core 包"></a>4 core 包</h1><h2 id="4-1-LogisticsCenter-核心一号种子"><a href="#4-1-LogisticsCenter-核心一号种子" class="headerlink" title="4.1 LogisticsCenter - 核心一号种子"></a>4.1 LogisticsCenter - 核心一号种子</h2><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"><span class="keyword">static</span> ThreadPoolExecutor executor; <span class="comment">// 线程池；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> registerByPlugin; <span class="comment">// 是否通过插件自动注册；</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-init"><a href="#4-1-2-init" class="headerlink" title="4.1.2 init"></a>4.1.2 init</h3><p>执行 init 操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, ThreadPoolExecutor tpe)</span> <span class="keyword">throws</span> HandlerException </span>&#123;</span><br><span class="line">  mContext = context;</span><br><span class="line">  executor = tpe;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> startInit = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//【--&gt;5.1.1】是否使用 arouter-auto-register 插件来加载路由表；</span></span><br><span class="line">    loadRouterMap();</span><br><span class="line">    <span class="keyword">if</span> (registerByPlugin) &#123;</span><br><span class="line">      logger.info(TAG, <span class="string">"Load router map by arouter-auto-register plugin."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 默认情况下是进入这里：</span></span><br><span class="line">      Set&lt;String&gt; routerMap;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【1】如果开启了 debug 模式或者说 Apk 发生了更新，那么 ARouter 会重建路由表；</span></span><br><span class="line">      <span class="comment">//【--&gt;9.2.2】isNewVersion 判断 apk 是否是新的安装；</span></span><br><span class="line">      <span class="keyword">if</span> (ARouter.debuggable() || PackageUtils.isNewVersion(context)) &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Run with debug mode or new install, rebuild router map."</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//【--&gt;9.1.2】这里更新路由表，通过包名 com.alibaba.android.arouter.routes，扫描包下面包含的所有的类的 ClassName</span></span><br><span class="line">        <span class="comment">// 这个包是在 arouter complier 阶段生成的，里面包含解析注解生成的 java 类；</span></span><br><span class="line">        routerMap = ClassUtils.getFileNameByPackageName(mContext, ROUTE_ROOT_PAKCAGE);</span><br><span class="line">        <span class="keyword">if</span> (!routerMap.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">//【1.1】当我们能够扫描到路由信息后，会将这个信息保存到本地 sp 中；</span></span><br><span class="line">          context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(AROUTER_SP_KEY_MAP, routerMap).apply();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PackageUtils.updateVersion(context); <span class="comment">//【--&gt;9.2.3】保存版本号；</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Load router map from cache."</span>);</span><br><span class="line">        <span class="comment">//【2】其他情况，是默认从本地缓存中读取路由表的！</span></span><br><span class="line">        routerMap = <span class="keyword">new</span> HashSet&lt;&gt;(context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(AROUTER_SP_KEY_MAP, <span class="keyword">new</span> HashSet&lt;String&gt;()));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.info(TAG, <span class="string">"Find router map finished, map size = "</span> + routerMap.size() + <span class="string">", cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line">      startInit = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【2】处理路由表的信息，在前面，我们将 aouter-compiler 在编译时期生成的 class 都加载到了 routerMap 中了；</span></span><br><span class="line">      <span class="keyword">for</span> (String className : routerMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_ROOT)) &#123;</span><br><span class="line">          <span class="comment">//【2.1】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Root，符合前缀的都是 IRouteRoot 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.groupsIndex；</span></span><br><span class="line">          ((IRouteRoot) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.groupsIndex);</span><br><span class="line">         </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_INTERCEPTORS)) &#123;</span><br><span class="line">          <span class="comment">//【2.2】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Interceptors，符合前缀的都是 IInterceptorGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.interceptorsIndex；</span></span><br><span class="line">          ((IInterceptorGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.interceptorsIndex);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_PROVIDERS)) &#123;</span><br><span class="line">          <span class="comment">//【2.3】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Providers，符合前缀的都是 IProviderGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.providersIndex；</span></span><br><span class="line">          ((IProviderGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.providersIndex);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(TAG, <span class="string">"Load root element finished, cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Warehouse.groupsIndex.size() == <span class="number">0</span>) &#123;</span><br><span class="line">      logger.error(TAG, <span class="string">"No mapping files were found, check your configuration please!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">      logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"LogisticsCenter has already been loaded, GroupIndex[%d], “ </span></span><br><span class="line"><span class="string">                                      + ”InterceptorIndex[%d], ProviderIndex[%d]"</span>, Warehouse.groupsIndex.size(),“ </span><br><span class="line">                                      + Warehouse.interceptorsIndex.size(), Warehouse.providersIndex.size()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init logistics center exception! ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，ARouter 会将路由表存储在本地缓存 sp 中，在版本号发生变化的时候会处理，上面的这些常量定义在 Consts 中。</p><p>我们还记得 arouter compiler 在动态生成代码的时候，会创建 IRouteRoot，IInterceptorGroup，IProviderGroup 的子类，我们通过 Route，intercepor  注解的元素都会被封装成 RouteMeta 实例，通过 loadInto 方法，加入到 Warehouse 对应的集合中！</p><p>下面我们通过之前动态代码来分析：</p><ul><li>如果前缀是 <code>ARouter$$Root</code>, 那么会触发 <code>ARouter$$Root$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.groupsIndex</strong>，这样，我们就可以通过它按组加载了；</p><ul><li>如果前缀是 <code>ARouter$$Interceptors</code>, 那么会触发 <code>ARouter$$Interceptors$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.interceptorsIndex</strong></p><ul><li>如果前缀是 <code>ARouter$$Providers</code>, 那么会触发 <code>ARouter$$Providers$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.providersIndex</strong></p><h4 id="4-2-1-1-loadRouterMap"><a href="#4-2-1-1-loadRouterMap" class="headerlink" title="4.2.1.1 loadRouterMap"></a>4.2.1.1 loadRouterMap</h4><p>这个方法用于判断是否通过 arouter-auto-register 插件自动注册路由；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRouterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    registerByPlugin = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//auto generate register code by gradle plugin: arouter-auto-register</span></span><br><span class="line">    <span class="comment">// looks like below:</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulejava());</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulekotlin());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果使用了 arouter-auto-register 插件，那么会自动执行 registerRouteRoot 相关代码；</p><p>这里我们先不看和 arouter-auto-register 相关的代码：</p><p>这个方法默认是将 registerByPlugin 设置为 false；</p><h3 id="4-1-3-buildProvider"><a href="#4-1-3-buildProvider" class="headerlink" title="4.1.3 buildProvider"></a>4.1.3 buildProvider</h3><p>通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;6.1.2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-completion"><a href="#4-1-4-completion" class="headerlink" title="4.1.4 completion"></a>4.1.4 completion</h3><p>完善跳转信息，completion 会通过 Warehouse 的数据，填充 Postcard！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【1】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.2】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】这里是通过 RouteMeta 来设置 Postcard 对象；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        <span class="comment">//【3】如果指定了 uri 就要从 uri 中设置传递的数据了，显然，这里我们并没有设置 Uri；</span></span><br><span class="line">        <span class="comment">// 我们也没有传递数据，只是为了获取 InterceptorServiceImpl 实例，我们先不看！</span></span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里和 AutoInject 有关系，我们先不看！</span></span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER；</span></span><br><span class="line">                <span class="comment">// routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【--&gt;4.3】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【--&gt;4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;6.1.1】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【--&gt;6.1.1】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存处理</strong>：</p><ul><li><strong>Warehouse.groupsIndex —&gt; Warehouse.routes</strong></li></ul><p>这里优先从 Warehouse.groupsIndex 中读取，Warehouse.groupsIndex 中保存的是类似下面的数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br></pre></td></tr></table></figure><p>这里会从 Warehouse.groupsIndex 中，获取 group 对应的类，并创建实例，比如 <code>ARouter$$Group$$coolqiService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                                                                       <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, </span><br><span class="line">                                                                       <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，调用其 loadInto 方法，就会将数据加入到 <code>Warehouse.routes</code> 中；</p><ul><li><strong>Warehouse.providers</strong></li></ul><p><strong>上面涉及到了数据处理，我们先不看，后面再分析</strong>；</p><h2 id="4-2-WareHouse-核心二号种子"><a href="#4-2-WareHouse-核心二号种子" class="headerlink" title="4.2 WareHouse - 核心二号种子"></a>4.2 WareHouse - 核心二号种子</h2><p>WareHouse 是 ARouter 的数据仓库，存储跳转的信息！</p><h3 id="4-2-1-成员变量"><a href="#4-2-1-成员变量" class="headerlink" title="4.2.1 成员变量"></a>4.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】保存动态生成的 ARouter$$Root$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; groupsIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; routes = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】保存动态生成的 ARouter$$Providers$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; providersIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;Class, IProvider&gt; providers = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存，key：类名，value：实例；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】保存动态生成的 ARouter$$Interceptors$$moduleName.loadInto 方法加载的数据；【--&gt;5.1】对于 interceptor，是通过 UniqueKeyTreeMap 来存放的！</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptorsIndex = <span class="keyword">new</span> UniqueKeyTreeMap&lt;&gt;(<span class="string">"More than one interceptors use same priority [%s]"</span>);</span><br><span class="line"><span class="keyword">static</span> List&lt;IInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 上面数据的缓存</span></span><br></pre></td></tr></table></figure><p>每次都会从 compiler 数据中获取数据保存到缓存数据中，然后删除  compiler 数据；</p><h3 id="4-2-2-clear"><a href="#4-2-2-clear" class="headerlink" title="4.2.2 clear"></a>4.2.2 clear</h3><p>清除内部数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routes.clear();</span><br><span class="line">    groupsIndex.clear();</span><br><span class="line">    providers.clear();</span><br><span class="line">    providersIndex.clear();</span><br><span class="line">    interceptors.clear();</span><br><span class="line">    interceptorsIndex.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WareHouse 只有一个 clear 方法，用来清除数据；</p><h2 id="4-3-InterceptorServiceImpl"><a href="#4-3-InterceptorServiceImpl" class="headerlink" title="4.3 InterceptorServiceImpl"></a>4.3 InterceptorServiceImpl</h2><p>InterceptorServiceImpl 他是 ARouter 内部实现的系统服务，是通过：<code>@Route(path = &quot;/arouter/service/interceptor&quot;)</code> 注解处理的，它的作用是<strong>用于处理拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/interceptor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorServiceImpl</span> <span class="keyword">implements</span> <span class="title">InterceptorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> interceptorHasInit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object interceptorInitLock = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-1-init"><a href="#4-3-1-init" class="headerlink" title="4.3.1 init"></a>4.3.1 init</h3><p>初始化所有的 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又涉及到缓存：<strong>Warehouse.interceptorsIndex —&gt;Warehouse.interceptors</strong>;</p><h1 id="5-base-包"><a href="#5-base-包" class="headerlink" title="5 base 包"></a>5 base 包</h1><h2 id="5-1-UniqueKeyTreeMap"><a href="#5-1-UniqueKeyTreeMap" class="headerlink" title="5.1 UniqueKeyTreeMap"></a>5.1 UniqueKeyTreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueKeyTreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String tipText;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniqueKeyTreeMap</span><span class="params">(String exceptionText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">        tipText = exceptionText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(tipText, key));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="6-facade-包"><a href="#6-facade-包" class="headerlink" title="6 facade 包"></a>6 facade 包</h1><h2 id="6-1-PostCard"><a href="#6-1-PostCard" class="headerlink" title="6.1 PostCard"></a>6.1 PostCard</h2><p>PostCard 继承了 RouteMeta，用于保存跳转的信息；</p><h3 id="6-1-1-成员变量"><a href="#6-1-1-成员变量" class="headerlink" title="6.1.1 成员变量"></a>6.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Uri uri;                <span class="comment">// uri</span></span><br><span class="line"><span class="keyword">private</span> Object tag;             <span class="comment">// A tag prepare for some thing wrong.</span></span><br><span class="line"><span class="keyword">private</span> Bundle mBundle;         <span class="comment">// 数据 bundle；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flags = -<span class="number">1</span>;         <span class="comment">// 跳转的 flags，用于 activity；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">300</span>;      <span class="comment">// Navigation timeout, TimeUnit.Second</span></span><br><span class="line"><span class="keyword">private</span> IProvider provider;     <span class="comment">// 如果跳转的目标实例是 IProvider 的子类，那么该值不为 null；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> greenChannel;   <span class="comment">// 是否跳过所有的拦截器；</span></span><br><span class="line"><span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Bundle optionsCompat;    <span class="comment">// 和动画相关的属性；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> enterAnim = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> exitAnim = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-new-Postcard"><a href="#6-1-2-new-Postcard" class="headerlink" title="6.1.2 new Postcard"></a>6.1.2 new Postcard</h3><p>创建了一个 Postcard 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】最终会调用这个方法；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path); <span class="comment">// 设置 path</span></span><br><span class="line">    setGroup(group); <span class="comment">// 设置 group</span></span><br><span class="line">    setUri(uri); <span class="comment">// 设置 uri</span></span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>在初始化过程中，我们传入的 path：”/arouter/service/interceptor”</p><h3 id="6-1-3-navigation"><a href="#6-1-3-navigation" class="headerlink" title="6.1.3 navigation"></a>6.1.3 navigation</h3><p>在初始化过程中，执行 navigation 方法，获取系统拦截器：<strong>InterceptorServiceImpl</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.5】调用了 ARouter 的 navigation 方法！</span></span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 <strong>NavigationCallback callback</strong> 的概念：<strong>跳转回调</strong>！ </p><h1 id="9-Utils-包"><a href="#9-Utils-包" class="headerlink" title="9 Utils 包"></a>9 Utils 包</h1><h2 id="9-1-ClassUtils"><a href="#9-1-ClassUtils" class="headerlink" title="9.1 ClassUtils"></a>9.1 ClassUtils</h2><h3 id="9-1-1-成员变量"><a href="#9-1-1-成员变量" class="headerlink" title="9.1.1 成员变量"></a>9.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_NAME_EXT = <span class="string">".classes"</span>; <span class="comment">// 文件后缀</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_SUFFIX = <span class="string">".zip"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECONDARY_FOLDER_NAME = <span class="string">"code_cache"</span> + File.separator + <span class="string">"secondary-dexes"</span>; <span class="comment">// 文件路径 /code_cache/secondary-dexes；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFS_FILE = <span class="string">"multidex.version"</span>; <span class="comment">// 记录 mutilDex 信息的 sp name；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_DEX_NUMBER = <span class="string">"dex.number"</span>; <span class="comment">// sp key 值，记录 dex 的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MAJOR = <span class="number">2</span>; <span class="comment">// VM 相关，用于判断 vm 是否支持 multiDex；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MINOR = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="9-1-2-getFileNameByPackageName"><a href="#9-1-2-getFileNameByPackageName" class="headerlink" title="9.1.2 getFileNameByPackageName"></a>9.1.2 getFileNameByPackageName</h3><p>通过指定包名，扫描 Apk 下面包含的所有类的 ClassName:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getFileNameByPackageName</span><span class="params">(Context context, <span class="keyword">final</span> String packageName)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; classNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//【--&gt;9.1.3】获取 apk 源代码（dex）的路径；</span></span><br><span class="line">    List&lt;String&gt; paths = getSourcePaths(context);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch parserCtl = <span class="keyword">new</span> CountDownLatch(paths.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> String path : paths) &#123;</span><br><span class="line">        DefaultPoolExecutor.getInstance().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DexFile dexfile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【2】根据文件后缀的不同，会执行不通的操作，如果后缀是 .zip，那么回调用 DexFile.loadDex 方法；</span></span><br><span class="line">                    <span class="keyword">if</span> (path.endsWith(EXTRACTED_SUFFIX)) &#123; </span><br><span class="line">                        dexfile = DexFile.loadDex(path, path + <span class="string">".tmp"</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dexfile = <span class="keyword">new</span> DexFile(path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3】遍历 dex 文件，找到该 apk 的所有 class，并返回其 class name；</span></span><br><span class="line">                    Enumeration&lt;String&gt; dexEntries = dexfile.entries();</span><br><span class="line">                    <span class="keyword">while</span> (dexEntries.hasMoreElements()) &#123;</span><br><span class="line">                        String className = dexEntries.nextElement();</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(packageName)) &#123;</span><br><span class="line">                            classNames.add(className);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                    Log.e(<span class="string">"ARouter"</span>, <span class="string">"Scan map file in dex files made error."</span>, ignore);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != dexfile) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            dexfile.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    parserCtl.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parserCtl.await();</span><br><span class="line"></span><br><span class="line">    Log.d(Consts.TAG, <span class="string">"Filter "</span> + classNames.size() + <span class="string">" classes by packageName &lt;"</span> + packageName + <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> classNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-1-3-getSourcePaths"><a href="#9-1-3-getSourcePaths" class="headerlink" title="9.1.3 getSourcePaths"></a>9.1.3 getSourcePaths</h3><p>获取源代码路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getSourcePaths</span><span class="params">(Context context)</span> <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException </span>&#123;</span><br><span class="line">    ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), <span class="number">0</span>);</span><br><span class="line">    File sourceApk = <span class="keyword">new</span> File(applicationInfo.sourceDir);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; sourcePaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    sourcePaths.add(applicationInfo.sourceDir);<span class="comment">//【1】添加默认的 apk 源路径；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】文件前缀：name.classes</span></span><br><span class="line">    String extractedFilePrefix = sourceApk.getName() + EXTRACTED_NAME_EXT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;9.1.3.1】判断 vm 是否支持 multiDex，如何已经支持了 muitiDex，那就不去 Secondary Folder 加载 Classesx.zip</span></span><br><span class="line">    <span class="keyword">if</span> (!isVMMultidexCapable()) &#123;</span><br><span class="line">        <span class="comment">//【2】不支持 multiDex，那就要去加载 Classesx.zip；</span></span><br><span class="line">        <span class="keyword">int</span> totalDexNumber = getMultiDexPreferences(context).getInt(KEY_DEX_NUMBER, <span class="number">1</span>); <span class="comment">//【--&gt;9.1.3.2】获取 dex 的数量；</span></span><br><span class="line">        File dexDir = <span class="keyword">new</span> File(applicationInfo.dataDir, SECONDARY_FOLDER_NAME); <span class="comment">// 获取存放其他 dex 的目录；</span></span><br><span class="line">        <span class="comment">//【3】收集 Secondary Folder 目录下的 dex 的路径；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> secondaryNumber = <span class="number">2</span>; secondaryNumber &lt;= totalDexNumber; secondaryNumber++) &#123;</span><br><span class="line">            <span class="comment">//【3.1】每个 dex file 的文件名都是：name.classes.zip，添加到 sourcePaths 列表中；</span></span><br><span class="line">            String fileName = extractedFilePrefix + secondaryNumber + EXTRACTED_SUFFIX;</span><br><span class="line">            File extractedFile = <span class="keyword">new</span> File(dexDir, fileName);</span><br><span class="line">            <span class="keyword">if</span> (extractedFile.isFile()) &#123;</span><br><span class="line">                sourcePaths.add(extractedFile.getAbsolutePath());</span><br><span class="line">                <span class="comment">//we ignore the verify zip part</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Missing extracted secondary dex file '"</span> + extractedFile.getPath() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123; <span class="comment">// Search instant run support only debuggable</span></span><br><span class="line">        sourcePaths.addAll(tryLoadInstantRunDexFile(applicationInfo));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】返回收集的列表</span></span><br><span class="line">    <span class="keyword">return</span> sourcePaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程还是比较简单的；</p><h4 id="9-1-3-1-isVMMultidexCapable"><a href="#9-1-3-1-isVMMultidexCapable" class="headerlink" title="9.1.3.1 isVMMultidexCapable"></a>9.1.3.1 isVMMultidexCapable</h4><p>判断 vm 是否支持 multiDex：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVMMultidexCapable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> isMultidexCapable = <span class="keyword">false</span>;</span><br><span class="line">     String vmName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (isYunOS()) &#123; <span class="comment">//【1】YunOS 需要特殊判断</span></span><br><span class="line">             vmName = <span class="string">"'YunOS'"</span>;</span><br><span class="line">             isMultidexCapable = Integer.valueOf(System.getProperty(<span class="string">"ro.build.version.sdk"</span>)) &gt;= <span class="number">21</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">//【2】非 YunOS 原生 Android</span></span><br><span class="line">             vmName = <span class="string">"'Android'"</span>;</span><br><span class="line">             String versionString = System.getProperty(<span class="string">"java.vm.version"</span>);</span><br><span class="line">             <span class="keyword">if</span> (versionString != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">//【3】判断 java.vm.version 属性的 major 和 minor 的范围；</span></span><br><span class="line">                 Matcher matcher = Pattern.compile(<span class="string">"(\\d+)\\.(\\d+)(\\.\\d+)?"</span>).matcher(versionString);</span><br><span class="line">                 <span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                         <span class="keyword">int</span> major = Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line">                         <span class="keyword">int</span> minor = Integer.parseInt(matcher.group(<span class="number">2</span>));</span><br><span class="line">                         isMultidexCapable = (major &gt; VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 || ((major == VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 &amp;&amp; (minor &gt;= VM_WITH_MULTIDEX_VERSION_MINOR));</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (NumberFormatException ignore) &#123;</span><br><span class="line">                         <span class="comment">// let isMultidexCapable be false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Log.i(Consts.TAG, <span class="string">"VM with name "</span> + vmName + (isMultidexCapable ? <span class="string">" has multidex support"</span> : <span class="string">" does not have multidex support"</span>));</span><br><span class="line">     <span class="keyword">return</span> isMultidexCapable;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>不多说了 ；</p><h4 id="9-1-3-2-getMultiDexPreferences"><a href="#9-1-3-2-getMultiDexPreferences" class="headerlink" title="9.1.3.2 getMultiDexPreferences"></a>9.1.3.2 getMultiDexPreferences</h4><p>获取记录 multi dex 信息 sp，ARouter 将 dex 的数量保存到内部 sp 中，name： “multidex.version”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SharedPreferences <span class="title">getMultiDexPreferences</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> context.getSharedPreferences(PREFS_FILE, Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB </span><br><span class="line">                                         ? Context.MODE_PRIVATE : Context.MODE_PRIVATE | Context.MODE_MULTI_PROCESS);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-PackageUtils"><a href="#9-2-PackageUtils" class="headerlink" title="9.2 PackageUtils"></a>9.2 PackageUtils</h2><h3 id="9-2-1-成员变量"><a href="#9-2-1-成员变量" class="headerlink" title="9.2.1 成员变量"></a>9.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String NEW_VERSION_NAME;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> NEW_VERSION_CODE;</span><br></pre></td></tr></table></figure><p>用来缓存 apk 的版本号和版本名；</p><h3 id="9-2-2-isNewVersion"><a href="#9-2-2-isNewVersion" class="headerlink" title="9.2.2 isNewVersion"></a>9.2.2 isNewVersion</h3><p>判断 apk 是否是新的版本，包括第一次安装/更新安装；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNewVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 apk 的信息；</span></span><br><span class="line">    PackageInfo packageInfo = getPackageInfo(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != packageInfo) &#123;</span><br><span class="line">        <span class="comment">//【2】获取 apk 的版本名和版本号；</span></span><br><span class="line">        String versionName = packageInfo.versionName;</span><br><span class="line">        <span class="keyword">int</span> versionCode = packageInfo.versionCode;</span><br><span class="line"></span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【3】如何和本地缓存的不一样，那就说明是新版本；</span></span><br><span class="line">        <span class="keyword">if</span> (!versionName.equals(sp.getString(LAST_VERSION_NAME, <span class="keyword">null</span>)) || versionCode != sp.getInt(LAST_VERSION_CODE, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">//【3.1】将新的 versionCode 和 VersionName 缓存下来；</span></span><br><span class="line">            NEW_VERSION_NAME = versionName;</span><br><span class="line">            NEW_VERSION_CODE = versionCode;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-updateVersion"><a href="#9-2-3-updateVersion" class="headerlink" title="9.2.3 updateVersion"></a>9.2.3 updateVersion</h3><p>更新本地缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(NEW_VERSION_NAME) &amp;&amp; NEW_VERSION_CODE != <span class="number">0</span>) &#123;</span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【1】写入到本地 sp 中；</span></span><br><span class="line">        sp.edit().putString(LAST_VERSION_NAME, NEW_VERSION_NAME).putInt(LAST_VERSION_CODE, NEW_VERSION_CODE).apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>LAST_VERSION_NAME</strong>，<strong>LAST_VERSION_CODE</strong> 均定义在 Consts 中；</p><h2 id="9-x-Consts"><a href="#9-x-Consts" class="headerlink" title="9.x Consts"></a>9.x Consts</h2><p>常量类，保存了 arouter-api 中的常量关键字；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Consts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SDK_NAME = <span class="string">"ARouter"</span>; <span class="comment">// 这几个常量在 complier 中有见过，用于生成注解处理后的类的类名和包名；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SDK_NAME + <span class="string">"::"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_ROOT = <span class="string">"Root"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_INTERCEPTORS = <span class="string">"Interceptors"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_PROVIDERS = <span class="string">"Providers"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_AUTOWIRED = SEPARATOR + SDK_NAME + SEPARATOR + <span class="string">"Autowired"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOT = <span class="string">"."</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTE_ROOT_PAKCAGE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_CACHE_KEY = <span class="string">"SP_AROUTER_CACHE"</span>; <span class="comment">// 本地缓存 sp 的 name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_KEY_MAP = <span class="string">"ROUTER_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_NAME = <span class="string">"LAST_VERSION_NAME"</span>; <span class="comment">// 用于保存 apk 的版本号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_CODE = <span class="string">"LAST_VERSION_CODE"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-总结"><a href="#10-总结" class="headerlink" title="10 总结"></a>10 总结</h1><p>我们分析路由初始化的整个过程，设计的 pkg 也很多，但是细心的观察，我们其实已经分析了一些路由跳转的逻辑，哈哈哈。</p><p>当然，还有下面的问题遗漏了：</p><ul><li><code>PathReplaceService，PretreatmentService，DegradeService</code>：是如何获取的，作用又是什么呢？</li><li><code>facade.service</code> 下的这些 <code>Service</code> 都是如何工作的呢？</li><li><code>core</code>目录下的 <code>AutowiredServiceImpl</code> 和 <code>InterceptorServiceImpl</code>，又是如何工作的呢？</li><li>ARouter 如何处理跳转回调的呢？</li></ul><p>这些问题，我会在下篇：路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第三篇 - 注解解析 (arouter-compiler)</title>
    <link href="https://coolqi.top/2019/04/19/ARouter3-arouter-compiler/"/>
    <id>https://coolqi.top/2019/04/19/ARouter3-arouter-compiler/</id>
    <published>2019-04-19T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:57.132Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-compiler 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看  arouter-compiler  的模块结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____compiler</span><br><span class="line">| | | | | |____entity</span><br><span class="line">| | | | | | |____RouteDoc.java</span><br><span class="line">| | | | | |____processor</span><br><span class="line">| | | | | | |____BaseProcessor.java</span><br><span class="line">| | | | | | |____InterceptorProcessor.java</span><br><span class="line">| | | | | | |____AutowiredProcessor.java</span><br><span class="line">| | | | | | |____RouteProcessor.java</span><br><span class="line">| | | | | |____utils</span><br><span class="line">| | | | | | |____TypeUtils.java</span><br><span class="line">| | | | | | |____Consts.java</span><br><span class="line">| | | | | | |____Logger.java</span><br></pre></td></tr></table></figure><p>可以看到，一共有三个 pacakge：</p><ul><li>entity：包含了实体数据类；</li><li>processor：包含了所有的注解解释器类；</li><li>utils：包含了一些工具类；</li></ul><p>我们知道，在 Gradle 对 App 执行编译的时候，arouter-compiler 会对相关的注解进行解析，并动态生成所需的类；</p><p>arouter-compiler 模块还依赖了两个三方库：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></span><br><span class="line">implementation <span class="string">'com.squareup:javapoet:1.8.0'</span></span><br></pre></td></tr></table></figure><p><em>JavaPoet</em> 是 square 推出的开源 java 代码生成框架，提供 Java Api 生成 .java 源文件；</p><p>auto-service 是 google 提供的用于自动注册自定义注解处理器的三方库；</p><p>关于这两个库的源码，本系列文章不分析，后面单独分析；</p><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><p>我们分别分析下三个 package 目录下的 class 的作用！</p><h2 id="2-1-entity"><a href="#2-1-entity" class="headerlink" title="2.1 entity"></a>2.1 entity</h2><p>该 package 下面只包含一个实体数据类：RouteDoc。</p><h3 id="2-1-1-RouteDoc"><a href="#2-1-1-RouteDoc" class="headerlink" title="2.1.1 RouteDoc"></a>2.1.1 RouteDoc</h3><p>RouteDoc 用于描述路由跳转的信息，用于生成路由表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDoc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> String prototype;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mark;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Param&gt; params;</span><br><span class="line"></span><br><span class="line">    ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">private</span> String key;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">private</span> String description;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> required;</span><br><span class="line"></span><br><span class="line">        ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 processor 对注解进行解析的时候，它会把路由跳转相关的信息记录到 RouteDoc 中！</p><p>后面我们分析 processor 的时候就可以看到了！ </p><h2 id="2-2-processor-注解解析"><a href="#2-2-processor-注解解析" class="headerlink" title="2.2 processor - 注解解析"></a>2.2 processor - 注解解析</h2><p>该 package 下面包含 ARouter 的核心类：processors，根据前面的注解，一共有三个 processor，我们分别来分析！</p><p>重点要关注他们是如何“<strong>解析注解，并动态生成代码</strong>的！</p><h3 id="2-2-1-BaseProcessor"><a href="#2-2-1-BaseProcessor" class="headerlink" title="2.2.1 BaseProcessor"></a>2.2.1 BaseProcessor</h3><p>BaseProcessor 是其他三个 processor 的基类，定义了一些共有的属性和操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    Filer mFiler;</span><br><span class="line">    Logger logger;</span><br><span class="line">    Types types;</span><br><span class="line">    Elements elementUtils; <span class="comment">// 元素工具类对象；</span></span><br><span class="line">    TypeUtils typeUtils;</span><br><span class="line">    <span class="comment">//【1】模块的名称 name；</span></span><br><span class="line">    String moduleName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//【2】是否要生成 route doc；</span></span><br><span class="line">    <span class="keyword">boolean</span> generateDoc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        types = processingEnv.getTypeUtils();</span><br><span class="line">        elementUtils = processingEnv.getElementUtils();</span><br><span class="line">        <span class="comment">//【*2.3.2】创建 TypeUtils 对象，用于对类型做处理；</span></span><br><span class="line">        typeUtils = <span class="keyword">new</span> TypeUtils(types, elementUtils);</span><br><span class="line">        <span class="comment">//【*2.3.1】创建 Logger 对象，用于打印过程信息；</span></span><br><span class="line">        logger = <span class="keyword">new</span> Logger(processingEnv.getMessager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】获取 Processor 当前所在 moudle 的 name，判断是否生成路由文档；</span></span><br><span class="line">        <span class="comment">// 常量第一在 Consts 中；</span></span><br><span class="line">        Map&lt;String, String&gt; options = processingEnv.getOptions();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(options)) &#123;</span><br><span class="line">            moduleName = options.get(KEY_MODULE_NAME);</span><br><span class="line">            generateDoc = VALUE_ENABLE.equals(options.get(KEY_GENERATE_DOC_NAME));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(moduleName)) &#123; <span class="comment">// 这部分是对 moduleName 进行检查；</span></span><br><span class="line">            moduleName = moduleName.replaceAll(<span class="string">"[^0-9a-zA-Z_]+"</span>, <span class="string">""</span>);</span><br><span class="line">            logger.info(<span class="string">"The user has configuration the module name, it was ["</span> + moduleName + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(NO_MODULE_NAME_TIPS);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... <span class="comment">// getSupportedSourceVersion /getSupportedOptions</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面省略掉了一些非核心方法，我们不关注它们；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            <span class="comment">// 这里是核心配置点；</span></span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="string">AROUTER_MODULE_NAME:</span> project.getName(), <span class="string">AROUTER_GENERATE_DOC:</span> <span class="string">"enable"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 KEY_MODULE_NAME，KEY_GENERATE_DOC_NAME，对应的我们在 .gradle 中的配置，这些配置最终都会解析并保存到 ProcessingEnvironment 中；</p><p><strong>BaseProcessor</strong> 主要作用就是创建 TypeUtils 对象和 Logger 对象，然后获得当前所在 module 的 gradle 配置！</p><h3 id="2-2-2-RouteProcessor"><a href="#2-2-2-RouteProcessor" class="headerlink" title="2.2.2  RouteProcessor"></a>2.2.2  RouteProcessor</h3><p>核心解释器，用于处理 @Route 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_ROUTE, ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-2-1-Field"><a href="#2-2-2-1-Field" class="headerlink" title="2.2.2.1 Field"></a>2.2.2.1 Field</h4><p>内部变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key 是所属的组 group，value 是该组下的所有跳转信息 RouteMeta 对象；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Set&lt;RouteMeta&gt;&gt; groupMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; rootMap = <span class="keyword">new</span> TreeMap&lt;&gt;();  <span class="comment">// Map of root metas, used for generate class file in order.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TypeMirror iProvider = <span class="keyword">null</span>; <span class="comment">// .IProvider 的类型；</span></span><br><span class="line"><span class="keyword">private</span> Writer docWriter;       <span class="comment">// 用于生成路由文档；</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-Init"><a href="#2-2-2-2-Init" class="headerlink" title="2.2.2.2 Init"></a>2.2.2.2 Init</h4><p>初始化 processor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            docWriter = mFiler.createResource(</span><br><span class="line">                    StandardLocation.SOURCE_OUTPUT,</span><br><span class="line">                    PACKAGE_OF_GENERATE_DOCS,</span><br><span class="line">                    <span class="string">"arouter-map-of-"</span> + moduleName + <span class="string">".json"</span></span><br><span class="line">            ).openWriter();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Create doc writer failed, because "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; RouteProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-Process-处理-Route-注解"><a href="#2-2-2-3-Process-处理-Route-注解" class="headerlink" title="2.2.2.3 Process - 处理 Route 注解"></a>2.2.2.3 Process - 处理 Route 注解</h4><p>核心逻辑：注意，这里的参数 Set&lt;? extends TypeElement&gt; annotations ，表示的是要处理的注解，根据前面的内容：Route 和 AutoWired ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】这里返回了 @Route 处理的元素；</span></span><br><span class="line">        Set&lt;? extends Element&gt; routeElements = roundEnv.getElementsAnnotatedWith(Route.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found routes, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.2.3.1】开始处理注解修饰的元素；</span></span><br><span class="line">            <span class="keyword">this</span>.parseRoutes(routeElements);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里调用了 parseRoutes 方法：</p><h5 id="2-2-2-3-1-parseRoutes"><a href="#2-2-2-3-1-parseRoutes" class="headerlink" title="2.2.2.3.1 parseRoutes"></a>2.2.2.3.1 parseRoutes</h5><p>核心的核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRoutes</span><span class="params">(Set&lt;? extends Element&gt; routeElements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(routeElements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found routes, size is "</span> + routeElements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        rootMap.clear();</span><br><span class="line">        <span class="comment">//【1】保存 activity，service，fragment 的元素类型；</span></span><br><span class="line">        TypeMirror type_Activity = elementUtils.getTypeElement(ACTIVITY).asType();</span><br><span class="line">        TypeMirror type_Service = elementUtils.getTypeElement(SERVICE).asType();</span><br><span class="line">        TypeMirror fragmentTm = elementUtils.getTypeElement(FRAGMENT).asType();</span><br><span class="line">        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】获得 .IProvider/.IProviderGroup 对应的 TypeElement 对象；</span></span><br><span class="line">        TypeElement type_IRouteGroup = elementUtils.getTypeElement(IROUTE_GROUP);</span><br><span class="line">        TypeElement type_IProviderGroup = elementUtils.getTypeElement(IPROVIDER_GROUP);</span><br><span class="line">      <span class="comment">//【3】获得 RouteMeta 和 RouteType 的类全限定名；</span></span><br><span class="line">        ClassName routeMetaCn = ClassName.get(RouteMeta.class);</span><br><span class="line">        ClassName routeTypeCn = ClassName.get(RouteType.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】准备动态生成 java 代码：</span></span><br><span class="line">        <span class="comment">//【4.1】生成方法参数类型：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfRoot = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_IRouteGroup))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.2】生成方法参数类型：Map&lt;String, RouteMeta&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfGroup = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ClassName.get(RouteMeta.class)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.4】生成方法参数：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; atlas</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; providers</span></span><br><span class="line">        ParameterSpec rootParamSpec = ParameterSpec.builder(inputMapTypeOfRoot, <span class="string">"routes"</span>).build();</span><br><span class="line">        ParameterSpec groupParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"atlas"</span>).build();</span><br><span class="line">        ParameterSpec providerParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"providers"</span>).build(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.5】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfRootBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(rootParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】处理 @Route 注解修饰的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : routeElements) &#123;</span><br><span class="line">            TypeMirror tm = element.asType(); <span class="comment">// 获得 Route 注解的元素的类型信息；</span></span><br><span class="line">            Route route = element.getAnnotation(Route.class); <span class="comment">// 获得 Route 注解对象；</span></span><br><span class="line">            RouteMeta routeMeta; <span class="comment">// 用于封装跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (types.isSubtype(tm, type_Activity)) &#123;</span><br><span class="line">                <span class="comment">//【5.1】注解的元素是 activity 的子类；</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found activity route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; 类型枚举序号；</span></span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfig = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; Autowired 实例</span></span><br><span class="line">              </span><br><span class="line">                <span class="keyword">for</span> (Element field : element.getEnclosedElements()) &#123;</span><br><span class="line">                    <span class="comment">//【5.1.1】返回该元素直接包含的子元素（成员属性），处理内部哪些被 @Autowired 注解的成员属性（避开 IProvider 子类）；</span></span><br><span class="line">                    <span class="keyword">if</span> (field.getKind().isField() &amp;&amp; field.getAnnotation(Autowired.class) != <span class="keyword">null</span> &amp;&amp; !types.isSubtype(field.asType(), iProvider)) &#123;</span><br><span class="line">                        <span class="comment">// 必须是被 @Autowired 注解的属性，但是不能是 IProvider</span></span><br><span class="line">                        Autowired paramConfig = field.getAnnotation(Autowired.class);</span><br><span class="line">                        <span class="comment">//【5.1.1.1】根据是否设置 Autowired.name 对属性进行 byName 或者 byType 处理；</span></span><br><span class="line">                        String injectName = StringUtils.isEmpty(paramConfig.name()) ? field.getSimpleName().toString() : paramConfig.name();</span><br><span class="line">                        <span class="comment">//【5.1.1.2】加入到集合；</span></span><br><span class="line">                        paramsType.put(injectName, typeUtils.typeExchange(field));</span><br><span class="line">                        injectConfig.put(injectName, paramConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5.1.2】创建跳转对象；</span></span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.ACTIVITY, paramsType);</span><br><span class="line">                routeMeta.setInjectConfig(injectConfig);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123;</span><br><span class="line">                <span class="comment">//【5.2】注解的元素实现了 IProvider 接口，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found provider route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.PROVIDER, <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, type_Service)) &#123;</span><br><span class="line">                <span class="comment">//【5.3】注解的元素是 service 的子类，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found service route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(SERVICE), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, fragmentTm) || types.isSubtype(tm, fragmentTmV4)) </span><br><span class="line">                <span class="comment">//【5.4】注解的元素是 fragment 的子类，，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found fragment route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(FRAGMENT), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; Found unsupported class type, type = ["</span> + types.toString() + <span class="string">"]."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*2.2.2.3.1.1】对跳转对象进行分类；</span></span><br><span class="line">            categories(routeMeta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.6】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; providers) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfProviderBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(providerParamSpec);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;RouteDoc&gt;&gt; docSource = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// key：组名；value：每个组内的路由跳转文档；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】按照分组的方式，遍历 RouteMeta；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;RouteMeta&gt;&gt; entry : groupMap.entrySet()) &#123;</span><br><span class="line">            String groupName = entry.getKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.1】生成方法签名：</span></span><br><span class="line">            <span class="comment">// @Override</span></span><br><span class="line">            <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; atlas) </span></span><br><span class="line">            MethodSpec.Builder loadIntoMethodOfGroupBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(groupParamSpec);</span><br><span class="line"></span><br><span class="line">            List&lt;RouteDoc&gt; routeDocList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 用于保存路由跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.2】获得属于该 group 下的所有 RouteMeta，并依次处理；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; groupData = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (RouteMeta routeMeta : groupData) &#123;</span><br><span class="line">                <span class="comment">//【*2.2.2.3.1.2】根据跳转信息，生成文档对象；</span></span><br><span class="line">                RouteDoc routeDoc = extractDocInfo(routeMeta);</span><br><span class="line"></span><br><span class="line">                ClassName className = ClassName.get((TypeElement) routeMeta.getRawType()); <span class="comment">// 目标类的全限定名</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (routeMeta.getType()) &#123; <span class="comment">//【5.2.1】针对跳转类型为 PROVIDER 的情况，这里会将其父类的信息缓存下来；</span></span><br><span class="line">                    <span class="keyword">case</span> PROVIDER:</span><br><span class="line">                        <span class="comment">// 返回直接由此类实现或直接由此接口扩展的接口类型（目标类的负类）</span></span><br><span class="line">                        List&lt;? extends TypeMirror&gt; interfaces = ((TypeElement) routeMeta.getRawType()).getInterfaces();</span><br><span class="line">                        <span class="keyword">for</span> (TypeMirror tm : interfaces) &#123;</span><br><span class="line">                            routeDoc.addPrototype(tm.toString());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (types.isSameType(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 类型，说明目标类是直接实现的 .IProvider 接口； </span></span><br><span class="line">                                <span class="comment">//【5.2.2】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("目标类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//           $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                                                         + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        (routeMeta.getRawType()).toString(), <span class="comment">// routeMeta.getRawType() 返回的是 element;</span></span><br><span class="line">                                        routeMetaCn,  <span class="comment">// RouteMeta</span></span><br><span class="line">                                        routeTypeCn,  <span class="comment">// RouteType</span></span><br><span class="line">                                        className,    <span class="comment">// 类名；</span></span><br><span class="line">                                        routeMeta.getPath(),  <span class="comment">// Route 的 path 属性；</span></span><br><span class="line">                                        routeMeta.getGroup()); <span class="comment">// group 属性；</span></span><br><span class="line">                              </span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 的字类型，说明目标类是继承了一个实现 .IProvider 的类；</span></span><br><span class="line">                                <span class="comment">//【5.2.3】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("直接父类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//            $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                   + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        tm.toString(),</span><br><span class="line">                                        routeMetaCn,</span><br><span class="line">                                        routeTypeCn,</span><br><span class="line">                                        className,</span><br><span class="line">                                        routeMeta.getPath(),</span><br><span class="line">                                        routeMeta.getGroup());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.3】用于继续生成 route doc, 和 Autowired 注解的参数 hashmap</span></span><br><span class="line">                StringBuilder mapBodyBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType();</span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfigs = routeMeta.getInjectConfig();</span><br><span class="line">                <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                    List&lt;RouteDoc.Param&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; types : paramsType.entrySet()) &#123;</span><br><span class="line">                        <span class="comment">// 创建 Autowired 注解的参数 hashmap；</span></span><br><span class="line">                        mapBodyBuilder.append(<span class="string">"put(\""</span>).append(types.getKey()).append(<span class="string">"\", "</span>).append(types.getValue()).append(<span class="string">"); "</span>);</span><br><span class="line"></span><br><span class="line">                        RouteDoc.Param param = <span class="keyword">new</span> RouteDoc.Param();</span><br><span class="line">                        Autowired injectConfig = injectConfigs.get(types.getKey());</span><br><span class="line">                        param.setKey(types.getKey());</span><br><span class="line">                        param.setType(TypeKind.values()[types.getValue()].name().toLowerCase());</span><br><span class="line">                        param.setDescription(injectConfig.desc());</span><br><span class="line">                        param.setRequired(injectConfig.required());</span><br><span class="line"></span><br><span class="line">                        paramList.add(param);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将 @AutoWeird 修饰的变量信息保存到 routeDoc 中；</span></span><br><span class="line">                    routeDoc.setParams(paramList);</span><br><span class="line">                &#125;</span><br><span class="line">                String mapBody = mapBodyBuilder.toString();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.4】生成方法体：：</span></span><br><span class="line">                <span class="comment">// atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, </span></span><br><span class="line">                <span class="comment">//           $&#123;path&#125;, $&#123;group&#125;, new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span></span><br><span class="line">                loadIntoMethodOfGroupBuilder.addStatement(</span><br><span class="line">                        <span class="string">"atlas.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, "</span> </span><br><span class="line">                  + (StringUtils.isEmpty(mapBody) ? <span class="keyword">null</span> : (<span class="string">"new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;"</span> + mapBodyBuilder.toString()</span><br><span class="line">                              + <span class="string">"&#125;&#125;"</span>)) + <span class="string">", "</span> + routeMeta.getPriority() + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                        routeMeta.getPath(),</span><br><span class="line">                        routeMetaCn,</span><br><span class="line">                        routeTypeCn,</span><br><span class="line">                        className,</span><br><span class="line">                        routeMeta.getPath().toLowerCase(),</span><br><span class="line">                        routeMeta.getGroup().toLowerCase());</span><br><span class="line"></span><br><span class="line">                routeDoc.setClassName(className.toString()); <span class="comment">// 将 className 保存到 routeDoc 中；</span></span><br><span class="line">                routeDocList.add(routeDoc); <span class="comment">// 将这个路由表加入到 routeDocList 中；</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.5】动态生成 java 文件：</span></span><br><span class="line">            String groupFileName = NAME_OF_GROUP + groupName;</span><br><span class="line">            JavaFile.builder(PACKAGE_OF_GENERATE_FILE,   <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                    TypeSpec.classBuilder(groupFileName) <span class="comment">// 类名 ARouter$$Group$$ + $&#123;groupName&#125;</span></span><br><span class="line">                            .addJavadoc(WARNING_TIPS)</span><br><span class="line">                            .addSuperinterface(ClassName.get(type_IRouteGroup)) <span class="comment">// 实现 .IRouteGroup 接口；</span></span><br><span class="line">                            .addModifiers(PUBLIC)</span><br><span class="line">                            .addMethod(loadIntoMethodOfGroupBuilder.build())</span><br><span class="line">                            .build()</span><br><span class="line">            ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Generated group: "</span> + groupName + <span class="string">"&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【5.6】将 key：groupName ---&gt; value：ARouter$$Group$$ + $&#123;groupName&#125; 保存到 rootMap 表中；</span></span><br><span class="line">            rootMap.put(groupName, groupFileName);</span><br><span class="line">            docSource.put(groupName, routeDocList); <span class="comment">// 将当前组的所有路由表保存到 docSource 中；</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(rootMap)) &#123;</span><br><span class="line">            <span class="comment">//【6】生成方法体：：</span></span><br><span class="line">           <span class="comment">// routes.put("app", ARouter$$Group$$$&#123;$groupName&#125;.class);</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : rootMap.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfRootBuilder.addStatement(<span class="string">"routes.put($S, $T.class)"</span>, </span><br><span class="line">                                                         entry.getKey(), ClassName.get(PACKAGE_OF_GENERATE_FILE, entry.getValue())); <span class="comment">// 当然，这里是全限定名；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】如果 gradle 设置了生成路由表，那就将 docSource 以 json 的形式输出；</span></span><br><span class="line">        <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">            docWriter.append(JSON.toJSONString(docSource, SerializerFeature.PrettyFormat));</span><br><span class="line">            docWriter.flush();</span><br><span class="line">            docWriter.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【8】动态生成 java 文件：</span></span><br><span class="line">        String providerMapFileName = NAME_OF_PROVIDER + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE, <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(providerMapFileName) <span class="comment">// 类名：ARouter$$Providers$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_IProviderGroup)) <span class="comment">// 实现 .IProviderGroup 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfProviderBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated provider map, name is "</span> + providerMapFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】动态生成 java 文件：</span></span><br><span class="line">        String rootFileName = NAME_OF_ROOT + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,  <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(rootFileName) <span class="comment">// 包名；ARouter$$Root$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(elementUtils.getTypeElement(ITROUTE_ROOT))) <span class="comment">// 实现 .IRouteRoot 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfRootBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated root, name is "</span> + rootFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程还是很简单清晰的，主要是代码生成过程用很多的占位符，为我们看源码产生了很多的阻碍；</p><ul><li>RouteProcessor 不仅会解析 @Route，还会解析 @AutoWired；</li><li>最终会生成三个 java 文件，具体的模版信息：</li></ul><h6 id="2-2-2-3-1-1-categories"><a href="#2-2-2-3-1-1-categories" class="headerlink" title="2.2.2.3.1.1 categories"></a>2.2.2.3.1.1 categories</h6><p>对跳转信息进行分类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(RouteMeta routeMete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2.2.3.1.2】校验路由跳转信息！</span></span><br><span class="line">    <span class="keyword">if</span> (routeVerify(routeMete)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Start categories, group = "</span> + routeMete.getGroup() + <span class="string">", path = "</span> + routeMete.getPath() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">//【1】将校验通过的跳转 RouteMeta 加入到 groupMap 中；</span></span><br><span class="line">        Set&lt;RouteMeta&gt; routeMetas = groupMap.get(routeMete.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(routeMetas)) &#123;</span><br><span class="line">            <span class="comment">//【2】如果是第一次添加，需要创建一个 Set&lt;RouteMeta&gt;，内部元素以 path 排序；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; routeMetaSet = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;RouteMeta&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(RouteMeta r1, RouteMeta r2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> r1.getPath().compareTo(r2.getPath());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                        logger.error(npe.getMessage());</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//【3】加入到集合中；</span></span><br><span class="line">            routeMetaSet.add(routeMete);</span><br><span class="line">            groupMap.put(routeMete.getGroup(), routeMetaSet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4】已经创建了 set，直接加入；</span></span><br><span class="line">            routeMetas.add(routeMete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.warning(<span class="string">"&gt;&gt;&gt; Route meta verify error, group is "</span> + routeMete.getGroup() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h6 id="2-2-2-3-1-2-routeVerify"><a href="#2-2-2-3-1-2-routeVerify" class="headerlink" title="2.2.2.3.1.2 routeVerify"></a>2.2.2.3.1.2 routeVerify</h6><p>校验路由跳转信息；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">routeVerify</span><span class="params">(RouteMeta meta)</span> </span>&#123;</span><br><span class="line">    String path = meta.getPath();</span><br><span class="line">    <span class="comment">//【1】path 必须要指定，并且以 "/" 开头；</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;   <span class="comment">// The path must be start with '/' and not empty!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果 Route 没有指定 group 属性，那么就以 path 的一级目录为</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(meta.getGroup())) &#123; <span class="comment">// Use default group(the first word in path)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.1】设置组 group</span></span><br><span class="line">            meta.setGroup(defaultGroup);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><h6 id="2-2-2-3-1-2-extractDocInfo"><a href="#2-2-2-3-1-2-extractDocInfo" class="headerlink" title="2.2.2.3.1.2 extractDocInfo"></a>2.2.2.3.1.2 extractDocInfo</h6><p>创建路由信息对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RouteDoc <span class="title">extractDocInfo</span><span class="params">(RouteMeta routeMeta)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】根据 RouteMeta 创建 RouteDoc 实例；</span></span><br><span class="line">    RouteDoc routeDoc = <span class="keyword">new</span> RouteDoc();</span><br><span class="line">    routeDoc.setGroup(routeMeta.getGroup());</span><br><span class="line">    routeDoc.setPath(routeMeta.getPath());</span><br><span class="line">    routeDoc.setDescription(routeMeta.getName());</span><br><span class="line">    routeDoc.setType(routeMeta.getType().name().toLowerCase());</span><br><span class="line">    routeDoc.setMark(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> routeDoc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-4-动态生成类"><a href="#2-2-5-4-动态生成类" class="headerlink" title="2.2.5.4 动态生成类"></a>2.2.5.4 动态生成类</h4><h5 id="2-2-5-4-1-模版信息"><a href="#2-2-5-4-1-模版信息" class="headerlink" title="2.2.5.4.1 模版信息"></a>2.2.5.4.1 模版信息</h5><p>我们来看看生成了哪几种模板类：</p><ul><li><code>ARouter$$Providers$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IProviderGroup，其实都可以猜到，用于添加属于同一组的 iprovider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$$</span>&#123;moduleName&#125; implements IProviderGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">      providers.put(<span class="string">"目标类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                     $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">    </span><br><span class="line">      providers.put(<span class="string">"父类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                                $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Group$$${groupName}.java</code></li></ul><p>这个模版类继承了 IRouteGroup，其实都可以猜到，用于添加属于同一组的所有被 @Route 注解的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$$</span>&#123;groupName&#125; implements IRouteGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;, <span class="keyword">null</span>, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Root$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IRouteRoot，最为 root，用于添加和管理 group 和对应的 <code>ARouter$$Group$$${moduleName}.java</code> 的映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$$</span>&#123;moduleName&#125; implements IRouteRoot &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put($&#123;groupName&#125;, ARouter$$Group$$$&#123;groupName&#125;.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过  <code>ARouter$$Root$$${groupName}.java</code> 知道该 module 一共包含多少个 group。每个组中的的元素，可以通过    <code>ARouter$$Group$$${moduleName}.java</code>  这个文档添加；</p><h5 id="2-2-5-4-2-举个栗子"><a href="#2-2-5-4-2-举个栗子" class="headerlink" title="2.2.5.4.2 举个栗子"></a>2.2.5.4.2 举个栗子</h5><p>我写了个 Demo 可以让大家更直观的看到模版对应的实际代码：</p><h6 id="2-2-5-4-2-1-实例代码"><a href="#2-2-5-4-2-1-实例代码" class="headerlink" title="2.2.5.4.2.1 实例代码"></a>2.2.5.4.2.1 实例代码</h6><p>下面是一个简单的 Demo：</p><ul><li><strong>MyActivity.java</strong></li></ul><p>MyActivity 的组是：<strong>coolqiActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiActivity/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MyIProvider.java</strong></li></ul><p>MyIProvider 的组是：<strong>coolqiProvider</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiProvider/MyIProvider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MySerializationService.java</strong></li></ul><p>MySerializationService 的组是：<strong>coolqiService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiService/MySerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是新建了一个 Module，名字叫：<strong>Coolqi</strong></p><h6 id="2-2-5-4-2-2-动态代码"><a href="#2-2-5-4-2-2-动态代码" class="headerlink" title="2.2.5.4.2.2 动态代码"></a>2.2.5.4.2.2 动态代码</h6><p>动态的代码如下所示：</p><ul><li><code>ARouter$$Group$$coolqiActivity.java</code>， <code>ARouter$$Group$$coolqiProvider.java</code>， <code>ARouter$$Group$$coolqiService.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyActivity;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyPathReplaceService;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyProvider;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.MainActivity;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiActivity</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiActivity/MyActivity"</span>, RouteMeta.build(RouteType.ACTIVITY, MyActivity.class, <span class="string">"/coolqiactivity/myactivity"</span>, <span class="string">"coolqiactivity"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiProvider</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiProvider/MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, <span class="string">"/coolqiprovider/myiprovider"</span>, <span class="string">"coolqiprovider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Providers$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MyIProvider;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MySerializationService;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Root$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><h3 id="2-2-3-AutowiredProcessor"><a href="#2-2-3-AutowiredProcessor" class="headerlink" title="2.2.3 AutowiredProcessor"></a>2.2.3 AutowiredProcessor</h3><p>核心解释器，用于处理 @Autowired 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-3-1-Field"><a href="#2-2-3-1-Field" class="headerlink" title="2.2.3.1 Field"></a>2.2.3.1 Field</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】key 表示属性所属的类，value 是一个 list 列表，保存这个类被 Autowired 修饰的所有元素；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName ARouterClass = ClassName.get(<span class="string">"com.alibaba.android.arouter.launcher"</span>, <span class="string">"ARouter"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName AndroidLog = ClassName.get(<span class="string">"android.util"</span>, <span class="string">"Log"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-Init"><a href="#2-2-3-2-Init" class="headerlink" title="2.2.3.2 Init"></a>2.2.3.2 Init</h4><p>init 方法很简单，没有太多代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; AutowiredProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-3-Process-处理-Autowired-注解"><a href="#2-2-3-3-Process-处理-Autowired-注解" class="headerlink" title="2.2.3.3 Process  - 处理 Autowired 注解"></a>2.2.3.3 Process  - 处理 Autowired 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(set)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found autowired field, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.3.3.1】对变量进行归类，并找到其所属的类；</span></span><br><span class="line">            categories(roundEnvironment.getElementsAnnotatedWith(Autowired.class));</span><br><span class="line">            <span class="comment">//【*2.2.3.3.2】动态生成 java 类！</span></span><br><span class="line">            generateHelper();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-3-1-categories"><a href="#2-2-3-3-1-categories" class="headerlink" title="2.2.3.3.1 categories"></a>2.2.3.3.1 categories</h5><p>对变量进行归类，并找到其所属的类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        <span class="comment">//【1】遍历所有被 @AutoWired 注解的元素；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【2】返回封装此元素（非严格意义上）的最里层元素，实际上就是其所属的类；</span></span><br><span class="line">            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line">            <span class="comment">//【3】如果此成员属性是 private 的，那就抛出异常！</span></span><br><span class="line">            <span class="keyword">if</span> (element.getModifiers().contains(Modifier.PRIVATE)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The inject fields CAN NOT BE 'private'!!! please check field ["</span></span><br><span class="line">                        + element.getSimpleName() + <span class="string">"] in class ["</span> + enclosingElement.getQualifiedName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】将成员属性 element 和所属类元素 enclosingElement 保存到 parentAndChild 中，分类完毕；</span></span><br><span class="line">            <span class="keyword">if</span> (parentAndChild.containsKey(enclosingElement 保存到 )) &#123;</span><br><span class="line">                parentAndChild.get(enclosingElement).add(element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;Element&gt; childs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                childs.add(element);</span><br><span class="line">                parentAndChild.put(enclosingElement, childs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"categories finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，private 的元素不能用 Autowired 修饰；</p><h5 id="2-2-3-3-2-generateHelper"><a href="#2-2-3-3-2-generateHelper" class="headerlink" title="2.2.3.3.2 generateHelper"></a>2.2.3.3.2 generateHelper</h5><p>动态生成 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 .ISyringe/.SerializationService 接口在编译时期的状态信息；</span></span><br><span class="line">    TypeElement type_ISyringe = elementUtils.getTypeElement(ISYRINGE);</span><br><span class="line">    TypeElement type_JsonService = elementUtils.getTypeElement(JSON_SERVICE);</span><br><span class="line">    <span class="comment">//【2】返回类型信息：类/接口</span></span><br><span class="line">    TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line">    TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();</span><br><span class="line">    TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();</span><br><span class="line">    TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】开始动态生成类：</span></span><br><span class="line">    <span class="comment">//【3.1】生成 inject 方法的参数：Object target</span></span><br><span class="line">    ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, <span class="string">"target"</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (MapUtils.isNotEmpty(parentAndChild)) &#123;</span><br><span class="line">        <span class="comment">// 遍历 parentAndChild 集合；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//【3.2】生成 inject 方法签名；</span></span><br><span class="line">            <span class="comment">//  @Override </span></span><br><span class="line">            <span class="comment">//  public void inject(Object target)</span></span><br><span class="line">            MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(METHOD_INJECT)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(objectParamSpec);</span><br><span class="line"></span><br><span class="line">            TypeElement parent = entry.getKey();</span><br><span class="line">            List&lt;Element&gt; childs = entry.getValue();</span><br><span class="line">            <span class="comment">//【3.3】获得所属类的全限定名，包名；</span></span><br><span class="line">            String qualifiedName = parent.getQualifiedName().toString();</span><br><span class="line">            String packageName = qualifiedName.substring(<span class="number">0</span>, qualifiedName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">//【3.4】获得所属类的类名，拼接 "$$ARouter$$Root$$Autowired" 作为动态生成类的类名；</span></span><br><span class="line">            String fileName = parent.getSimpleName() + NAME_OF_AUTOWIRED;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Start process "</span> + childs.size() + <span class="string">" field in "</span> + parent.getSimpleName() + <span class="string">" ... &lt;&lt;&lt;"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】创建生成 java 类 helper 对象：指定类名(fileName)，实现的接口(.ISyringe), 修饰符(public)</span></span><br><span class="line">            TypeSpec.Builder helper = TypeSpec.classBuilder(fileName)</span><br><span class="line">                    .addJavadoc(WARNING_TIPS)</span><br><span class="line">                    .addSuperinterface(ClassName.get(type_ISyringe))</span><br><span class="line">                    .addModifiers(PUBLIC);</span><br><span class="line">            <span class="comment">//【3.6】创建动态类的成员变量：</span></span><br><span class="line">            <span class="comment">//     private com.alibaba.android.arouter.facade.service.SerializationService serializationService;</span></span><br><span class="line">            FieldSpec jsonServiceField = FieldSpec.builder(TypeName.get(type_JsonService.asType()), </span><br><span class="line">                                                           <span class="string">"serializationService"</span>, Modifier.PRIVATE).build();</span><br><span class="line">            helper.addField(jsonServiceField);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】给 inject 增加方法体：</span></span><br><span class="line">            <span class="comment">//      serializationService = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">            <span class="comment">//                .navigation(com.alibaba.android.arouter.facade.service.SerializationService.class);</span></span><br><span class="line">            <span class="comment">//      parentClass substitute = (parentClass) target</span></span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"serializationService = $T.getInstance().navigation($T.class)"</span>, </span><br><span class="line">                                             ARouterClass, ClassName.get(type_JsonService));</span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"$T substitute = ($T)target"</span>, ClassName.get(parent), ClassName.get(parent));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.6】继续给 inject 增加方法体：（处理成员变量）</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : childs) &#123;</span><br><span class="line">                Autowired fieldConfig = element.getAnnotation(Autowired.class);</span><br><span class="line">                <span class="comment">//【3.6.1】获取变量的名称；</span></span><br><span class="line">                String fieldName = element.getSimpleName().toString();</span><br><span class="line">                <span class="comment">//【3.6.2】如果实现了 .IProvider 接口，针对于是否设置了 name 属性，进行 byType/ byName 分类处理；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(element.asType(), iProvider)) &#123;  <span class="comment">// It's provider</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">""</span>.equals(fieldConfig.name())) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.1】如果 Autowired.name 为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .navigation(变量类型的全限定名.class);</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = $T.getInstance().navigation($T.class)"</span>,</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.2】如果 Autowired.name 不为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = (变量类型的全限定名) com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .build(Autowired().name).navigation();</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = ($T)$T.getInstance().build($S).navigation()"</span>,</span><br><span class="line">                                ClassName.get(element.asType()),</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                fieldConfig.name()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【3.6.2.3】判断 Autowired 的 required 是否为 true，如果为 true，那就要禁止 null 的情况！</span></span><br><span class="line">                    <span class="comment">// 其实就是判断 substitute.变量 如果 null，抛出异常；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required()) &#123;</span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (substitute."</span> + fieldName + <span class="string">" == null)"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"throw new RuntimeException(\"The field '"</span> + fieldName + <span class="string">"' is null, in class '\" </span></span><br><span class="line"><span class="string">                                                 + $T.class.getName() + \"!\")"</span>, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.6.3】对于一般的可通过 intent 传递的变量，进入这里；</span></span><br><span class="line">                    String originalValue = <span class="string">"substitute."</span> + fieldName;</span><br><span class="line">                    <span class="comment">// 用于拼接成员变量的生成方式："substitute.变量名 = substitute."；</span></span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.1】对于实现了 serializable 接口的变量, 则是："substitute.变量名 = (变量类型的全限定名) substitute."</span></span><br><span class="line">                    String statement = <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + buildCastCode(element) + <span class="string">"substitute."</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> isActivity = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (types.isSubtype(parent.asType(), activityTm)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.1】如果是 activity，那么拼接代码：getIntent().</span></span><br><span class="line">                        isActivity = <span class="keyword">true</span>;</span><br><span class="line">                        statement += <span class="string">"getIntent()."</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.2】如果是 fragment，那么拼接代码：getArguments().</span></span><br><span class="line">                        statement += <span class="string">"getArguments()."</span>; </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The field ["</span> + fieldName + <span class="string">"] need autowired from intent, "</span> </span><br><span class="line">                                                         + <span class="string">"its parent must be activity or fragment!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.2】处理 getIntent()/getArguments() 的数据；</span></span><br><span class="line">                    <span class="comment">// typeUtils.typeExchange(element) 返回的是成员属性的枚举序号！</span></span><br><span class="line">                    statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity);</span><br><span class="line">                    <span class="keyword">if</span> (statement.startsWith(<span class="string">"serializationService."</span>)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.5.1】处理 serializationService（自定义对象）的情况：</span></span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null != serializationService)"</span>);</span><br><span class="line">                        <span class="comment">//【3.6.5.2】生成方法体："substitute.fieldName = " + statement;</span></span><br><span class="line">                        <span class="comment">// $S 被替换为变量名/Autowired.name，$T 被替换为变量类型的全限定名；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + statement,</span><br><span class="line">                                (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()),</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                        injectMethodBuilder.nextControlFlow(<span class="string">"else"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"You want automatic inject the field '"</span> + fieldName </span><br><span class="line">                                          + <span class="string">"' in class '$T' , then you should implement 'SerializationService'"</span></span><br><span class="line">                                          + <span class="string">" to support object auto inject!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//【3.6.5.3】处理其他的情况，如果 Autowired.name 不为 null，那么 $S 替换为变量名，否则为 Autowired.name</span></span><br><span class="line">                        <span class="comment">// 将方法体写入 inject；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(statement,</span><br><span class="line">                                       StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Autowired 的 required 为 true，且不是 private 的，非空判断；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required() &amp;&amp; !element.asType().getKind().isPrimitive()) &#123; </span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null == substitute."</span> + fieldName + <span class="string">")"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"The field '"</span> + fieldName </span><br><span class="line">                                + <span class="string">"' is null, in class '\" + $T.class.getName() + \"!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow(); <span class="comment">// 闭合方法体；</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            helper.addMethod(injectMethodBuilder.build()); <span class="comment">// 将方法 builder 加入到类 builder 中；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4】动态创建 java 文件；</span></span><br><span class="line">            JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; "</span> + parent.getSimpleName() + <span class="string">" has been processed, "</span> + fileName + <span class="string">" has been generated. &lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Autowired processor stop. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程我们分析完成了，我们先不关注动态生成的类的作用，在后面分析 arouter-api 模块的时候，就会知道这些类的作用是什么了。</p><h6 id="2-2-3-3-2-1-buildCastCode"><a href="#2-2-3-3-2-1-buildCastCode" class="headerlink" title="2.2.3.3.2.1 buildCastCode"></a>2.2.3.3.2.1 buildCastCode</h6><p>判断 element 的类型是否是 SERIALIZABLE 的，这里利用到了前面的枚举类 TypeKind 和工具类 typeUtils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildCastCode</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断 element 的类型是否是 SERIALIZABLE 的！</span></span><br><span class="line">    <span class="keyword">if</span> (typeUtils.typeExchange(element) == TypeKind.SERIALIZABLE.ordinal()) &#123;</span><br><span class="line">        <span class="comment">//【2】创建代码块：(变量类型的全限定名)</span></span><br><span class="line">        <span class="keyword">return</span> CodeBlock.builder().add(<span class="string">"($T) "</span>, ClassName.get(element.asType())).build().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个主要是针对于实现了 serializable 接口的变量，比如一些集合等等；</p><h6 id="2-2-3-3-2-2-buildStatement"><a href="#2-2-3-3-2-2-buildStatement" class="headerlink" title="2.2.3.3.2.2 buildStatement"></a>2.2.3.3.2.2 buildStatement</h6><p>处理 getIntent()/getArguments() 的数据：</p><ul><li>参数 originalValue 表示变量: “substitute.fieldName“，用于返回默认值；</li><li>参数 type 是成员属性对应的枚举序号：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildStatement</span><span class="params">(String originalValue, String statement, <span class="keyword">int</span> type, <span class="keyword">boolean</span> isActivity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (TypeKind.values()[type]) &#123;</span><br><span class="line">        <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">            <span class="comment">//【1】如果是 boolean，那么 activty 拼接：getBooleanExtra($S, 变量)，fragment 拼接：getBoolean($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getBooleanExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getBoolean($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BYTE:</span><br><span class="line">            <span class="comment">//【2】如果是 byte，那么 activty 拼接：getByteExtra($S, 变量)，fragment 拼接：getByte($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getByteExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getByte($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SHORT:</span><br><span class="line">            <span class="comment">//【3】如果是 short，那么 activty 拼接：getShortExtra($S, 变量)，fragment 拼接：getShort($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getShortExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getShort($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> INT:</span><br><span class="line">            <span class="comment">//【4】如果是 int，那么 activty 拼接：getIntExtra($S, 变量)，fragment 拼接：getInt($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getIntExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getInt($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LONG:</span><br><span class="line">            <span class="comment">//【5】如果是 long，那么 activty 拼接：getLongExtra($S, 变量)，fragment 拼接：getLong($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getLongExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getLong($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CHAR:</span><br><span class="line">            <span class="comment">//【6】如果是 char，那么 activty 拼接：getCharExtra($S, 变量)，fragment 拼接：getChar($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getCharExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getChar($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOAT:</span><br><span class="line">            <span class="comment">//【7】如果是 float，那么 activty 拼接：getFloatExtra($S, 变量)，fragment 拼接：getFloat($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getFloatExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getFloat($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOUBLE:</span><br><span class="line">            <span class="comment">//【8】如果是 double，那么 activty 拼接：getDoubleExtra($S, 变量)，fragment 拼接：getDouble($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getDoubleExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getDouble($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STRING:</span><br><span class="line">            <span class="comment">//【9】如果是 string，那么 activty 拼接：getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getString($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getExtras() == null ? "</span> + originalValue + <span class="string">" : substitute.getIntent().getExtras().getString($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getString($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SERIALIZABLE:</span><br><span class="line">            <span class="comment">//【10】如果是 serializable，那么 activty 拼接：getSerializableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getSerializable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getSerializableExtra($S)"</span>) : (<span class="string">"getSerializable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PARCELABLE:</span><br><span class="line">            <span class="comment">//【11】如果是 parcelable，那么 activty 拼接：getParcelableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getParcelable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getParcelableExtra($S)"</span>) : (<span class="string">"getParcelable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OBJECT:</span><br><span class="line">            <span class="comment">//【12】如果是 object，那么 activity 返回：serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            <span class="comment">// fragment 返回：serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            statement = <span class="string">"serializationService.parseObject(substitute."</span> + (isActivity ? <span class="string">"getIntent()."</span> : <span class="string">"getArguments()."</span>) + (isActivity ? <span class="string">"getStringExtra($S)"</span> : <span class="string">"getString($S)"</span>) + <span class="string">", new "</span> + TYPE_WRAPPER + <span class="string">"&lt;$T&gt;()&#123;&#125;.getType())"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，buildStatement 会处理 getIntent()/getArguments() 的数据，在 statement 基础上拼接/修改：</p><ul><li><strong>Activity</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getIntent().getBooleanExtra($S, 变量)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getIntent().getByteExtra($S, 变量)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getIntent().getShortExtra($S, 变量)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getIntent().getIntExtra($S, 变量)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getIntent().getLongExtra($S, 变量)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getIntent().getCharExtra($S, 变量)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getIntent().getFloatExtra($S, 变量)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getIntent().getDoubleExtra($S, 变量)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getIntent().getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getIntent().getSerializableExtra($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getIntent().getParcelableExtra($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><ul><li><strong>Fragment</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getArguments().getBoolean($S)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getArguments().getByte($S)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getArguments().getShort($S)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getArguments().getInt($S)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getArguments().getLong($S)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getArguments().getChar($S)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getArguments().getFloat($S)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getArguments().getDouble($S)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getArguments().getString($S)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getArguments().getSerializable($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getArguments().getParcelable($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><p>返回的 statement 会继续被处理！</p><h4 id="2-2-3-4-动态生成类"><a href="#2-2-3-4-动态生成类" class="headerlink" title="2.2.3.4 动态生成类"></a>2.2.3.4 动态生成类</h4><h5 id="2-2-3-4-1-模版信息"><a href="#2-2-3-4-1-模版信息" class="headerlink" title="2.2.3.4.1 模版信息"></a>2.2.3.4.1 模版信息</h5><p>我们来看一下，解析 AutoWired 后动态生成的 java 类的模版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 所属类所在的包;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> ... ... ...<span class="comment">// 省略掉其他的导入信息（变量类型等等）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 所属类的类名$$<span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">           serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">           所属类的全限定名 substitute = (所属类的全限定名) target;</span><br><span class="line">           <span class="comment">// 实现了 .IProvider 的成员变量；</span></span><br><span class="line">           substitute.变量 = ARouter.getInstance().navigation(变量类型的全限定名.class);</span><br><span class="line">           substitute.变量 = (变量类型) ARouter.getInstance().build(Autowired.name).navigation();</span><br><span class="line">           <span class="comment">// Autowired 的 required 为 true 才有； </span></span><br><span class="line">           <span class="keyword">if</span> (substitute.变量 == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(...);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// activity 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getIntent().getBooleanExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getByteExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getShortExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getIntExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getCharExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getFloatExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getDoubleExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getExtras() == <span class="keyword">null</span> ? substitute.变量 : substitute.getIntent().getExtras().getString(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getIntent().getSerializableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getParcelableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = serializationService.parseObject(substitute.getIntent().getStringExtra(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());   </span><br><span class="line">      </span><br><span class="line">           <span class="comment">// fragment 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getArguments().getBoolean(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getByte(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getShort(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getInt(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getLong(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getChar(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getFloat(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getDouble(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getString(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getArguments().getSerializable(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getParcelable(变量名/Autowired.name);</span><br><span class="line">           serializationService.parseObject(substitute.getArguments().getString(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实大家可以看的出来，inject 方法就是用来自动给成员变量赋值的；</p><h5 id="2-2-3-4-2-举个栗子"><a href="#2-2-3-4-2-举个栗子" class="headerlink" title="2.2.3.4.2 举个栗子"></a>2.2.3.4.2 举个栗子</h5><h6 id="2-2-3-4-2-1-实例代码"><a href="#2-2-3-4-2-1-实例代码" class="headerlink" title="2.2.3.4.2.1 实例代码"></a>2.2.3.4.2.1 实例代码</h6><p>以 activity 为例子；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/app/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-3-4-2-2-动态代码"><a href="#2-2-3-4-2-2-动态代码" class="headerlink" title="2.2.3.4.2.2 动态代码"></a>2.2.3.4.2.2 动态代码</h6><p>如下是动态代码了，不多说了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    MyActivity substitute = (MyActivity)target;</span><br><span class="line">    substitute.isOne = substitute.getIntent().getBooleanExtra(<span class="string">"isOneAuto"</span>, substitute.isOne);</span><br><span class="line">    substitute.isTwo = substitute.getIntent().getIntExtra(<span class="string">"isTwoAuto"</span>, substitute.isTwo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-InterceptorProcessor"><a href="#2-2-4-InterceptorProcessor" class="headerlink" title="2.2.4 InterceptorProcessor"></a>2.2.4 InterceptorProcessor</h3><p>核心解释器，用于处理 @Interceptor 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(ANNOTATION_TYPE_INTECEPTOR)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-4-1-Field"><a href="#2-2-4-1-Field" class="headerlink" title="2.2.4.1 Field"></a>2.2.4.1 Field</h4><p>成员变量有两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于保存 key: [priority 优先级] 和 value：[@Interceptor 修饰的元素 Element] 的映射关系，作为 cache； </span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, Element&gt; interceptors = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"><span class="comment">//【2】用于保存 [com.alibaba.android.arouter.facade.template.IInterceptor] 的类型信息</span></span><br><span class="line"><span class="keyword">private</span> TypeMirror iInterceptor = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-2-Init"><a href="#2-2-4-2-Init" class="headerlink" title="2.2.4.2 Init"></a>2.2.4.2 Init</h4><p>初始化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">    <span class="comment">//【1】Elements.getTypeElement 会返回 .IInterceptor 接口对应的 TypeElement</span></span><br><span class="line">    <span class="comment">// TypeElement.sType() 会返回 .IInterceptor 的类型信息：接口</span></span><br><span class="line">    iInterceptor = elementUtils.getTypeElement(Consts.IINTERCEPTOR).asType();</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; InterceptorProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Consts.IINTERCEPTOR 是 IInterceptor 接口的全限定名：</p><blockquote><p><strong>com.alibaba.android.arouter.facade.template.IInterceptor</strong></p></blockquote><h4 id="2-2-4-3-Process-处理-Interceptor-注解"><a href="#2-2-4-3-Process-处理-Interceptor-注解" class="headerlink" title="2.2.4.3 Process - 处理 Interceptor 注解"></a>2.2.4.3 Process - 处理 Interceptor 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】获得 @Interceptor 修饰的元素，这里会返回多个 Element 组成的 set！！</span></span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Interceptor.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1】解析元素：</span></span><br><span class="line">            parseInterceptors(elements);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 parseInterceptors 中；</p><h5 id="2-2-4-3-1-parseInterceptors"><a href="#2-2-4-3-1-parseInterceptors" class="headerlink" title="2.2.4.3.1 parseInterceptors"></a>2.2.4.3.1 parseInterceptors</h5><p>我们来看下如何解析元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseInterceptors</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found interceptors, size is "</span> + elements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】执行校验，并将元素缓存下来；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1.1】执行校验；</span></span><br><span class="line">            <span class="keyword">if</span> (verify(element)) &#123;</span><br><span class="line">                logger.info(<span class="string">"A interceptor verify over, its "</span> + element.asType());</span><br><span class="line">                <span class="comment">//【1.1】获得 Interceptor 对象的优先级，判断是否已经添加到 interceptors 哈希表中，已经添加，抛出异常；</span></span><br><span class="line">                Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">                Element lastInterceptor = interceptors.get(interceptor.priority());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != lastInterceptor) &#123; <span class="comment">// Added, throw exceptions</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            String.format(Locale.getDefault(), <span class="string">"More than one interceptors use same"</span> +  </span><br><span class="line">                                          <span class="string">"priority [%d], They are [%s] and [%s]."</span>,</span><br><span class="line">                                    interceptor.priority(),</span><br><span class="line">                                    lastInterceptor.getSimpleName(),</span><br><span class="line">                                    element.getSimpleName())</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】将 priority --&gt; element 关系缓存到 interceptors 中；</span></span><br><span class="line">                interceptors.put(interceptor.priority(), element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"A interceptor verify failed, its "</span> + element.asType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】返回 ".IInterceptor/.IInterceptorGroup" 接口对应的 TypeElement，保存了接口在编译时期的状态信息；</span></span><br><span class="line">        TypeElement type_ITollgate = elementUtils.getTypeElement(IINTERCEPTOR);</span><br><span class="line">        TypeElement type_ITollgateGroup = elementUtils.getTypeElement(IINTERCEPTOR_GROUP);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】生成 loadInto 方法的参数类型："Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt;""</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfTollgate = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(Integer.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_ITollgate))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】生成 loadInto 方法的方法参数：“Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors”</span></span><br><span class="line">        ParameterSpec tollgateParamSpec = ParameterSpec.builder(inputMapTypeOfTollgate, <span class="string">"interceptors"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】生成 loadInto 方法声明：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;...&#125;</span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfTollgateBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(tollgateParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】生成 loadInto 方法体:</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;</span></span><br><span class="line">        <span class="comment">//      interceptors.put(priority, $T.class);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != interceptors &amp;&amp; interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// for 循环中 interceptors 是 InterceptorProcessor 的成员变量哦！用来保存所有的 interceptor；</span></span><br><span class="line">            <span class="comment">// $T 最终会被替换为自定义的 interceptor 的类全限定名；</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Element&gt; entry : interceptors.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfTollgateBuilder.addStatement(<span class="string">"interceptors.put("</span> + entry.getKey() + <span class="string">", $T.class)"</span>,</span><br><span class="line">                                                             ClassName.get((TypeElement) entry.getValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】生成最终的类文件，指定了包名，类名，修饰符，实现的接口等等；</span></span><br><span class="line">        <span class="comment">// 常量均定义在 Consts 中，具体的生成的类见下面……</span></span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,</span><br><span class="line">                TypeSpec.classBuilder(NAME_OF_INTERCEPTOR + SEPARATOR + moduleName)</span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addMethod(loadIntoMethodOfTollgateBuilder.build())</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_ITollgateGroup))</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Interceptor group write over. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其是使用 javapoet 三方库来懂爱生成 .java 文件；</p><h6 id="2-2-4-3-1-1-verify"><a href="#2-2-4-3-1-1-verify" class="headerlink" title="2.2.4.3.1.1 verify"></a>2.2.4.3.1.1 verify</h6><p>校验元素和注解的正确性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得注解对象；</span></span><br><span class="line">    Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">    <span class="comment">//【2】元素 Element 必须被 Interceptor 注解修饰，</span></span><br><span class="line">    <span class="comment">// 并且其实现了 com.alibaba.android.arouter.facade.template.IInterceptor 接口；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != interceptor &amp;&amp; ((TypeElement) element).getInterfaces().contains(iInterceptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h4 id="2-2-4-4-动态生成类"><a href="#2-2-4-4-动态生成类" class="headerlink" title="2.2.4.4 动态生成类"></a>2.2.4.4 <strong>动态生成类</strong></h4><h5 id="2-2-4-4-1-模版信息"><a href="#2-2-4-4-1-模版信息" class="headerlink" title="2.2.4.4.1 模版信息"></a>2.2.4.4.1 模版信息</h5><p>最终生成的 java 文件名为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter$$Interceptors$$&#123;moduleName&#125;.java</span><br></pre></td></tr></table></figure><p>最终生成的模版类信息为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$$</span>&#123;moduleName&#125; implements IInterceptorGroup &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)</span></span>&#123;</span><br><span class="line">     interceptors.put($&#123;priority&#125;, $&#123;InterceptorName&#125;.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 Interceptor，ARouter 也是采取分组管理的方式：</p><ul><li>以 module 为组，组名为 <code>ARouter$$Interceptors$${moduleName}</code>；</li></ul><h5 id="2-2-4-4-2-举个栗子"><a href="#2-2-4-4-2-举个栗子" class="headerlink" title="2.2.4.4.2 举个栗子"></a>2.2.4.4.2 举个栗子</h5><h6 id="2-2-4-4-2-1-实例代码"><a href="#2-2-4-4-2-1-实例代码" class="headerlink" title="2.2.4.4.2.1 实例代码"></a>2.2.4.4.2.1 实例代码</h6><p>我们自定义了一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.Postcard;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.callback.InterceptorCallback;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-4-4-2-2-动态代码"><a href="#2-2-4-4-2-2-动态代码" class="headerlink" title="2.2.4.4.2.2 动态代码"></a>2.2.4.4.2.2 动态代码</h6><p>看看最终的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.TestInterceptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-utils"><a href="#2-3-utils" class="headerlink" title="2.3 utils"></a>2.3 utils</h2><p>该 package 下包含了一些工具类：</p><h3 id="2-3-1-Logger"><a href="#2-3-1-Logger" class="headerlink" title="2.3.1 Logger"></a>2.3.1 Logger</h3><p>用于打印 log 信息，调试使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Messager msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">(Messager messager)</span> </span>&#123;</span><br><span class="line">        msg = messager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(CharSequence info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(info)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.NOTE, Consts.PREFIX_OF_LOGGER + info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(CharSequence error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(error)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != error) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error.getMessage() + <span class="string">"]"</span> + </span><br><span class="line">                             <span class="string">"\n"</span> + formatStackTrace(error.getStackTrace()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(CharSequence warning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(warning)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.WARNING, Consts.PREFIX_OF_LOGGER + warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatStackTrace</span><span class="params">(StackTraceElement[] stackTrace)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement element : stackTrace) &#123;</span><br><span class="line">            sb.append(<span class="string">"    at "</span>).append(element.toString());</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法都比较简单，就不多说了。</p><h3 id="2-3-2-TypeUtils"><a href="#2-3-2-TypeUtils" class="headerlink" title="2.3.2 TypeUtils"></a>2.3.2 TypeUtils</h3><p>该类是一个类型工具类，主要用于获取元素的类型，并对类型做一个转换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Types types;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror parcelableType;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror serializableType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeUtils</span><span class="params">(Types types, Elements elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.types = types;</span><br><span class="line">        parcelableType = elements.getTypeElement(PARCELABLE).asType();</span><br><span class="line">        serializableType = elements.getTypeElement(SERIALIZABLE).asType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】可以看到，这个方法用于返回枚举常量的序数。这里的枚举常量是前面分析的 TypeKind.XXX</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">typeExchange</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        TypeMirror typeMirror = element.asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】对于 private，类型这里直接处理；</span></span><br><span class="line">        <span class="keyword">if</span> (typeMirror.getKind().isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> element.asType().getKind().ordinal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】对于 no private 的类型，返回变量的类型，通过 TypeKind 找到类型对应的序数（0，1，2...）</span></span><br><span class="line">        <span class="keyword">switch</span> (typeMirror.toString()) &#123;</span><br><span class="line">            <span class="keyword">case</span> BYTE:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BYTE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> SHORT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.SHORT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> INTEGER:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.INT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> LONG:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.LONG.ordinal();</span><br><span class="line">            <span class="keyword">case</span> FLOAT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.FLOAT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> DOUBEL:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.DOUBLE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BOOLEAN.ordinal();</span><br><span class="line">            <span class="keyword">case</span> CHAR:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.CHAR.ordinal();</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.STRING.ordinal();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//【3】处理 PARCELABLE，SERIALIZABLE 和 OBJECT 的情况；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(typeMirror, parcelableType)) &#123;</span><br><span class="line">                    <span class="comment">// PARCELABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.PARCELABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(typeMirror, serializableType)) &#123;</span><br><span class="line">                    <span class="comment">// SERIALIZABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.SERIALIZABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> TypeKind.OBJECT.ordinal();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TypeKind 前面有分析过，其是一个枚举类！</p><h3 id="2-3-3-Consts"><a href="#2-3-3-Consts" class="headerlink" title="2.3.3 Consts"></a>2.3.3 Consts</h3><p>用于保存一些核心的常量，下面来看看核心的常量。</p><h4 id="2-3-3-1-Log-打印相关"><a href="#2-3-3-1-Log-打印相关" class="headerlink" title="2.3.3.1 Log 打印相关"></a>2.3.3.1 Log 打印相关</h4><p>这些是和 log 打印相关的，比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>; <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = PROJECT + <span class="string">"::"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREFIX_OF_LOGGER = PROJECT + <span class="string">"::Compiler "</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_MODULE_NAME_TIPS = <span class="string">"These no module name, at 'build.gradle', like :\n"</span> +</span><br><span class="line">  <span class="string">"android &#123;\n"</span> +</span><br><span class="line">  <span class="string">"    defaultConfig &#123;\n"</span> +</span><br><span class="line">  <span class="string">"        ...\n"</span> +</span><br><span class="line">  <span class="string">"        javaCompileOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"            annotationProcessorOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"                arguments = [AROUTER_MODULE_NAME: project.getName()]\n"</span> +</span><br><span class="line">  <span class="string">"            &#125;\n"</span> +</span><br><span class="line">  <span class="string">"        &#125;\n"</span> +</span><br><span class="line">  <span class="string">"    &#125;\n"</span> +</span><br><span class="line">  <span class="string">"&#125;\n"</span>;</span><br></pre></td></tr></table></figure><p>不多说！</p><h4 id="2-3-3-2-Gradle-配置相关"><a href="#2-3-3-2-Gradle-配置相关" class="headerlink" title="2.3.3.2 Gradle 配置相关"></a>2.3.3.2 Gradle 配置相关</h4><p>这些是和 gradle 配置相关的机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MODULE_NAME = <span class="string">"AROUTER_MODULE_NAME"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_GENERATE_DOC_NAME = <span class="string">"AROUTER_GENERATE_DOC"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALUE_ENABLE = <span class="string">"enable"</span>;</span><br></pre></td></tr></table></figure><p>这个前面有说过，通过 gradle 配置；</p><h4 id="2-3-3-3-系统核心类"><a href="#2-3-3-3-系统核心类" class="headerlink" title="2.3.3.3 系统核心类"></a>2.3.3.3 系统核心类</h4><p>这些是和 Android 系统的一些核心类有关，也是 ARouter 能够注解处理的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVITY = <span class="string">"android.app.Activity"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT = <span class="string">"android.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT_V4 = <span class="string">"android.support.v4.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE = <span class="string">"android.app.Service"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARCELABLE = <span class="string">"android.os.Parcelable"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是系统类的全限定名；</p><h4 id="2-3-3-4-注解类型"><a href="#2-3-3-4-注解类型" class="headerlink" title="2.3.3.4 注解类型"></a>2.3.3.4 注解类型</h4><p>这些是和 ARouter 的注解相关的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;  <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_INTECEPTOR = FACADE_PACKAGE + <span class="string">".annotation.Interceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_ROUTE = FACADE_PACKAGE + <span class="string">".annotation.Route"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_AUTOWIRED = FACADE_PACKAGE + <span class="string">".annotation.Autowired"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是注解的全限定名；</p><h4 id="2-3-3-5-核心接口和类"><a href="#2-3-3-5-核心接口和类" class="headerlink" title="2.3.3.5 核心接口和类"></a>2.3.3.5 核心接口和类</h4><p>这些是和 ARouter 提供的一些核心接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于指定不同的 package 目录，属于 arouter-api 模块；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_PACKAGE = <span class="string">".template"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_PACKAGE = <span class="string">".service"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODEL_PACKAGE = <span class="string">".model"</span>;</span><br><span class="line"><span class="comment">//【2】下面是 arouter-api 模块的 template 包下的接口的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProvider"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProviderGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptorGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITROUTE_ROOT = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteRoot"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IROUTE_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISYRINGE = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".ISyringe"</span>;</span><br><span class="line"><span class="comment">//【3】下面是 arouter-api 模块的 service 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JSON_SERVICE = FACADE_PACKAGE + SERVICE_PACKAGE + <span class="string">".SerializationService"</span>;</span><br><span class="line"><span class="comment">//【4】下面是 arouter-annotation 模块的 model 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_WRAPPER = FACADE_PACKAGE + MODEL_PACKAGE + <span class="string">".TypeWrapper"</span>;</span><br></pre></td></tr></table></figure><p>同样的，也是一些全限定名；</p><p>ARouter 的拦截器需要实现 IInterceptor 接口，服务需要实现 IProvider 接口；</p><p>同时，由于 ARouter 是分组管理的，所以拦截器和服务又会属于不同的组：拦截器组需要实现 IInterceptorGroup 接口，服务组需要实现 IProviderGroup 组；</p><p>对于跳转来说，也会有分组，跳转组需要实现 IRouteGroup，而所有的跳转组属于一个 root：IRouteRoot</p><h4 id="2-3-3-6-动态生成类"><a href="#2-3-3-6-动态生成类" class="headerlink" title="2.3.3.6 动态生成类"></a>2.3.3.6 动态生成类</h4><p>下面 这些是和动态生成的类相关的：</p><ul><li>动态生成类的类名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_LOAD_INTO = <span class="string">"loadInto"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_INJECT = <span class="string">"inject"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_ROOT = PROJECT + SEPARATOR + <span class="string">"Root"</span>; <span class="comment">// ARouter$$Root</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_PROVIDER = PROJECT + SEPARATOR + <span class="string">"Providers"</span>; <span class="comment">// ARouter$$Providers</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_GROUP = PROJECT + SEPARATOR + <span class="string">"Group"</span> + SEPARATOR; <span class="comment">// ARouter$$Group$$</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_INTERCEPTOR = PROJECT + SEPARATOR + <span class="string">"Interceptors"</span>; <span class="comment">// ARouter$$Interceptors</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_AUTOWIRED = SEPARATOR + PROJECT + SEPARATOR + <span class="string">"Autowired"</span>; <span class="comment">//$$ARouter$$Root$$Autowired</span></span><br></pre></td></tr></table></figure><p>动态生成类的类名是通过 “$$” 将关键字拼接起来！</p><ul><li>动态生成类的所属包名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_FILE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_DOCS = <span class="string">"com.alibaba.android.arouter.docs"</span>;</span><br></pre></td></tr></table></figure><p>ARouter 会通过 javapoet 来动态生成对应的类，我们在分析 processor 的过程中就会看到。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>本篇文章分析了 arouter-compiler 模块的架构，arouter 内置的三种注解处理器，以及 arouter 注解的处理，动态类的生成。</p><p>好累～</p><p>后续上流程图吧～～对于个人收获也是很大的～～至少会自定义注解～～至少会动态生成代码了～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第二篇 - 注解定义 (arouter-annotation)</title>
    <link href="https://coolqi.top/2019/04/17/ARouter2-arouter-annotations/"/>
    <id>https://coolqi.top/2019/04/17/ARouter2-arouter-annotations/</id>
    <published>2019-04-17T12:46:25.000Z</published>
    <updated>2019-08-09T13:25:03.274Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-annotation 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看 arouter-annotation 的结构；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">src -&gt; main -&gt; java:</span><br><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____facade</span><br><span class="line">| | | | | |____enums</span><br><span class="line">| | | | | | |____RouteType.java</span><br><span class="line">| | | | | | |____TypeKind.java</span><br><span class="line">| | | | | |____annotation</span><br><span class="line">| | | | | | |____Interceptor.java</span><br><span class="line">| | | | | | |____Route.java</span><br><span class="line">| | | | | | |____Param.java</span><br><span class="line">| | | | | | |____Autowired.java</span><br><span class="line">| | | | | |____model</span><br><span class="line">| | | | | | |____TypeWrapper.java</span><br><span class="line">| | | | | | |____RouteMeta.java</span><br></pre></td></tr></table></figure><p>一共有三个 package：</p><ul><li>enums：包含了一些枚举类：</li><li>annotation：包含了一些注解；</li><li>model：包含了一些跳转所需的数据；</li></ul><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><h2 id="2-1-enums"><a href="#2-1-enums" class="headerlink" title="2.1 enums"></a>2.1 enums</h2><p>这个 package 包含了一些枚举类：</p><h3 id="2-1-1-RouteType"><a href="#2-1-1-RouteType" class="headerlink" title="2.1.1 RouteType"></a>2.1.1 RouteType</h3><p>枚举类，每一个成员都用于保存 id 和 className 的映射！</p><p>className 包括 android 的 Activity，Service，ContentProvider，Fragment，以及 ARouter 自己的 IProvider 类型！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RouteType &#123;</span><br><span class="line">    ACTIVITY(<span class="number">0</span>, <span class="string">"android.app.Activity"</span> ),</span><br><span class="line">    SERVICE(<span class="number">1</span>, <span class="string">"android.app.Service"</span>),</span><br><span class="line">    PROVIDER(<span class="number">2</span>, <span class="string">"com.alibaba.android.arouter.facade.template.IProvider"</span>),</span><br><span class="line">    CONTENT_PROVIDER(-<span class="number">1</span>, <span class="string">"android.app.ContentProvider"</span>),</span><br><span class="line">    BOARDCAST(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    METHOD(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    FRAGMENT(-<span class="number">1</span>, <span class="string">"android.app.Fragment"</span>),</span><br><span class="line">    UNKNOWN(-<span class="number">1</span>, <span class="string">"Unknown route type"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String className;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RouteType(<span class="keyword">int</span> id, String className) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RouteType <span class="title">parse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RouteType routeType : RouteType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (routeType.getClassName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> routeType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说。</p><p>它的作用是，我们可以通过 RouteType 判断判断 @Route 修饰的是类是那种类型；</p><h3 id="2-1-2-TypeKind"><a href="#2-1-2-TypeKind" class="headerlink" title="2.1.2 TypeKind"></a>2.1.2 TypeKind</h3><p>枚举类，每一个枚举成员都用于表示一个类型，包括基本类型，可序列化类型，字符串，对象等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeKind &#123;</span><br><span class="line">    <span class="comment">// Base type</span></span><br><span class="line">    BOOLEAN,</span><br><span class="line">    BYTE,</span><br><span class="line">    SHORT,</span><br><span class="line">    INT,</span><br><span class="line">    LONG,</span><br><span class="line">    CHAR,</span><br><span class="line">    FLOAT,</span><br><span class="line">    DOUBLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other type</span></span><br><span class="line">    STRING,</span><br><span class="line">    SERIALIZABLE,</span><br><span class="line">    PARCELABLE,</span><br><span class="line">    OBJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是在设置跳转数据的时候，通过 TypeKind 来判断数据的类型，然后调用 Postcard.withXXX 方法，设置不同的类型；</p><h2 id="2-2-annotation"><a href="#2-2-annotation" class="headerlink" title="2.2 annotation"></a>2.2 annotation</h2><p>这个 package 包含了一些注解类：</p><h3 id="2-2-1-Route"><a href="#2-2-1-Route" class="headerlink" title="2.2.1 Route"></a>2.2.1 Route</h3><p>用于注解 RouteType 指定的那些 type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Route &#123;</span><br><span class="line">    <span class="comment">//【1】用于指定路由跳转的路径，至少包含两级目录；</span></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//【2】用于指定路由跳转的分组，组名必须要使用相同的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">group</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【3】路由跳转的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【4】用于指定额外的数据，一共 32 位，每一位都是一个开关；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extras</span><span class="params">()</span> <span class="keyword">default</span> Integer.MIN_VALUE</span>;</span><br><span class="line">    <span class="comment">//【5】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h4 id="2-2-1-1-简单使用"><a href="#2-2-1-1-简单使用" class="headerlink" title="2.2.1.1 简单使用"></a>2.2.1.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Autowired"><a href="#2-2-2-Autowired" class="headerlink" title="2.2.2 Autowired"></a>2.2.2 Autowired</h3><p>用于修饰成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】变量（属性或服务）的名称</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】是否必须不为 null，如果为 true，应用会 crash 当其为 null 的情况；</span></span><br><span class="line">    <span class="comment">// private 类型的变量不会检查是否为 null；</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-简单使用"><a href="#2-2-2-1-简单使用" class="headerlink" title="2.2.2.1 简单使用"></a>2.2.2.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Interceptor"><a href="#2-2-3-Interceptor" class="headerlink" title="2.2.3 Interceptor"></a>2.2.3 Interceptor</h3><p>用于注解拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Interceptor &#123;</span><br><span class="line">    <span class="comment">//【1】拦截器的优先级，ARouter 会根据优先级执行拦截器；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】拦截器的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "Default"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-1-简单使用"><a href="#2-2-3-1-简单使用" class="headerlink" title="2.2.3.1 简单使用"></a>2.2.3.1 简单使用</h4><ul><li><strong>注解拦截器</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Param（DEPRECATED）"><a href="#2-2-4-Param（DEPRECATED）" class="headerlink" title="2.2.4 Param（DEPRECATED）"></a>2.2.4 Param（DEPRECATED）</h3><p>这个注解也是用来修饰成员变量的，但是不推荐使用了，请使用 Autowired！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">    <span class="comment">//【1】属性的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> "No desc."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为已经不在推荐使用，不多说了！</p><h2 id="2-3-model"><a href="#2-3-model" class="headerlink" title="2.3 model"></a>2.3 model</h2><p>这个 package 下主要保存了一些数据类，这些类保存了跳转需要的数据，已经目前对象的类型：</p><h3 id="2-3-1-RouteMeta"><a href="#2-3-1-RouteMeta" class="headerlink" title="2.3.1 RouteMeta"></a>2.3.1 RouteMeta</h3><p>用于保存路由跳转的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteMeta</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RouteType type;         <span class="comment">//【1】路由的类型，枚举类实例；</span></span><br><span class="line">    <span class="keyword">private</span> Element rawType;        <span class="comment">//【2】@Route 注解修饰的元素；</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; destination;   <span class="comment">//【3】路由跳转的目标类</span></span><br><span class="line">    <span class="keyword">private</span> String path;            <span class="comment">//【4】路由跳转的路径 path</span></span><br><span class="line">    <span class="keyword">private</span> String group;           <span class="comment">//【5】路由跳转的组 group</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority = -<span class="number">1</span>;      <span class="comment">//【6】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> extra;              <span class="comment">//【7】路由跳转携带的额外数据，23 位开关；</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; paramsType;  <span class="comment">//【8】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 属性类型对应的枚举序号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//【9】路由跳转的名称；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Autowired&gt; injectConfig;  <span class="comment">//【10】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 对应的 Autowired 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RouteMeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... ... ... ...<span class="comment">// 这里我们先省略内部方法，后续分析！ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以看到，RouteMeta 内部的数据很多事 compiler 解析 Route、Autowired 注解获得的！</p><h3 id="2-3-2-TypeWrapper"><a href="#2-3-2-TypeWrapper" class="headerlink" title="2.3.2 TypeWrapper"></a>2.3.2 TypeWrapper<t></t></h3><p>用于保存路由跳转的目标对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//【1】用于保存泛型 T；</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Type type;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TypeWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【2】调用 getClass() 获得当前类的 class 对象；</span></span><br><span class="line">        <span class="comment">//【3】然后再调用 getGenericSuperclass() 获得带有泛型的父类；</span></span><br><span class="line">        Type superClass = getClass().getGenericSuperclass();</span><br><span class="line">        <span class="comment">//【4】将 superClass 强转为 ParameterizedType 类型；</span></span><br><span class="line">        <span class="comment">//【5】getActualTypeArguments() 返回表示此类型实际类型参数的 Type 对象的数组；</span></span><br><span class="line">        <span class="comment">//【6】[0] 就是这个数组中第一个了，简而言之就是获得超类的泛型参数的实际类型</span></span><br><span class="line">        type = ((ParameterizedType) superClass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeWrapper<t> 是一个泛型类，泛型 T 表示目标对象类型！</t></p><p>后面我们再具体分析。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 中的 arouter-annotation 模块，其内部定义了 ARouter 必须的注解类，数据类，已经枚举类。</p><p>下篇文章将分析 arouter-compiler 模块，探寻在 App 编译期间，Gradle 事如何使用 arouter-compiler  对注解进行解析，和动态生成中间类的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第一篇 - 基本使用</title>
    <link href="https://coolqi.top/2019/04/13/ARouter1-baseUsages/"/>
    <id>https://coolqi.top/2019/04/13/ARouter1-baseUsages/</id>
    <published>2019-04-13T12:46:25.000Z</published>
    <updated>2019-08-01T13:32:27.796Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的原理。</p><p><strong>这篇文章</strong> 里面的一些内容来自：</p><blockquote><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/blob/master/README_CN.md</a></p></blockquote><p>官网对其使用已经总结的很好了，本篇博文在其基础上整理了下～～</p><h1 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1 简单介绍"></a>1 简单介绍</h1><p>对于 ARouter 大家只要做过模块化开发，那么就一定有所了解，ARouter 是阿里巴巴开源的一款路由框架，用于解决模块化开发中的模块依赖。</p><p><br></p><h2 id="2-1-主要模块"><a href="#2-1-主要模块" class="headerlink" title="2.1 主要模块"></a>2.1 主要模块</h2><p>官方提供了下面的四个插件模块：</p><ul><li>arouter-api：对外提供功能相关的 Api；</li><li>arouter-compiler：用于解析注解，生成代码；</li><li>arouter-register：用于 App 加固时的自动注册；</li><li>arouter-idea-plugin：Idea 插件，用于关联路径和目标类；</li></ul><p><br></p><h2 id="2-2-功能介绍"><a href="#2-2-功能介绍" class="headerlink" title="2.2 功能介绍"></a>2.2 功能介绍</h2><p>官方文档中讲到 ARouter 支持如下的功能：</p><ol><li><strong>支持直接解析标准 URL 进行跳转，并自动注入参数到目标页面中；</strong></li><li><strong>支持多模块工程使用；</strong></li><li><strong>支持添加多个拦截器，自定义拦截顺序；</strong></li><li><strong>支持依赖注入，可单独作为依赖注入框架使用；</strong></li><li><strong>支持 InstantRun；</strong></li><li><strong>支持 MultiDex；</strong> (Google 方案)</li><li>映射关系按组分类、多级管理，按需初始化；</li><li><strong>支持用户指定全局降级与局部降级策略</strong>；</li><li>页面、拦截器、服务等组件均自动注册到框架；</li><li><strong>支持多种方式配置转场动画</strong>；</li><li><strong>支持获取 Fragment</strong>；</li><li><strong>完全支持 Kotlin 以及混编</strong>；</li><li><strong>支持第三方 App 加固；</strong>(使用 arouter-register 实现自动注册)</li><li><strong>支持生成路由文档；</strong></li><li><strong>提供 IDE 插件便捷的关联路径和目标类；</strong></li></ol><p><br></p><ul><li>当然，我们后面通过源码分析；</li></ul><h1 id="2-ARouter-使用（官网整理）"><a href="#2-ARouter-使用（官网整理）" class="headerlink" title="2 ARouter 使用（官网整理）"></a>2 ARouter 使用（官网整理）</h1><p>以下内容来自对 <a href="https://github.com/alibaba/ARouter/edit/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/edit/master/README_CN.md</a> 的整理：</p><h2 id="2-1-Gradle-配置"><a href="#2-1-Gradle-配置" class="headerlink" title="2.1 Gradle 配置"></a>2.1 Gradle 配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [AROUTER_MODULE_NAME: project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.alibaba:arouter-api:x.x.x'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.alibaba:arouter-compiler:x.x.x'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个库均要使用最新版本，防止兼容问题发生；</p><h2 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h2><h3 id="2-2-1-添加注解"><a href="#2-2-1-添加注解" class="headerlink" title="2.2.1 添加注解"></a>2.2.1 添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourActivity</span> <span class="title">extend</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-初始化操作"><a href="#2-2-2-初始化操作" class="headerlink" title="2.2.2 初始化操作"></a>2.2.2 初始化操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class="line"><span class="keyword">if</span> (isDebug()) &#123;      </span><br><span class="line">    <span class="comment">//【2】打印日志</span></span><br><span class="line">    ARouter.openLog();</span><br><span class="line">    <span class="comment">//【3】开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！</span></span><br><span class="line">    <span class="comment">// 线上版本需要关闭,否则有安全风险)</span></span><br><span class="line">    ARouter.openDebug();</span><br><span class="line">&#125;</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在Application中初始化</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-路由跳转"><a href="#2-2-3-路由跳转" class="headerlink" title="2.2.3 路由跳转"></a>2.2.3 路由跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】应用内简单的跳转(通过URL跳转在'进阶用法'中)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】跳转并携带参数</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>)</span><br><span class="line">            .withLong(<span class="string">"key1"</span>, <span class="number">666L</span>)</span><br><span class="line">            .withString(<span class="string">"key3"</span>, <span class="string">"888"</span>)</span><br><span class="line">            .withObject(<span class="string">"key4"</span>, <span class="keyword">new</span> Test(<span class="string">"Jack"</span>, <span class="string">"Rose"</span>))</span><br><span class="line">            .navigation();</span><br></pre></td></tr></table></figure><h2 id="2-3-进阶使用"><a href="#2-3-进阶使用" class="headerlink" title="2.3 进阶使用"></a>2.3 进阶使用</h2><h3 id="2-3-1-通过-URL-跳转"><a href="#2-3-1-通过-URL-跳转" class="headerlink" title="2.3.1 通过 URL 跳转"></a>2.3.1 通过 URL 跳转</h3><p>我们除了可以使用 @Route 方式指定 path 来跳转，我们还可以通过 url 跳转：</p><p>当通过 URL 跳转时，URL 中不能传递 Parcelable 类型数据，通过 ARouter api 才能传递 Parcelable 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 Activity 用于监听 Schame 事件, </span></span><br><span class="line"><span class="comment">// 之后直接把 url 传递给 ARouter 即可；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明书 AndroidManifest.xml 中的配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-自动解析参数"><a href="#2-3-2-自动解析参数" class="headerlink" title="2.3.2 自动解析参数"></a>2.3.2 自动解析参数</h3><p>自动解析参数。</p><p>为每一个参数声明一个字段，并使用 @Autowired 标注，我们传递的值将会自动赋值给所属变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】通过 name 来映射 URL 中的不同参数</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"girl"</span>) </span><br><span class="line">    <span class="keyword">boolean</span> boy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】支持解析自定义对象，URL中使用 json 传递</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestObj obj;      </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】使用 withObject 传递 List 和 Map 的实现了</span></span><br><span class="line">    <span class="comment">// Serializable 接口的实现类(ArrayList/HashMap)</span></span><br><span class="line">    <span class="comment">// 的时候，接收该对象的地方不能标注具体的实现类类型</span></span><br><span class="line">    <span class="comment">// 应仅标注为 List 或 Map，否则会影响序列化中类型</span></span><br><span class="line">    <span class="comment">// 的判断, 其他类似情况需要同样处理        </span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestObj&gt; list;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Map&lt;String, List&lt;TestObj&gt;&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//【4】这里很关键，执行 ativity 的注入；</span></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要传递自定义对象（比如上面的 TestObj），新建一个类，实现 SerializationService, 并使用 @Route 注解标注！</p><p>这个类的作用是自定义对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是 JSON 序列化。</p><h3 id="2-3-3-跳转拦截器"><a href="#2-3-3-跳转拦截器" class="headerlink" title="2.3.3 跳转拦截器"></a>2.3.3 跳转拦截器</h3><p>拦截器用于拦截跳转过程，面向切面编程，比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查！</p><p>拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 处理完成，交还控制权</span></span><br><span class="line">        callback.onContinue(postcard); </span><br><span class="line">        <span class="comment">// 觉得有问题，中断路由流程，以上两种至少需要调用其中一种，否则不会继续路由</span></span><br><span class="line">        <span class="comment">// callback.onInterrupt(new RuntimeException("我觉得有点异常")); </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】拦截器的初始化，会在 sdk 初始化的时候调用该方法，仅会调用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说的初始化，就是 ARouter.init 方法；</p><h3 id="2-3-4-处理跳转结果"><a href="#2-3-4-处理跳转结果" class="headerlink" title="2.3.4 处理跳转结果"></a>2.3.4 处理跳转结果</h3><p>navigation 方法支持传入一个 <strong>NavigationCallback 回调</strong>，处理跳转结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-5-自定义全局降级策略"><a href="#2-3-5-自定义全局降级策略" class="headerlink" title="2.3.5 自定义全局降级策略"></a>2.3.5 自定义全局降级策略</h3><p>自定义类，实现 DegradeService 接口，并加上一个 Path 内容任意的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeServiceImpl</span> <span class="keyword">implements</span> <span class="title">DegradeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-为目标页面声明更多信息"><a href="#2-3-6-为目标页面声明更多信息" class="headerlink" title="2.3.6 为目标页面声明更多信息"></a>2.3.6 为目标页面声明更多信息</h3><p>@Route 还有一个 extras 属性，用于设置一些额外的属性，他是一个 int 值，有 32 位，可以配置 32 个开关；</p><p>我们可以通过设置指定的开关位，然后在拦截器中可以拿到这个标记进行业务逻辑判断！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>, extras = Consts.XXXX)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-7-依赖注入解耦"><a href="#2-3-7-依赖注入解耦" class="headerlink" title="2.3.7 依赖注入解耦"></a>2.3.7 依赖注入解耦</h3><p>ARouter 通过定义统一的访问接口来实现解耦 module 依赖；</p><p>核心接口：IProvider！</p><h4 id="2-3-7-1-暴露服务"><a href="#2-3-7-1-暴露服务" class="headerlink" title="2.3.7.1 暴露服务"></a>2.3.7.1 暴露服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明接口,其他组件通过接口来调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】module 间通信接口； </span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】实现接口，也是我们实际要暴漏的服务；</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/hello"</span>, name = <span class="string">"测试服务"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴漏的服务，需要通过 @Route 注解去修饰！</p><h4 id="2-3-7-2-访问服务"><a href="#2-3-7-2-访问服务" class="headerlink" title="2.3.7.2 访问服务"></a>2.3.7.2 访问服务</h4><p>当我们暴漏了服务后，需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】依赖注入的方式</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/yourservicegroupname/hello"</span>)</span><br><span class="line">    HelloService helloService2;</span><br><span class="line">    <span class="comment">//【2】依赖查找的方式</span></span><br><span class="line">    HelloService helloService3;</span><br><span class="line">    HelloService helloService4;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【3】依赖注入的方式；</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问服务的方式有下面两种方式：</p><ul><li><strong>使用依赖注入的方式发现服务</strong></li></ul><p>这也是推荐的方式，通过注解标注字段, 即可使用，无需主动获取</p><p>Autowired 注解标注 name 之后，将会使用 <strong>byName</strong> 的方式注入对应的字段；不设置 name 属性，会默认使用<strong>byType</strong> 的方式发现服务(当同一接口有多个实现的时候，必须使用 byName 的方式发现服务)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helloService.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService2.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>使用依赖查找的方式发现服务</strong></li></ul><p>使用依赖查找的方式发现服务，主动去发现服务并使用，也有 byName 和 byType 两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helloService3 = ARouter.getInstance().navigation(HelloService.class);</span><br><span class="line">helloService4 = (HelloService) ARouter.getInstance().build(<span class="string">"/yourservicegroupname/hello"</span>).navigation();</span><br><span class="line">helloService3.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService4.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-8-预处理服务"><a href="#2-3-8-预处理服务" class="headerlink" title="2.3.8 预处理服务"></a>2.3.8 预处理服务</h3><p>预处理服务和拦截器的概念很类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPretreatment</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-源码结构"><a href="#3-源码结构" class="headerlink" title="3 源码结构"></a>3 源码结构</h1><p>我们来看下 ARouter 的源码结构，下面列出关键的目录：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-ARouter-master.iml      </span><br><span class="line">|-README_CN.md            </span><br><span class="line">|-arouter-api             </span><br><span class="line">|-arouter-idea-plugin</span><br><span class="line">|-arouter-compiler</span><br><span class="line">|-arouter-annotation</span><br><span class="line">|-arouter-gradle-plugin</span><br><span class="line">|- ... ... ...</span><br></pre></td></tr></table></figure><p>这里分别解释下每个 module 的作用：</p><ul><li><strong>arouter-annotation</strong>：<ul><li>定义了 ARouter 使用到的所有的注解；</li></ul></li><li><strong>arouter-api</strong>：<ul><li><strong>对应 “arouter-api” 插件</strong>，对外提供功能相关的 Api；</li></ul></li><li><strong>arouter-compiler</strong>：<ul><li><strong>对应 “arouter-compiler” 插件</strong>，用于解析注解，生成代码；</li></ul></li><li><strong>arouter-gradle-plugin</strong>：<ul><li><strong>对应 “arouter-register” 插件</strong>，用于 App 加固时的自动注册；</li></ul></li><li><strong>arouter-idea-plugin</strong>：<ul><li><strong>对应 “arouter-idea-plugin” 插件</strong>，用于关联路径和目标类；</li></ul></li></ul><h2 id="3-1-Module-依赖关系"><a href="#3-1-Module-依赖关系" class="headerlink" title="3.1 Module 依赖关系"></a>3.1 Module 依赖关系</h2><p>下图我们来看看这几个 module 的依赖关系：</p><p><img src="leanote://file/getImage?fileId=5d3ec537ab6441734a002e54" alt=""></p><p>依赖关系还是很简单的，毕竟只有几个 module。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇博文整理了下 ARouter 官网的一些内容，总结了 ARouter 的基本使用和进阶使用，接下来，会通过分析每个 module 的源码，来进一步分析 ARouter 的原理！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的原理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章&lt;/strong&gt; 里面的一些内容来自：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter/blob/mas
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://coolqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://coolqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>Permission第 6 篇 - permission info 的获取和更新</title>
    <link href="https://coolqi.top/2018/11/08/Permission6-getAndUpdatePermissionInfo/"/>
    <id>https://coolqi.top/2018/11/08/Permission6-getAndUpdatePermissionInfo/</id>
    <published>2018-11-07T16:22:14.000Z</published>
    <updated>2018-11-20T15:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！</p><p>PackageManagerService 提供了很多个接口用于获取权限的信息！</p><h1 id="1-获取权限组相关的信息！"><a href="#1-获取权限组相关的信息！" class="headerlink" title="1 获取权限组相关的信息！"></a>1 获取权限组相关的信息！</h1><p>PackageManagerService.mPermissionGroups 保存了从所有 Application 中解析到的权限组信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="1-1-PackageManagerS-getAllPermissionGroups"><a href="#1-1-PackageManagerS-getAllPermissionGroups" class="headerlink" title="1.1 PackageManagerS.getAllPermissionGroups"></a>1.1 PackageManagerS.getAllPermissionGroups</h2><p>获得所有的权限组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">ParceledListSlice&lt;PermissionGroupInfo&gt; <span class="title">getAllPermissionGroups</span><span class="params">(<span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mPermissionGroups.size();</span><br><span class="line">        ArrayList&lt;PermissionGroupInfo&gt; out</span><br><span class="line">                = <span class="keyword">new</span> ArrayList&lt;PermissionGroupInfo&gt;(N);</span><br><span class="line">        <span class="keyword">for</span> (PackageParser.PermissionGroup pg : mPermissionGroups.values()) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">            out.add(PackageParser.generatePermissionGroupInfo(pg, flags));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-PackageManagerS-getPermissionGroupInfo"><a href="#1-2-PackageManagerS-getPermissionGroupInfo" class="headerlink" title="1.2 PackageManagerS.getPermissionGroupInfo"></a>1.2 PackageManagerS.getPermissionGroupInfo</h2><p>获得指定的权限组信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionGroupInfo <span class="title">getPermissionGroupInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">        <span class="keyword">return</span> PackageParser.generatePermissionGroupInfo(</span><br><span class="line">                mPermissionGroups.get(name), flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-PackageParser-generatePermissionGroupInfo"><a href="#1-2-1-PackageParser-generatePermissionGroupInfo" class="headerlink" title="1.2.1 PackageParser.generatePermissionGroupInfo"></a>1.2.1 PackageParser.generatePermissionGroupInfo</h3><p>该方法会新创建的 PermissionGroupInfo 对象，作为解析数据 PermissionGroup.PermissionGroupInfo 的拷贝！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static final PermissionGroupInfo generatePermissionGroupInfo(</span><br><span class="line">        PermissionGroup pg, int flags) &#123;</span><br><span class="line">    if (pg == null) return null;</span><br><span class="line">    // 如果 flags 没有设置 PackageManager.GET_META_DATA，直接返回 PermissionGroup.PermissionGroupInfo</span><br><span class="line">    if ((flags &amp; PackageManager.GET_META_DATA) == 0) &#123;</span><br><span class="line">        return pg.info;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果 flags 设置了 PackageManager.GET_META_DATA，我们会新建一个 PermissionGroupInfo 对象，</span><br><span class="line">    // 将解析的数据拷贝进来！</span><br><span class="line">    PermissionGroupInfo pgi = new PermissionGroupInfo(pg.info);</span><br><span class="line">    pgi.metaData = pg.metaData;</span><br><span class="line">    return pgi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-获取权限相关的信息！"><a href="#2-获取权限相关的信息！" class="headerlink" title="2 获取权限相关的信息！"></a>2 获取权限相关的信息！</h1><p>mSettings.mPermissions 保存了系统和应用定义的所有的权限信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="2-1-PackageParser-getPermissionInfo"><a href="#2-1-PackageParser-getPermissionInfo" class="headerlink" title="2.1 PackageParser.getPermissionInfo"></a>2.1 PackageParser.getPermissionInfo</h2><p>获得指定 name 的权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionInfo <span class="title">getPermissionInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> BasePermission p = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">            <span class="keyword">return</span> generatePermissionInfo(p, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-PackageParser-queryPermissionsByGroup"><a href="#2-2-PackageParser-queryPermissionsByGroup" class="headerlink" title="2.2 PackageParser.queryPermissionsByGroup"></a>2.2 PackageParser.queryPermissionsByGroup</h2><p>获得同一个 group 中的所有权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">ParceledListSlice&lt;PermissionInfo&gt; <span class="title">queryPermissionsByGroup</span><span class="params">(String group,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】校验权限组是否存在！</span></span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; !mPermissionGroups.containsKey(group)) &#123;</span><br><span class="line">            <span class="comment">// This is thrown as NameNotFoundException</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">        ArrayList&lt;PermissionInfo&gt; out = <span class="keyword">new</span> ArrayList&lt;PermissionInfo&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (BasePermission p : mSettings.mPermissions.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123; <span class="comment">// 如果参数 group 为 null，只收集无 group 的权限！</span></span><br><span class="line">                <span class="keyword">if</span> (p.perm == <span class="keyword">null</span> || p.perm.info.group == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    out.add(generatePermissionInfo(p, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.perm != <span class="keyword">null</span> &amp;&amp; group.equals(p.perm.info.group)) &#123;</span><br><span class="line">                    out.add(PackageParser.generatePermissionInfo(p.perm, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-1-PackageParser-generatePermissionInfo"><a href="#2-2-1-PackageParser-generatePermissionInfo" class="headerlink" title="2.2.1 PackageParser.generatePermissionInfo"></a>2.2.1 PackageParser.generatePermissionInfo</h3><p>该方法会新创建的 PermissionInfo 对象，拷贝 Permission 的数据！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PermissionInfo <span class="title">generatePermissionInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Permission p, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.GET_META_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p.info;</span><br><span class="line">    &#125;</span><br><span class="line">    PermissionInfo pi = <span class="keyword">new</span> PermissionInfo(p.info);</span><br><span class="line">    pi.metaData = p.metaData;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不需要 GET_META_DATA，那就直接返回解析得到的 PermissionInfo 对象！</p><h1 id="3-获取权限标志位的信息！"><a href="#3-获取权限标志位的信息！" class="headerlink" title="3 获取权限标志位的信息！"></a>3 获取权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来获得权限标志位组的信息！</p><p>PackageManagerService.mPackages 用于保存所有解析过的 Pacakge 信息！</p><p>mSettings.mPermissions 中保存了系统中所有的权限信息！</p><h2 id="3-1-PackageManagerService-getPermissionFlags"><a href="#3-1-PackageManagerService-getPermissionFlags" class="headerlink" title="3.1 PackageManagerService.getPermissionFlags"></a>3.1 PackageManagerService.getPermissionFlags</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果 packageName 不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果权限不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】获得该 package 对应的 PackageSettings 或者 SharedUserSetting 对象！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】获得权限的 flags</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">        <span class="keyword">return</span> permissionsState.getPermissionFlags(name, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h1 id="4-更新权限标志位的信息！"><a href="#4-更新权限标志位的信息！" class="headerlink" title="4 更新权限标志位的信息！"></a>4 更新权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来更新权限标志位的信息！</p><h2 id="4-1-PackageManagerService-updatePermissionFlags"><a href="#4-1-PackageManagerService-updatePermissionFlags" class="headerlink" title="4.1 PackageManagerService.updatePermissionFlags"></a>4.1 PackageManagerService.updatePermissionFlags</h2><p>该方法更新指定权限的 flags，flagMask 表示的是 flags 的位掩码，用来屏蔽某些位；flagValues 表示新的标志位值！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> flagMask,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果调用者不是 system uid，不能改变以下标志位，flagMask  和 flagValues 需去掉对应标志位：</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】如果该 package 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】如果权限 name 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown permission: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】如果该 package 没有安装记录，抛出异常！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5】获得该 package 的权限状态管理对象！</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】获得该应用程序的运行时权限状态信息，返回不为 null，说明其有运行时权限！</span></span><br><span class="line">        <span class="keyword">boolean</span> hadState = permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.1.1】更新该权限的标志位！</span></span><br><span class="line">        <span class="keyword">if</span> (permissionsState.updatePermissionFlags(bp, userId, flagMask, flagValues)) &#123;</span><br><span class="line">            <span class="comment">// 安装时权限和运行时权限保存在不同的目录下，所以要更新不同的文件</span></span><br><span class="line">            <span class="keyword">if</span> (permissionsState.getInstallPermissionState(name) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleWriteSettingsLocked(); <span class="comment">// 更新运行时权限！</span></span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span></span><br><span class="line">                    || hadState) &#123; <span class="comment">// 更新安装时权限！</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先会更新 flags，更新成功后，会根据权限的类型去，去更新对应的持久化文件！</p><h3 id="4-1-1-PermissionsState-updatePermissionFlags"><a href="#4-1-1-PermissionsState-updatePermissionFlags" class="headerlink" title="4.1.1 PermissionsState.updatePermissionFlags"></a>4.1.1 PermissionsState.updatePermissionFlags</h3><p>PermissionsState 用于管理 package 的权限状态!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlags</span><span class="params">(BasePermission permission, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line">    <span class="comment">//【1】如果 flagValues 和 flagMask 有一个不为 0，那就需要更新 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> mayChangeFlags = flagValues != <span class="number">0</span> || flagMask != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PermissionData permissionData = mPermissions.get(permission.name);</span><br><span class="line">    <span class="keyword">if</span> (permissionData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        permissionData = ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得旧的 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = permissionData.getFlags(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.1.1.1】调用 PermissionData.updatePermissionFlags 更新权限的标志位：</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updated = permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 flags 发生了更新，比较下，更新后是否需要再次 review！</span></span><br><span class="line">    <span class="keyword">if</span> (updated) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newFlags = permissionData.getFlags(userId); <span class="comment">// 获得新的 flags！</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line">            &#125;</span><br><span class="line">            mPermissionReviewRequired.put(userId, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired.delete(userId);</span><br><span class="line">                <span class="keyword">if</span> (mPermissionReviewRequired.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    mPermissionReviewRequired = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法很简单，无需多说，前面分析过了，这里就不多说了！！</p><h4 id="4-1-1-1-PermissionData-updateFlags"><a href="#4-1-1-1-PermissionData-updateFlags" class="headerlink" title="4.1.1.1 PermissionData.updateFlags"></a>4.1.1.1 PermissionData.updateFlags</h4><p>PermissionData 用于封装指定权限的状态信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateFlags</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInstallPermission()) &#123;</span><br><span class="line">        userId = UserHandle.USER_ALL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isCompatibleUserId(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】新的 newFlags 取 flagValues 和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="comment">// 就是说，新的 flags 要么是 0，要么只能取和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newFlags = flagValues &amp; flagMask;</span><br><span class="line"></span><br><span class="line">    PermissionState userState = mUserStates.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (userState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = userState.mFlags;</span><br><span class="line">        <span class="comment">//【2】最新的权限 flags 设置如下：</span></span><br><span class="line">        <span class="comment">// 先取 oldFlags 和 ~flagMask 相同的位值，然后加上 newFlags！</span></span><br><span class="line">        userState.mFlags = (userState.mFlags &amp; ~flagMask) | newFlags;</span><br><span class="line">        <span class="keyword">if</span> (userState.isDefault()) &#123;</span><br><span class="line">            mUserStates.remove(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userState.mFlags != oldFlags; <span class="comment">// 判断标志位是否变化！</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newFlags != <span class="number">0</span>) &#123;</span><br><span class="line">        userState = <span class="keyword">new</span> PermissionState(mPerm.name);</span><br><span class="line">        userState.mFlags = newFlags;</span><br><span class="line">        mUserStates.put(userId, userState);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，通过 flagValues &amp; flagMask 取其相同的位值为 newFlags！</p><p>设置最新的 flags 的时候，先是 oldFlags &amp; ~flagMask 取 oldFlags 和 ～flagMask 相同的位值，然后加上 newFlags！</p><h2 id="4-2-PackageManagerService-updatePermissionFlagsForAllApps"><a href="#4-2-PackageManagerService-updatePermissionFlagsForAllApps" class="headerlink" title="4.2 PackageManagerService.updatePermissionFlagsForAllApps"></a>4.2 PackageManagerService.updatePermissionFlagsForAllApps</h2><p>该方法更新指定所有权限的 flags！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlagsForAllApps</span><span class="params">(<span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果不是 system uid，不能修改 system fixed flags，从 flagMask 和 flagValues 中去掉该标志位！</span></span><br><span class="line">    <span class="comment">// 那么下面的调整中就不会涉及到 system fix 标志位！</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> packageCount = mPackages.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pkgIndex = <span class="number">0</span>; pkgIndex &lt; packageCount; pkgIndex++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package pkg = mPackages.valueAt(pkgIndex);</span><br><span class="line">            SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">            <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">            <span class="comment">//【*4.2.1】调用了 updatePermissionFlagsForAllPermissions 方法，更新 flags！</span></span><br><span class="line">            changed |= permissionsState.updatePermissionFlagsForAllPermissions(</span><br><span class="line">                    userId, flagMask, flagValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123; </span><br><span class="line">            <span class="comment">//【2】如果发生了改变，更新 rumtime-permissions.xml 文件！</span></span><br><span class="line">            mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions"><a href="#4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions" class="headerlink" title="4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions"></a>4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlagsForAllPermissions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permissionCount = mPermissions.size();</span><br><span class="line">    <span class="comment">//【*4.1.1.1】更新 PermissionsState 管理的所有权限的 flags！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissionCount; i++) &#123;</span><br><span class="line">        PermissionData permissionData = mPermissions.valueAt(i);</span><br><span class="line">        changed |= permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/h1&gt;&lt;p&gt;基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！&lt;/p&gt;
&lt;p&gt;Pac
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Permission权限管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Permission权限管理" scheme="https://coolqi.top/tags/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 12 篇 - 通过 adb 指令分析 enable/disable 过程</title>
    <link href="https://coolqi.top/2018/09/17/PMS12-enable_disableThroughAdb/"/>
    <id>https://coolqi.top/2018/09/17/PMS12-enable_disableThroughAdb/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2019-01-27T09:50:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本文来分析下 pms enable 相关的操作：</p><ul><li>adb shell pm enable</li><li>adb shell pm disable</li></ul><p>同样的，我们从 Pm 中看起！</p><h1 id="1-Pm"><a href="#1-Pm" class="headerlink" title="1 Pm"></a>1 Pm</h1><h2 id="1-1-run"><a href="#1-1-run" class="headerlink" title="1.1 run"></a>1.1 run</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validCommand = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    String op = args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"enable"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_ENABLED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable-user"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；**</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"disable-until-used"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"default-state"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用 runSetEnabledSetting 方法；</span></span><br><span class="line">        <span class="keyword">return</span> runSetEnabledSetting(PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，和 enable/disable 相关的 pm 指令有很多，但无疑最后调用的都是：runSetEnabledSetting，唯一的区别是参数 int state 不一样！</p><p>我们知道，在 AndroidManifest.xml 中，我们可以给 application，activity 等四大组件设置如下的属性，来设置其是否可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:enabled=<span class="string">"true|false"</span></span><br></pre></td></tr></table></figure><p>下面，我们来看下 state 的值：</p><ul><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_ENABLED</strong>：组件或应用程序已被明确启用，无论其清单中指定了什么，适用于 setApplicationEnabledSetting 和 setComponentEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED</strong>：组件或应用程序已被明确禁用，无论其清单中指定了什么，适用于 setApplicationEnabledSetting 和 setComponentEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER</strong>：应用程序已被明确禁用，无论其清单中指定了什么。因为这是由于用户的请求，所以如果需要，他们可以通过适当的系统 UI 重新启用它，只适用于 setApplicationEnabledSetting；</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED</strong>：</p></li><li><p><strong>PackageManager.COMPONENT_ENABLED_STATE_DEFAULT</strong>：组件或应用程序处于默认的 enable 状态，也就是我们在 AndroidManifest.xml 中设置的值！</p></li></ul><p>接下来，我们继续分析下流程：</p><h2 id="1-2-runSetEnabledSetting"><a href="#1-2-runSetEnabledSetting" class="headerlink" title="1.2 runSetEnabledSetting"></a>1.2 runSetEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runSetEnabledSetting</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_SYSTEM;</span><br><span class="line">    String option = nextOption();</span><br><span class="line">    <span class="comment">//【1】如果有指定 user，那么将 user id 保存到 userId 中；</span></span><br><span class="line">    <span class="keyword">if</span> (option != <span class="keyword">null</span> &amp;&amp; option.equals(<span class="string">"--user"</span>)) &#123;</span><br><span class="line">        String optionData = nextOptionData();</span><br><span class="line">        <span class="keyword">if</span> (optionData == <span class="keyword">null</span> || !isNumber(optionData)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Error: no USER_ID specified"</span>);</span><br><span class="line">            <span class="keyword">return</span> showUsage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userId = Integer.parseInt(optionData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得传入的包名参数；</span></span><br><span class="line">    String pkg = nextArg();</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Error: no package or component specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】尝试将其转为组件名；</span></span><br><span class="line">    ComponentName cn = ComponentName.unflattenFromString(pkg);</span><br><span class="line">    <span class="keyword">if</span> (cn == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.1】如果传入的参数指定的是包名，调用 setApplicationEnabledSetting 方法！</span></span><br><span class="line">            mPm.setApplicationEnabledSetting(pkg, state, <span class="number">0</span>, userId,</span><br><span class="line">                    <span class="string">"shell:"</span> + android.os.Process.myUid());</span><br><span class="line">            System.out.println(<span class="string">"Package "</span> + pkg + <span class="string">" new state: "</span></span><br><span class="line">                    + enabledSettingToString(</span><br><span class="line">                    mPm.getApplicationEnabledSetting(pkg, userId)));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.err.println(e.toString());</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.2】如果传入的参数指定的是组件名，调用 setComponentEnabledSetting 方法；</span></span><br><span class="line">            mPm.setComponentEnabledSetting(cn, state, <span class="number">0</span>, userId);</span><br><span class="line">            System.out.println(<span class="string">"Component "</span> + cn.toShortString() + <span class="string">" new state: "</span></span><br><span class="line">                    + enabledSettingToString(</span><br><span class="line">                    mPm.getComponentEnabledSetting(cn, userId)));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.err.println(e.toString());</span><br><span class="line">            System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面会进入 PackageManagerService 中去！</p><h1 id="2-PackageManagerService"><a href="#2-PackageManagerService" class="headerlink" title="2 PackageManagerService"></a>2 PackageManagerService</h1><h2 id="2-1-setApplicationEnabledSetting"><a href="#2-1-setApplicationEnabledSetting" class="headerlink" title="2.1 setApplicationEnabledSetting"></a>2.1 setApplicationEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEnabledSetting</span><span class="params">(String appPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> newState, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (callingPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callingPackage = Integer.toString(Binder.getCallingUid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3】设置 enable 状态</span></span><br><span class="line">    setEnabledSetting(appPackageName, <span class="keyword">null</span>, newState, flags, userId, callingPackage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-setComponentEnabledSetting"><a href="#2-2-setComponentEnabledSetting" class="headerlink" title="2.2 setComponentEnabledSetting"></a>2.2 setComponentEnabledSetting</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComponentEnabledSetting</span><span class="params">(ComponentName componentName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> newState, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//【*2.3】设置 enable 状态</span></span><br><span class="line">    setEnabledSetting(componentName.getPackageName(),</span><br><span class="line">            componentName.getClassName(), newState, flags, userId, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-setEnabledSetting-核心入口"><a href="#2-3-setEnabledSetting-核心入口" class="headerlink" title="2.3 setEnabledSetting - 核心入口"></a>2.3 setEnabledSetting - 核心入口</h2><p>可以看到，无论 application 环视 component，最后调用的都是该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEnabledSetting</span><span class="params">(<span class="keyword">final</span> String packageName, String className, <span class="keyword">int</span> newState,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> flags, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先是对 newState 的取值做检查！</span></span><br><span class="line">    <span class="keyword">if</span> (!(newState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_ENABLED</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">          || newState == COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid new component state: "</span></span><br><span class="line">                + newState);</span><br><span class="line">    &#125;</span><br><span class="line">    PackageSetting pkgSetting;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permission;</span><br><span class="line">    <span class="comment">//【2】校验权限，如果是 system uid 默认是授予；如果是其他 uid 检查下是否有 CHANGE_COMPONENT_ENABLED_STATE</span></span><br><span class="line">    <span class="comment">// 的权限；</span></span><br><span class="line">    <span class="keyword">if</span> (uid == Process.SYSTEM_UID) &#123;</span><br><span class="line">        permission = PackageManager.PERMISSION_GRANTED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        permission = mContext.checkCallingOrSelfPermission(</span><br><span class="line">                android.Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】检查是否有跨 user 的权限；</span></span><br><span class="line">    enforceCrossUserPermission(uid, userId,</span><br><span class="line">            <span class="keyword">false</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>, <span class="string">"set enabled"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> allowedByPermission = (permission == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">    <span class="keyword">boolean</span> sendNow = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isApp = (className == <span class="keyword">null</span>);</span><br><span class="line">    String componentName = isApp ? packageName : className;</span><br><span class="line">    <span class="keyword">int</span> packageUid = -<span class="number">1</span>;</span><br><span class="line">    ArrayList&lt;String&gt; components;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// writer</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【4】获得上一次的安装信息；</span></span><br><span class="line">        pkgSetting = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkgSetting == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Unknown component: "</span> + packageName + <span class="string">"/"</span> + className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】对于可以执行 enable/disable 的应用做限制，如果 calling uid 和要被 enable/disable 的应用不是同一个</span></span><br><span class="line">    <span class="comment">// ，那么，如果前面没有权限，不允许 enable/disable；如果该应用是受保护的，那么也不允许；</span></span><br><span class="line">    <span class="keyword">if</span> (!UserHandle.isSameApp(uid, pkgSetting.appId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allowedByPermission) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                    <span class="string">"Permission Denial: attempt to change component state from pid="</span></span><br><span class="line">                    + Binder.getCallingPid()</span><br><span class="line">                    + <span class="string">", uid="</span> + uid + <span class="string">", package uid="</span> + pkgSetting.appId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mProtectedPackages.isPackageStateProtected(userId, packageName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Cannot disable a protected package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】进一步处理！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (uid == Process.SHELL_UID) &#123;</span><br><span class="line">            <span class="comment">//【6.1】Shell 只能改变 application 的状态，在 ENABLED 和 DISABLED_USER 之间；</span></span><br><span class="line">            <span class="comment">// Shell 不能该 compnent 的状态；</span></span><br><span class="line">            <span class="keyword">int</span> oldState = pkgSetting.getEnabled(userId);</span><br><span class="line">            <span class="keyword">if</span> (className == <span class="keyword">null</span></span><br><span class="line">                &amp;&amp;</span><br><span class="line">                (oldState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">                 || oldState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                 || oldState == COMPONENT_ENABLED_STATE_ENABLED)</span><br><span class="line">                &amp;&amp;</span><br><span class="line">                (newState == COMPONENT_ENABLED_STATE_DISABLED_USER</span><br><span class="line">                 || newState == COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                 || newState == COMPONENT_ENABLED_STATE_ENABLED)) &#123;</span><br><span class="line">                <span class="comment">// ok</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(</span><br><span class="line">                        <span class="string">"Shell cannot change component state for "</span> + packageName + <span class="string">"/"</span></span><br><span class="line">                        + className + <span class="string">" to "</span> + newState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【6.2】开始设置 state 状态；</span></span><br><span class="line">        <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【6.2.1】设置的是 application/package 级别的 state；</span></span><br><span class="line">            <span class="keyword">if</span> (pkgSetting.getEnabled(userId) == newState) &#123;</span><br><span class="line">                <span class="comment">// 如果本次设置的状态和上一次的一样，不做任何处理</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【6.2.2】如果新的状态是 default 或者 enabled 那么我们不关注 callingPackage！</span></span><br><span class="line">            <span class="keyword">if</span> (newState == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT</span><br><span class="line">                || newState == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) &#123;</span><br><span class="line">                callingPackage = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*3.2】设置 state 状态；</span></span><br><span class="line">            pkgSetting.setEnabled(newState, userId, callingPackage);</span><br><span class="line">            <span class="comment">// pkgSetting.pkg.mSetEnabled = newState;</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【6.2.3】设置的是 component 级别的 state，前提是 component 的 className 是有效的；</span></span><br><span class="line">            PackageParser.Package pkg = pkgSetting.pkg;</span><br><span class="line">            <span class="keyword">if</span> (pkg == <span class="keyword">null</span> || !pkg.hasComponentClassName(className)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pkg != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        pkg.applicationInfo.targetSdkVersion &gt;=</span><br><span class="line">                                Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Component class "</span> + className</span><br><span class="line">                            + <span class="string">" does not exist in "</span> + packageName);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">"Failed setComponentEnabledSetting: component class "</span></span><br><span class="line">                            + className + <span class="string">" does not exist in "</span> + packageName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【6.2.4】处理新的 state 状态；</span></span><br><span class="line">            <span class="keyword">switch</span> (newState) &#123;</span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_ENABLED:</span><br><span class="line">                <span class="comment">//【*3.3】enable 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.enableComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_DISABLED:</span><br><span class="line">                <span class="comment">//【*3.4】disable 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.disableComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> COMPONENT_ENABLED_STATE_DEFAULT:</span><br><span class="line">                <span class="comment">//【*3.5】restore 组件；</span></span><br><span class="line">                <span class="keyword">if</span> (!pkgSetting.restoreComponentLPw(className, userId)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Slog.e(TAG, <span class="string">"Invalid new component state: "</span> + newState);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【7】保存偏好设置文件；</span></span><br><span class="line">        scheduleWritePackageRestrictionsLocked(userId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【8】准备发送 Package Changed 广播，mPendingBroadcasts 用于保存需要延迟发送的b包广播;</span></span><br><span class="line">        components = mPendingBroadcasts.get(userId, packageName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】判断该 userId 下是否是第一次添加 package；</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> newPackage = components == <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (newPackage) &#123;</span><br><span class="line">            components = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!components.contains(componentName)) &#123;</span><br><span class="line">            components.add(componentName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【10】如果没有设置 DONT_KILL_APP 标志，那么就会立即发送，sendNow 为 true；</span></span><br><span class="line">        <span class="keyword">if</span> ((flags&amp;PackageManager.DONT_KILL_APP) == <span class="number">0</span>) &#123;</span><br><span class="line">            sendNow = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【10.1】因为是立即发送，所以会将这次处理的 package 从中移除；</span></span><br><span class="line">            mPendingBroadcasts.remove(userId, packageName);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【10.2】如果该 userId 下是第一次添加 package，那么我们会把对应关系保存到 mPendingBroadcasts 中！</span></span><br><span class="line">            <span class="keyword">if</span> (newPackage) &#123;</span><br><span class="line">                mPendingBroadcasts.put(userId, packageName, components);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!mHandler.hasMessages(SEND_PENDING_BROADCAST)) &#123;</span><br><span class="line">                <span class="comment">// 延迟 10s 发送广播；</span></span><br><span class="line">                mHandler.sendEmptyMessageDelayed(SEND_PENDING_BROADCAST, BROADCAST_DELAY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【11】这里是立即发送广播 Intent.ACTION_PACKAGE_CHANGED !</span></span><br><span class="line">        <span class="comment">//（注意这里使用了 Binder 相关的方法，将发送广播的 uid 和 pid 变成了 system process）</span></span><br><span class="line">        <span class="keyword">if</span> (sendNow) &#123;</span><br><span class="line">            packageUid = UserHandle.getUid(userId, pkgSetting.appId);</span><br><span class="line">            <span class="comment">//【*2.3.1】发送 PACKAGE CHANGED 的广播；</span></span><br><span class="line">            sendPackageChangedBroadcast(packageName,</span><br><span class="line">                    (flags&amp;PackageManager.DONT_KILL_APP) != <span class="number">0</span>, components, packageUid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pms 内部有一个 PendingPackageBroadcasts 对象 mPendingBroadcasts，用于保存需要延迟返送的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PendingPackageBroadcasts mPendingBroadcasts = <span class="keyword">new</span> PendingPackageBroadcasts();</span><br></pre></td></tr></table></figure><p>我们来看下 PendingPackageBroadcasts 的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Set of pending broadcasts for aggregating enable/disable of components.</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPackageBroadcasts</span> </span>&#123;</span><br><span class="line">     <span class="comment">// for each user id, a map of &lt;package name -&gt; components within that package&gt;</span></span><br><span class="line">     <span class="keyword">final</span> SparseArray&lt;ArrayMap&lt;String, ArrayList&lt;String&gt;&gt;&gt; mUidMap;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">PendingPackageBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         mUidMap = <span class="keyword">new</span> SparseArray&lt;ArrayMap&lt;String, ArrayList&lt;String&gt;&gt;&gt;(<span class="number">2</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其内部有一个 mUidMap 的 SparseArray 数组，保存的数据结构满足如下关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userId --&gt;  ArrayMap&lt; packageName --&gt; ArrayList&lt;componentName&gt; &gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-sendPackageChangedBroadcast"><a href="#2-3-1-sendPackageChangedBroadcast" class="headerlink" title="2.3.1 sendPackageChangedBroadcast"></a>2.3.1 sendPackageChangedBroadcast</h3><p>发送 ACTION_PACKAGE_CHANGED 的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageChangedBroadcast</span><span class="params">(String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> killFlag, ArrayList&lt;String&gt; componentNames, <span class="keyword">int</span> packageUid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL)</span><br><span class="line">        Log.v(TAG, <span class="string">"Sending package changed: package="</span> + packageName + <span class="string">" components="</span></span><br><span class="line">                + componentNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】保存要发送的一些数据；</span></span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">4</span>);</span><br><span class="line">    extras.putString(Intent.EXTRA_CHANGED_COMPONENT_NAME, componentNames.get(<span class="number">0</span>));</span><br><span class="line">    String nameList[] = <span class="keyword">new</span> String[componentNames.size()];</span><br><span class="line">    componentNames.toArray(nameList);</span><br><span class="line">    extras.putStringArray(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST, nameList);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, killFlag);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, packageUid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If this is not reporting a change of the overall package, then only send it</span></span><br><span class="line">    <span class="comment">// to registered receivers.  We don't want to launch a swath of apps for every</span></span><br><span class="line">    <span class="comment">// little component state change.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> flags = !componentNames.contains(packageName)</span><br><span class="line">            ? Intent.FLAG_RECEIVER_REGISTERED_ONLY : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】发送广播，这个方法前面看过，这里就不多说了。</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_CHANGED,  packageName, extras, flags, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;UserHandle.getUserId(packageUid)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="3-PackageSetting"><a href="#3-PackageSetting" class="headerlink" title="3 PackageSetting"></a>3 PackageSetting</h1><p>下面的方法确切的讲是 PackageSetting 的父类 PackageSettingBase 父类的方法：</p><h2 id="3-1-getEnabled"><a href="#3-1-getEnabled" class="headerlink" title="3.1 getEnabled"></a>3.1 getEnabled</h2><p>获得指定 user 下的 app 的 enabled 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getEnabled</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1.1】读取指定 userId 下的 PackageUserState 实例：</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).enabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-readUserState"><a href="#3-1-1-readUserState" class="headerlink" title="3.1.1 readUserState"></a>3.1.1 readUserState</h3><p>PackageSetting 内部有一个 SparseArray 数组：userState</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-setEnabled"><a href="#3-2-setEnabled" class="headerlink" title="3.2 setEnabled"></a>3.2 setEnabled</h2><p>设置指定 user 下的 app 的 enabled 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> userId, String callingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.2.1】modify 和 read 的区别是，在没有对应的使用信息的情况下，modify 会创建新的使用信息对象；</span></span><br><span class="line">    PackageUserState st = modifyUserState(userId);</span><br><span class="line">    <span class="comment">//【1】设置状态的值，和修改该值的 pkg；</span></span><br><span class="line">    st.enabled = state;</span><br><span class="line">    st.lastDisableAppCaller = callingPackage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-modifyUserState"><a href="#3-2-1-modifyUserState" class="headerlink" title="3.2.1 modifyUserState"></a>3.2.1 modifyUserState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageUserState <span class="title">modifyUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state = <span class="keyword">new</span> PackageUserState();</span><br><span class="line">        userState.put(userId, state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-enableComponentLPw"><a href="#3-3-enableComponentLPw" class="headerlink" title="3.3 enableComponentLPw"></a>3.3 enableComponentLPw</h2><p>enable 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enableComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.disabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.disabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 enable 的组件从 disabledComponents 移动到 enabledComponents 中；</span></span><br><span class="line">    changed |= state.enabledComponents.add(componentClassName);</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-modifyUserStateComponents"><a href="#3-3-1-modifyUserStateComponents" class="headerlink" title="3.3.1 modifyUserStateComponents"></a>3.3.1 modifyUserStateComponents</h3><p>modify 方法是对 PackageUserState 做一个初始化，然后返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PackageUserState <span class="title">modifyUserStateComponents</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">boolean</span> disabled, <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.2.1】返回对应的 PackageUserState 对象；</span></span><br><span class="line">    PackageUserState state = modifyUserState(userId);</span><br><span class="line">    <span class="comment">//【1】如果是 disable 的话，disabledComponents 为 null，那么会初始化该 set；</span></span><br><span class="line">    <span class="keyword">if</span> (disabled &amp;&amp; state.disabledComponents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state.disabledComponents = <span class="keyword">new</span> ArraySet&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果是 enable 的话，enabledComponents 为 null，那么会初始化该 set；</span></span><br><span class="line">    <span class="keyword">if</span> (enabled &amp;&amp; state.enabledComponents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state.enabledComponents = <span class="keyword">new</span> ArraySet&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageUserState 内部有两个 ArraySet 集合:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArraySet&lt;String&gt; disabledComponents; <span class="comment">// 禁用的组件；</span></span><br><span class="line"><span class="keyword">public</span> ArraySet&lt;String&gt; enabledComponents; <span class="comment">// 可用的组件；</span></span><br></pre></td></tr></table></figure><p>… …</p><h2 id="3-3-disableComponentLPw"><a href="#3-3-disableComponentLPw" class="headerlink" title="3.3 disableComponentLPw"></a>3.3 disableComponentLPw</h2><p>disable 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">disableComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.enabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.enabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 enable 的组件从 enabledComponents 移动到 disabledComponents 中；</span></span><br><span class="line">    changed |= state.disabledComponents.add(componentClassName);</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-restoreComponentLPw"><a href="#3-4-restoreComponentLPw" class="headerlink" title="3.4 restoreComponentLPw"></a>3.4 restoreComponentLPw</h2><p>restore 指定组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">restoreComponentLPw</span><span class="params">(String componentClassName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】返回对应的 PackageUserState 实例；</span></span><br><span class="line">    PackageUserState state = modifyUserStateComponents(userId, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】changed 用来记录是否发生了变化；</span></span><br><span class="line">    <span class="keyword">boolean</span> changed = state.disabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.disabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】将要 restore 的组件从 enabledComponents 和 disabledComponents 中都移除；</span></span><br><span class="line">    changed |= state.enabledComponents != <span class="keyword">null</span></span><br><span class="line">            ? state.enabledComponents.remove(componentClassName) : <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-PackageHandler"><a href="#4-PackageHandler" class="headerlink" title="4 PackageHandler"></a>4 PackageHandler</h1><p>然后我们来看下 PackageHandler 对于消息的处理：</p><h2 id="4-1-doHandleMessage-SEND-PENDING-BROADCAST"><a href="#4-1-doHandleMessage-SEND-PENDING-BROADCAST" class="headerlink" title="4.1 doHandleMessage[SEND_PENDING_BROADCAST]"></a>4.1 doHandleMessage[SEND_PENDING_BROADCAST]</h2><p>然后我们来看下延迟发送广播的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SEND_PENDING_BROADCAST: &#123;</span><br><span class="line">    String packages[];</span><br><span class="line">    ArrayList&lt;String&gt; components[];</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> uids[];</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPendingBroadcasts == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = mPendingBroadcasts.size();</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Nothing to be done. Just return</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】保存所有 change 的 package；</span></span><br><span class="line">        packages = <span class="keyword">new</span> String[size];</span><br><span class="line">        <span class="comment">//【2】保存所有 change 的 component；</span></span><br><span class="line">        components = <span class="keyword">new</span> ArrayList[size];</span><br><span class="line">        <span class="comment">//【3】保存所有 change 的 package 的 uid；</span></span><br><span class="line">        uids = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// filling out the above arrays</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】遍历 mPendingBroadcasts 数组，处理每一项；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; mPendingBroadcasts.userIdCount(); n++) &#123;</span><br><span class="line">            <span class="keyword">int</span> packageUserId = mPendingBroadcasts.userIdAt(n);</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, ArrayList&lt;String&gt;&gt;&gt; it</span><br><span class="line">                    = mPendingBroadcasts.packagesForUserId(packageUserId)</span><br><span class="line">                            .entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4.1】将 mPendingBroadcasts 中的每一项保存到 packages[i]，components[i] 和 uids[i] 中！</span></span><br><span class="line">            <span class="keyword">while</span> (it.hasNext() &amp;&amp; i &lt; size) &#123;</span><br><span class="line">                Map.Entry&lt;String, ArrayList&lt;String&gt;&gt; ent = it.next();</span><br><span class="line">                packages[i] = ent.getKey();</span><br><span class="line">                components[i] = ent.getValue();</span><br><span class="line">                PackageSetting ps = mSettings.mPackages.get(ent.getKey());</span><br><span class="line">                uids[i] = (ps != <span class="keyword">null</span>)</span><br><span class="line">                        ? UserHandle.getUid(packageUserId, ps.appId)</span><br><span class="line">                        : -<span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        size = i;</span><br><span class="line">        mPendingBroadcasts.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3.1】发送 Package Changed 广播！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        sendPackageChangedBroadcast(packages[i], <span class="keyword">true</span>, components[i], uids[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-不同的-enable-状态的区别"><a href="#5-不同的-enable-状态的区别" class="headerlink" title="5 不同的 enable 状态的区别"></a>5 不同的 enable 状态的区别</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 11 篇 - 通过 adb 指令分析 hide/unhide 过程</title>
    <link href="https://coolqi.top/2018/09/11/PMS11-hide_unhideThroughAdb/"/>
    <id>https://coolqi.top/2018/09/11/PMS11-hide_unhideThroughAdb/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2019-01-27T09:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本文来分析下 pms hide 相关的操作：</p><ul><li>adb shell pm hide</li><li>adb shell pm unhide</li></ul><p>这个指令可以让一个 package 被 hide，无法被找到，同样的，我们从 Pm 中看起！</p><h1 id="1-Pm"><a href="#1-Pm" class="headerlink" title="1 Pm"></a>1 Pm</h1><h2 id="1-1-run"><a href="#1-1-run" class="headerlink" title="1.1 run"></a>1.1 run</h2><p>和其他方法的调用逻辑一样，进入 run 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> validCommand = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    mAm = IAccountManager.Stub.asInterface(ServiceManager.getService(Context.ACCOUNT_SERVICE));</span><br><span class="line">    mUm = IUserManager.Stub.asInterface(ServiceManager.getService(Context.USER_SERVICE));</span><br><span class="line">    mPm = IPackageManager.Stub.asInterface(ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPm == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInstaller = mPm.getPackageInstaller();</span><br><span class="line"></span><br><span class="line">    mArgs = args;</span><br><span class="line">    String op = args[<span class="number">0</span>];</span><br><span class="line">    mNextArg = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"hide"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用自身的另一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> runSetHiddenSetting(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"unhide"</span>.equals(op)) &#123;</span><br><span class="line">        <span class="comment">//【*1.2】调用自身的另一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> runSetHiddenSetting(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-runSetHiddenSetting"><a href="#1-2-runSetHiddenSetting" class="headerlink" title="1.2 runSetHiddenSetting"></a>1.2 runSetHiddenSetting</h2><p>我们来看下 runSetHiddenSetting 的调用逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runSetHiddenSetting</span><span class="params">(<span class="keyword">boolean</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】默认要 hide 所在的用户，为 USER_SYSTEM(0)</span></span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_SYSTEM;</span><br><span class="line">    String option = nextOption();</span><br><span class="line">    <span class="comment">//【2】如果通过 --user 指定了 hide 的 user。那就初始化为该 user！</span></span><br><span class="line">    <span class="keyword">if</span> (option != <span class="keyword">null</span> &amp;&amp; option.equals(<span class="string">"--user"</span>)) &#123;</span><br><span class="line">        String optionData = nextOptionData();</span><br><span class="line">        <span class="keyword">if</span> (optionData == <span class="keyword">null</span> || !isNumber(optionData)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Error: no USER_ID specified"</span>);</span><br><span class="line">            <span class="keyword">return</span> showUsage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userId = Integer.parseInt(optionData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】获得要 hide 的应用包名；</span></span><br><span class="line">    String pkg = nextArg();</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Error: no package or component specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> showUsage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*2.1】进入 pms！</span></span><br><span class="line">        mPm.setApplicationHiddenSettingAsUser(pkg, state, userId);</span><br><span class="line">        System.out.println(<span class="string">"Package "</span> + pkg + <span class="string">" new hidden state: "</span></span><br><span class="line">                + mPm.getApplicationHiddenSettingAsUser(pkg, userId));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        System.err.println(e.toString());</span><br><span class="line">        System.err.println(PM_NOT_RUNNING_ERR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="2-PackageManagerService"><a href="#2-PackageManagerService" class="headerlink" title="2 PackageManagerService"></a>2 PackageManagerService</h1><p>进入 pms 中去：</p><h2 id="2-1-setApplicationHiddenSettingAsUser"><a href="#2-1-setApplicationHiddenSettingAsUser" class="headerlink" title="2.1 setApplicationHiddenSettingAsUser"></a>2.1 setApplicationHiddenSettingAsUser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setApplicationHiddenSettingAsUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> hidden,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先校验下是否有 MANAGE_USERS 权限以及跨用户的权限；</span></span><br><span class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USERS, <span class="keyword">null</span>);</span><br><span class="line">    PackageSetting pkgSetting;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    enforceCrossUserPermission(uid, userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"setApplicationHiddenSetting for user "</span> + userId);</span><br><span class="line">    <span class="comment">//【2】如果要 hide 的 package 是 device admin，禁止 hide！</span></span><br><span class="line">    <span class="keyword">if</span> (hidden &amp;&amp; isPackageDeviceAdmin(packageName, userId)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Not hiding package "</span> + packageName + <span class="string">": has active device admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> callingId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> sendAdded = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> sendRemoved = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// writer</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="comment">//【3】获得该 package 对应的 PackageSetting 实例；</span></span><br><span class="line">            pkgSetting = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (pkgSetting == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】不允许 "android" 被 hide！</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"android"</span>.equals(packageName)) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Cannot hide package: android"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】只允许受保护的 package hide 他们自己！</span></span><br><span class="line">            <span class="keyword">if</span> (hidden &amp;&amp; !UserHandle.isSameApp(uid, pkgSetting.appId)</span><br><span class="line">                    &amp;&amp; mProtectedPackages.isPackageStateProtected(userId, packageName)) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Not hiding protected package: "</span> + packageName);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【6】处理 hide 状态，如果本次设置的和上一次的 hide 状态不一样，那么就需要更新 hide 状态！</span></span><br><span class="line">            <span class="comment">//【*2.1.1】获得该 package 在 userId 下的 PackageUserState 实例，然后获得其 hide 值；</span></span><br><span class="line">            <span class="keyword">if</span> (pkgSetting.getHidden(userId) != hidden) &#123;</span><br><span class="line">                <span class="comment">//【*2.1.2】设置该 package 在 userId 下的 hide 状态！</span></span><br><span class="line">                pkgSetting.setHidden(hidden, userId);</span><br><span class="line">                <span class="comment">//【6.1】更新偏好设置的本地化文件；</span></span><br><span class="line">                mSettings.writePackageRestrictionsLPr(userId);</span><br><span class="line">                <span class="comment">//【6.2】如果本次是 hide，sendRemoved 为 true；如果本次是 unhide，sendAdded 为 true；</span></span><br><span class="line">                <span class="keyword">if</span> (hidden) &#123;</span><br><span class="line">                    sendRemoved = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sendAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【7】如果是 unhide，进入这里；</span></span><br><span class="line">        <span class="keyword">if</span> (sendAdded) &#123;</span><br><span class="line">            <span class="comment">//【*2.2】发送 pkg add 的广播！</span></span><br><span class="line">            sendPackageAddedForUser(packageName, pkgSetting, userId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【8】如果是 hide，进入这里；</span></span><br><span class="line">        <span class="keyword">if</span> (sendRemoved) &#123;</span><br><span class="line">            <span class="comment">//【*2.3】杀掉 pkg 进程；</span></span><br><span class="line">            killApplication(packageName, UserHandle.getUid(userId, pkgSetting.appId),</span><br><span class="line">                    <span class="string">"hiding pkg"</span>);</span><br><span class="line">            <span class="comment">//【*2.4】发送 pkg add 的广播！</span></span><br><span class="line">            sendApplicationHiddenForUser(packageName, pkgSetting, userId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(callingId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-1-PackageSetting-getHidden"><a href="#2-1-1-PackageSetting-getHidden" class="headerlink" title="2.1.1 PackageSetting.getHidden"></a>2.1.1 PackageSetting.getHidden</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getHidden</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.1.1.1】获得对应的 PackageUserState.hide 值；</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h4 id="2-1-1-1-readUserState"><a href="#2-1-1-1-readUserState" class="headerlink" title="2.1.1.1 readUserState"></a>2.1.1.1 readUserState</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】在 userId 下的 PackageUserState 实例！ </span></span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-PackageSetting-setHidden"><a href="#2-1-2-PackageSetting-setHidden" class="headerlink" title="2.1.2 PackageSetting.setHidden"></a>2.1.2 PackageSetting.setHidden</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHidden</span><span class="params">(<span class="keyword">boolean</span> hidden, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.1.2.1】设置对应 userId 下的 PackageUserState 的 hide 状态；</span></span><br><span class="line">    modifyUserState(userId).hidden = hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-1-modifyUserState"><a href="#2-1-2-1-modifyUserState" class="headerlink" title="2.1.2.1 modifyUserState"></a>2.1.2.1 modifyUserState</h4><p>该方法其实很简单，不多说了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageUserState <span class="title">modifyUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">        state = <span class="keyword">new</span> PackageUserState();</span><br><span class="line">        userState.put(userId, state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-sendPackageAddedForUser-3"><a href="#2-2-sendPackageAddedForUser-3" class="headerlink" title="2.2 sendPackageAddedForUser[3]"></a>2.2 sendPackageAddedForUser[3]</h2><p>给指定的 user 发送 Intent.ACTION_PACKAGE_ADDED 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】是不是 sys app;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem = isSystemApp(pkgSetting) || isUpdatedSystemApp(pkgSetting);</span><br><span class="line">    <span class="comment">//【*2.2.1】调用另一方法：</span></span><br><span class="line">    sendPackageAddedForUser(packageName, isSystem, pkgSetting.appId, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续来看：</p><h3 id="2-2-1-sendPackageAddedForUser-4"><a href="#2-2-1-sendPackageAddedForUser-4" class="headerlink" title="2.2.1 sendPackageAddedForUser[4]"></a>2.2.1 sendPackageAddedForUser[4]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> isSystem,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> appId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//【1】获得 inhide 的应用所在的 user！</span></span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, UserHandle.getUid(userId, appId));</span><br><span class="line">    <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_ADDED 广播；</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</span><br><span class="line">            packageName, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】如果 unhide 的是 sys app，并且 userId 正在运行中；</span></span><br><span class="line">        <span class="keyword">if</span> (isSystem &amp;&amp; am.isUserRunning(userId, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// The just-installed/enabled app is bundled on the system, so presumed</span></span><br><span class="line">            <span class="comment">// to be able to run automatically without needing an explicit launch.</span></span><br><span class="line">            <span class="comment">// Send it a BOOT_COMPLETED if it would ordinarily have gotten one.</span></span><br><span class="line">            <span class="comment">//【2.1】这里会发送一个 boot completed 广播给这个 pkg，给它一个引导；</span></span><br><span class="line">            Intent bcIntent = <span class="keyword">new</span> Intent(Intent.ACTION_BOOT_COMPLETED)</span><br><span class="line">                    .addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)</span><br><span class="line">                    .setPackage(packageName);</span><br><span class="line">            am.broadcastIntent(<span class="keyword">null</span>, bcIntent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                    android.app.AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// shouldn't happen</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Unable to bootstrap installed package"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="2-2-1-1-sendPackageBroadcast"><a href="#2-2-1-1-sendPackageBroadcast" class="headerlink" title="2.2.1.1 sendPackageBroadcast"></a>2.2.1.1 sendPackageBroadcast</h4><p>发送广播的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sendPackageBroadcast</span><span class="params">(<span class="keyword">final</span> String action, <span class="keyword">final</span> String pkg, <span class="keyword">final</span> Bundle extras,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span> flags, <span class="keyword">final</span> String targetPkg, <span class="keyword">final</span> IIntentReceiver finishedReceiver,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> <span class="keyword">int</span>[] userIds)</span> </span>&#123;</span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">                <span class="keyword">if</span> (am == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">//【1】要发送的目标 userIds；</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span>[] resolvedUserIds;</span><br><span class="line">                <span class="keyword">if</span> (userIds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    resolvedUserIds = am.getRunningUserIds();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolvedUserIds = userIds;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2】开始发送广播：</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> id : resolvedUserIds) &#123;</span><br><span class="line">                    <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(action,</span><br><span class="line">                            pkg != <span class="keyword">null</span> ? Uri.fromParts(PACKAGE_SCHEME, pkg, <span class="keyword">null</span>) : <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        intent.putExtras(extras);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (targetPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        intent.setPackage(targetPkg);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.1】计算 package 在目标 userId 下的 uid！</span></span><br><span class="line">                    <span class="keyword">int</span> uid = intent.getIntExtra(Intent.EXTRA_UID, -<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (uid &gt; <span class="number">0</span> &amp;&amp; UserHandle.getUserId(uid) != id) &#123;</span><br><span class="line">                        uid = UserHandle.getUid(id, UserHandle.getAppId(uid));</span><br><span class="line">                        intent.putExtra(Intent.EXTRA_UID, uid);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.2】计算目标 userId！</span></span><br><span class="line">                    intent.putExtra(Intent.EXTRA_USER_HANDLE, id);</span><br><span class="line">                    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT | flags);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_BROADCASTS) &#123;</span><br><span class="line">                        RuntimeException here = <span class="keyword">new</span> RuntimeException(<span class="string">"here"</span>);</span><br><span class="line">                        here.fillInStackTrace();</span><br><span class="line">                        Slog.d(TAG, <span class="string">"Sending to user "</span> + id + <span class="string">": "</span></span><br><span class="line">                                + intent.toShortString(<span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">                                + <span class="string">" "</span> + intent.getExtras(), here);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【2.3】发送广播！</span></span><br><span class="line">                    am.broadcastIntent(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, finishedReceiver,</span><br><span class="line">                            <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, android.app.AppOpsManager.OP_NONE,</span><br><span class="line">                            <span class="keyword">null</span>, finishedReceiver != <span class="keyword">null</span>, <span class="keyword">false</span>, id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就不多说了！</p><h2 id="2-3-killApplication-3"><a href="#2-3-killApplication-3" class="headerlink" title="2.3 killApplication[3]"></a>2.3 killApplication[3]</h2><p>杀掉应用的进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">killApplication</span><span class="params">(String pkgName, <span class="keyword">int</span> appId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.3.1】调用另一个方法：</span></span><br><span class="line">    killApplication(pkgName, appId, UserHandle.USER_ALL, reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-1-killApplication-4"><a href="#2-3-1-killApplication-4" class="headerlink" title="2.3.1 killApplication[4]"></a>2.3.1 killApplication[4]</h3><p>另一个 4 参数的 kill：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">killApplication</span><span class="params">(String pkgName, <span class="keyword">int</span> appId, <span class="keyword">int</span> userId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Request the ActivityManager to kill the process(only for existing packages)</span></span><br><span class="line">    <span class="comment">// so that we do not end up in a confused state while the user is still using the older</span></span><br><span class="line">    <span class="comment">// version of the application while the new one gets installed.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> token = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (am != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】杀掉进程；</span></span><br><span class="line">                am.killApplication(pkgName, appId, userId, reason);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Binder.restoreCallingIdentity(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于 killApplication 杀进程的流程，这里就不再分析了！</p><h2 id="2-4-sendApplicationHiddenForUser"><a href="#2-4-sendApplicationHiddenForUser" class="headerlink" title="2.4 sendApplicationHiddenForUser"></a>2.4 sendApplicationHiddenForUser</h2><p>给指定的 user 发送 Intent.ACTION_PACKAGE_REMOVED 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendApplicationHiddenForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.4.1】创建了一个 PackageRemovedInfo！</span></span><br><span class="line">    <span class="keyword">final</span> PackageRemovedInfo info = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">    <span class="comment">//【1】初始化 removedPackage，removedUsers 和 uid；</span></span><br><span class="line">    info.removedPackage = packageName;</span><br><span class="line">    info.removedUsers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</span><br><span class="line">    info.uid = UserHandle.getUid(userId, pkgSetting.appId);</span><br><span class="line">    <span class="comment">//【*2.4.2】调用了 PackageRemovedInfo 的 sendPackageRemovedBroadcasts 方法！</span></span><br><span class="line">    info.sendPackageRemovedBroadcasts(<span class="keyword">true</span> <span class="comment">/*killApp*/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不多数说了！</p><h3 id="2-4-1-new-PackageRemovedInfo"><a href="#2-4-1-new-PackageRemovedInfo" class="headerlink" title="2.4.1 new PackageRemovedInfo"></a>2.4.1 new PackageRemovedInfo</h3><p>对于 PackageRemovedInfo 这里简单看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageRemovedInfo</span> </span>&#123;</span><br><span class="line">    String removedPackage;  <span class="comment">// 要 hide 的 packageName</span></span><br><span class="line">    <span class="keyword">int</span> uid = -<span class="number">1</span>;    <span class="comment">// 该 pkg 在指定的 userId 下的 uid</span></span><br><span class="line">    <span class="keyword">int</span> removedAppId = -<span class="number">1</span>;  <span class="comment">// 该 pkg 的 appId</span></span><br><span class="line">    <span class="keyword">int</span>[] origUsers;</span><br><span class="line">    <span class="keyword">int</span>[] removedUsers = <span class="keyword">null</span>; <span class="comment">// 要移除的 userId</span></span><br><span class="line">    <span class="keyword">boolean</span> isRemovedPackageSystemUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isUpdate;</span><br><span class="line">    <span class="keyword">boolean</span> dataRemoved; <span class="comment">// 是否移除数据，默认 false 不移除</span></span><br><span class="line">    <span class="keyword">boolean</span> removedForAllUsers; <span class="comment">// 是否从所有 user 下移除，默认 false；</span></span><br><span class="line">    <span class="comment">// Clean up resources deleted packages.</span></span><br><span class="line">    InstallArgs args = <span class="keyword">null</span>;</span><br><span class="line">    ArrayMap&lt;String, PackageRemovedInfo&gt; removedChildPackages;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; appearedChildPackages;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-PackageRemovedInfo-sendPackageRemovedBroadcasts"><a href="#2-4-2-PackageRemovedInfo-sendPackageRemovedBroadcasts" class="headerlink" title="2.4.2 PackageRemovedInfo.sendPackageRemovedBroadcasts"></a>2.4.2 PackageRemovedInfo.sendPackageRemovedBroadcasts</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcasts</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.4.2.1】调用另一个 send 方法；</span></span><br><span class="line">    sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">    <span class="comment">//【1】对于 child packages 执行相同的操作！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = removedChildPackages != <span class="keyword">null</span> ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">        <span class="comment">//【*2.4.2.1】调用另一个 send 方法；</span></span><br><span class="line">        childInfo.sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-1-PackageRemovedInfo-sendPackageRemovedBroadcastInternal"><a href="#2-4-1-1-PackageRemovedInfo-sendPackageRemovedBroadcastInternal" class="headerlink" title="2.4.1.1 PackageRemovedInfo.sendPackageRemovedBroadcastInternal"></a>2.4.1.1 PackageRemovedInfo.sendPackageRemovedBroadcastInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcastInternal</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建了一个 Bundle 对象；</span></span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//【2】保存要发送的数据：uid，data_moved，kill_app 等；</span></span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span>  ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DATA_REMOVED, dataRemoved);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, !killApp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】显然，对于 hide 是不进入这里的；</span></span><br><span class="line">    <span class="keyword">if</span> (isUpdate || isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REMOVED_FOR_ALL_USERS, removedForAllUsers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】准备发送广播：</span></span><br><span class="line">    <span class="keyword">if</span> (removedPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_REMOVED 广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED, removedPackage,</span><br><span class="line">                extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【4.1】如果需要移除数据，同时 remove 的是 sys app 自身，说明这是一个完全移除；</span></span><br><span class="line">        <span class="comment">//（hide 是不会进入这个逻辑的！）</span></span><br><span class="line">        <span class="keyword">if</span> (dataRemoved &amp;&amp; !isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">            <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_PACKAGE_FULLY_REMOVED 广播；</span></span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_FULLY_REMOVED,</span><br><span class="line">                    removedPackage, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】如果 removedAppId &gt;= 0，说明应用对应的 uid 被移除了！</span></span><br><span class="line">    <span class="comment">// 然而这里 app 被 hide 了，其 app id 依然存在，所以不会发送对应的广播；</span></span><br><span class="line">    <span class="comment">//（hide 是不会进入这个逻辑的！）</span></span><br><span class="line">    <span class="keyword">if</span> (removedAppId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【*2.2.1.1】发送 Intent.ACTION_UID_REMOVED 广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_UID_REMOVED, <span class="keyword">null</span>, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                removedUsers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 10 篇 - 通过 PackageInstaller 分析 uninstall 过程</title>
    <link href="https://coolqi.top/2018/09/10/PMS10-unisntallThroughPackageInstaller/"/>
    <id>https://coolqi.top/2018/09/10/PMS10-unisntallThroughPackageInstaller/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2019-01-27T09:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android7.1.1 分析 PackageManagerService 的架构设计！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>前面总结了通过 pm uninstall 的方式来卸载一个 apk，下面我们来分析下通过 PackageInstaller 来卸载应用！ </p><p>对于用户来说，他们最常用的卸载方式，就是进入应用管理，然后进入指定的应用界面，选择卸载应用：</p><p>我们通过 dumpsys window 指令，可以看到这个焦点弹窗：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sailfish:/ $ dumpsys window | grep mF</span><br><span class="line">    mLastSystemUiFlags=0x8008 mResettingSystemUiFlags=0x0 mForceClearedSystemUiFlags=0x0</span><br><span class="line">    mFocusedWindow=Window&#123;b272ea0 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity&#125;</span><br><span class="line">    mFocusedApp=Token&#123;b7d3821 ActivityRecord&#123;53e1688 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity t55&#125;&#125;</span><br><span class="line">    mForceStatusBar=false mForceStatusBarFromKeyguard=false</span><br><span class="line">             mFillsParent=false mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=-1</span><br><span class="line">             mFillsParent=true mOrientation=5</span><br><span class="line">             mFillsParent=true mOrientation=1</span><br><span class="line">    mPolicyVisibility=false mPolicyVisibilityAfterAnim=false mAppOpVisibility=true parentHidden=false mPermanentlyHidden=false mHiddenWhileSuspended=false mForceHideNonSystemOverlayWindow=false</span><br><span class="line">  mFocusedApp=AppWindowToken&#123;5f12446 token=Token&#123;b7d3821 ActivityRecord&#123;53e1688 u0 com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity t55&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个看起来像弹窗的界面，实际上是一个 Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.google.android.packageinstaller/com.android.packageinstaller.UninstallerActivity</span><br></pre></td></tr></table></figure><p>也就是说，拉起了 packageInstaller 去进行卸载操作，当我们点击卸载后，会触发如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uninstallPkg</span><span class="params">(String packageName, <span class="keyword">boolean</span> allUsers, <span class="keyword">boolean</span> andDisable)</span> </span>&#123;</span><br><span class="line">stopListeningToPackageRemove();</span><br><span class="line"><span class="comment">// Create new intent to launch Uninstaller activity</span></span><br><span class="line"><span class="comment">//【1】创建了一个 Uri，封装 packageName 的信息，然后通过 Intent 启动 UninstallerActivity！</span></span><br><span class="line">Uri packageUri = Uri.parse(<span class="string">"package:"</span> + packageName);</span><br><span class="line">Intent uninstallIntent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE, packageUri);</span><br><span class="line">uninstallIntent.putExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, allUsers);</span><br><span class="line"></span><br><span class="line">mMetricsFeatureProvider.action(</span><br><span class="line">mActivity, MetricsProto.MetricsEvent.ACTION_SETTINGS_UNINSTALL_APP);</span><br><span class="line">mFragment.startActivityForResult(uninstallIntent, mRequestUninstall);</span><br><span class="line">mDisableAfterUninstall = andDisable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们继续分析：</p><h1 id="1-UninstallerActivity"><a href="#1-UninstallerActivity" class="headerlink" title="1 UninstallerActivity"></a>1 UninstallerActivity</h1><h2 id="1-1-onCreate"><a href="#1-1-onCreate" class="headerlink" title="1.1 onCreate"></a>1.1 onCreate</h2><p>当我们点击了卸载时，会拉起 PackageInstaller 的 UninstallerActivity 界面：</p><p>卸载时，传入的 Uri 的格式如下：</p><ul><li><code>package://&lt;packageName&gt;#&lt;className&gt;</code>，className 是额外的参数，如果被指定，表示用户要卸载的具体的 activity；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">      <span class="comment">//【1】获得启动的 intent，以及其传递的 Uri！</span></span><br><span class="line">      <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line">      <span class="keyword">final</span> Uri packageUri = intent.getData();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【2】packageUri 不能为 null；</span></span><br><span class="line">      <span class="keyword">if</span> (packageUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"No package URI in intent"</span>);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//【3】包名也不能为 null；</span></span><br><span class="line">      mPackageName = packageUri.getEncodedSchemeSpecificPart();</span><br><span class="line">      <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Invalid package name in URI: "</span> + packageUri);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//【4】获得 pms 代理对象；</span></span><br><span class="line">      <span class="keyword">final</span> IPackageManager pm = IPackageManager.Stub.asInterface(</span><br><span class="line">              ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【*1.1.1】创建一个 DialogInfo 对象，保存安装和显示相关的信息；</span></span><br><span class="line">      mDialogInfo = <span class="keyword">new</span> DialogInfo();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【5】获得卸载时，指定的用户 user，如果没有指定，默认是当前用户；</span></span><br><span class="line">      mDialogInfo.user = intent.getParcelableExtra(Intent.EXTRA_USER);</span><br><span class="line">      <span class="keyword">if</span> (mDialogInfo.user == <span class="keyword">null</span>) &#123;</span><br><span class="line">          mDialogInfo.user = android.os.Process.myUserHandle();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【6】判断是否是从所有 user 下卸载；同时，获得卸载的回调 IBinder 对象；</span></span><br><span class="line">      mDialogInfo.allUsers = intent.getBooleanExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, <span class="keyword">false</span>);</span><br><span class="line">      mDialogInfo.callback = intent.getIBinderExtra(PackageInstaller.EXTRA_CALLBACK);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【7】获得要卸载的应用信息；</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          mDialogInfo.appInfo = pm.getApplicationInfo(mPackageName,</span><br><span class="line">                  PackageManager.GET_UNINSTALLED_PACKAGES, mDialogInfo.user.getIdentifier());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Unable to get packageName. Package manager is dead?"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//【8】应用信息不能为 null</span></span><br><span class="line">      <span class="keyword">if</span> (mDialogInfo.appInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Invalid packageName: "</span> + mPackageName);</span><br><span class="line">          showAppNotFound();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The class name may have been specified (e.g. when deleting an app from all apps)</span></span><br><span class="line">      <span class="comment">//【9】如果指定了 actiivity，那么要获得该 activity 的信息对象；</span></span><br><span class="line">      <span class="keyword">final</span> String className = packageUri.getFragment();</span><br><span class="line">      <span class="keyword">if</span> (className != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              mDialogInfo.activityInfo = pm.getActivityInfo(</span><br><span class="line">                      <span class="keyword">new</span> ComponentName(mPackageName, className), <span class="number">0</span>,</span><br><span class="line">                      mDialogInfo.user.getIdentifier());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">              Log.e(TAG, <span class="string">"Unable to get className. Package manager is dead?"</span>);</span><br><span class="line">              <span class="comment">// Continue as the ActivityInfo isn't critical.</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//【*1.2】继续下一步的处理！</span></span><br><span class="line">      showConfirmationDialog();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-1-new-DialogInfo"><a href="#1-1-1-new-DialogInfo" class="headerlink" title="1.1.1 new DialogInfo"></a>1.1.1 new DialogInfo</h3><p>这里创建了一个 DialogInfo 对象，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogInfo</span> </span>&#123;</span><br><span class="line">    ApplicationInfo appInfo;</span><br><span class="line">    ActivityInfo activityInfo;</span><br><span class="line">    <span class="keyword">boolean</span> allUsers;</span><br><span class="line">    UserHandle user;</span><br><span class="line">    IBinder callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-showConfirmationDialog"><a href="#1-2-showConfirmationDialog" class="headerlink" title="1.2 showConfirmationDialog"></a>1.2 showConfirmationDialog</h2><p>继续下一步的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showConfirmationDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*1.2.1】这里是切换到了一个 fragment 来显示信息；</span></span><br><span class="line">    <span class="comment">//【*2】这里会进入到 UninstallAlertDialogFragment 界面中；</span></span><br><span class="line">    showDialogFragment(<span class="keyword">new</span> UninstallAlertDialogFragment());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-showDialogFragment"><a href="#1-2-1-showDialogFragment" class="headerlink" title="1.2.1 showDialogFragment"></a>1.2.1 showDialogFragment</h3><p>切换显示 Fragment：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialogFragment</span><span class="params">(DialogFragment fragment)</span> </span>&#123;</span><br><span class="line">    FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class="line">    Fragment prev = getFragmentManager().findFragmentByTag(<span class="string">"dialog"</span>);</span><br><span class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ft.remove(prev);</span><br><span class="line">    &#125;</span><br><span class="line">    fragment.show(ft, <span class="string">"dialog"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-startUninstallProgress"><a href="#1-3-startUninstallProgress" class="headerlink" title="1.3 startUninstallProgress"></a>1.3 startUninstallProgress</h2><p>开始卸载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startUninstallProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建 Intent，传递参数：</span></span><br><span class="line">    Intent newIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    <span class="comment">//【2】要卸载的目标 user！</span></span><br><span class="line">    newIntent.putExtra(Intent.EXTRA_USER, mDialogInfo.user);</span><br><span class="line">    <span class="comment">//【3】是否从所有用户下下载；</span></span><br><span class="line">    newIntent.putExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, mDialogInfo.allUsers);</span><br><span class="line">    <span class="comment">//【4】卸载回调</span></span><br><span class="line">    newIntent.putExtra(PackageInstaller.EXTRA_CALLBACK, mDialogInfo.callback);</span><br><span class="line">    <span class="comment">//【5】要卸载的 app info</span></span><br><span class="line">    newIntent.putExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO, mDialogInfo.appInfo);</span><br><span class="line">    <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        newIntent.putExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">true</span>);</span><br><span class="line">        newIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);</span><br><span class="line">    &#125;</span><br><span class="line">    newIntent.setClass(<span class="keyword">this</span>, UninstallAppProgress.class);</span><br><span class="line">    <span class="comment">//【*3.1】进入 UninstallAppProgress 界面；   </span></span><br><span class="line">    startActivity(newIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 UninstallAppProgress activity，进入卸载状态！</p><h1 id="2-UninstallAlertDialogFragment"><a href="#2-UninstallAlertDialogFragment" class="headerlink" title="2 UninstallAlertDialogFragment"></a>2 UninstallAlertDialogFragment</h1><p>UninstallAlertDialogFragment 是 DialogFragment 的子类，实现了 DialogInterface.OnClickListener 接口。</p><p>我们去他的 onCreateDialog 方法中看看：</p><h2 id="2-1-onCreateDialog"><a href="#2-1-onCreateDialog" class="headerlink" title="2.1 onCreateDialog"></a>2.1 onCreateDialog</h2><p>该方法会创建一个 Dialog：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageManager pm = getActivity().getPackageManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*1.1】获得前面创建的 DialogInfo 实例</span></span><br><span class="line">    <span class="keyword">final</span> DialogInfo dialogInfo = ((UninstallerActivity) getActivity()).mDialogInfo;</span><br><span class="line">    <span class="keyword">final</span> CharSequence appLabel = dialogInfo.appInfo.loadLabel(pm);</span><br><span class="line"></span><br><span class="line">    AlertDialog.Builder dialogBuilder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">    StringBuilder messageBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果指定了 activity，那么同时 Activity label 不同于 App label</span></span><br><span class="line">    <span class="comment">// 这里就要显示的通知用户要卸载的 activity 属于该 app！</span></span><br><span class="line">    <span class="keyword">if</span> (dialogInfo.activityInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> CharSequence activityLabel = dialogInfo.activityInfo.loadLabel(pm);</span><br><span class="line">        <span class="keyword">if</span> (!activityLabel.equals(appLabel)) &#123;</span><br><span class="line">            <span class="comment">// uninstall_activity_text：属于以下应用：</span></span><br><span class="line">            messageBuilder.append(</span><br><span class="line">                    getString(R.string.uninstall_activity_text, activityLabel));</span><br><span class="line">            messageBuilder.append(<span class="string">" "</span>).append(appLabel).append(<span class="string">".\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断下要卸载的应用是不是安装在 data 分区的 sys app 的更新；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isUpdate =</span><br><span class="line">            ((dialogInfo.appInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>);</span><br><span class="line">    UserManager userManager = UserManager.get(getActivity());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isUpdate) &#123;</span><br><span class="line">        <span class="comment">//【3】如果卸载是安装在 data 分区的 sys app 的更新，那么要根据系统是否是 single user </span></span><br><span class="line">        <span class="comment">// 提示不同的信息！</span></span><br><span class="line">        <span class="keyword">if</span> (isSingleUser(userManager)) &#123;</span><br><span class="line">            <span class="comment">//【*2.1.1】isSingleUser 判断是否是 single user！</span></span><br><span class="line">            <span class="comment">// 提示："要将此应用替换为出厂版本吗？这样会移除所有数据。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_update_text));</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 提示："要将此应用替换为出厂版本吗？这样会移除所有数据，并会影响此设备的所有用户</span></span><br><span class="line">            <span class="comment">//（包括已设置工作资料的用户）。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_update_text_multiuser));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【4】如果卸载是安装在 data 分区的 user app，那么同样的，要根据系统是否是 single user</span></span><br><span class="line">        <span class="comment">// 以及卸载的 allUsers 参数来做不同的显示！</span></span><br><span class="line">        <span class="keyword">if</span> (dialogInfo.allUsers &amp;&amp; !isSingleUser(userManager)) &#123;</span><br><span class="line">            <span class="comment">//【4.1】如果是要从所有用户下卸载，同时系统不是 single user 的，那么</span></span><br><span class="line">            <span class="comment">// 提示："是否要为所有用户卸载此应用？系统将为设备上的所有用户删除此应用及其数据。"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_application_text_all_users));</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dialogInfo.user.equals(android.os.Process.myUserHandle())) &#123;</span><br><span class="line">            <span class="comment">//【4.2】如果指定了要卸载的用户 user，同时该用户不是当前用户 user！</span></span><br><span class="line">            <span class="comment">// 提示："您要为用户 user 卸载此应用吗？"</span></span><br><span class="line">            UserInfo userInfo = userManager.getUserInfo(dialogInfo.user.getIdentifier());</span><br><span class="line">            messageBuilder.append(</span><br><span class="line">                    getString(R.string.uninstall_application_text_user, userInfo.name));</span><br><span class="line">                    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4.3】其他情况，提示："要卸载此应用吗？"</span></span><br><span class="line">            messageBuilder.append(getString(R.string.uninstall_application_text));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】创建一个 Dialog 并返回！</span></span><br><span class="line">    dialogBuilder.setTitle(appLabel);</span><br><span class="line">    dialogBuilder.setIcon(dialogInfo.appInfo.loadIcon(pm));</span><br><span class="line">    dialogBuilder.setPositiveButton(android.R.string.ok, <span class="keyword">this</span>);</span><br><span class="line">    dialogBuilder.setNegativeButton(android.R.string.cancel, <span class="keyword">this</span>);</span><br><span class="line">    dialogBuilder.setMessage(messageBuilder.toString());</span><br><span class="line">    <span class="keyword">return</span> dialogBuilder.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程很简单，不多说了！</p><h3 id="2-1-1-isSingleUser"><a href="#2-1-1-isSingleUser" class="headerlink" title="2.1.1 isSingleUser"></a>2.1.1 isSingleUser</h3><p>判断系统是否是单用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSingleUser</span><span class="params">(UserManager userManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userCount = userManager.getUserCount();</span><br><span class="line">    <span class="keyword">return</span> userCount == <span class="number">1</span></span><br><span class="line">            || (UserManager.isSplitSystemUser() &amp;&amp; userCount == <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-onClick"><a href="#2-2-onClick" class="headerlink" title="2.2 onClick"></a>2.2 onClick</h2><p>卸载的关键触发是在 UninstallAlertDialogFragment 的点击事件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (which == Dialog.BUTTON_POSITIVE) &#123;</span><br><span class="line">        <span class="comment">//【*1.3】开始卸载！</span></span><br><span class="line">        ((UninstallerActivity) getActivity()).startUninstallProgress();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ((UninstallerActivity) getActivity()).dispatchAborted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h1 id="3-UninstallAppProgress"><a href="#3-UninstallAppProgress" class="headerlink" title="3 UninstallAppProgress"></a>3 UninstallAppProgress</h1><h2 id="3-1-onCreate"><a href="#3-1-onCreate" class="headerlink" title="3.1 onCreate"></a>3.1 onCreate</h2><p>下面是卸载界面的 onCreate 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">//【1】获得启动的 Intent；</span></span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    <span class="comment">//【2】获得要卸载的 app info</span></span><br><span class="line">    mAppInfo = intent.getParcelableExtra(PackageUtil.INTENT_ATTR_APPLICATION_INFO);</span><br><span class="line">    <span class="comment">//【3】获得安装回调；</span></span><br><span class="line">    mCallback = intent.getIBinderExtra(PackageInstaller.EXTRA_CALLBACK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里是因为 UninstallAppProgress 不支持 onDestroy-&gt;onCreate 的数据恢复；</span></span><br><span class="line">    <span class="comment">// 如果是这种情况，结束安装；</span></span><br><span class="line">    <span class="keyword">if</span> (icicle != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mResultCode = PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">        <span class="comment">//【4.1】如果指定了回调，那么会获得其代理对象，然后触发回调！</span></span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub</span><br><span class="line">                    .asInterface(mCallback);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                observer.onPackageDeleted(mAppInfo.packageName, mResultCode, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            finish();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4.2】如果没有指定回调，那么会发送 resultCode！</span></span><br><span class="line">            setResultAndFinish(mResultCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】是否是从所有用户下下载；</span></span><br><span class="line">    mAllUsers = intent.getBooleanExtra(Intent.EXTRA_UNINSTALL_ALL_USERS, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//【6】如果是所有用户，而当前用户不是 AdminUser，那么会抛出异常；</span></span><br><span class="line">    <span class="keyword">if</span> (mAllUsers &amp;&amp; !UserManager.get(<span class="keyword">this</span>).isAdminUser()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Only admin user can request uninstall for all users"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】是否指定了 user，如果没有指定那么默认就是当前 user；如果指定了，那么该 user 必须存在！</span></span><br><span class="line">    mUser = intent.getParcelableExtra(Intent.EXTRA_USER);</span><br><span class="line">    <span class="keyword">if</span> (mUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mUser = android.os.Process.myUserHandle();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        UserManager userManager = (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">        List&lt;UserHandle&gt; profiles = userManager.getUserProfiles();</span><br><span class="line">        <span class="keyword">if</span> (!profiles.contains(mUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"User "</span> + android.os.Process.myUserHandle() + <span class="string">" can't "</span></span><br><span class="line">                    + <span class="string">"request uninstall for user "</span> + mUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1.1】创建 PackageDeleteObserver 对象，接收卸载的回调；</span></span><br><span class="line">    PackageDeleteObserver observer = <span class="keyword">new</span> PackageDeleteObserver();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使窗口透明，直到调用 initView。 在许多情况下，我们可以避免显示UI，因为应用程序很快就会被卸载。 </span></span><br><span class="line">    <span class="comment">// 如果我们显示 UI 并立即删除它，它看起来就像一个闪烁。</span></span><br><span class="line">    getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br><span class="line">    getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">    getWindow().setNavigationBarColor(Color.TRANSPARENT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5】执行卸载操作！</span></span><br><span class="line">    getPackageManager().deletePackageAsUser(mAppInfo.packageName, observer,</span><br><span class="line">            mAllUsers ? PackageManager.DELETE_ALL_USERS : <span class="number">0</span>, mUser.getIdentifier());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.1】延迟 500 ms，发送了 UNINSTALL_IS_SLOW 消息，初始化界面！</span></span><br><span class="line">    mHandler.sendMessageDelayed(mHandler.obtainMessage(UNINSTALL_IS_SLOW),</span><br><span class="line">            QUICK_INSTALL_DELAY_MILLIS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-new-PackageDeleteObserver"><a href="#3-1-1-new-PackageDeleteObserver" class="headerlink" title="3.1.1 new PackageDeleteObserver"></a>3.1.1 new PackageDeleteObserver</h3><p>PackageDeleteObserver 接收安装结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageDeleteObserver</span> <span class="keyword">extends</span> <span class="title">IPackageDeleteObserver</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">packageDeleted</span><span class="params">(String packageName, <span class="keyword">int</span> returnCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【4.2】卸载完成后，会发送 UNINSTALL_COMPLETE 消息！</span></span><br><span class="line">        Message msg = mHandler.obtainMessage(UNINSTALL_COMPLETE);</span><br><span class="line">        msg.arg1 = returnCode; <span class="comment">// 保存了安装结果码；</span></span><br><span class="line">        msg.obj = packageName;</span><br><span class="line">        mHandler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不多说了！</p><h2 id="3-2-initView"><a href="#3-2-initView" class="headerlink" title="3.2 initView"></a>3.2 initView</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mIsViewInitialized) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mIsViewInitialized = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We set the window background to translucent in constructor, revert this</span></span><br><span class="line">    TypedValue attribute = <span class="keyword">new</span> TypedValue();</span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.windowBackground, attribute, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (attribute.type &gt;= TypedValue.TYPE_FIRST_COLOR_INT &amp;&amp;</span><br><span class="line">            attribute.type &lt;= TypedValue.TYPE_LAST_COLOR_INT) &#123;</span><br><span class="line">        getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(attribute.data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getWindow().setBackgroundDrawable(getResources().getDrawable(attribute.resourceId,</span><br><span class="line">                getTheme()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.navigationBarColor, attribute, <span class="keyword">true</span>);</span><br><span class="line">    getWindow().setNavigationBarColor(attribute.data);</span><br><span class="line"></span><br><span class="line">    getTheme().resolveAttribute(android.R.attr.statusBarColor, attribute, <span class="keyword">true</span>);</span><br><span class="line">    getWindow().setStatusBarColor(attribute.data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】判断下要卸载的应用是不是安装在 data 分区的 sys app 的更新，用于不同的显示！</span></span><br><span class="line">    <span class="keyword">boolean</span> isUpdate = ((mAppInfo.flags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>);</span><br><span class="line">    setTitle(isUpdate ? R.string.uninstall_update_title : R.string.uninstall_application_title);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.uninstall_progress); <span class="comment">// 设置布局！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】初始化 view！</span></span><br><span class="line">    View snippetView = findViewById(R.id.app_snippet);</span><br><span class="line">    <span class="comment">//【3】使用 app info 初始化 snippetView，显示 app 信息！</span></span><br><span class="line">    PackageUtil.initSnippetForInstalledApp(<span class="keyword">this</span>, mAppInfo, snippetView);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】初始化设备管理按钮和用户管理按钮，默认是 gone，同时设置点击事件！</span></span><br><span class="line">    mDeviceManagerButton = (Button) findViewById(R.id.device_manager_button);</span><br><span class="line">    mUsersButton = (Button) findViewById(R.id.users_button);</span><br><span class="line">    mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">    mDeviceManagerButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.setClassName(<span class="string">"com.android.settings"</span>,</span><br><span class="line">                    <span class="string">"com.android.settings.Settings$DeviceAdminSettingsActivity"</span>);</span><br><span class="line">            intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mUsersButton.setVisibility(View.GONE);</span><br><span class="line">    mUsersButton.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_USER_SETTINGS);</span><br><span class="line">            intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//【5】初始化完成按钮，默认也是 gone 在布局里设置的！</span></span><br><span class="line">    mOkButton = (Button) findViewById(R.id.ok_button);</span><br><span class="line">    mOkButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-mHandler-mainLooper"><a href="#4-mHandler-mainLooper" class="headerlink" title="4 mHandler - mainLooper"></a>4 mHandler - mainLooper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line"> ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mHandler 持有 main thead 的 looper 对象，消息都会发送到主线程操作！</p><h2 id="4-1-handleMessage-UNINSTALL-IS-SLOW"><a href="#4-1-handleMessage-UNINSTALL-IS-SLOW" class="headerlink" title="4.1 handleMessage[UNINSTALL_IS_SLOW]"></a>4.1 handleMessage[UNINSTALL_IS_SLOW]</h2><p>发送 UNINSTALL_IS_SLOW 消息，触发 initView 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> UNINSTALL_IS_SLOW:</span><br><span class="line">    <span class="comment">//【*3.2】初始化 view！</span></span><br><span class="line">    initView();</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="4-2-handleMessage-UNINSTALL-COMPLETE"><a href="#4-2-handleMessage-UNINSTALL-COMPLETE" class="headerlink" title="4.2 handleMessage[UNINSTALL_COMPLETE]"></a>4.2 handleMessage[UNINSTALL_COMPLETE]</h2><p>发送 UNINSTALL_COMPLETE 消息，处理卸载结果和最终的显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> UNINSTALL_COMPLETE:</span><br><span class="line">    mHandler.removeMessages(UNINSTALL_IS_SLOW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (msg.arg1 != PackageManager.DELETE_SUCCEEDED) &#123;</span><br><span class="line">        <span class="comment">//【*3.2】结果不是 success，再次初始化 view！</span></span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mResultCode = msg.arg1;</span><br><span class="line">    <span class="keyword">final</span> String packageName = (String) msg.obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果指定了回调，那就通过回调返回结果，并 finish 掉 UninstallAppProgress！</span></span><br><span class="line">    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageDeleteObserver2 observer = IPackageDeleteObserver2.Stub</span><br><span class="line">                .asInterface(mCallback);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            observer.onPackageDeleted(mAppInfo.packageName, mResultCode,</span><br><span class="line">                    packageName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        finish();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 intent 指定了返回启动结果，那么就通过 intent 返回卸载结果，</span></span><br><span class="line">    <span class="comment">// 并 finish 掉 UninstallAppProgress！</span></span><br><span class="line">    <span class="keyword">if</span> (getIntent().getBooleanExtra(Intent.EXTRA_RETURN_RESULT, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        Intent result = <span class="keyword">new</span> Intent();</span><br><span class="line">        result.putExtra(Intent.EXTRA_INSTALL_RESULT, mResultCode);</span><br><span class="line">        setResult(mResultCode == PackageManager.DELETE_SUCCEEDED</span><br><span class="line">                ? Activity.RESULT_OK : Activity.RESULT_FIRST_USER,</span><br><span class="line">                        result);</span><br><span class="line">        finish();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】更新界面显示内容；</span></span><br><span class="line">    <span class="keyword">final</span> String statusText;</span><br><span class="line">    <span class="keyword">switch</span> (msg.arg1) &#123;</span><br><span class="line">        <span class="comment">//【3.1】卸载成功；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_SUCCEEDED:</span><br><span class="line">            statusText = getString(R.string.uninstall_done);</span><br><span class="line">            <span class="comment">// Show a Toast and finish the activity</span></span><br><span class="line">            Context ctx = getBaseContext();</span><br><span class="line">            Toast.makeText(ctx, statusText, Toast.LENGTH_LONG).show();</span><br><span class="line">            <span class="comment">//【3.1.1】返回结果；</span></span><br><span class="line">            setResultAndFinish(mResultCode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.2】该 apk 是处于 active 状态的设备管理者，不可卸载；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER: &#123;</span><br><span class="line">            UserManager userManager =</span><br><span class="line">                    (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">            IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));</span><br><span class="line">            <span class="comment">// Find out if the package is an active admin for some non-current user.</span></span><br><span class="line">            <span class="comment">//【3.2.1】获得当前的 user id；</span></span><br><span class="line">            <span class="keyword">int</span> myUserId = UserHandle.myUserId();</span><br><span class="line">            UserInfo otherBlockingUser = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//【3.2.2】遍历所有的 user！</span></span><br><span class="line">            <span class="keyword">for</span> (UserInfo user : userManager.getUsers()) &#123;</span><br><span class="line">                <span class="comment">//【3.2.2.1】找到不是当前 user 或者不是当前 user 的 profile 的 user！</span></span><br><span class="line">                <span class="keyword">if</span> (isProfileOfOrSame(userManager, myUserId, user.id)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.2.2.1】如果该 apk 在这个 user 下是活跃的设备管理者，将其保存到 </span></span><br><span class="line">                    <span class="comment">// otherBlockingUser 中；</span></span><br><span class="line">                    <span class="keyword">if</span> (dpm.packageHasActiveAdmins(packageName, user.id)) &#123;</span><br><span class="line">                        otherBlockingUser = user;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"Failed to talk to package manager"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.2.3】如果 otherBlockingUser 为 null，说明 apk 是当前 user 的活跃设备管理者；</span></span><br><span class="line">            <span class="comment">// 如果不为 null，说明在其他 user 下是活跃设备管理者；</span></span><br><span class="line">            <span class="keyword">if</span> (otherBlockingUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed because "</span> + packageName</span><br><span class="line">                        + <span class="string">" is a device admin"</span>);</span><br><span class="line">                <span class="comment">//【3.2.3.1】可以看到，这里 mDeviceManagerButton 是可以点击的！！！</span></span><br><span class="line">                mDeviceManagerButton.setVisibility(View.VISIBLE);</span><br><span class="line">                statusText = getString(</span><br><span class="line">                        R.string.uninstall_failed_device_policy_manager);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed because "</span> + packageName</span><br><span class="line">                        + <span class="string">" is a device admin of user "</span> + otherBlockingUser);</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">                statusText = String.format(</span><br><span class="line">                        getString(R.string.uninstall_failed_device_policy_manager_of_user),</span><br><span class="line">                        otherBlockingUser.name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3.3】该 apk 被设备管理者标记为不可卸载；</span></span><br><span class="line">        <span class="keyword">case</span> PackageManager.DELETE_FAILED_OWNER_BLOCKED: &#123;</span><br><span class="line">            UserManager userManager =</span><br><span class="line">                    (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line">            IPackageManager packageManager = IPackageManager.Stub.asInterface(</span><br><span class="line">                    ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line">            <span class="comment">//【3.3.1】首先找到，在那个 user 下是不可卸载的，只会找到第一个 user！</span></span><br><span class="line">            List&lt;UserInfo&gt; users = userManager.getUsers();</span><br><span class="line">            <span class="keyword">int</span> blockingUserId = UserHandle.USER_NULL;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.size(); ++i) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserInfo user = users.get(i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (packageManager.getBlockUninstallForUser(packageName,</span><br><span class="line">                            user.id)) &#123;</span><br><span class="line">                        blockingUserId = user.id;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="comment">// Shouldn't happen.</span></span><br><span class="line">                    Log.e(TAG, <span class="string">"Failed to talk to package manager"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> myUserId = UserHandle.myUserId();</span><br><span class="line">            <span class="comment">//【3.3.2】如果该 user 是当前 user 或者是当前 user 的 profile，</span></span><br><span class="line">            <span class="comment">// 那么 Device Manager Button 可点击；</span></span><br><span class="line">            <span class="comment">// 否则 Users Button 可点击；</span></span><br><span class="line">            <span class="keyword">if</span> (isProfileOfOrSame(userManager, myUserId, blockingUserId)) &#123;</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mDeviceManagerButton.setVisibility(View.GONE);</span><br><span class="line">                mUsersButton.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> b/25442806</span></span><br><span class="line">            <span class="keyword">if</span> (blockingUserId == UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                <span class="comment">// 提示："这是您的设备管理员要求必须安装的应用，因此无法卸载。"</span></span><br><span class="line">                statusText = getString(R.string.uninstall_blocked_device_owner);</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blockingUserId == UserHandle.USER_NULL) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Uninstall failed for "</span> + packageName + <span class="string">" with code "</span></span><br><span class="line">                        + msg.arg1 + <span class="string">" no blocking user"</span>);</span><br><span class="line">                <span class="comment">// 提示："卸载失败。"</span></span><br><span class="line">                statusText = getString(R.string.uninstall_failed);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是所有用户下卸载，</span></span><br><span class="line">                <span class="comment">// 提示："这是部分用户或个人资料所需的应用；已为其他用户或个人资料卸载此应用"</span></span><br><span class="line">                <span class="comment">// 否则提示："这是您的个人资料所需的应用，因此无法卸载。"</span></span><br><span class="line">                statusText = mAllUsers</span><br><span class="line">                        ? getString(R.string.uninstall_all_blocked_profile_owner) :</span><br><span class="line">                        getString(R.string.uninstall_blocked_profile_owner);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Log.d(TAG, <span class="string">"Uninstall failed for "</span> + packageName + <span class="string">" with code "</span></span><br><span class="line">                    + msg.arg1);</span><br><span class="line">            statusText = getString(R.string.uninstall_failed);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    findViewById(R.id.progress_view).setVisibility(View.GONE);</span><br><span class="line">    findViewById(R.id.status_view).setVisibility(View.VISIBLE);</span><br><span class="line">    ((TextView)findViewById(R.id.status_text)).setText(statusText);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】将完成按钮显示出来！</span></span><br><span class="line">    findViewById(R.id.ok_panel).setVisibility(View.VISIBLE);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h1 id="5-PackageManagerService"><a href="#5-PackageManagerService" class="headerlink" title="5 PackageManagerService"></a>5 PackageManagerService</h1><p>最终的卸载，进入了 pms：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackageAsUser</span><span class="params">(String packageName, IPackageDeleteObserver observer, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*important】这里和 adb uninstall 的逻辑一样了！    </span></span><br><span class="line">    <span class="comment">//【*5.1】对前面的回调做二次封装；</span></span><br><span class="line">    deletePackage(packageName, <span class="keyword">new</span> LegacyPackageDeleteObserver(observer).getBinder(), userId,</span><br><span class="line">            flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-1-new-LegacyPackageDeleteObserver"><a href="#5-1-new-LegacyPackageDeleteObserver" class="headerlink" title="5.1 new LegacyPackageDeleteObserver"></a>5.1 new LegacyPackageDeleteObserver</h2><p>LegacyPackageDeleteObserver 的定义是在 PackageManager.java 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LegacyPackageDeleteObserver</span> <span class="keyword">extends</span> <span class="title">PackageDeleteObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IPackageDeleteObserver mLegacy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LegacyPackageDeleteObserver</span><span class="params">(IPackageDeleteObserver legacy)</span> </span>&#123;</span><br><span class="line">        mLegacy = legacy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageDeleted</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mLegacy == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*3.1.1】回调接口！</span></span><br><span class="line">            mLegacy.packageDeleted(basePackageName, returnCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LegacyPackageDeleteObserver 实际上是对前面的回调的一次封装！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android7.1.1 分析 PackageManagerService 的架构设计！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PMS 第 9 篇 - 通过 adb 指令分析 uninstall 过程</title>
    <link href="https://coolqi.top/2018/09/01/PMS9-uninstallThroughAdb/"/>
    <id>https://coolqi.top/2018/09/01/PMS9-uninstallThroughAdb/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2019-01-27T09:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>本篇文章总结下 uninstall package 的过程，一般来说，卸载一个应用有如下的方式：</p><ul><li>adb uninstall（最终调用的还是 pm uninstall/cmd package uninstall）；</li><li>adb cmd package uninstall;</li><li>adb shell pm uninstall;</li><li>进入应用管理器中，手动触发卸载（进入 packageInstaller）；</li></ul><p>这里我们先来看通过 adb 指令 uninstall 的过程：</p><h1 id="1-adb-uninstall-commandline-adb-commandline"><a href="#1-adb-uninstall-commandline-adb-commandline" class="headerlink" title="1 adb uninstall - commandline::adb_commandline"></a>1 adb uninstall - commandline::adb_commandline</h1><p>同样的 adb uninstall 的执行也是从 system/core/adb/commandline.cpp 开始：</p><p>adb_commandline 中会设置到大量的 adb 指令的处理，这里我们只关注 adb install 的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adb_commandline</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!strcmp(argv[<span class="number">0</span>], <span class="string">"uninstall"</span>)) &#123; <span class="comment">// adb uninstall 命令!</span></span><br><span class="line">        <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) <span class="keyword">return</span> usage();</span><br><span class="line">        <span class="keyword">if</span> (_use_legacy_install()) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.2】不支持 cmd 使用 pm 安装！</span></span><br><span class="line">            <span class="keyword">return</span> uninstall_app_legacy(transport_type, serial, argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*1.2.1】支持 cmd 使用 cmd 安装！</span></span><br><span class="line">        <span class="keyword">return</span> uninstall_app(transport_type, serial, argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">    usage();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到，如果支持 cmd 命令的情况下，_use_legacy_install() 方法返回 false，会调用 uninstall_app；不支持的话，执行 uninstall_app_legacy 方法！</p><p>Android cmd 命令功能非常强大，包含了我们之前使用 am pm 等等的命令，这里我们不深入分析 cmd 的命令的实现，我们关注和 uninstall 相关的逻辑！</p><p>下面继续分析，进一步的安装过程：</p><h2 id="1-1-cmd-uninstall-支持-cmd-指令"><a href="#1-1-cmd-uninstall-支持-cmd-指令" class="headerlink" title="1.1 cmd uninstall - 支持 cmd 指令"></a>1.1 cmd uninstall - 支持 cmd 指令</h2><h3 id="1-1-1-commandline-uninstall-app"><a href="#1-1-1-commandline-uninstall-app" class="headerlink" title="1.1.1 commandline::uninstall_app"></a>1.1.1 commandline::uninstall_app</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】adb uninstall 会转为 cmd package uninstall，参数相同；</span></span><br><span class="line">    std::string cmd = <span class="string">"cmd package"</span>;</span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strcmp(*argv, <span class="string">"-k"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            printf(</span><br><span class="line">                <span class="string">"The -k option uninstalls the application while retaining the data/cache.\n"</span></span><br><span class="line">                <span class="string">"At the moment, there is no way to remove the remaining data.\n"</span></span><br><span class="line">                <span class="string">"You will have to reinstall the application with the same signature, and fully uninstall it.\n"</span></span><br><span class="line">                <span class="string">"If you truly wish to continue, execute 'adb shell cmd package uninstall -k'.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.3】调用 send_shell_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-pm-uninstall-不支持-cmd-指令"><a href="#1-2-pm-uninstall-不支持-cmd-指令" class="headerlink" title="1.2 pm uninstall - 不支持 cmd 指令"></a>1.2 pm uninstall - 不支持 cmd 指令</h2><h3 id="1-2-1-commandline-uninstall-app-legacy"><a href="#1-2-1-commandline-uninstall-app-legacy" class="headerlink" title="1.2.1 commandline::uninstall_app_legacy"></a>1.2.1 commandline::uninstall_app_legacy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app_legacy</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strcmp(argv[i], <span class="string">"-k"</span>)) &#123;</span><br><span class="line">            printf(</span><br><span class="line">                <span class="string">"The -k option uninstalls the application while retaining the data/cache.\n"</span></span><br><span class="line">                <span class="string">"At the moment, there is no way to remove the remaining data.\n"</span></span><br><span class="line">                <span class="string">"You will have to reinstall the application with the same signature, and fully uninstall it.\n"</span></span><br><span class="line">                <span class="string">"If you truly wish to continue, execute 'adb shell pm uninstall -k'\n."</span>);</span><br><span class="line">            <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.2】调用 pm_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> pm_command(transport, serial, argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-commandline-pm-command"><a href="#1-2-2-commandline-pm-command" class="headerlink" title="1.2.2 commandline::pm_command"></a>1.2.2 commandline::pm_command</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pm_command</span><span class="params">(TransportType transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//【1】adb uninstall 会转为 pm uninstall，参数相同；</span></span><br><span class="line">    std::string cmd = <span class="string">"pm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*1.2.3】调用 send_shell_command 指令；</span></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-commandline-send-shell-command"><a href="#1-2-3-commandline-send-shell-command" class="headerlink" title="1.2.3 commandline::send_shell_command"></a>1.2.3 commandline::send_shell_command</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send_shell_command</span><span class="params">(TransportType transport_type, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">const</span> std::string&amp; command,</span></span></span><br><span class="line"><span class="function"><span class="params">                       bool disable_shell_protocol, StandardStreamsCallbackInterface* callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    bool use_shell_protocol = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        bool attempt_connection = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 使用 shell protocol</span></span><br><span class="line">        <span class="keyword">if</span> (!disable_shell_protocol) &#123;</span><br><span class="line">            FeatureSet features;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="keyword">if</span> (adb_get_feature_set(&amp;features, &amp;error)) &#123;</span><br><span class="line">                <span class="comment">// 如果系统支持 shell_v2 的 feature，则使用 shell！！</span></span><br><span class="line">                use_shell_protocol = CanUseFeature(features, kFeatureShell2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                attempt_connection = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (attempt_connection) &#123;</span><br><span class="line">            std::string error;</span><br><span class="line">            <span class="comment">// 如果是 pm uninstall 此时 command 中携带的就是以 pm 开头的命令；</span></span><br><span class="line">            <span class="comment">// 如果是 cmd package uninstall 此时 command 中携带的就是以 cmd 开头的命令；</span></span><br><span class="line">            std::string service_string = ShellServiceString(use_shell_protocol, <span class="string">""</span>, command);</span><br><span class="line">            <span class="comment">// 向 shell protocol 发送命令</span></span><br><span class="line">            fd = adb_connect(service_string, &amp;error);</span><br><span class="line">            <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fprintf(stderr, <span class="string">"- waiting for device -\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!wait_for_device(<span class="string">"wait-for-device"</span>, transport_type, serial)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理命令执行结果！</span></span><br><span class="line">    <span class="keyword">int</span> exit_code = read_and_dump(fd, use_shell_protocol, callback);</span><br><span class="line">    <span class="keyword">if</span> (adb_close(fd) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        PLOG(ERROR) &lt;&lt; <span class="string">"failure closing FD "</span> &lt;&lt; fd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，最后都是调用 shell 执行相关指令！</p><p>前面我们有分析过：</p><ul><li>cmd package uninstall 最后调用的是 PackageManagerShellCommand 相关方法；</li><li>pm uninstall 最后调用的是 pm 相关方法；</li></ul><h1 id="2-Pm-install"><a href="#2-Pm-install" class="headerlink" title="2 Pm install"></a>2 Pm install</h1><p>对于 pm 命令的执行过程，我们不在过多分析，直接进入重点：</p><h2 id="2-1-runUninstall"><a href="#2-1-runUninstall" class="headerlink" title="2.1 runUninstall"></a>2.1 runUninstall</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runUninstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2】继续处理！</span></span><br><span class="line">    <span class="keyword">return</span> runShellCommand(<span class="string">"package"</span>, mArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-runShellCommand"><a href="#2-2-runShellCommand" class="headerlink" title="2.2 runShellCommand"></a>2.2 runShellCommand</h2><p>我们看到，我们传入的 Service name 是 “package”，其实看到这里，我们已经能猜到了，其和 cmd install 一样，最后会调用了 PackageManagerShellCommand 的 onCommand 方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runShellCommand</span><span class="params">(String serviceName, String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> HandlerThread handlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"results"</span>);</span><br><span class="line">    handlerThread.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.1】通过 pms 触发 PackageManagerShellCommand 的 onCommand 方法，最后会根据参数</span></span><br><span class="line">        <span class="comment">// 最后会进入 runUninstall 方法中！</span></span><br><span class="line">        ServiceManager.getService(serviceName).shellCommand(</span><br><span class="line">                FileDescriptor.in, FileDescriptor.out, FileDescriptor.err,</span><br><span class="line">                args, <span class="keyword">new</span> ResultReceiver(<span class="keyword">new</span> Handler(handlerThread.getLooper())));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        handlerThread.quitSafely();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以去 pms 的代码中看到，pms 有如下的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShellCommand</span><span class="params">(FileDescriptor in, FileDescriptor out,</span></span></span><br><span class="line"><span class="function"><span class="params">        FileDescriptor err, String[] args, ResultReceiver resultReceiver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1】调用了 PackageManagerShellCommand 的接口！！</span></span><br><span class="line">    (<span class="keyword">new</span> PackageManagerShellCommand(<span class="keyword">this</span>)).exec(</span><br><span class="line">            <span class="keyword">this</span>, in, out, err, args, resultReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageManagerShellCommand 继承了 ShellCommand， exec 内部会触发 onCommand 方法，有兴趣大家可以去学习，这里不关注！！</p><h1 id="3-PackageManagerShellCommand"><a href="#3-PackageManagerShellCommand" class="headerlink" title="3 PackageManagerShellCommand"></a>3 PackageManagerShellCommand</h1><h2 id="3-1-runUninstall"><a href="#3-1-runUninstall" class="headerlink" title="3.1 runUninstall"></a>3.1 runUninstall</h2><p>我们来分析下 runUninstall 的逻辑：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runUninstall</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="keyword">int</span> flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> userId = UserHandle.USER_ALL; <span class="comment">// 默认所有用户！</span></span><br><span class="line"></span><br><span class="line">    String opt;</span><br><span class="line">    <span class="comment">//【1】读取额外参数</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = getNextOption()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-k"</span>:</span><br><span class="line">                <span class="comment">//【1.1】是否再卸载后保留数据；</span></span><br><span class="line">                flags |= PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"--user"</span>:</span><br><span class="line">                <span class="comment">//【1.1】是否指定 user！</span></span><br><span class="line">                userId = UserHandle.parseUserArg(getNextArgRequired());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                pw.println(<span class="string">"Error: Unknown option: "</span> + opt);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】获得要卸载的应用包名；</span></span><br><span class="line">    <span class="keyword">final</span> String packageName = getNextArg();</span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: package name not specified"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】获得要卸载的应用的 split apk 包名，如果指定的 split name，那就只卸载对应的 split apk！</span></span><br><span class="line">    <span class="keyword">final</span> String splitName = getNextArg();</span><br><span class="line">    <span class="keyword">if</span> (splitName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.2】移除 split apk！</span></span><br><span class="line">        <span class="keyword">return</span> runRemoveSplit(packageName, splitName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*3.1.1】对 userId 做一个转换处理;</span></span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runUninstall"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        <span class="comment">//【5】如果是从所有用户下删除，那么 userId 变为 USER_SYSTEM；</span></span><br><span class="line">        <span class="comment">// flags 设置 DELETE_ALL_USERS 标志位；</span></span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        flags |= PackageManager.DELETE_ALL_USERS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【6】如果是从指定用户下删除，那么要判断在该 userId 下是否有安装信息；</span></span><br><span class="line">        <span class="keyword">final</span> PackageInfo info = mInterface.getPackageInfo(packageName, <span class="number">0</span>, userId);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pw.println(<span class="string">"Failure [not installed for "</span> + userId + <span class="string">"]"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【7】判断是否是 sys app，如果是的话 flags 增加 DELETE_SYSTEM_APP 标志位！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem =</span><br><span class="line">                (info.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isSystem) &#123;</span><br><span class="line">            flags |= PackageManager.DELETE_SYSTEM_APP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.1.2.1】这里是注册可以了本地监听器 LocalIntentReceiver，监听卸载结果，在 install 我们</span></span><br><span class="line">    <span class="comment">// 有分析过，这里就不多说了！</span></span><br><span class="line">    <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*4.1】触发卸载；</span></span><br><span class="line">    mInterface.getPackageInstaller().uninstall(packageName, <span class="keyword">null</span> <span class="comment">/*callerPackageName*/</span>, flags,</span><br><span class="line">            receiver.getIntentSender(), userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.1.2.2】接收卸载结果，就是前面分析时，创建的 intent fillIn！！</span></span><br><span class="line">    <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageInstaller.STATUS_FAILURE);</span><br><span class="line">    <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">        pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pw.println(<span class="string">"Failure ["</span></span><br><span class="line">                + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的 mInterface.getPackageInstaller() 返回的是 PackageInstallerService，下面我们去 PackageInstallerService 中看看：</p><h3 id="3-1-1-translateUserId"><a href="#3-1-1-translateUserId" class="headerlink" title="3.1.1 translateUserId"></a>3.1.1 translateUserId</h3><p>如果 uninstall 指定的 user，那么这里会对 userId 做一个转换处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">translateUserId</span><span class="params">(<span class="keyword">int</span> userId, String logContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ActivityManager.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),</span><br><span class="line">            userId, <span class="keyword">true</span>, <span class="keyword">true</span>, logContext, <span class="string">"pm command"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-1-2-LocalIntentReceiver"><a href="#3-1-2-LocalIntentReceiver" class="headerlink" title="3.1.2 LocalIntentReceiver"></a>3.1.2 LocalIntentReceiver</h3><p>LocalIntentReceiver 主要用于接收最终的返回结果，以及和其他模块通信：</p><h4 id="3-1-2-1-new-LocalIntentReceiver"><a href="#3-1-2-1-new-LocalIntentReceiver" class="headerlink" title="3.1.2.1 new LocalIntentReceiver"></a>3.1.2.1 new LocalIntentReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalIntentReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】内有一个阻塞队列，用于保存 intent！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SynchronousQueue&lt;Intent&gt; mResult = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】发送 intent 给其他模块：</span></span><br><span class="line">    <span class="keyword">private</span> IIntentSender.Stub mLocalSender = <span class="keyword">new</span> IIntentSender.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> code, Intent intent, String resolvedType,</span></span></span><br><span class="line"><span class="function"><span class="params">                IIntentReceiver finishedReceiver, String requiredPermission, Bundle options)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【2.1】将 Proxy 传来的 intent 加入的阻塞队列中！</span></span><br><span class="line">                mResult.offer(intent, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>不多数说了！！</p><h4 id="3-1-2-2-getIntentSender"><a href="#3-1-2-2-getIntentSender" class="headerlink" title="3.1.2.2 getIntentSender"></a>3.1.2.2 getIntentSender</h4><p>返回代理对象，用于跨进程通信：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IntentSender <span class="title">getIntentSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IntentSender((IIntentSender) mLocalSender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-2-2-getResult"><a href="#3-1-2-2-getResult" class="headerlink" title="3.1.2.2 getResult"></a>3.1.2.2 getResult</h4><p>从内部的阻塞队列中返回结果！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mResult.take();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-runRemoveSplit"><a href="#3-2-runRemoveSplit" class="headerlink" title="3.2 runRemoveSplit"></a>3.2 runRemoveSplit</h2><p>我们来看下删除 split apk 的逻辑！</p><p>参数 String packageName 是主 pkg，String splitName 则是 split apk 的包名！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runRemoveSplit</span><span class="params">(String packageName, String splitName)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    <span class="comment">//【1-review】这边创建了一个 SessionParams 实例，封装卸载的事务参数！</span></span><br><span class="line">    <span class="comment">// 这里就不在分析了，前面看过！</span></span><br><span class="line">    <span class="keyword">final</span> SessionParams sessionParams = <span class="keyword">new</span> SessionParams(SessionParams.MODE_INHERIT_EXISTING);</span><br><span class="line">    sessionParams.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    sessionParams.appPackageName = packageName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*3.2.1】创建一个卸载事务！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId =</span><br><span class="line">            doCreateSession(sessionParams, <span class="keyword">null</span> <span class="comment">/*installerPackageName*/</span>, UserHandle.USER_ALL);</span><br><span class="line">    <span class="keyword">boolean</span> abandonSession = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*3.2.2】移除 split apk！</span></span><br><span class="line">        <span class="keyword">if</span> (doRemoveSplit(sessionId, splitName, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*3.2.3】提交事务</span></span><br><span class="line">        <span class="keyword">if</span> (doCommitSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>)</span><br><span class="line">                != PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        abandonSession = <span class="keyword">false</span>;</span><br><span class="line">        pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (abandonSession) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                doAbandonSession(sessionId, <span class="keyword">false</span> <span class="comment">/*logSuccess*/</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先创建了一个 SessionParams，参数均是 @hide 的，这里我省略了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mode = MODE_INVALID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installFlags;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> installLocation = PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY; <span class="comment">// 默认为仅内置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> sizeBytes = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String appPackageName; <span class="comment">// 这里其为主 pkg 的包名！</span></span><br><span class="line">    <span class="keyword">public</span> Bitmap appIcon;</span><br><span class="line">    <span class="keyword">public</span> String appLabel;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> appIconLastModified = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> Uri originatingUri;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> originatingUid = UID_UNKNOWN;</span><br><span class="line">    <span class="keyword">public</span> Uri referrerUri;</span><br><span class="line">    <span class="keyword">public</span> String abiOverride;</span><br><span class="line">    <span class="keyword">public</span> String volumeUuid;</span><br><span class="line">    <span class="keyword">public</span> String[] grantedRuntimePermissions;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SessionParams</span><span class="params">(<span class="keyword">int</span> mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mode = mode;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 remove split apk，其流程和 install 很类似！</p><h3 id="3-2-1-doCreateSession"><a href="#3-2-1-doCreateSession" class="headerlink" title="3.2.1 doCreateSession"></a>3.2.1 doCreateSession</h3><p>创建事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCreateSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="comment">//【*3.1.1】对 user 进行一个转换；</span></span><br><span class="line">    userId = translateUserId(userId, <span class="string">"runInstallCreate"</span>);</span><br><span class="line">    <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">        userId = UserHandle.USER_SYSTEM;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.1.1】调用 PackageInstallerService 的 createSession 创建一个新的事务！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId = mInterface.getPackageInstaller()</span><br><span class="line">            .createSession(params, installerPackageName, userId);</span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和 install 很类似！</p><h3 id="3-2-2-doRemoveSplit"><a href="#3-2-2-doRemoveSplit" class="headerlink" title="3.2.2 doRemoveSplit"></a>3.2.2 doRemoveSplit</h3><p>移除 split apk，这里是真正的对 split apk 做处理，前面只是创建了一个主 apk 的 install 食物：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doRemoveSplit</span><span class="params">(<span class="keyword">int</span> sessionId, String splitName, <span class="keyword">boolean</span> logSuccess)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1-review】返回之前创建的 PackageInstallerSession，将其封装为 PackageInstaller.Session 实例！</span></span><br><span class="line">        <span class="comment">//【*7.1.1.2】获得事务；</span></span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【*7.2.2】这个地方我们知道，最后调用了 PackageInstallerSession 的 removeSplit 方法!</span></span><br><span class="line">        session.removeSplit(splitName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">            pw.println(<span class="string">"Success"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        pw.println(<span class="string">"Error: failed to remove split; "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session 其实很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IPackageInstallerSession mSession;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多数了！</p><p>继续分析，我们看看 removeSplit 发生了什么：</p><h3 id="3-2-3-doCommitSession"><a href="#3-2-3-doCommitSession" class="headerlink" title="3.2.3 doCommitSession"></a>3.2.3 doCommitSession</h3><p>提交事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doCommitSession</span><span class="params">(<span class="keyword">int</span> sessionId, <span class="keyword">boolean</span> logSuccess)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PrintWriter pw = getOutPrintWriter();</span><br><span class="line">    PackageInstaller.Session session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = <span class="keyword">new</span> PackageInstaller.Session(</span><br><span class="line">                mInterface.getPackageInstaller().openSession(sessionId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*3.1.2.1】这里是注册可以了本地监听器 LocalIntentReceiver，监听卸载结果，在 install 我们</span></span><br><span class="line">        <span class="comment">// 有分析过，这里就不多说了！</span></span><br><span class="line">        <span class="keyword">final</span> LocalIntentReceiver receiver = <span class="keyword">new</span> LocalIntentReceiver();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【*7.2.4】提交事务</span></span><br><span class="line">        session.commit(receiver.getIntentSender());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent result = receiver.getResult();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> status = result.getIntExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">                PackageInstaller.STATUS_FAILURE);</span><br><span class="line">        <span class="keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logSuccess) &#123;</span><br><span class="line">                pw.println(<span class="string">"Success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pw.println(<span class="string">"Failure ["</span></span><br><span class="line">                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        IoUtils.closeQuietly(session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-PackageInstallerService"><a href="#4-PackageInstallerService" class="headerlink" title="4 PackageInstallerService"></a>4 PackageInstallerService</h1><h2 id="4-1-uninstall"><a href="#4-1-uninstall" class="headerlink" title="4.1 uninstall"></a>4.1 uninstall</h2><p>这里我们说一下参数 IntentSender statusReceiver，其是前面 LocalIntentReceiver.getIntentSender() 返回的 IntentSender 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uninstall</span><span class="params">(String packageName, String callerPackageName, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            IntentSender statusReceiver, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】会校验调用者是否具有 across user 的权限，同时也会调用 appOps 去检查 callingUid 和 callerPackageName</span></span><br><span class="line">    <span class="comment">// 是否匹配！</span></span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"uninstall"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((callingUid != Process.SHELL_UID) &amp;&amp; (callingUid != Process.ROOT_UID)) &#123;</span><br><span class="line">        mAppOps.checkPackage(callingUid, callerPackageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】检查 caller 是否是设备用户自身！</span></span><br><span class="line">    DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">            Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">    <span class="keyword">boolean</span> isDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">            callerPackageName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.1.1.1】创建一个 PackageDeleteObserverAdapter 监听卸载删除结果！</span></span><br><span class="line">    <span class="keyword">final</span> PackageDeleteObserverAdapter adapter = <span class="keyword">new</span> PackageDeleteObserverAdapter(mContext,</span><br><span class="line">            statusReceiver, packageName, isDeviceOwner, userId);</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//【3】检查调用者是否有 DELETE_PACKAGES 的权限，如果有直接通过 pms 直接 deletePackage！</span></span><br><span class="line">    <span class="keyword">if</span> (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES)</span><br><span class="line">                == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">        <span class="comment">//【*5.1】继续卸载；</span></span><br><span class="line">        mPm.deletePackage(packageName, adapter.getBinder(), userId, flags);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDeviceOwner) &#123;</span><br><span class="line">        <span class="comment">//【4】检查调用者是否是 DeviceOwner，如果有直接通过 pms 直接 deletePackage！</span></span><br><span class="line">        <span class="comment">// 这里会将调用者转为系统进程，继续处理！</span></span><br><span class="line">        <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*5.1】继续卸载；</span></span><br><span class="line">            mPm.deletePackage(packageName, adapter.getBinder(), userId, flags);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5】这种情况需要通知用户，让用户主动卸载，会发送 Intent.ACTION_UNINSTALL_PACKAGE 给 PackageInstaller！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line">        intent.setData(Uri.fromParts(<span class="string">"package"</span>, packageName, <span class="keyword">null</span>));</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_CALLBACK, adapter.getBinder().asBinder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.1.1.2】通知用户！</span></span><br><span class="line">        adapter.onUserActionRequired(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说了！</p><h3 id="4-1-1-PackageDeleteObserverAdapter"><a href="#4-1-1-PackageDeleteObserverAdapter" class="headerlink" title="4.1.1 PackageDeleteObserverAdapter"></a>4.1.1 PackageDeleteObserverAdapter</h3><h4 id="4-1-1-1-new-PackageInstallerService"><a href="#4-1-1-1-new-PackageInstallerService" class="headerlink" title="4.1.1.1 new PackageInstallerService"></a>4.1.1.1 new PackageInstallerService</h4><p>创建了一个 package delete 监听器！</p><p>boolean showNotification 表示是否需要显示通知，上面传入的是 isDeviceOwner，就是说如果是设备拥有者，那么一定会显示通知！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageDeleteObserverAdapter</span> <span class="keyword">extends</span> <span class="title">PackageDeleteObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IntentSender mTarget; <span class="comment">// 对应的 LocalIntentReceiver.getIntentSender(！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mPackageName; <span class="comment">// 要卸载的 apk</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Notification mNotification; <span class="comment">// 显示的通知！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageDeleteObserverAdapter</span><span class="params">(Context context, IntentSender target,</span></span></span><br><span class="line"><span class="function"><span class="params">            String packageName, <span class="keyword">boolean</span> showNotification, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mTarget = target;</span><br><span class="line">        mPackageName = packageName;</span><br><span class="line">        <span class="keyword">if</span> (showNotification) &#123;</span><br><span class="line">            mNotification = buildSuccessNotification(mContext,</span><br><span class="line">                    mContext.getResources().getString(R.string.package_deleted_device_owner),</span><br><span class="line">                    packageName,</span><br><span class="line">                    userId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mNotification = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="4-1-1-2-onUserActionRequired"><a href="#4-1-1-2-onUserActionRequired" class="headerlink" title="4.1.1.2 onUserActionRequired"></a>4.1.1.2 onUserActionRequired</h4><p>当没有权限直接卸载时，需要用户参与卸载时，会触发该方法，可以看到，该方法最后会发送 Intent.ACTION_UNINSTALL_PACKAGE 到 PackageInstaller 中去！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】创建了一个新的 Intent fillIn；</span></span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【2】卸载的 apk 包名；</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);</span><br><span class="line">    <span class="comment">//【3】卸载的结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageInstaller.STATUS_PENDING_USER_ACTION);</span><br><span class="line">    <span class="comment">//【4】卸载后用于额外通信的的 Intent！！</span></span><br><span class="line">    fillIn.putExtra(Intent.EXTRA_INTENT, intent);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【5】发送结果 fillIn 到 3.1.2.1！</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于传入的参数 intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action 是 Intent.ACTION_UNINSTALL_PACKAGE！</span></span><br><span class="line"><span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line"><span class="comment">// 设置 data；</span></span><br><span class="line">intent.setData(Uri.fromParts(<span class="string">"package"</span>, packageName, <span class="keyword">null</span>));</span><br><span class="line"><span class="comment">// 设置额外的回调；</span></span><br><span class="line">intent.putExtra(PackageInstaller.EXTRA_CALLBACK, adapter.getBinder().asBinder());</span><br></pre></td></tr></table></figure><p>接着，在 onUserActionRequired 有对参数 intent 进行了进一步的安装！</p><p>关于 PackageInstaller.STATUS_PENDING_USER_ACTION 的广播，我们后面再分析，这里先不关注！</p><h4 id="4-1-1-3-onPackageDeleted"><a href="#4-1-1-3-onPackageDeleted" class="headerlink" title="4.1.1.3 onPackageDeleted"></a>4.1.1.3 onPackageDeleted</h4><p>卸载成功后回调该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageDeleted</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果安装成功的话，会有通知！！</span></span><br><span class="line">    <span class="keyword">if</span> (PackageManager.DELETE_SUCCEEDED == returnCode &amp;&amp; mNotification != <span class="keyword">null</span>) &#123;</span><br><span class="line">        NotificationManager notificationManager = (NotificationManager)</span><br><span class="line">                mContext.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        notificationManager.notify(basePackageName, <span class="number">0</span>, mNotification);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】创建封装结果的 intent！</span></span><br><span class="line">    <span class="keyword">final</span> Intent fillIn = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//【3】卸载的 apk！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, mPackageName);</span><br><span class="line">    <span class="comment">//【4】卸载的结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS,</span><br><span class="line">            PackageManager.deleteStatusToPublicStatus(returnCode));</span><br><span class="line">    <span class="comment">//【5】卸载的额外信息！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_STATUS_MESSAGE,</span><br><span class="line">            PackageManager.deleteStatusToString(returnCode, msg));</span><br><span class="line">    <span class="comment">//【4】卸载的原始结果 code！！</span></span><br><span class="line">    fillIn.putExtra(PackageInstaller.EXTRA_LEGACY_STATUS, returnCode);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【5】发送结果 fillIn 到 3.1.2.1！</span></span><br><span class="line">        mTarget.sendIntent(mContext, <span class="number">0</span>, fillIn, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SendIntentException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h1 id="5-PackageManagerService"><a href="#5-PackageManagerService" class="headerlink" title="5 PackageManagerService"></a>5 PackageManagerService</h1><p>卸载的核心接口在 PackageManagerService 中：</p><h2 id="5-1-deletePackage"><a href="#5-1-deletePackage" class="headerlink" title="5.1 deletePackage"></a>5.1 deletePackage</h2><p>开始卸载删除应用：</p><p>我们知道，在前面的时候，如果是从所有用户下卸载，那么 userId 和 flags 会有如下的变化：</p><p>userId = UserHandle.USER_SYSTEM;<br>flags |= PackageManager.DELETE_ALL_USERS;</p><p>如果是从指定用户下卸载，那么 userId 就是我们指定的用户！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackage</span><span class="params">(<span class="keyword">final</span> String packageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> IPackageDeleteObserver2 observer, <span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags)</span> </span>&#123;</span><br><span class="line">    mContext.enforceCallingOrSelfPermission(</span><br><span class="line">            android.Manifest.permission.DELETE_PACKAGES, <span class="keyword">null</span>);</span><br><span class="line">    Preconditions.checkNotNull(packageName);</span><br><span class="line">    Preconditions.checkNotNull(observer);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【*5.1.1】首先判断该 apk 是否是孤立的；</span></span><br><span class="line">    <span class="comment">//【*5.1.2】同时判断是否允许静默卸载！</span></span><br><span class="line">    <span class="comment">// 如果这个 apk 不是孤立的，并且不允许静默卸载，那么需要用户参与卸载，也就是通过 PackageInstaller</span></span><br><span class="line">    <span class="comment">// 这里会结束流程，同时调用 observer.onUserActionRequired 返回结果！</span></span><br><span class="line">    <span class="keyword">if</span> (!isOrphaned(packageName)</span><br><span class="line">            &amp;&amp; !isCallerAllowedToSilentlyUninstall(uid, packageName)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_UNINSTALL_PACKAGE);</span><br><span class="line">            intent.setData(Uri.fromParts(PACKAGE_SCHEME, packageName, <span class="keyword">null</span>));</span><br><span class="line">            intent.putExtra(PackageInstaller.EXTRA_CALLBACK, observer.asBinder());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*4.1.1.2】通知用户参与安装！</span></span><br><span class="line">            observer.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断是否是从所有 user 下卸载该应用，如果需要同时校验是否有 INTERACT_ACROSS_USERS_FULL 的权限！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> deleteAllUsers = (deleteFlags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] users = deleteAllUsers ? sUserManager.getUserIds() : <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; userId &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UserHandle.getUserId(uid) != userId || (deleteAllUsers &amp;&amp; users.length &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        mContext.enforceCallingOrSelfPermission(</span><br><span class="line">                android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,</span><br><span class="line">                <span class="string">"deletePackage for user "</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*5.1.3】如果该用户下不允许卸载应用（用户限制）</span></span><br><span class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_UNINSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*4.1.1.3】结束卸载，返回！</span></span><br><span class="line">            observer.onPackageDeleted(packageName,</span><br><span class="line">                    PackageManager.DELETE_FAILED_USER_RESTRICTED, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】如果不是从所有的用户下卸载，并且该 apk 处于 BlockUninstall 状态</span></span><br><span class="line">    <span class="comment">// 那么不能卸载！</span></span><br><span class="line">    <span class="comment">//【*5.1.4】通过 getBlockUninstallForUser 来判断应用是否处于 Blockinstall 状态！</span></span><br><span class="line">    <span class="keyword">if</span> (!deleteAllUsers &amp;&amp; getBlockUninstallForUser(packageName, userId)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*4.1.1.3】结束卸载，返回！</span></span><br><span class="line">            observer.onPackageDeleted(packageName,</span><br><span class="line">                    PackageManager.DELETE_FAILED_OWNER_BLOCKED, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">"deletePackageAsUser: pkg="</span> + packageName + <span class="string">" user="</span> + userId</span><br><span class="line">                + <span class="string">" deleteAllUsers: "</span> + deleteAllUsers );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里的 mHandler 我们在 pms 的启动的时候有分析过，其持有子线程的 looper！</span></span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">int</span> returnCode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【4.1】如果不是从所有的 user 下卸载该 apk，进入 if 分支，否则，进入 else 分支！</span></span><br><span class="line">            <span class="keyword">if</span> (!deleteAllUsers) &#123;</span><br><span class="line">                <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                returnCode = deletePackageX(packageName, userId, deleteFlags);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*5.1.4】先获得 pkg 在所有 user 下的 block unistall 状态！</span></span><br><span class="line">                <span class="keyword">int</span>[] blockUninstallUserIds = getBlockUninstallForUsers(packageName, users);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【4.2】如果都不处于 block unistall，那么就直接卸载！</span></span><br><span class="line">                <span class="keyword">if</span> (ArrayUtils.isEmpty(blockUninstallUserIds)) &#123;</span><br><span class="line">                    <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                    returnCode = deletePackageX(packageName, userId, deleteFlags);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【4.3】flags 取消 DELETE_ALL_USERS 标志位！</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> userFlags = deleteFlags &amp; ~PackageManager.DELETE_ALL_USERS;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : users) &#123;</span><br><span class="line">                        <span class="comment">//【4.3.1】只会卸载那些不处于 block unistall 状态下的 user 中的 apk！</span></span><br><span class="line">                        <span class="keyword">if</span> (!ArrayUtils.contains(blockUninstallUserIds, userId)) &#123;</span><br><span class="line">                            <span class="comment">//【*5.2】调用 deletePackageX 继续卸载！</span></span><br><span class="line">                            returnCode = deletePackageX(packageName, userId, userFlags);</span><br><span class="line">                            <span class="keyword">if</span> (returnCode != PackageManager.DELETE_SUCCEEDED) &#123;</span><br><span class="line">                                Slog.w(TAG, <span class="string">"Package delete failed for user "</span> + userId</span><br><span class="line">                                        + <span class="string">", returnCode "</span> + returnCode);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【4.4】由于在某些 user 下 pkg 处于 block uninstall 状态导致无法安装</span></span><br><span class="line">                    <span class="comment">// 所以需要返回给用户！</span></span><br><span class="line">                    returnCode = PackageManager.DELETE_FAILED_OWNER_BLOCKED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*4.1.1.3】返回结果！</span></span><br><span class="line">                observer.onPackageDeleted(packageName, returnCode, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"Observer no longer exists."</span>);</span><br><span class="line">            &#125; <span class="comment">//end catch</span></span><br><span class="line">        &#125; <span class="comment">//end run</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程分析的很详细！</p><h3 id="5-1-1-isOrphaned"><a href="#5-1-1-isOrphaned" class="headerlink" title="5.1.1 isOrphaned"></a>5.1.1 isOrphaned</h3><p>判断该应用是否是孤立的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrphaned</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.1.1】进一步判断！</span></span><br><span class="line">        <span class="keyword">return</span> mSettings.isOrphaned(packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-1-1-Settings-isOrphaned"><a href="#5-1-1-1-Settings-isOrphaned" class="headerlink" title="5.1.1.1 Settings.isOrphaned"></a>5.1.1.1 Settings.isOrphaned</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isOrphaned</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting pkg = mPackages.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】通过 PackageSetting 的 isOrphaned 属性判断！</span></span><br><span class="line">    <span class="keyword">return</span> pkg.isOrphaned;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多数了！！</p><h3 id="5-1-2-isCallerAllowedToSilentlyUninstall"><a href="#5-1-2-isCallerAllowedToSilentlyUninstall" class="headerlink" title="5.1.2 isCallerAllowedToSilentlyUninstall"></a>5.1.2 isCallerAllowedToSilentlyUninstall</h3><p>判断是否允许静默卸载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCallerAllowedToSilentlyUninstall</span><span class="params">(<span class="keyword">int</span> callingUid, String pkgName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果 callingUid 是 shell，root 或者 system，那么是可以静默卸载的！</span></span><br><span class="line">    <span class="keyword">if</span> (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID</span><br><span class="line">          || callingUid == Process.SYSTEM_UID) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUserId = UserHandle.getUserId(callingUid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果 caller 就是安装该 apk 的 installer，那么支持静默卸载！</span></span><br><span class="line">    <span class="comment">//【*5.1.2.1】通过 getPackageUid 获得 package uid；</span></span><br><span class="line">    <span class="comment">//【*5.1.2.2】通过 getInstallerPackageName 获得 package 的安装者；</span></span><br><span class="line">    <span class="keyword">if</span> (callingUid == getPackageUid(getInstallerPackageName(pkgName), <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 caller 是 package verifier，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mRequiredVerifierPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mRequiredVerifierPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果 caller 是 package unstaller，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mRequiredUninstallerPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mRequiredUninstallerPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】如果 caller 是 storage manager，那么允许静默卸载！</span></span><br><span class="line">    <span class="keyword">if</span> (mStorageManagerPackage != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            callingUid == getPackageUid(mStorageManagerPackage, <span class="number">0</span>, callingUserId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-1-getPackageUid"><a href="#5-1-2-1-getPackageUid" class="headerlink" title="5.1.2.1 getPackageUid"></a>5.1.2.1 getPackageUid</h4><p>获得 pacakge 的 uid：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPackageUid</span><span class="params">(String packageName, <span class="keyword">int</span> flags, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    flags = updateFlagsForPackage(flags, userId, packageName);</span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">false</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>, <span class="string">"get package uid"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package p = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.isMatch(flags)) &#123;</span><br><span class="line">            <span class="keyword">return</span> UserHandle.getUid(userId, p.applicationInfo.uid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; MATCH_UNINSTALLED_PACKAGES) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span> &amp;&amp; ps.isMatch(flags)) &#123;</span><br><span class="line">                <span class="keyword">return</span> UserHandle.getUid(userId, ps.appId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-2-getInstallerPackageName"><a href="#5-1-2-2-getInstallerPackageName" class="headerlink" title="5.1.2.2 getInstallerPackageName"></a>5.1.2.2 getInstallerPackageName</h4><p>获得 package 的安装者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInstallerPackageName</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.2.2.1】通过 Settings 获得该 pkg 的 installer！</span></span><br><span class="line">        <span class="keyword">return</span> mSettings.getInstallerPackageNameLPr(packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-2-1-Settings-getInstallerPackageNameLPr"><a href="#5-1-2-2-1-Settings-getInstallerPackageNameLPr" class="headerlink" title="5.1.2.2.1 Settings.getInstallerPackageNameLPr"></a>5.1.2.2.1 Settings.getInstallerPackageNameLPr</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getInstallerPackageNameLPr</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting pkg = mPackages.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】返回 PackageSetting 的属性 installerPackageName</span></span><br><span class="line">    <span class="keyword">return</span> pkg.installerPackageName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="5-1-3-isUserRestricted"><a href="#5-1-3-isUserRestricted" class="headerlink" title="5.1.3 isUserRestricted"></a>5.1.3 isUserRestricted</h3><p>判断在 userId 是否有用户限制，限制由 restrictionKey 指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isUserRestricted</span><span class="params">(<span class="keyword">int</span> userId, String restrictionKey)</span> </span>&#123;</span><br><span class="line">    Bundle restrictions = sUserManager.getUserRestrictions(userId);</span><br><span class="line">    <span class="keyword">if</span> (restrictions.getBoolean(restrictionKey, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"User is restricted: "</span> + restrictionKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-getBlockUninstallForUser"><a href="#5-1-4-getBlockUninstallForUser" class="headerlink" title="5.1.4 getBlockUninstallForUser"></a>5.1.4 getBlockUninstallForUser</h3><p>判断该 package 是否处于 block uninstall 的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBlockUninstallForUser</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"Package doesn't exist in get block uninstall "</span> + packageName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*5.1.4.1】通过 PackageSetting 返回其 block uninstall 的状态！</span></span><br><span class="line">        <span class="keyword">return</span> ps.getBlockUninstall(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-4-1-PackageSettingBase-getBlockUninstall"><a href="#5-1-4-1-PackageSettingBase-getBlockUninstall" class="headerlink" title="5.1.4.1 PackageSettingBase.getBlockUninstall"></a>5.1.4.1 PackageSettingBase.getBlockUninstall</h4><p>PackageSetting 继承了 PackageSettingBase，getBlockUninstall 方法是在父类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getBlockUninstall</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.1.4.2】返回该 pkg 的使用状态对象：PackageUserState！</span></span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).blockUninstall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageUserState 实例，表示每个 pkg 在对应的 user 下的使用状态，其在我们分析 pms 的启动时有分析过，这里不多说了！</p><h4 id="5-1-4-2-PackageSettingBase-readUserState"><a href="#5-1-4-2-PackageSettingBase-readUserState" class="headerlink" title="5.1.4.2 PackageSettingBase.readUserState"></a>5.1.4.2 PackageSettingBase.readUserState</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageUserState <span class="title">readUserState</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    PackageUserState state = userState.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】如果有的话，就返回这个 user 下的 PackageUserState 实例！</span></span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】否则，返回默认的！</span></span><br><span class="line">    <span class="keyword">return</span> DEFAULT_USER_STATE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 DEFAULT_USER_STATE 是一个 PackageUserState 对象！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> PackageUserState DEFAULT_USER_STATE = <span class="keyword">new</span> PackageUserState();</span><br></pre></td></tr></table></figure><h3 id="5-1-5-getBlockUninstallForUsers"><a href="#5-1-5-getBlockUninstallForUsers" class="headerlink" title="5.1.5 getBlockUninstallForUsers"></a>5.1.5 getBlockUninstallForUsers</h3><p>该方法用于获得该 package 在多个 user 下的 block uninstall 状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getBlockUninstallForUsers(String packageName, <span class="keyword">int</span>[] userIds) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = EMPTY_INT_ARRAY;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> userId : userIds) &#123;</span><br><span class="line">        <span class="comment">//【*5.1.4】获得单个 user 下的 pkg 的 block uninstall 状态，并将状态为 true 的 user！</span></span><br><span class="line">        <span class="comment">// 保存到数组中，返回！</span></span><br><span class="line">        <span class="keyword">if</span> (getBlockUninstallForUser(packageName, userId)) &#123;</span><br><span class="line">            result = ArrayUtils.appendInt(result, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！！</p><h2 id="5-2-deletePackageX"><a href="#5-2-deletePackageX" class="headerlink" title="5.2 deletePackageX"></a>5.2 deletePackageX</h2><p>接着是进入第二阶段的卸载：</p><ul><li>如果可以卸载所有 user 下的安装，那么 deleteFlags 会被设置为 PackageManager.DELETE_ALL_USERS; 而 user 则是每一个用户；</li><li>如果是卸载指定的 user 下的安装，那么 deleteFlags 不会设置为 PackageManager.DELETE_ALL_USERS；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deletePackageX</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> deleteFlags)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.2.1.1】创建一个 PackageRemovedInfo 对象！</span></span><br><span class="line">    <span class="keyword">final</span> PackageRemovedInfo info = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> res;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】这里对 user 又做了一次处理。如果是卸载所有用户下的安装，那么 removeUser 为 UserHandle.USER_ALL！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> removeUser = (deleteFlags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span></span><br><span class="line">            ? UserHandle.USER_ALL : userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*5.2.2】如果要卸载的 pkg 是用于设备管理的，那么禁止卸载，返回！</span></span><br><span class="line">    <span class="keyword">if</span> (isPackageDeviceAdmin(packageName, removeUser)) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Not removing package "</span> + packageName + <span class="string">": has active device admin"</span>);</span><br><span class="line">        <span class="keyword">return</span> PackageManager.DELETE_FAILED_DEVICE_POLICY_MANAGER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PackageSetting uninstalledPs = <span class="keyword">null</span>; <span class="comment">// 要卸载的 apk 的安装信息！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] allUsers;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】获得上一次的安装信息，如果为 null，直接返回！！</span></span><br><span class="line">        uninstalledPs = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (uninstalledPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Not removing non-existent package "</span> + packageName);</span><br><span class="line">            <span class="keyword">return</span> PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】获得所用的 user，并判断 pkg 是安装在哪些 user 下的，返回这些 user 的数组！</span></span><br><span class="line">        allUsers = sUserManager.getUserIds();</span><br><span class="line">        info.origUsers = uninstalledPs.queryInstalledUsers(allUsers, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> freezeUser; <span class="comment">// 用于保存卸载前，应用在那个 user 下处于冻结状态！</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】如果这是要卸载的应用是一个被覆盖安装更新过的 sys apk，同时 deleteFlags 没有设置 DELETE_SYSTEM_APP 位</span></span><br><span class="line">    <span class="comment">// 那么，我们在所有用户下冻结，否则我们只在 removeUser 下冻结！</span></span><br><span class="line">    <span class="comment">//【*5.2.3】isUpdatedSystemApp 判断是否是被覆盖安装更新过的 sys apk！</span></span><br><span class="line">    <span class="keyword">if</span> (isUpdatedSystemApp(uninstalledPs)</span><br><span class="line">            &amp;&amp; ((deleteFlags &amp; PackageManager.DELETE_SYSTEM_APP) == <span class="number">0</span>)) &#123;</span><br><span class="line">        freezeUser = UserHandle.USER_ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        freezeUser = removeUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deletePackageX: pkg="</span> + packageName + <span class="string">" user="</span> + userId);</span><br><span class="line">        <span class="comment">//【*5.2.4】在卸载前进入冻结状态！</span></span><br><span class="line">        <span class="keyword">try</span> (PackageFreezer freezer = freezePackageForDelete(packageName, freezeUser,</span><br><span class="line">                deleteFlags, <span class="string">"deletePackageX"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*5.3】继续卸载；</span></span><br><span class="line">            res = deletePackageLIF(packageName, UserHandle.of(removeUser), <span class="keyword">true</span>, allUsers,</span><br><span class="line">                    deleteFlags | REMOVE_CHATTY, info, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                mEphemeralApplicationRegistry.onPackageUninstalledLPw(uninstalledPs.pkg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【5】res 为 true，表示卸载成功了，那么发送相关的广播！</span></span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> killApp = (deleteFlags &amp; PackageManager.DELETE_DONT_KILL_APP) == <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【*5.2.1.2】发送 removed 广播；</span></span><br><span class="line">        info.sendPackageRemovedBroadcasts(killApp);</span><br><span class="line">        <span class="comment">//【*5.2.1.3】发送 updated 广播；</span></span><br><span class="line">        info.sendSystemPackageUpdatedBroadcasts();</span><br><span class="line">        <span class="comment">//【*5.2.1.4】发送 appeared广播；</span></span><br><span class="line">        info.sendSystemPackageAppearedBroadcasts();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Runtime.getRuntime().gc(); <span class="comment">// gc 回收资源！！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete the resources here after sending the broadcast to let</span></span><br><span class="line">    <span class="comment">// other processes clean up before deleting resources.</span></span><br><span class="line">    <span class="keyword">if</span> (info.args != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mInstallLock) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.2.1.2】执行删除 apk 的操作！！</span></span><br><span class="line">            info.args.doPostDeleteLI(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res ? PackageManager.DELETE_SUCCEEDED : PackageManager.DELETE_FAILED_INTERNAL_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程已经分析的很详细了！！</p><h3 id="5-2-1-PackageRemovedInfo"><a href="#5-2-1-PackageRemovedInfo" class="headerlink" title="5.2.1 PackageRemovedInfo"></a>5.2.1 PackageRemovedInfo</h3><h4 id="5-2-1-1-new-PackageRemovedInfo"><a href="#5-2-1-1-new-PackageRemovedInfo" class="headerlink" title="5.2.1.1 new PackageRemovedInfo"></a>5.2.1.1 new PackageRemovedInfo</h4><p>创建一个 PackageRemovedInfo 实例，分装要卸载的 apk 的相关信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageRemovedInfo</span> </span>&#123;</span><br><span class="line">    String removedPackage;</span><br><span class="line">    <span class="keyword">int</span> uid = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> removedAppId = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] origUsers;</span><br><span class="line">    <span class="keyword">int</span>[] removedUsers = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isRemovedPackageSystemUpdate = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isUpdate;</span><br><span class="line">    <span class="keyword">boolean</span> dataRemoved;</span><br><span class="line">    <span class="keyword">boolean</span> removedForAllUsers;</span><br><span class="line">    InstallArgs args = <span class="keyword">null</span>; <span class="comment">// 参数实例，用于执行卸载，清理的操作，后面会分析到！</span></span><br><span class="line">    ArrayMap&lt;String, PackageRemovedInfo&gt; removedChildPackages;</span><br><span class="line">    ArrayMap&lt;String, PackageInstalledInfo&gt; appearedChildPackages;</span><br><span class="line"></span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，PackageRemovedInfo 内部也有很多的方法，用于发送广播，这里我们先分析当前流程能用的到的!!</p><h4 id="5-2-1-2-sendPackageRemovedBroadcasts"><a href="#5-2-1-2-sendPackageRemovedBroadcasts" class="headerlink" title="5.2.1.2 sendPackageRemovedBroadcasts"></a>5.2.1.2 sendPackageRemovedBroadcasts</h4><p>发送升级包被移除的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcasts</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//【*5.2.1.2.1】发送 removed 的广播；</span></span><br><span class="line">     sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> childCount = removedChildPackages != <span class="keyword">null</span> ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">         PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">         <span class="comment">//【*5.2.1.2.1】对 child pkg 一样的处理；</span></span><br><span class="line">         childInfo.sendPackageRemovedBroadcastInternal(killApp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>逻辑简单，不多说了！</p><h5 id="5-2-1-2-1-sendPackageRemovedBroadcastInternal"><a href="#5-2-1-2-1-sendPackageRemovedBroadcastInternal" class="headerlink" title="5.2.1.2.1 sendPackageRemovedBroadcastInternal"></a>5.2.1.2.1 sendPackageRemovedBroadcastInternal</h5><p>发送 removed 的广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageRemovedBroadcastInternal</span><span class="params">(<span class="keyword">boolean</span> killApp)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span>  ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DATA_REMOVED, dataRemoved);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_DONT_KILL_APP, !killApp);</span><br><span class="line">    <span class="keyword">if</span> (isUpdate || isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REMOVED_FOR_ALL_USERS, removedForAllUsers);</span><br><span class="line">    <span class="keyword">if</span> (removedPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】首先会发送 Intent.ACTION_PACKAGE_REMOVED 的广播；</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED , removedPackage,</span><br><span class="line">                extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        <span class="comment">//【2】然后会发送 Intent.ACTION_PACKAGE_FULLY_REMOVED 的广播；</span></span><br><span class="line">        <span class="comment">// 但前提的是清楚了 data，并且本次是卸载的三方应用；</span></span><br><span class="line">        <span class="keyword">if</span> (dataRemoved &amp;&amp; !isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">            sendPackageBroadcast(Intent.ACTION_PACKAGE_FULLY_REMOVED,</span><br><span class="line">                    removedPackage, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, removedUsers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (removedAppId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【3】最后，发送 Intent.ACTION_UID_REMOVED 广播！</span></span><br><span class="line">        sendPackageBroadcast(Intent.ACTION_UID_REMOVED, <span class="keyword">null</span>, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                removedUsers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不不多说了！</p><h4 id="5-2-1-3-sendSystemPackageUpdatedBroadcasts"><a href="#5-2-1-3-sendSystemPackageUpdatedBroadcasts" class="headerlink" title="5.2.1.3 sendSystemPackageUpdatedBroadcasts"></a>5.2.1.3 sendSystemPackageUpdatedBroadcasts</h4><p>发送 system app updated 广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendSystemPackageUpdatedBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">        <span class="comment">//【*5.2.1.3.1】发送 system app updated 广播；</span></span><br><span class="line">        sendSystemPackageUpdatedBroadcastsInternal();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (removedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                ? removedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageRemovedInfo childInfo = removedChildPackages.valueAt(i);</span><br><span class="line">            <span class="keyword">if</span> (childInfo.isRemovedPackageSystemUpdate) &#123;</span><br><span class="line">                <span class="comment">//【*5.2.1.3.1】对 child pkg 一样的处理；</span></span><br><span class="line">                childInfo.sendSystemPackageUpdatedBroadcastsInternal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑简单，不多说了！</p><h5 id="5-2-1-3-1-sendSystemPackageUpdatedBroadcastsInternal"><a href="#5-2-1-3-1-sendSystemPackageUpdatedBroadcastsInternal" class="headerlink" title="5.2.1.3.1 sendSystemPackageUpdatedBroadcastsInternal"></a>5.2.1.3.1 sendSystemPackageUpdatedBroadcastsInternal</h5><p>核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSystemPackageUpdatedBroadcastsInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">2</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, removedAppId &gt;= <span class="number">0</span> ? removedAppId : uid);</span><br><span class="line">    extras.putBoolean(Intent.EXTRA_REPLACING, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//【1】依次发送如下的三个广播；</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, removedPackage,</span><br><span class="line">            extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED, removedPackage,</span><br><span class="line">            extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_MY_PACKAGE_REPLACED, <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>, <span class="number">0</span>, removedPackage, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="5-2-1-4-sendSystemPackageAppearedBroadcasts"><a href="#5-2-1-4-sendSystemPackageAppearedBroadcasts" class="headerlink" title="5.2.1.4 sendSystemPackageAppearedBroadcasts"></a>5.2.1.4 sendSystemPackageAppearedBroadcasts</h4><p>发送 system app appeared 广播，针对于 child apk：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendSystemPackageAppearedBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> packageCount = (appearedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">            ? appearedChildPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; packageCount; i++) &#123;</span><br><span class="line">        PackageInstalledInfo installedInfo = appearedChildPackages.valueAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> userId : installedInfo.newUsers) &#123;</span><br><span class="line">            <span class="comment">//【*5.2.1.4.1】发送 child apk appeared 的广播！</span></span><br><span class="line">            sendPackageAddedForUser(installedInfo.name, <span class="keyword">true</span>,</span><br><span class="line">                    UserHandle.getAppId(installedInfo.uid), userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-1-4-1-sendPackageAddedForUser-of-pms"><a href="#5-2-1-4-1-sendPackageAddedForUser-of-pms" class="headerlink" title="5.2.1.4.1 sendPackageAddedForUser(of pms)"></a>5.2.1.4.1 sendPackageAddedForUser(of pms)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, PackageSetting pkgSetting,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断是否是 sys app！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isSystem = isSystemApp(pkgSetting) || isUpdatedSystemApp(pkgSetting);</span><br><span class="line">    <span class="comment">//【*5.2.1.4.2】继续发送：</span></span><br><span class="line">    sendPackageAddedForUser(packageName, isSystem, pkgSetting.appId, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-1-4-2-sendPackageAddedForUser-of-pms"><a href="#5-2-1-4-2-sendPackageAddedForUser-of-pms" class="headerlink" title="5.2.1.4.2 sendPackageAddedForUser(of pms)"></a>5.2.1.4.2 sendPackageAddedForUser(of pms)</h5><p>核心方法，这里的 boolean isSystem 传入的是 true：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackageAddedForUser</span><span class="params">(String packageName, <span class="keyword">boolean</span> isSystem,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> appId, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    Bundle extras = <span class="keyword">new</span> Bundle(<span class="number">1</span>);</span><br><span class="line">    extras.putInt(Intent.EXTRA_UID, UserHandle.getUid(userId, appId));</span><br><span class="line">    <span class="comment">//【1】发送 Intent.ACTION_PACKAGE_ADDED 广播！！</span></span><br><span class="line">    sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,</span><br><span class="line">            packageName, extras, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (isSystem &amp;&amp; am.isUserRunning(userId, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// The just-installed/enabled app is bundled on the system, so presumed</span></span><br><span class="line">            <span class="comment">// to be able to run automatically without needing an explicit launch.</span></span><br><span class="line">            <span class="comment">// Send it a BOOT_COMPLETED if it would ordinarily have gotten one.</span></span><br><span class="line">            Intent bcIntent = <span class="keyword">new</span> Intent(Intent.ACTION_BOOT_COMPLETED)</span><br><span class="line">                    .addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES)</span><br><span class="line">                    .setPackage(packageName);</span><br><span class="line">            am.broadcastIntent(<span class="keyword">null</span>, bcIntent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                    android.app.AppOpsManager.OP_NONE, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// shouldn't happen</span></span><br><span class="line">        Slog.w(TAG, <span class="string">"Unable to bootstrap installed package"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-isPackageDeviceAdmin"><a href="#5-2-2-isPackageDeviceAdmin" class="headerlink" title="5.2.2 isPackageDeviceAdmin"></a>5.2.2 isPackageDeviceAdmin</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPackageDeviceAdmin</span><span class="params">(String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    IDevicePolicyManager dpm = IDevicePolicyManager.Stub.asInterface(</span><br><span class="line">            ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dpm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ComponentName deviceOwnerComponentName = dpm.getDeviceOwnerComponent(</span><br><span class="line">                    <span class="comment">/* callingUserOnly =*/</span> <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">final</span> String deviceOwnerPackageName = deviceOwnerComponentName == <span class="keyword">null</span> ? <span class="keyword">null</span></span><br><span class="line">                    : deviceOwnerComponentName.getPackageName();</span><br><span class="line">            <span class="comment">// Does the package contains the device owner?</span></span><br><span class="line">            <span class="comment">// TODO Do we have to do it even if userId != UserHandle.USER_ALL?  Otherwise,</span></span><br><span class="line">            <span class="comment">// this check is probably not needed, since DO should be registered as a device</span></span><br><span class="line">            <span class="comment">// admin on some user too. (Original bug for this: b/17657954)</span></span><br><span class="line">            <span class="keyword">if</span> (packageName.equals(deviceOwnerPackageName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Does it contain a device admin for any user?</span></span><br><span class="line">            <span class="keyword">int</span>[] users;</span><br><span class="line">            <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">                users = sUserManager.getUserIds();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                users = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;userId&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dpm.packageHasActiveAdmins(packageName, users[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-isUpdatedSystemApp"><a href="#5-2-3-isUpdatedSystemApp" class="headerlink" title="5.2.3 isUpdatedSystemApp"></a>5.2.3 isUpdatedSystemApp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUpdatedSystemApp</span><span class="params">(PackageSetting ps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ps.pkgFlags &amp; ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-freezePackageForInstall"><a href="#5-2-4-freezePackageForInstall" class="headerlink" title="5.2.4 freezePackageForInstall"></a>5.2.4 freezePackageForInstall</h3><p>进入冻结状态！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackageForInstall</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">int</span> installFlags,</span></span></span><br><span class="line"><span class="function"><span class="params">        String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((installFlags &amp; PackageManager.INSTALL_DONT_KILL_APP) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*5.2.4.1】对于卸载的情况，是进入这里的！</span></span><br><span class="line">        <span class="keyword">return</span> freezePackage(packageName, userId, killReason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-2-4-1-freezePackage"><a href="#5-2-4-1-freezePackage" class="headerlink" title="5.2.4.1 freezePackage"></a>5.2.4.1 freezePackage</h4><p>看代码是创建了一个 PackageFreezer 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PackageFreezer <span class="title">freezePackage</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.2.4.2】创建一个 PackageFreezer 实例！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PackageFreezer(packageName, userId, killReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-2-new-PackageFreezer"><a href="#5-2-4-2-new-PackageFreezer" class="headerlink" title="5.2.4.2 new PackageFreezer"></a>5.2.4.2 new PackageFreezer</h4><p>PackageFreezer 是一个冻结对象，在创建它的时候就会执行冻结操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageFreezer</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mPackageName; <span class="comment">// 要被冻结的 pkg</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PackageFreezer[] mChildren; <span class="comment">// 要被冻结的 child pkg</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mWeFroze;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mClosed = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloseGuard mCloseGuard = CloseGuard.get();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPackageName = <span class="keyword">null</span>;</span><br><span class="line">        mChildren = <span class="keyword">null</span>;</span><br><span class="line">        mWeFroze = <span class="keyword">false</span>;</span><br><span class="line">        mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageFreezer</span><span class="params">(String packageName, <span class="keyword">int</span> userId, String killReason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            mPackageName = packageName;</span><br><span class="line">            <span class="comment">//【1】将该 pkg 添加到 pms 的内部 mFrozenPackages 集合中！</span></span><br><span class="line">            mWeFroze = mFrozenPackages.add(mPackageName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2】返回 pkg 的安装信息，如果不会 null，那就 kill 掉该进程！</span></span><br><span class="line">            <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(mPackageName);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【2.1】kill app 进程，这里不过多关注！</span></span><br><span class="line">                killApplication(ps.name, ps.appId, userId, killReason);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3】如果该 package 有 child package，做同样的处理！</span></span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package p = mPackages.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; p.childPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> N = p.childPackages.size();</span><br><span class="line">                mChildren = <span class="keyword">new</span> PackageFreezer[N];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                    mChildren[i] = <span class="keyword">new</span> PackageFreezer(p.childPackages.get(i).packageName,</span><br><span class="line">                            userId, killReason);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mChildren = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mCloseGuard.open(<span class="string">"close"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 pms 的内部，有一个集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy</span>(<span class="string">"mPackages"</span>)</span><br><span class="line"><span class="keyword">final</span> ArraySet&lt;String&gt; mFrozenPackages = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br></pre></td></tr></table></figure><p>用于保存所有的处于冻结状态的 package！</p><h2 id="5-3-deletePackageLIF"><a href="#5-3-deletePackageLIF" class="headerlink" title="5.3 deletePackageLIF"></a>5.3 deletePackageLIF</h2><p>接着进入卸载的第三个阶段，我们来回归下参数：</p><ul><li>boolean deleteCodeAndResources：表示是否删除 apk 和资源，这里传入的是 true；</li><li>int flags：卸载的 flags，传入 deleteFlags | REMOVE_CHATTY；</li><li>boolean writeSettings：是否持久化处理的数据，这里传入的是 true；</li><li>PackageParser.Package replacingPackage：用于取代的 pkg，这里传入的是 null；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deletePackageLIF</span><span class="params">(String packageName, UserHandle user,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete null packageName."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deletePackageLI: "</span> + packageName + <span class="string">" user "</span> + user);</span><br><span class="line"></span><br><span class="line">    PackageSetting ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得上一次的安装信息！</span></span><br><span class="line">        ps = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (ps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">"Package named '"</span> + packageName + <span class="string">"' doesn't exist."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果卸载的是 child package，并且</span></span><br><span class="line">        <span class="comment">// 其不是 sys app（无 FLAG_SYSTEM 标志位），或者是 sys app，且卸载 flags 设置了 DELETE_SYSTEM_APP 位！</span></span><br><span class="line">        <span class="comment">// 那么这里立刻执行卸载！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.parentPackageName != <span class="keyword">null</span> &amp;&amp; (!isSystemApp(ps)</span><br><span class="line">                || (flags &amp; PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Uninstalled child package:"</span> + packageName + <span class="string">" for user:"</span></span><br><span class="line">                        + ((user == <span class="keyword">null</span>) ? UserHandle.USER_ALL : user));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> removedUserId = (user != <span class="keyword">null</span>) ? user.getIdentifier()</span><br><span class="line">                    : UserHandle.USER_ALL;</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//【*5.3.1】清理该 pkg 在 removedUserId 下的数据！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, removedUserId, outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*5.3.2】设置该 pkg 的使用状态信息！</span></span><br><span class="line">            markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果卸载的不是 sys app（无 FLAG_SYSTEM 标志位），或者卸载 flags 设置了 DELETE_SYSTEM_APP 位！</span></span><br><span class="line">    <span class="comment">// 同时，只是在某个用户下卸载该 apk，进入下面的逻辑</span></span><br><span class="line">    <span class="comment">// 可以看到：如果 apk 是 sys，那么还必须要设置 DELETE_SYSTEM_APP 标志位才行！</span></span><br><span class="line">    <span class="keyword">if</span> (((!isSystemApp(ps) || (flags&amp;PackageManager.DELETE_SYSTEM_APP) != <span class="number">0</span>) &amp;&amp; user != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; user.getIdentifier() != UserHandle.USER_ALL)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*5.3.2】设置该 pkg 的使用状态信息！</span></span><br><span class="line">        markPackageUninstalledForUserLPw(ps, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2.1】如果是 data app，进入 if 分支，而 sys app 进入 else 分支！</span></span><br><span class="line">        <span class="keyword">if</span> (!isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="comment">//【*5.3.3】判断下该应用是否需要被缓存下来！！</span></span><br><span class="line">            <span class="keyword">boolean</span> keepUninstalledPackage = shouldKeepUninstalledPackageLPr(packageName);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.1.1】该 apk 在一些用户下处于 install 状态，或者该 pkg 需要被 keep！</span></span><br><span class="line">            <span class="keyword">if</span> (ps.isAnyInstalled(sUserManager.getUserIds()) || keepUninstalledPackage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Still installed by other users"</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【*5.3.1】清理该 pkg 在 user 下的数据，清楚shibai！</span></span><br><span class="line">                <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">                scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Not installed by other users, full delete"</span>);</span><br><span class="line">                <span class="comment">//【2.1.1】该 apk 没有在任何 user 下安装，同时也不需要 keep，那么这里会将其在该 user 下的</span></span><br><span class="line">                <span class="comment">// 的安装状态设置为 true，这样卸载广播就能正确的发出了（感觉像是解决一个 bug）</span></span><br><span class="line">                ps.setInstalled(<span class="keyword">true</span>, user.getIdentifier());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Deleting system app"</span>);</span><br><span class="line">            <span class="comment">//【2.2】对于 sys app，所有用户都会有该 app，所以这里我们会清楚在该 user 下的数据！</span></span><br><span class="line">            <span class="comment">//【*5.3.1】清理该 pkg 在 user 下的数据，清楚shibai！</span></span><br><span class="line">            <span class="keyword">if</span> (!clearPackageStateForUserLIF(ps, user.getIdentifier(), outInfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新应用的偏好设置，这里我们就先不分析，有时间了加进去！</span></span><br><span class="line">            scheduleWritePackageRestrictionsLocked(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果要卸载的 apk 是一个复合 apk，有 split apk，那么这里会对其 child pkg 做同样的处理！！</span></span><br><span class="line">    <span class="keyword">if</span> (ps.childPackageNames != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = ps.childPackageNames.size();</span><br><span class="line">            <span class="comment">//【*5.2.1】将每一个 child pkg 都封装成一个 PackageRemovedInfo 实例，并计算其 origUsers</span></span><br><span class="line">            <span class="comment">// 加到 parent pkg 的 outInfo.removedChildPackages 中！</span></span><br><span class="line">            outInfo.removedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;(childCount);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageRemovedInfo childInfo = <span class="keyword">new</span> PackageRemovedInfo();</span><br><span class="line">                childInfo.removedPackage = childPackageName;</span><br><span class="line">                outInfo.removedChildPackages.put(childPackageName, childInfo);</span><br><span class="line">                PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.origUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【4】进入核心的卸载阶段，这个阶段在返回后，会创建一个 InstallArgs 对象！！</span></span><br><span class="line">    <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【*6.1】卸载 sys app，如果 sys app 被覆盖安装过，那么会 fall back 回 sys app！</span></span><br><span class="line">        ret = deleteSystemPackageLIF(ps.pkg, ps, allUserHandles, flags, outInfo, writeSettings);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Removing non-system package: "</span> + ps.name);</span><br><span class="line">        <span class="comment">//【*6.1】卸载 data app!</span></span><br><span class="line">        ret = deleteInstalledPackageLIF(ps, deleteCodeAndResources, flags, allUserHandles,</span><br><span class="line">                outInfo, writeSettings, replacingPackage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】这里是记录下我们是否是在所有用户下移除 pkg，对 child apk 也做同样的处理！</span></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outInfo.removedForAllUsers = mPackages.get(ps.name) == <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = outInfo.removedChildPackages.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    PackageRemovedInfo childInfo = outInfo.removedChildPackages.valueAt(i);</span><br><span class="line">                    <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        childInfo.removedForAllUsers = mPackages.get(</span><br><span class="line">                                childInfo.removedPackage) == <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5.1】这里对被覆盖安装过的 sys app 又做了特殊处理！！我们知道当我们删除了位于 data 的 app 数据后</span></span><br><span class="line">        <span class="comment">// 我们会恢复 sys app 的安装数据！这里主要是处理如下情况：</span></span><br><span class="line">        <span class="comment">// 如果 sys app 有 child pkg，但是可能有一些 child pkg 只申明在了 sys app 中，没有在 updated app 中</span></span><br><span class="line">        <span class="comment">// 此时我们会重新创建 child pkg 的 PackageInstalledInfo，保存到 outInfo 中！</span></span><br><span class="line">        <span class="keyword">if</span> (isSystemApp(ps)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                PackageSetting updatedPs = mSettings.peekPackageLPr(ps.name);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childCount = (updatedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                        ? updatedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                    String childPackageName = updatedPs.childPackageNames.get(i);</span><br><span class="line">                    <span class="comment">//【5.1.1】如果 outInfo 没有保存该 child pkg，进行以下逻辑：</span></span><br><span class="line">                    <span class="keyword">if</span> (outInfo.removedChildPackages == <span class="keyword">null</span></span><br><span class="line">                            || outInfo.removedChildPackages.indexOfKey(childPackageName) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        PackageSetting childPs = mSettings.peekPackageLPr(childPackageName);</span><br><span class="line">                        <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//【5.1.1】为该 child 创建一个 PackageInstalledInfo 实例，记录相关属性</span></span><br><span class="line">                        <span class="comment">// 保存到 outInfo.appearedChildPackages 集合中！</span></span><br><span class="line">                        PackageInstalledInfo installRes = <span class="keyword">new</span> PackageInstalledInfo();</span><br><span class="line">                        installRes.name = childPackageName;</span><br><span class="line">                        installRes.newUsers = childPs.queryInstalledUsers(allUserHandles, <span class="keyword">true</span>);</span><br><span class="line">                        installRes.pkg = mPackages.get(childPackageName);</span><br><span class="line">                        installRes.uid = childPs.pkg.applicationInfo.uid;</span><br><span class="line">                        <span class="keyword">if</span> (outInfo.appearedChildPackages == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            outInfo.appearedChildPackages = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">                        &#125;</span><br><span class="line">                        outInfo.appearedChildPackages.put(childPackageName, installRes);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，这一阶段就分析结束了！</p><h3 id="5-3-1-clearPackageStateForUserLIF"><a href="#5-3-1-clearPackageStateForUserLIF" class="headerlink" title="5.3.1 clearPackageStateForUserLIF"></a>5.3.1 clearPackageStateForUserLIF</h3><p>清理数据，可以看到这个方法里面执行的操作有很多：清楚数据等等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">clearPackageStateForUserLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package pkg;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        pkg = mPackages.get(ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】如果是 UserHandle.USER_ALL，那么这里会返回当前的所有 user id！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (userId == UserHandle.USER_ALL) ? sUserManager.getUserIds()</span><br><span class="line">            : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;userId&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】遍历执行删除操作：</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Updating package:"</span> + ps.name + <span class="string">" install state for user:"</span></span><br><span class="line">                    + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        destroyAppDataLIF(pkg, userId,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">        destroyAppProfilesLIF(pkg, userId);</span><br><span class="line">        removeKeystoreDataIfNeeded(nextUserId, ps.appId);</span><br><span class="line">        schedulePackageCleaning(ps.name, nextUserId, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clearPackagePreferredActivitiesLPw(ps.name, nextUserId)) &#123;</span><br><span class="line">                scheduleWritePackageRestrictionsLocked(nextUserId);</span><br><span class="line">            &#125;</span><br><span class="line">            resetUserChangesToRuntimePermissionsAndFlagsLPw(ps, nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outInfo.removedPackage = ps.name;</span><br><span class="line">        outInfo.removedAppId = ps.appId;</span><br><span class="line">        outInfo.removedUsers = userIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-markPackageUninstalledForUserLPw"><a href="#5-3-2-markPackageUninstalledForUserLPw" class="headerlink" title="5.3.2 markPackageUninstalledForUserLPw"></a>5.3.2 markPackageUninstalledForUserLPw</h3><p>修改在该 user 下的使用状态为 no install 的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">markPackageUninstalledForUserLPw</span><span class="params">(PackageSetting ps, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] userIds = (user == <span class="keyword">null</span> || user.getIdentifier() == UserHandle.USER_ALL)</span><br><span class="line">            ? sUserManager.getUserIds() : <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;user.getIdentifier()&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nextUserId : userIds) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Marking package:"</span> + ps.name + <span class="string">" uninstalled for user:"</span> + nextUserId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】设置对应的 PackageUserState 中的状态！</span></span><br><span class="line">        ps.setUserState(nextUserId, <span class="number">0</span>, COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*installed*/</span>, <span class="keyword">true</span> <span class="comment">/*stopped*/</span>, <span class="keyword">true</span> <span class="comment">/*notLaunched*/</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*hidden*/</span>, <span class="keyword">false</span> <span class="comment">/*suspended*/</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">false</span> <span class="comment">/*blockUninstall*/</span>,</span><br><span class="line">                ps.readUserState(nextUserId).domainVerificationStatus, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，就不多说了！</p><h3 id="5-3-3-shouldKeepUninstalledPackageLPr"><a href="#5-3-3-shouldKeepUninstalledPackageLPr" class="headerlink" title="5.3.3 shouldKeepUninstalledPackageLPr"></a>5.3.3 shouldKeepUninstalledPackageLPr</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldKeepUninstalledPackageLPr</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mKeepUninstalledPackages != <span class="keyword">null</span> &amp;&amp; mKeepUninstalledPackages.contains(packageName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-PackageManagerService"><a href="#6-PackageManagerService" class="headerlink" title="6 PackageManagerService"></a>6 PackageManagerService</h1><p>接下来，我们分别分析下 sys app 和 data app 的卸载过程：</p><h2 id="6-1-deleteSystemPackageLIF"><a href="#6-1-deleteSystemPackageLIF" class="headerlink" title="6.1 deleteSystemPackageLIF"></a>6.1 deleteSystemPackageLIF</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteSystemPackageLIF</span><span class="params">(PackageParser.Package deletedPkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageSetting deletedPs, <span class="keyword">int</span>[] allUserHandles, <span class="keyword">int</span> flags, PackageRemovedInfo outInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deletedPs.parentPackageName != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete child system package "</span> + deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】判断是否考虑用户限制！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> applyUserRestrictions</span><br><span class="line">            = (allUserHandles != <span class="keyword">null</span>) &amp;&amp; (outInfo.origUsers != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> PackageSetting disabledPs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】判断该应用是否是一个被覆盖安装更新过的 sys app!!</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        disabledPs = mSettings.getDisabledSystemPkgLPr(deletedPs.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"deleteSystemPackageLI: newPs="</span> + deletedPkg.packageName</span><br><span class="line">            + <span class="string">" disabledPs="</span> + disabledPs);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】只有覆盖安装过的 sys app 才能被卸载，实际上卸载的是处于 data 的那个 apk！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Attempt to delete unknown system package "</span>+ deletedPkg.packageName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        Slog.d(TAG, <span class="string">"Deleting system pkg from data partition"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">"Remembering install states:"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> finstalled = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                Slog.d(TAG, <span class="string">"   u="</span> + userId + <span class="string">" inst="</span> + finstalled);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】设置 pkg 对应的 outInfo 的 isRemovedPackageSystemUpdate 为 true，表示移除的是更新！</span></span><br><span class="line">    <span class="comment">// 如果 pkg 有 child pkg，也要设置其对应的属性！</span></span><br><span class="line">    outInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (deletedPs.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                ? deletedPs.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            String childPackageName = deletedPs.childPackageNames.get(i);</span><br><span class="line">            <span class="keyword">if</span> (disabledPs.childPackageNames != <span class="keyword">null</span> &amp;&amp; disabledPs.childPackageNames</span><br><span class="line">                    .contains(childPackageName)) &#123;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.isRemovedPackageSystemUpdate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】判断下覆盖安装前后的 versioncode，如果覆盖前的小，那么本次卸载后，数据也会被清除；</span></span><br><span class="line">    <span class="comment">// 如果相等，那么就保留数据！</span></span><br><span class="line">    <span class="keyword">if</span> (disabledPs.versionCode &lt; deletedPs.versionCode) &#123;</span><br><span class="line">        flags &amp;= ~PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags |= PackageManager.DELETE_KEEP_DATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2】继续处理卸载，可以看到，此时和卸载 data app 的一样的了！</span></span><br><span class="line">    <span class="keyword">boolean</span> ret = deleteInstalledPackageLIF(deletedPs, <span class="keyword">true</span>, flags, allUserHandles,</span><br><span class="line">            outInfo, writeSettings, disabledPs.pkg);</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【6】接着，需要恢复 sys app！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">// Reinstate the old system package</span></span><br><span class="line">        <span class="comment">//【*6.1.1】恢复 sys app 的安装数据！</span></span><br><span class="line">        enableSystemPackageLPw(disabledPs.pkg);</span><br><span class="line">        <span class="comment">//【*6.1.2】移除所有的本地库！</span></span><br><span class="line">        removeNativeBinariesLI(deletedPs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】准备重新扫描 sys app，首先会设置基本的扫描参数！</span></span><br><span class="line">    <span class="comment">// 如果是 pri app，还要设置 PARSE_IS_PRIVILEGED 标志位！</span></span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"Re-installing system package: "</span> + disabledPs);</span><br><span class="line">    <span class="keyword">int</span> parseFlags = mDefParseFlags</span><br><span class="line">            | PackageParser.PARSE_MUST_BE_APK</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM</span><br><span class="line">            | PackageParser.PARSE_IS_SYSTEM_DIR;</span><br><span class="line">    <span class="comment">//【*6.1.3】判断是否是 pri app！</span></span><br><span class="line">    <span class="keyword">if</span> (locationIsPrivileged(disabledPs.codePath)) &#123;</span><br><span class="line">        parseFlags |= PackageParser.PARSE_IS_PRIVILEGED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package newPkg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【8】重新扫描 sys app，这里我们在开机扫描的时候有分析过，不多说了！！</span></span><br><span class="line">        newPkg = scanPackageTracedLI(disabledPs.codePath, parseFlags, SCAN_NO_PATHS, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">"Failed to restore system package:"</span> + deletedPkg.packageName + <span class="string">": "</span></span><br><span class="line">                + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*6.1.4】更新共享库！</span></span><br><span class="line">        updateSharedLibrariesLPw(newPkg, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManagerException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"updateAllSharedLibrariesLPw failed: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*6.1.5】准备应用的数据目录！</span></span><br><span class="line">    prepareAppDataAfterInstallLIF(newPkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【9】最后就是要想最新的信息持久化到本地文件：包括安装信息，偏好设置，权限等等！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【9.1】读取最新的安装信息！</span></span><br><span class="line">        PackageSetting ps = mSettings.mPackages.get(newPkg.packageName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9.2】将卸载前的权限授予信息拷贝到本次新安装的信息中！！</span></span><br><span class="line">        ps.getPermissionsState().copyFrom(deletedPs.getPermissionsState());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【9.3-review】更新权限信息，这里我们在 pms 的启动时分析过，这里就不再细说了！</span></span><br><span class="line">        <span class="comment">// 这里会更新所有应用的权限信息，移除过时的运行时权限，自动授予安装时权限等！</span></span><br><span class="line">        updatePermissionsLPw(newPkg.packageName, newPkg,</span><br><span class="line">                UPDATE_PERMISSIONS_ALL | UPDATE_PERMISSIONS_REPLACE_PKG);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【9.4】如果需要应用用户限制，会进入这个分支！</span></span><br><span class="line">        <span class="keyword">if</span> (applyUserRestrictions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                Slog.d(TAG, <span class="string">"Propagating install state across reinstall"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【9.4.1】重新设置在每个用户下的 install 状态！</span></span><br><span class="line">                ps.setInstalled(installed, userId);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【9.4.2】持久化所有用户下的运行时权限信息！</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【9.4.3】持久化所有用户下的应用偏好设置！</span></span><br><span class="line">            mSettings.writeAllUsersPackageRestrictionsLPr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【9.5】持久化 Settings 中的数据，包括 packages.xml，packages.list 等等！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个逻辑很详细了，不多说了！！</p><h3 id="6-1-1-enableSystemPackageLPw"><a href="#6-1-1-enableSystemPackageLPw" class="headerlink" title="6.1.1 enableSystemPackageLPw"></a>6.1.1 enableSystemPackageLPw</h3><p>恢复 sys app 的安装信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enableSystemPackageLPw</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.1.1.1】恢复 pkg 的安装信息！</span></span><br><span class="line">    mSettings.enableSystemPackageLPw(pkg.packageName);</span><br><span class="line">    <span class="comment">//【*6.1.1.1】恢复 pkg 的 child pkg 的安装信息！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageParser.Package childPkg = pkg.childPackages.get(i);</span><br><span class="line">        mSettings.enableSystemPackageLPw(childPkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h4 id="6-1-1-1-Settings-enableSystemPackageLPw"><a href="#6-1-1-1-Settings-enableSystemPackageLPw" class="headerlink" title="6.1.1.1 Settings.enableSystemPackageLPw"></a>6.1.1.1 Settings.enableSystemPackageLPw</h4><p>核心方法是在 Settings 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PackageSetting <span class="title">enableSystemPackageLPw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断下是否被覆盖安装过！</span></span><br><span class="line">    PackageSetting p = mDisabledSysPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Log.w(PackageManagerService.TAG, <span class="string">"Package "</span> + name + <span class="string">" is not disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】取消掉 FLAG_UPDATED_SYSTEM_APP 标志位！</span></span><br><span class="line">    <span class="keyword">if</span>((p.pkg != <span class="keyword">null</span>) &amp;&amp; (p.pkg.applicationInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">        p.pkg.applicationInfo.flags &amp;= ~ApplicationInfo.FLAG_UPDATED_SYSTEM_APP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3-review】创建一个新的 PackageSetting 实例，同时将其添加到 Settings 内部的集合中！</span></span><br><span class="line">    <span class="comment">// 这个我们在 pms 开机中分析过！</span></span><br><span class="line">    PackageSetting ret = addPackageLPw(name, p.realName, p.codePath, p.resourcePath,</span><br><span class="line">            p.legacyNativeLibraryPathString, p.primaryCpuAbiString,</span><br><span class="line">            p.secondaryCpuAbiString, p.cpuAbiOverrideString,</span><br><span class="line">            p.appId, p.versionCode, p.pkgFlags, p.pkgPrivateFlags,</span><br><span class="line">            p.parentPackageName, p.childPackageNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】从 mDisabledSysPackages 删除信息！</span></span><br><span class="line">    mDisabledSysPackages.remove(name);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析！</p><h3 id="6-1-2-removeNativeBinariesLI"><a href="#6-1-2-removeNativeBinariesLI" class="headerlink" title="6.1.2 removeNativeBinariesLI"></a>6.1.2 removeNativeBinariesLI</h3><p>移除本地库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNativeBinariesLI</span><span class="params">(PackageSetting ps)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】移除 pkg 的本地库！</span></span><br><span class="line">    <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">        NativeLibraryHelper.removeNativeBinariesLI(ps.legacyNativeLibraryPathString);</span><br><span class="line">        <span class="comment">//【1.1】移除 pkg 的 child pkg 的本地库！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>) ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            PackageSetting childPs = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                childPs = mSettings.peekPackageLPr(ps.childPackageNames.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                NativeLibraryHelper.removeNativeBinariesLI(childPs</span><br><span class="line">                        .legacyNativeLibraryPathString);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是通过 NativeLibraryHelper 的相关接口来移除的，这里就不过多分析了！</p><h3 id="6-1-3-locationIsPrivileged"><a href="#6-1-3-locationIsPrivileged" class="headerlink" title="6.1.3 locationIsPrivileged"></a>6.1.3 locationIsPrivileged</h3><p>判断是否是 pri app：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">locationIsPrivileged</span><span class="params">(File path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String privilegedAppDir = <span class="keyword">new</span> File(Environment.getRootDirectory(), <span class="string">"priv-app"</span>)</span><br><span class="line">                .getCanonicalPath();</span><br><span class="line">        <span class="comment">//【1】核心逻辑，是否是以 /system/priv-app 开头的！</span></span><br><span class="line">        <span class="keyword">return</span> path.getCanonicalPath().startsWith(privilegedAppDir);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        Slog.e(TAG, <span class="string">"Unable to access code path "</span> + path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！！</p><h3 id="6-1-4-updateSharedLibrariesLPw"><a href="#6-1-4-updateSharedLibrariesLPw" class="headerlink" title="6.1.4 updateSharedLibrariesLPw"></a>6.1.4 updateSharedLibrariesLPw</h3><p>更新共享库文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSharedLibrariesLPw</span><span class="params">(PackageParser.Package pkg,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package changingLib)</span> <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg.usesLibraries != <span class="keyword">null</span> || pkg.usesOptionalLibraries != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】用于手机该 pkg 需要的所有共享库！</span></span><br><span class="line">        <span class="keyword">final</span> ArraySet&lt;String&gt; usesLibraryFiles = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">//【2】处理 pkg.usesLibraries 指定依赖的库</span></span><br><span class="line">        <span class="keyword">int</span> N = pkg.usesLibraries != <span class="keyword">null</span> ? pkg.usesLibraries.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="comment">//【2.1】要尝试在系统已有的共享库中找到对应的库！</span></span><br><span class="line">            <span class="keyword">final</span> SharedLibraryEntry file = mSharedLibraries.get(pkg.usesLibraries.get(i));</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_MISSING_SHARED_LIBRARY,</span><br><span class="line">                        <span class="string">"Package "</span> + pkg.packageName + <span class="string">" requires unavailable shared library "</span></span><br><span class="line">                        + pkg.usesLibraries.get(i) + <span class="string">"; failing!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【*6.1.4.1】将依赖的库加入到 usesLibraryFiles 中！</span></span><br><span class="line">            addSharedLibraryLPw(usesLibraryFiles, file, changingLib);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】处理 pkg.usesOptionalLibraries 指定依赖的库</span></span><br><span class="line">        N = pkg.usesOptionalLibraries != <span class="keyword">null</span> ? pkg.usesOptionalLibraries.size() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> SharedLibraryEntry file = mSharedLibraries.get(pkg.usesOptionalLibraries.get(i));</span><br><span class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Slog.w(TAG, <span class="string">"Package "</span> + pkg.packageName</span><br><span class="line">                        + <span class="string">" desires unavailable shared library "</span></span><br><span class="line">                        + pkg.usesOptionalLibraries.get(i) + <span class="string">"; ignoring!"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.1.4.1】将依赖的库加入到 usesLibraryFiles 中！</span></span><br><span class="line">                addSharedLibraryLPw(usesLibraryFiles, file, changingLib);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】最后将收集到的共享库文件路径保存到 pkg.usesLibraryFiles 中！</span></span><br><span class="line">        N = usesLibraryFiles.size();</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pkg.usesLibraryFiles = usesLibraryFiles.toArray(<span class="keyword">new</span> String[N]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pkg.usesLibraryFiles = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PackageParser.Package 内有如下的集合，表示该 pkg 依赖的共享库的名称：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; usesLibraries = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;String&gt; usesOptionalLibraries = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><p>同时也有下面的集合，保存了依赖的所有的共享库的路径：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] usesLibraryFiles = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><p>不多说了！</p><h4 id="6-1-4-1-addSharedLibraryLPw"><a href="#6-1-4-1-addSharedLibraryLPw" class="headerlink" title="6.1.4.1 addSharedLibraryLPw"></a>6.1.4.1 addSharedLibraryLPw</h4><p>参数 PackageParser.Package changingLib 表示我们改变了共享库的定义 apk，那么我们要将新的 apk 传进来，作为新的依赖！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSharedLibraryLPw</span><span class="params">(ArraySet&lt;String&gt; usesLibraryFiles, SharedLibraryEntry file,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package changingLib)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果共享库的 path 不为 null，那就直接加入到 usesLibraryFiles 中！</span></span><br><span class="line">    <span class="keyword">if</span> (file.path != <span class="keyword">null</span>) &#123;</span><br><span class="line">        usesLibraryFiles.add(file.path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】否则就找到定义共享库的 apk！</span></span><br><span class="line">    PackageParser.Package p = mPackages.get(file.apk);</span><br><span class="line">    <span class="keyword">if</span> (changingLib != <span class="keyword">null</span> &amp;&amp; changingLib.packageName.equals(file.apk)) &#123;</span><br><span class="line">        <span class="comment">//【2.1】如果此时 changingLib 不为 null，同时匹配，那么我们就依赖这个 changingLib！</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || p.packageName.equals(changingLib.packageName)) &#123;</span><br><span class="line">            p = changingLib;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】依赖定义 lib 的 apk！</span></span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        usesLibraryFiles.addAll(p.getAllCodePaths());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="6-1-5-prepareAppDataAfterInstallLIF"><a href="#6-1-5-prepareAppDataAfterInstallLIF" class="headerlink" title="6.1.5 prepareAppDataAfterInstallLIF"></a>6.1.5 prepareAppDataAfterInstallLIF</h3><p>准备数据目录！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataAfterInstallLIF</span><span class="params">(PackageParser.Package pkg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】保存 Kernel Map 数据！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">        mSettings.writeKernelMappingLPr(ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> UserManager um = mContext.getSystemService(UserManager.class);</span><br><span class="line">    UserManagerInternal umInternal = getUserManagerInternal();</span><br><span class="line">    <span class="keyword">for</span> (UserInfo user : um.getUsers()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags;</span><br><span class="line">        <span class="keyword">if</span> (umInternal.isUserUnlockingOrUnlocked(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (umInternal.isUserRunning(user.id)) &#123;</span><br><span class="line">            flags = StorageManager.FLAG_STORAGE_DE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果在该 user 下是安装状态，那就在该设备用户下准备数据目录！</span></span><br><span class="line">        <span class="keyword">if</span> (ps.getInstalled(user.id)) &#123;</span><br><span class="line">            <span class="comment">//【*6.1.5.1】准备数据目录！</span></span><br><span class="line">            prepareAppDataLIF(pkg, user.id, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续分析：</p><h4 id="6-1-5-1-prepareAppDataLIF"><a href="#6-1-5-1-prepareAppDataLIF" class="headerlink" title="6.1.5.1 prepareAppDataLIF"></a>6.1.5.1 prepareAppDataLIF</h4><p>这个方法会对 pkg 以及其 child pkg 准备目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.1.5.2】准备父包的数据目录</span></span><br><span class="line">    prepareAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【*6.1.5.2】准备子包的数据目录</span></span><br><span class="line">        prepareAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="6-1-5-2-prepareAppDataLeafLIF"><a href="#6-1-5-2-prepareAppDataLeafLIF" class="headerlink" title="6.1.5.2 prepareAppDataLeafLIF"></a>6.1.5.2 prepareAppDataLeafLIF</h4><p>该方法是核心的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_APP_DATA) &#123;</span><br><span class="line">        Slog.v(TAG, <span class="string">"prepareAppData for "</span> + pkg.packageName + <span class="string">" u"</span> + userId + <span class="string">" 0x"</span></span><br><span class="line">                + Integer.toHexString(flags));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = pkg.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> String packageName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo app = pkg.applicationInfo;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> appId = UserHandle.getAppId(app.uid);</span><br><span class="line">    Preconditions.checkNotNull(app.seinfo);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】通过 installd 来准备数据目录！</span></span><br><span class="line">        mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">        <span class="comment">//【2】如果是系统应用，第一次准备失败后，还会在尝试一次！</span></span><br><span class="line">        <span class="keyword">if</span> (app.isSystemApp()) &#123;</span><br><span class="line">            logCriticalInfo(Log.ERROR, <span class="string">"Failed to create app data for "</span> + packageName</span><br><span class="line">                    + <span class="string">", but trying to recover: "</span> + e);</span><br><span class="line">            <span class="comment">//【2.1】先删除之前创建的脏目录！</span></span><br><span class="line">            destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【2.2】再次创建数据目录；</span></span><br><span class="line">                mInstaller.createAppData(volumeUuid, packageName, userId, flags,</span><br><span class="line">                        appId, app.seinfo, app.targetSdkVersion);</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery succeeded!"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e2) &#123;</span><br><span class="line">                logCriticalInfo(Log.DEBUG, <span class="string">"Recovery failed!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to create app data for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// CE storage is unlocked right now, so read out the inode and</span></span><br><span class="line">            <span class="comment">// remember for use later when it's locked</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> mark this structure as dirty so we persist it!</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = mInstaller.getAppDataInode(volumeUuid, packageName, userId,</span><br><span class="line">                    StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">            <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">                <span class="keyword">final</span> PackageSetting ps = mSettings.mPackages.get(packageName);</span><br><span class="line">                <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ps.setCeDataInode(ceDataInode, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">"Failed to find inode for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.1.5.2】为 native libs 创建链接！</span></span><br><span class="line">    prepareAppDataContentsLeafLIF(pkg, userId, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析：</p><h4 id="6-1-5-3-prepareAppDataContentsLeafLIF"><a href="#6-1-5-3-prepareAppDataContentsLeafLIF" class="headerlink" title="6.1.5.3 prepareAppDataContentsLeafLIF"></a>6.1.5.3 prepareAppDataContentsLeafLIF</h4><p>为 native libs 创建链接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareAppDataContentsLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String volumeUuid = pkg.volumeUuid;</span><br><span class="line">    <span class="keyword">final</span> String packageName = pkg.packageName;</span><br><span class="line">    <span class="keyword">final</span> ApplicationInfo app = pkg.applicationInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; StorageManager.FLAG_STORAGE_CE) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】只为 32 位的 native libs 创建 link！</span></span><br><span class="line">        <span class="keyword">if</span> (app.primaryCpuAbi != <span class="keyword">null</span> &amp;&amp; !VMRuntime.is64BitAbi(app.primaryCpuAbi)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String nativeLibPath = app.nativeLibraryDir;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mInstaller.linkNativeLibraryDirectory(volumeUuid, packageName,</span><br><span class="line">                        nativeLibPath, userId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">"Failed to link native for "</span> + packageName + <span class="string">": "</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析到这里！</p><h2 id="6-2-deleteInstalledPackageLIF"><a href="#6-2-deleteInstalledPackageLIF" class="headerlink" title="6.2 deleteInstalledPackageLIF"></a>6.2 deleteInstalledPackageLIF</h2><p>卸载三方应用，或者覆盖更新的 sys app，那么我们调用的是该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deleteInstalledPackageLIF</span><span class="params">(PackageSetting ps,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> deleteCodeAndResources, <span class="keyword">int</span> flags, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">boolean</span> writeSettings,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageParser.Package replacingPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//【1】将要卸载的 apk 的 appid 保存到 PackageRemovedInfo 的 uid 属性中</span></span><br><span class="line">        <span class="comment">// 如果有 child pkg，对其也这样处理！</span></span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.uid = ps.appId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>)</span><br><span class="line">                    ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                String childPackageName = ps.childPackageNames.get(i);</span><br><span class="line">                PackageSetting childPs = mSettings.mPackages.get(childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childPs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                PackageRemovedInfo childInfo = outInfo.removedChildPackages.get(</span><br><span class="line">                        childPackageName);</span><br><span class="line">                <span class="keyword">if</span> (childInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childInfo.uid = childPs.appId;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*6.2.1】删除 apk 的使用数据，如果有 child pkg，对其也这样处理！！</span></span><br><span class="line">    removePackageDataLIF(ps, allUserHandles, outInfo, flags, writeSettings);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (ps.childPackageNames != <span class="keyword">null</span>) ? ps.childPackageNames.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        PackageSetting childPs;</span><br><span class="line">        <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">            childPs = mSettings.peekPackageLPr(ps.childPackageNames.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (childPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PackageRemovedInfo childOutInfo = (outInfo != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; outInfo.removedChildPackages != <span class="keyword">null</span>)</span><br><span class="line">                    ? outInfo.removedChildPackages.get(childPs.name) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//【2.1】对于 child pkg，这里的卸载 flags 比较特殊，如果 flags 设置了 DELETE_KEEP_DATA</span></span><br><span class="line">            <span class="comment">// 同时指定了 replacingPackage，而 replacingPackage 并不是其 parent pkg，这种情况，</span></span><br><span class="line">            <span class="comment">// 不需要保留数据，去掉 DELETE_KEEP_DATA 标志位；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> deleteFlags = (flags &amp; DELETE_KEEP_DATA) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (replacingPackage != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; !replacingPackage.hasChildPackage(childPs.name))</span><br><span class="line">                    ? flags &amp; ~DELETE_KEEP_DATA : flags;</span><br><span class="line">             <span class="comment">//【*6.2.1】删除 child apk 的使用数据！</span></span><br><span class="line">            removePackageDataLIF(childPs, allUserHandles, childOutInfo,</span><br><span class="line">                    deleteFlags, writeSettings);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】只删除 pkg 的 apk 文件（child pkg 并不会被删除）</span></span><br><span class="line">    <span class="keyword">if</span> (ps.parentPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deleteCodeAndResources &amp;&amp; (outInfo != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.2】创建一个 intallArgs，用于卸载！</span></span><br><span class="line">            outInfo.args = createInstallArgsForExisting(packageFlagsToInstallFlags(ps),</span><br><span class="line">                    ps.codePathString, ps.resourcePathString, getAppDexInstructionSets(ps));</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_SD_INSTALL) Slog.i(TAG, <span class="string">"args="</span> + outInfo.args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-1-removePackageDataLIF"><a href="#6-2-1-removePackageDataLIF" class="headerlink" title="6.2.1 removePackageDataLIF"></a>6.2.1 removePackageDataLIF</h3><p>删除 package 的数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removePackageDataLIF</span><span class="params">(PackageSetting ps, <span class="keyword">int</span>[] allUserHandles,</span></span></span><br><span class="line"><span class="function"><span class="params">        PackageRemovedInfo outInfo, <span class="keyword">int</span> flags, <span class="keyword">boolean</span> writeSettings)</span> </span>&#123;</span><br><span class="line">    String packageName = ps.name;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) Slog.d(TAG, <span class="string">"removePackageDataLI: "</span> + ps);</span><br><span class="line">    <span class="keyword">final</span> PackageParser.Package deletedPkg;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting deletedPs;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得要被删除的 apk 的 PackageSetting 和 PackageParser.Package 对象！</span></span><br><span class="line">        deletedPkg = mPackages.get(packageName);</span><br><span class="line">        deletedPs = mSettings.mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.removedPackage = packageName;</span><br><span class="line">            outInfo.removedUsers = deletedPs != <span class="keyword">null</span></span><br><span class="line">                    ? deletedPs.queryInstalledUsers(sUserManager.getUserIds(), <span class="keyword">true</span>)</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*6.2.1.1】第一部移除，扫描的四大组件信息！</span></span><br><span class="line">    removePackageLI(ps, (flags &amp; REMOVE_CHATTY) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】如果 flags 没有设置 DELETE_KEEP_DATA，那么会清楚 apk 的数据！！</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package resolvedPkg;</span><br><span class="line">        <span class="keyword">if</span> (deletedPkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvedPkg = deletedPkg;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolvedPkg = <span class="keyword">new</span> PackageParser.Package(ps.name);</span><br><span class="line">            resolvedPkg.setVolumeUuid(ps.volumeUuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*6.2.1.2】删除 apk 的 data 数据！！</span></span><br><span class="line">        destroyAppDataLIF(resolvedPkg, UserHandle.USER_ALL,</span><br><span class="line">                StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE);</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//【*6.2.1.3】删除 apk 的 profiles 数据！！</span></span><br><span class="line">        destroyAppProfilesLIF(resolvedPkg, UserHandle.USER_ALL);</span><br><span class="line">        <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outInfo.dataRemoved = <span class="keyword">true</span>; <span class="comment">// 表示数据移除了；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*6.2.1.4】执行 package 清除！！</span></span><br><span class="line">        schedulePackageCleaning(packageName, UserHandle.USER_ALL, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】进一步处理！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deletedPs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1】如果 flags 没有设置 DELETE_KEEP_DATA 标志位，那么执行其他的清楚操作！</span></span><br><span class="line">            <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_KEEP_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">//【3.1.1】清楚 intentfilter verify 和 默认浏览器的设置数据！</span></span><br><span class="line">                clearIntentFilterVerificationsLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">                clearDefaultBrowserIfNeeded(packageName);</span><br><span class="line">                <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【3.1.1.1】移除 key set 信息！</span></span><br><span class="line">                    mSettings.mKeySetManagerService.removeAppKeySetDataLPw(packageName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【*6.2.1.5】删除 pkg 的 PackageSetting 数据！</span></span><br><span class="line">                    outInfo.removedAppId = mSettings.removePackageLPw(packageName);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.1.2-review】更新权限信息，这里我们在 pms 的启动时分析过，这里就不再细说了！</span></span><br><span class="line">                <span class="comment">// 这里会更新所有应用的权限信息，移除过时的运行时权限，自动授予安装时权限等！</span></span><br><span class="line">                updatePermissionsLPw(deletedPs.name, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【3.1.3】如果该应用是共享 shared user 的，进入这里！</span></span><br><span class="line">                <span class="keyword">if</span> (deletedPs.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> userId : UserManagerService.getInstance().getUserIds()) &#123;</span><br><span class="line">                    </span><br><span class="line">                        <span class="comment">//【3.1.3.1】更新该共享 shared uid 的权限，该 package 被移除掉，会导致和该</span></span><br><span class="line">                        <span class="comment">// 应用相关连的权限的变化，从而导致共享 shared uid 的 gids 发生变化！</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> userIdToKill = mSettings.updateSharedUserPermsLPw(deletedPs,</span><br><span class="line">                                userId);</span><br><span class="line">                                </span><br><span class="line">                        <span class="keyword">if</span> (userIdToKill == UserHandle.USER_ALL</span><br><span class="line">                                || userIdToKill &gt;= UserHandle.USER_SYSTEM) &#123;</span><br><span class="line">                            <span class="comment">//【3.1.3.1】如果共享 shared uid 的 gids 发生变化，杀掉该 uid 下的</span></span><br><span class="line">                            <span class="comment">// 所有的 app 进程！</span></span><br><span class="line">                            mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                    killApplication(deletedPs.name, deletedPs.appId,</span><br><span class="line">                                            KILL_APP_REASON_GIDS_CHANGED);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3.1.4】清除默认应用的数据，先不关注；</span></span><br><span class="line">                clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3.4】更新下在每个 user 下的安装状态！</span></span><br><span class="line">            <span class="keyword">if</span> (allUserHandles != <span class="keyword">null</span> &amp;&amp; outInfo != <span class="keyword">null</span> &amp;&amp; outInfo.origUsers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    Slog.d(TAG, <span class="string">"Propagating install state across downgrade"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> userId : allUserHandles) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> installed = ArrayUtils.contains(outInfo.origUsers, userId);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                        Slog.d(TAG, <span class="string">"    user "</span> + userId + <span class="string">" =&gt; "</span> + installed);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ps.setInstalled(installed, userId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.5】持久化 Settings 中的数据！！</span></span><br><span class="line">        <span class="keyword">if</span> (writeSettings) &#123;</span><br><span class="line">            mSettings.writeLPr();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (outInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【4】移除 key-store！</span></span><br><span class="line">        removeKeystoreDataIfNeeded(UserHandle.USER_ALL, outInfo.removedAppId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们详细的分析了整个流程！！</p><h4 id="6-2-1-1-removePackageLI"><a href="#6-2-1-1-removePackageLI" class="headerlink" title="6.2.1.1 removePackageLI"></a>6.2.1.1 removePackageLI</h4><p>移除 PackageSetting 对应的扫描数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removePackageLI</span><span class="params">(PackageSetting ps, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_INSTALL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chatty)</span><br><span class="line">            Log.d(TAG, <span class="string">"Removing package "</span> + ps.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】移除扫描信息！</span></span><br><span class="line">        mPackages.remove(ps.name);</span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = ps.pkg;</span><br><span class="line">        <span class="keyword">if</span> (pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【*6.2.1.1.1】移除四大组件，共享库解析对象！</span></span><br><span class="line">            cleanPackageDataStructuresLILPw(pkg, chatty);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就不多说了！！</p><h5 id="6-2-1-1-1-cleanPackageDataStructuresLILPw"><a href="#6-2-1-1-1-cleanPackageDataStructuresLILPw" class="headerlink" title="6.2.1.1.1 cleanPackageDataStructuresLILPw"></a>6.2.1.1.1 cleanPackageDataStructuresLILPw</h5><p>用于删除 apk 的四大组件和共享库数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanPackageDataStructuresLILPw</span><span class="params">(PackageParser.Package pkg, <span class="keyword">boolean</span> chatty)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】移除 provider！</span></span><br><span class="line">    <span class="keyword">int</span> N = pkg.providers.size();</span><br><span class="line">    StringBuilder r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Provider p = pkg.providers.get(i);</span><br><span class="line">        mProviders.removeProvider(p);</span><br><span class="line">        <span class="keyword">if</span> (p.info.authority == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1.1】表示系统之前已经有相同 authority 的 provider，那么这个应用的 provider 是不会注册的！</span></span><br><span class="line">            <span class="comment">// 对于没有注册的 provider 不处理！</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String names[] = p.info.authority.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mProvidersByAuthority.get(names[j]) == p) &#123;</span><br><span class="line">                mProvidersByAuthority.remove(names[j]);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chatty)</span><br><span class="line">                        Log.d(TAG, <span class="string">"Unregistered content provider: "</span> + names[j]</span><br><span class="line">                                + <span class="string">", className = "</span> + p.info.name + <span class="string">", isSyncable = "</span></span><br><span class="line">                                + p.info.isSyncable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Providers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】移除 service！</span></span><br><span class="line">    N = pkg.services.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Service s = pkg.services.get(i);</span><br><span class="line">        mServices.removeService(s);</span><br><span class="line">        <span class="keyword">if</span> (chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(s.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Services: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】移除 receiver！</span></span><br><span class="line">    N = pkg.receivers.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.receivers.get(i);</span><br><span class="line">        mReceivers.removeActivity(a, <span class="string">"receiver"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Receivers: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】移除 activity！</span></span><br><span class="line">    N = pkg.activities.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Activity a = pkg.activities.get(i);</span><br><span class="line">        mActivities.removeActivity(a, <span class="string">"activity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Activities: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】移除定义的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！</span></span><br><span class="line">    N = pkg.permissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Permission p = pkg.permissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(p.info.name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bp = mSettings.mPermissionTrees.get(p.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; bp.perm == p) &#123;</span><br><span class="line">            bp.perm = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r.append(<span class="string">' '</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                r.append(p.info.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((p.info.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(p.info.name);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】移除请求的 permission，设置了 appop 标志为的权限，从 mAppOpPermissionPackages 也要移除！！</span></span><br><span class="line">    N = pkg.requestedPermissions.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        String perm = pkg.requestedPermissions.get(i);</span><br><span class="line">        BasePermission bp = mSettings.mPermissions.get(perm);</span><br><span class="line">        <span class="keyword">if</span> (bp != <span class="keyword">null</span> &amp;&amp; (bp.protectionLevel&amp;PermissionInfo.PROTECTION_FLAG_APPOP) != <span class="number">0</span>) &#123;</span><br><span class="line">            ArraySet&lt;String&gt; appOpPkgs = mAppOpPermissionPackages.get(perm);</span><br><span class="line">            <span class="keyword">if</span> (appOpPkgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appOpPkgs.remove(pkg.packageName);</span><br><span class="line">                <span class="keyword">if</span> (appOpPkgs.isEmpty()) &#123;</span><br><span class="line">                    mAppOpPermissionPackages.remove(perm);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Permissions: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】移除请求的 instrumentation！</span></span><br><span class="line">    N = pkg.instrumentation.size();</span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        PackageParser.Instrumentation a = pkg.instrumentation.get(i);</span><br><span class="line">        mInstrumentation.remove(a.getComponentName());</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r.append(a.info.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Instrumentation: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【8】移除 SharedLibraries！</span></span><br><span class="line">    r = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pkg.applicationInfo.flags&amp;ApplicationInfo.FLAG_SYSTEM) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Only system apps can hold shared libraries.</span></span><br><span class="line">        <span class="keyword">if</span> (pkg.libraryNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;pkg.libraryNames.size(); i++) &#123;</span><br><span class="line">                String name = pkg.libraryNames.get(i);</span><br><span class="line">                SharedLibraryEntry cur = mSharedLibraries.get(name);</span><br><span class="line">                <span class="keyword">if</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.apk != <span class="keyword">null</span> &amp;&amp; cur.apk.equals(pkg.packageName)) &#123;</span><br><span class="line">                    mSharedLibraries.remove(name);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_REMOVE &amp;&amp; chatty) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            r = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            r.append(<span class="string">' '</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        r.append(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_REMOVE) Log.d(TAG, <span class="string">"  Libraries: "</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该阶段的逻辑比较简单，不多说了！</p><h4 id="6-2-1-2-destroyAppDataLIF-gt-Leaf"><a href="#6-2-1-2-destroyAppDataLIF-gt-Leaf" class="headerlink" title="6.2.1.2 destroyAppDataLIF -&gt;[Leaf]"></a>6.2.1.2 destroyAppDataLIF -&gt;[Leaf]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"Package was null!"</span>, <span class="keyword">new</span> Throwable());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】删除父包的数据！！</span></span><br><span class="line">    destroyAppDataLeafLIF(pkg, userId, flags);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childCount = (pkg.childPackages != <span class="keyword">null</span>) ? pkg.childPackages.size() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【2】删除子包的数据！</span></span><br><span class="line">        destroyAppDataLeafLIF(pkg.childPackages.get(i), userId, flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyAppDataLeafLIF</span><span class="params">(PackageParser.Package pkg, <span class="keyword">int</span> userId, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting ps;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】获得该应用的安装信息 PackageSetting ！</span></span><br><span class="line">        ps = mSettings.mPackages.get(pkg.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> realUserId : resolveUserIds(userId)) &#123;</span><br><span class="line">        <span class="comment">//【2】获得要删除的状态信息目录：</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ceDataInode = (ps != <span class="keyword">null</span>) ? ps.getCeDataInode(realUserId) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3】调用了 Installd 删除指定目录！</span></span><br><span class="line">            mInstaller.destroyAppData(pkg.volumeUuid, pkg.packageName, realUserId, flags,</span><br><span class="line">                    ceDataInode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstallerException e) &#123;</span><br><span class="line">            Slog.w(TAG, String.valueOf(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里使用了 PackageSetting.getCeDataInode 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getCeDataInode</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readUserState(userId).ceDataInode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法返回的是 PackageUserState.ceDataInode 的值！</p><h4 id="6-2-1-4-schedulePackageCleaning"><a href="#6-2-1-4-schedulePackageCleaning" class="headerlink" title="6.2.1.4 schedulePackageCleaning"></a>6.2.1.4 schedulePackageCleaning</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedulePackageCleaning</span><span class="params">(String packageName, <span class="keyword">int</span> userId, <span class="keyword">boolean</span> andCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.2.1.1.3.1】这里会发送一个 START_CLEANING_PACKAGE 的消息给 PackageHandler ！</span></span><br><span class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(START_CLEANING_PACKAGE,</span><br><span class="line">            userId, andCode ? <span class="number">1</span> : <span class="number">0</span>, packageName);</span><br><span class="line">    <span class="keyword">if</span> (mSystemReady) &#123;</span><br><span class="line">        msg.sendToTarget();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPostSystemReadyMessages == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPostSystemReadyMessages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mPostSystemReadyMessages.add(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-4-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE"><a href="#6-2-1-4-1-Packagehandler-doHandleMessage-START-CLEANING-PACKAGE" class="headerlink" title="6.2.1.4.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]"></a>6.2.1.4.1 Packagehandler.doHandleMessage[START_CLEANING_PACKAGE]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> START_CLEANING_PACKAGE: &#123;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);</span><br><span class="line">    <span class="keyword">final</span> String packageName = (String)msg.obj;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> userId = msg.arg1;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> andCode = msg.arg2 != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userId == UserHandle.USER_ALL) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] users = sUserManager.getUserIds();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">                <span class="comment">//【1】将 package 加入到 Settings 内部的 mPackagesToBeCleaned 集合中！</span></span><br><span class="line">                mSettings.addPackageToCleanLPw(</span><br><span class="line">                        <span class="keyword">new</span> PackageCleanItem(user, packageName, andCode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mSettings.addPackageToCleanLPw(</span><br><span class="line">                    <span class="keyword">new</span> PackageCleanItem(userId, packageName, andCode));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">    <span class="comment">//【*6.2.1.4.2】开始清理操作！</span></span><br><span class="line">    startCleaningPackages();</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="6-2-1-4-2-startCleaningPackages"><a href="#6-2-1-4-2-startCleaningPackages" class="headerlink" title="6.2.1.4.2 startCleaningPackages"></a>6.2.1.4.2 startCleaningPackages</h5><p>执行扩展存储清理操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startCleaningPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// reader</span></span><br><span class="line">    <span class="keyword">if</span> (!isExternalMediaAvailable()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mSettings.mPackagesToBeCleaned.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】发送 action PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE！</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE);</span><br><span class="line">    <span class="comment">//【2】目标组件服务：DefaultContainerService</span></span><br><span class="line">    intent.setComponent(DEFAULT_CONTAINER_COMPONENT);</span><br><span class="line">    IActivityManager am = ActivityManagerNative.getDefault();</span><br><span class="line">    <span class="keyword">if</span> (am != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【2.1】启动服务！</span></span><br><span class="line">            am.startService(<span class="keyword">null</span>, intent, <span class="keyword">null</span>, mContext.getOpPackageName(),</span><br><span class="line">                    UserHandle.USER_SYSTEM);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入 DefaultContainerService.onHandleIntent 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PackageManager.ACTION_CLEAN_EXTERNAL_STORAGE.equals(intent.getAction())) &#123;</span><br><span class="line">        <span class="keyword">final</span> IPackageManager pm = IPackageManager.Stub.asInterface(</span><br><span class="line">                ServiceManager.getService(<span class="string">"package"</span>));</span><br><span class="line">        PackageCleanItem item = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((item = pm.nextPackageToClean(item)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> UserEnvironment userEnv = <span class="keyword">new</span> UserEnvironment(item.userId);</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppDataDirs(item.packageName));</span><br><span class="line">                eraseFiles(userEnv.buildExternalStorageAppMediaDirs(item.packageName));</span><br><span class="line">                <span class="keyword">if</span> (item.andCode) &#123;</span><br><span class="line">                    eraseFiles(userEnv.buildExternalStorageAppObbDirs(item.packageName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的逻辑就不多说了！</p><h4 id="6-2-1-5-Settings-removePackageLPw"><a href="#6-2-1-5-Settings-removePackageLPw" class="headerlink" title="6.2.1.5 Settings.removePackageLPw"></a>6.2.1.5 Settings.removePackageLPw</h4><p>移除该 pkg 的安装信息：PackageSetting！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removePackageLPw</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PackageSetting p = mPackages.get(name);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】从 mPackages 中移除该 PackageSetting！！</span></span><br><span class="line">        mPackages .remove(name);</span><br><span class="line">        <span class="comment">//【*6.2.1.5.1】如果其实 installer，还要修改和其相关的其他 pkg 的属性！</span></span><br><span class="line">        removeInstallerPackageStatus(name);</span><br><span class="line">        <span class="comment">//【3】如果 pkg 是共享 uid，要解除相互引用！</span></span><br><span class="line">        <span class="keyword">if</span> (p.sharedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.sharedUser.removePackage(p);</span><br><span class="line">            <span class="keyword">if</span> (p.sharedUser.packages.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                mSharedUsers.remove(p.sharedUser.name);</span><br><span class="line">                <span class="comment">//【3.1-review】从相关集合中删除该 ps！</span></span><br><span class="line">                removeUserIdLPw(p.sharedUser.userId);</span><br><span class="line">                <span class="keyword">return</span> p.sharedUser.userId;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1-review】从相关集合中删除该 ps！</span></span><br><span class="line">            removeUserIdLPw(p.appId);</span><br><span class="line">            <span class="keyword">return</span> p.appId;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法最后会返回 pkg 的 appID!</p><h5 id="6-2-1-5-1-Settings-removeInstallerPackageStatus"><a href="#6-2-1-5-1-Settings-removeInstallerPackageStatus" class="headerlink" title="6.2.1.5.1 Settings.removeInstallerPackageStatus"></a>6.2.1.5.1 Settings.removeInstallerPackageStatus</h5><p>如果该 pkg 是 installer，那么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeInstallerPackageStatus</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果岂不是 installer，返回！</span></span><br><span class="line">    <span class="keyword">if</span> (!mInstallerPackages.contains(packageName)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果其是 installer，那么需要找到所有由其安装的 pkg，设置其属性！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPackages.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageSetting ps = mPackages.valueAt(i);</span><br><span class="line">        <span class="keyword">final</span> String installerPackageName = ps.getInstallerPackageName();</span><br><span class="line">        <span class="keyword">if</span> (installerPackageName != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; installerPackageName.equals(packageName)) &#123;</span><br><span class="line">            <span class="comment">//【2.1】置空其 InstallerPackageName 属性，同时设置 ps.isOrphaned 为 ture！ </span></span><br><span class="line">            ps.setInstallerPackageName(<span class="keyword">null</span>);</span><br><span class="line">            ps.isOrphaned = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】从 mInstallerPackages 中移除该 pkg！</span></span><br><span class="line">    mInstallerPackages.remove(packageName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不多说了！！</p><h3 id="6-2-2-createInstallArgsForExisting-用于卸载-apk"><a href="#6-2-2-createInstallArgsForExisting-用于卸载-apk" class="headerlink" title="6.2.2 createInstallArgsForExisting - 用于卸载 apk"></a>6.2.2 createInstallArgsForExisting - 用于卸载 apk</h3><p>这里是针对已存在的应用创建一个 InstallArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> InstallArgs <span class="title">createInstallArgsForExisting</span><span class="params">(<span class="keyword">int</span> installFlags, String codePath,</span></span></span><br><span class="line"><span class="function"><span class="params">        String resourcePath, String[] instructionSets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isInAsec;</span><br><span class="line">    <span class="keyword">if</span> (installOnExternalAsec(installFlags)) &#123;</span><br><span class="line">        <span class="comment">//【1】如果是安装到外置的，那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installForwardLocked(installFlags)</span><br><span class="line">            &amp;&amp; !codePath.startsWith(mDrmAppPrivateInstallDir.getAbsolutePath())) &#123;</span><br><span class="line">        <span class="comment">//【2】对于 forward lock 安装，如果目录是 drm app pri</span></span><br><span class="line">        <span class="comment">// 那就创建 AsecInstallArgs！</span></span><br><span class="line">        isInAsec = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isInAsec = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInAsec) &#123;</span><br><span class="line">        <span class="comment">//【3】创建 AsecInstallArgs 安装参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsecInstallArgs(codePath, instructionSets,</span><br><span class="line">                installOnExternalAsec(installFlags), installForwardLocked(installFlags));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【*6.2.2.1.1】一般情况下，会创建 FileInstallArgs，这里通过 FileInstallArgs 的另一构造器</span></span><br><span class="line">        <span class="comment">// 创建了实例，描述一个已经存在的 app！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileInstallArgs(codePath, resourcePath, instructionSets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又回到了 5.5.3.1 的 FileInstallArgs 的相关创建！</p><h4 id="6-2-2-1-FileInstallArgs"><a href="#6-2-2-1-FileInstallArgs" class="headerlink" title="6.2.2.1 FileInstallArgs"></a>6.2.2.1 FileInstallArgs</h4><h5 id="6-2-2-1-1-new-FileInstallArgs"><a href="#6-2-2-1-1-new-FileInstallArgs" class="headerlink" title="6.2.2.1.1 new FileInstallArgs"></a>6.2.2.1.1 new FileInstallArgs</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInstallArgs</span> <span class="keyword">extends</span> <span class="title">InstallArgs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File codeFile;</span><br><span class="line">    <span class="keyword">private</span> File resourceFile;</span><br><span class="line">    <span class="comment">// Example topology:</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/base.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/split_foo.apk</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/lib/arm64/libfoo.so</span></span><br><span class="line">    <span class="comment">// /data/app/com.example/dalvik/arm/base.apk@classes.dex</span></span><br><span class="line">    <span class="comment">//【1】安装一个新的 apk！</span></span><br><span class="line">    FileInstallArgs(InstallParams params) &#123;</span><br><span class="line">        <span class="keyword">super</span>(params.origin, params.move, params.observer, params.installFlags,</span><br><span class="line">                params.installerPackageName, params.volumeUuid,</span><br><span class="line">                params.getUser(), <span class="keyword">null</span> <span class="comment">/*instructionSets*/</span>, params.packageAbiOverride,</span><br><span class="line">                params.grantedRuntimePermissions,</span><br><span class="line">                params.traceMethod, params.traceCookie, params.certificates);</span><br><span class="line">        <span class="comment">//【1.1】这里校验了下是否是  Forward Locked 的！</span></span><br><span class="line">        <span class="keyword">if</span> (isFwdLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Forward locking only supported in ASEC"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】用于描述已存在的一个安装，显然，这里调用的是这个构造器！</span></span><br><span class="line">    FileInstallArgs(String codePath, String resourcePath, String[] instructionSets) &#123;</span><br><span class="line">        <span class="keyword">super</span>(OriginInfo.fromNothing(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, instructionSets,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span> <span class="comment">/*certificates*/</span>);</span><br><span class="line">        <span class="keyword">this</span>.codeFile = (codePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(codePath) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.resourceFile = (resourcePath != <span class="keyword">null</span>) ? <span class="keyword">new</span> File(resourcePath) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 FileInstallArgs 有两个构造器！</p><p>一参数构造器用于创建安装过程中的 InstallArgs！</p><p>三参数构造器，用于描述一个已存在的安装，主要用于清除旧的安装，或者作为移动应用的时候的源数据，我们在 pms 开机初始化的过程中就已经看到过了！</p><h5 id="6-2-2-1-2-doPostDeleteLI"><a href="#6-2-2-1-2-doPostDeleteLI" class="headerlink" title="6.2.2.1.2 doPostDeleteLI"></a>6.2.2.1.2 doPostDeleteLI</h5><p>继续来看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">doPostDeleteLI</span><span class="params">(<span class="keyword">boolean</span> delete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*6.2.2.1.3】清楚 apk 文件 和 dex 文件！</span></span><br><span class="line">    cleanUpResourcesLI();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续分析：</p><h5 id="6-2-2-1-3-cleanUpResourcesLI"><a href="#6-2-2-1-3-cleanUpResourcesLI" class="headerlink" title="6.2.2.1.3 cleanUpResourcesLI"></a>6.2.2.1.3 cleanUpResourcesLI</h5><p>继续分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanUpResourcesLI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; allCodePaths = Collections.EMPTY_LIST;</span><br><span class="line">    <span class="keyword">if</span> (codeFile != <span class="keyword">null</span> &amp;&amp; codeFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1】收集 apk path！</span></span><br><span class="line">            <span class="keyword">final</span> PackageLite pkg = PackageParser.parsePackageLite(codeFile, <span class="number">0</span>);</span><br><span class="line">            allCodePaths = pkg.getAllCodePaths();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="comment">// Ignored; we tried our best</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】清除 apk 文件，调用 mInstaller.rmPackageDir 删除！</span></span><br><span class="line">    cleanUp();</span><br><span class="line">    <span class="comment">//【3】清除 dex files，调用 mInstaller.rmdex 删除！</span></span><br><span class="line">    removeDexFiles(allCodePaths, instructionSets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="7-remove-split-apk-移除-split（模块）apk"><a href="#7-remove-split-apk-移除-split（模块）apk" class="headerlink" title="7 remove split apk - 移除 split（模块）apk"></a>7 remove split apk - 移除 split（模块）apk</h1><p>在最上面的分析中，我们知道，如果要删除的是 split apk，那么会进入另外一个接口，这个接口和 install 的流程很类似，我们在这里做一下分析：</p><p>因为和 install 有很多相似之处，所以我省略掉一些无关紧要的代码段！！</p><h2 id="7-1-PackageInstallerService"><a href="#7-1-PackageInstallerService" class="headerlink" title="7.1 PackageInstallerService"></a>7.1 PackageInstallerService</h2><h3 id="7-1-1-createSession-Internal-创建事务"><a href="#7-1-1-createSession-Internal-创建事务" class="headerlink" title="7.1.1 createSession(Internal) - 创建事务"></a>7.1.1 createSession(Internal) - 创建事务</h3><p>创建事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createSession</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】继续来看！</span></span><br><span class="line">        <span class="keyword">return</span> createSessionInternal(params, installerPackageName, userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createSession 方法调用了 createSessionInternal 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createSessionInternal</span><span class="params">(SessionParams params, String installerPackageName, <span class="keyword">int</span> userId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</span><br><span class="line">    <span class="comment">//【1】权限检查！</span></span><br><span class="line">    mPm.enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"createSession"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】用户操作检查！</span></span><br><span class="line">    <span class="keyword">if</span> (mPm.isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"User restriction prevents installing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果调用进程的 uid 是 SHELL_UID 或者 ROOT_UID，那么 installFlags 增加爱你 INSTALL_FROM_ADB</span></span><br><span class="line">    <span class="comment">// 表示通过 adb 进行安装！</span></span><br><span class="line">    <span class="keyword">if</span> ((callingUid == Process.SHELL_UID) || (callingUid == Process.ROOT_UID)) &#123;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_FROM_ADB;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是 shell or root，校验下 package 是否属于 uid，</span></span><br><span class="line">        mAppOps.checkPackage(callingUid, installerPackageName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取消 INSTALL_FROM_ADB 和 INSTALL_ALL_USERS 标志位，设置 INSTALL_REPLACE_EXISTING 标志位！</span></span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_FROM_ADB;</span><br><span class="line">        params.installFlags &amp;= ~PackageManager.INSTALL_ALL_USERS;</span><br><span class="line">        params.installFlags |= PackageManager.INSTALL_REPLACE_EXISTING;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果 installFlags 设置了 INSTALL_GRANT_RUNTIME_PERMISSIONS 标志位，那需要判断调用者是否有 </span></span><br><span class="line">    <span class="comment">// INSTALL_GRANT_RUNTIME_PERMISSIONS 权限！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; mContext.checkCallingOrSelfPermission(Manifest.permission</span><br><span class="line">            .INSTALL_GRANT_RUNTIME_PERMISSIONS) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"You need the "</span></span><br><span class="line">                + <span class="string">"android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission "</span></span><br><span class="line">                + <span class="string">"to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】调整应用的 icon 图标！</span></span><br><span class="line">    <span class="keyword">if</span> (params.appIcon != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityManager am = (ActivityManager) mContext.getSystemService(</span><br><span class="line">                Context.ACTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> iconSize = am.getLauncherLargeIconSize();</span><br><span class="line">        <span class="keyword">if</span> ((params.appIcon.getWidth() &gt; iconSize * <span class="number">2</span>)</span><br><span class="line">                || (params.appIcon.getHeight() &gt; iconSize * <span class="number">2</span>)) &#123;</span><br><span class="line">            params.appIcon = Bitmap.createScaledBitmap(params.appIcon, iconSize, iconSize,</span><br><span class="line">                    <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【6】检查 mode 取值是否正确！</span></span><br><span class="line">    <span class="keyword">switch</span> (params.mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_FULL_INSTALL:</span><br><span class="line">        <span class="keyword">case</span> SessionParams.MODE_INHERIT_EXISTING:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid install mode: "</span> + params.mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】根据 installFlags 设置，调整安装位置，如果用户显示设置了位置，系统会对其进行检查，否则</span></span><br><span class="line">    <span class="comment">// 系统会选择合适的位置！</span></span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.1】如果显式指定内置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnInternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable internal storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_EXTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【7.2】如果显式指定外置，判断是否合适安装！</span></span><br><span class="line">        <span class="keyword">if</span> (!PackageHelper.fitsOnExternal(mContext, params.sizeBytes)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"No suitable external storage available"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_FORCE_VOLUME_UUID) != <span class="number">0</span>) &#123;</span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【7.4】默认情况下，进入这里，setInstallFlagsInternal 方法会设置 INSTALL_INTERNAL 标志位</span></span><br><span class="line">        <span class="comment">// 取消 INSTALL_EXTERNAL 标志位！</span></span><br><span class="line">        params.setInstallFlagsInternal();</span><br><span class="line">        <span class="comment">// 选择最好的位置来安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            params.volumeUuid = PackageHelper.resolveInstallVolume(mContext,</span><br><span class="line">                    params.appPackageName, params.installLocation, params.sizeBytes);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sessionId;</span><br><span class="line">    <span class="keyword">final</span> PackageInstallerSession session;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【7.5-review】判断，同一个 uid 是否有过多的正在处理的 Session，如果超过了 1024 个，那就不能安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> activeCount = getSessionCount(mSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (activeCount &gt;= MAX_ACTIVE_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many active sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同样，判断同一个 uid，是否已经提交了过多的 Session，如果超过了 1048576 个，那当前就不能执行安装！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> historicalCount = getSessionCount(mHistoricalSessions, callingUid);</span><br><span class="line">        <span class="keyword">if</span> (historicalCount &gt;= MAX_HISTORICAL_SESSIONS) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Too many historical sessions for UID "</span> + callingUid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7.6-review】给本次安装分配一个事务 id！</span></span><br><span class="line">        sessionId = allocateSessionIdLocked();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> createdMillis = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【8】决定安装目录，因为默认是内置空间，这里会直接进入 buildStageDir 方法！</span></span><br><span class="line">    File stageDir = <span class="keyword">null</span>;</span><br><span class="line">    String stageCid = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_INTERNAL) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isEphemeral =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_EPHEMERAL) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【8.1-review】创建文件临时目录；/data/app/vmdl[sessionId].tmp！</span></span><br><span class="line">        stageDir = buildStageDir(params.volumeUuid, sessionId, isEphemeral);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是外置，会直接返回 "smdl" + sessionId + ".tmp"</span></span><br><span class="line">        stageCid = buildExternalStageCid(sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.2.1-review】创建 PackageInstallerSession 对象！</span></span><br><span class="line">    session = <span class="keyword">new</span> PackageInstallerSession(mInternalCallback, mContext, mPm,</span><br><span class="line">            mInstallThread.getLooper(), sessionId, userId, installerPackageName, callingUid,</span><br><span class="line">            params, createdMillis, stageDir, stageCid, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="comment">//【8】将新创建的 PackageInstallerSession 添加到 mSessions 集合中！</span></span><br><span class="line">        mSessions.put(sessionId, session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*9-review】通知有新的事务创建了，这里是直接回调 Callback 的接口！！</span></span><br><span class="line">    mCallbacks.notifySessionCreated(session.sessionId, session.userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*10-review】持久化事务 Session！</span></span><br><span class="line">    writeSessionsAsync();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sessionId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程和 install 很像，我们可以大胆推测，其在移除了 split apk 后，还会把主 apk 再 install 一次！！</p><h3 id="7-1-2-openSession-获得事务"><a href="#7-1-2-openSession-获得事务" class="headerlink" title="7.1.2 openSession - 获得事务"></a>7.1.2 openSession - 获得事务</h3><p>openSession 方法可以获得 id 对应的 PackageInstallerSession！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IPackageInstallerSession <span class="title">openSession</span><span class="params">(<span class="keyword">int</span> sessionId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【×7.1.2.1】调用另外一个方法！</span></span><br><span class="line">        <span class="keyword">return</span> openSessionInternal(sessionId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="7-1-2-1-openSessionInternal"><a href="#7-1-2-1-openSessionInternal" class="headerlink" title="7.1.2.1 openSessionInternal"></a>7.1.2.1 openSessionInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IPackageInstallerSession <span class="title">openSessionInternal</span><span class="params">(<span class="keyword">int</span> sessionId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mSessions) &#123;</span><br><span class="line">        <span class="keyword">final</span> PackageInstallerSession session = mSessions.get(sessionId);</span><br><span class="line">        <span class="comment">//【1-review】判断 uid 是否被允许获得该事务！</span></span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || !isCallingUidOwner(session)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"Caller has no access to session "</span> + sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        session.open();</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-PackageInstallerSession"><a href="#7-2-PackageInstallerSession" class="headerlink" title="7.2 PackageInstallerSession"></a>7.2 PackageInstallerSession</h2><h3 id="7-2-1-new-PackageInstallerSession-事务实例"><a href="#7-2-1-new-PackageInstallerSession-事务实例" class="headerlink" title="7.2.1 new PackageInstallerSession - 事务实例"></a>7.2.1 new PackageInstallerSession - 事务实例</h3><p>创建 PackageInstallerSession，对前面的 SessionParams 再次封装！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerSession</span> <span class="keyword">extends</span> <span class="title">IPackageInstallerSession</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PackageInstallerSession</span><span class="params">(PackageInstallerService.InternalCallback callback,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, PackageManagerService pm, Looper looper, <span class="keyword">int</span> sessionId, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">            String installerPackageName, <span class="keyword">int</span> installerUid, SessionParams params, <span class="keyword">long</span> createdMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">            File stageDir, String stageCid, <span class="keyword">boolean</span> prepared, <span class="keyword">boolean</span> sealed)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1-review】InternalCallback 回调！</span></span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mPm = pm;</span><br><span class="line">        <span class="comment">//【2】创建 Handler 绑定到子线程 mInstallThread，该子线程是在 PackageInstallerService 构造器中创建的！</span></span><br><span class="line">        <span class="comment">//【2.1-review】这里通过 mHandlerCallback 指定了一个回调函数！</span></span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler(looper, mHandlerCallback);</span><br><span class="line">        <span class="comment">//【3】基本属性保存</span></span><br><span class="line">        <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.installerPackageName = installerPackageName;</span><br><span class="line">        <span class="keyword">this</span>.installerUid = installerUid;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.createdMillis = createdMillis;</span><br><span class="line">        <span class="keyword">this</span>.stageDir = stageDir; <span class="comment">// 内置临时目录：/data/app/vmdl[sessionId].tmp；</span></span><br><span class="line">        <span class="keyword">this</span>.stageCid = stageCid; <span class="comment">// 默认为 null；</span></span><br><span class="line">        <span class="keyword">if</span> ((stageDir == <span class="keyword">null</span>) == (stageCid == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Exactly one of stageDir or stageCid stage must be set"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrepared = prepared; <span class="comment">// 传入 false；</span></span><br><span class="line">        mSealed = sealed; <span class="comment">// 传入 false；</span></span><br><span class="line">        <span class="comment">//【4】获得 DevicePolicyManager 对象，用于静默安装相关的判断，如果是安装者是设备拥有者，</span></span><br><span class="line">        <span class="comment">// 可以不检查权限，直接静默安装！</span></span><br><span class="line">        DevicePolicyManager dpm = (DevicePolicyManager) mContext.getSystemService(</span><br><span class="line">                Context.DEVICE_POLICY_SERVICE);</span><br><span class="line">        <span class="comment">//【5】校验安装者 uid 是否有 INSTALL_PACKAGES 权限！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPermissionGranted =</span><br><span class="line">                (mPm.checkUidPermission(android.Manifest.permission.INSTALL_PACKAGES, installerUid)</span><br><span class="line">                        == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">        <span class="comment">//【6】安装者是否是 root 用户！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isInstallerRoot = (installerUid == Process.ROOT_UID);</span><br><span class="line">        <span class="comment">//【7】是否强制提醒！</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> forcePermissionPrompt =</span><br><span class="line">                (params.installFlags &amp; PackageManager.INSTALL_FORCE_PERMISSION_PROMPT) != <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//【8】安装者是否是设备拥有者自身！</span></span><br><span class="line">        mIsInstallerDeviceOwner = (dpm != <span class="keyword">null</span>) &amp;&amp; dpm.isDeviceOwnerAppOnCallingUser(</span><br><span class="line">                installerPackageName);</span><br><span class="line">        <span class="comment">//【8】如果 mPermissionsAccepted 为 true，那么我们就可以静默安装！</span></span><br><span class="line">        <span class="keyword">if</span> ((isPermissionGranted</span><br><span class="line">                        || isInstallerRoot</span><br><span class="line">                        || mIsInstallerDeviceOwner)</span><br><span class="line">                &amp;&amp; !forcePermissionPrompt) &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPermissionsAccepted = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> identity = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> uid = mPm.getPackageUid(PackageManagerService.DEFAULT_CONTAINER_PACKAGE,</span><br><span class="line">                    PackageManager.MATCH_SYSTEM_ONLY, UserHandle.USER_SYSTEM);</span><br><span class="line">            defaultContainerGid = UserHandle.getSharedAppGid(uid);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(identity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到 PackageInstallerSession 除了用来表示一个 Session 之外，由于继承了 IPackageInstallerSession.Stub，因此其还可以作为服务端的桩对象，进行跨进程的通信！</p><h3 id="7-2-2-removeSplit"><a href="#7-2-2-removeSplit" class="headerlink" title="7.2.2 removeSplit"></a>7.2.2 removeSplit</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSplit</span><span class="params">(String splitName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】首先如果要卸载 split apk，必须指定 parent pkg！</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(params.appPackageName)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Must specify package name to remove a split"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*7.2.3】创建一个 mark 标记，来记录那些需要被移除的 split apk！！</span></span><br><span class="line">        createRemoveSplitMarker(splitName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtils.wrap(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-3-createRemoveSplitMarker"><a href="#7-2-3-createRemoveSplitMarker" class="headerlink" title="7.2.3 createRemoveSplitMarker"></a>7.2.3 createRemoveSplitMarker</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createRemoveSplitMarker</span><span class="params">(String splitName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】创建了一个标记名称：</span></span><br><span class="line">        <span class="keyword">final</span> String markerName = splitName + REMOVE_SPLIT_MARKER_EXTENSION;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(markerName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid marker: "</span> + markerName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】在临时目录下创建创建了一个 "splitName".removed 的文件！</span></span><br><span class="line">        <span class="keyword">final</span> File target = <span class="keyword">new</span> File(resolveStageDir(), markerName);</span><br><span class="line">        target.createNewFile();</span><br><span class="line">        Os.chmod(target.getAbsolutePath(), <span class="number">0</span> <span class="comment">/*mode*/</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ErrnoException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowAsIOException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 REMOVE_SPLIT_MARKER_EXTENSION 是一个字符串后缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REMOVE_SPLIT_MARKER_EXTENSION = <span class="string">".removed"</span>;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-1-resolveStageDir"><a href="#7-2-3-1-resolveStageDir" class="headerlink" title="7.2.3.1 resolveStageDir"></a>7.2.3.1 resolveStageDir</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">resolveStageDir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mResolvedStageDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stageDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】返回的就是前面的 stageDir！</span></span><br><span class="line">                mResolvedStageDir = stageDir;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> String path = PackageHelper.getSdDir(stageCid);</span><br><span class="line">                <span class="keyword">if</span> (path != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mResolvedStageDir = <span class="keyword">new</span> File(path);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to resolve path to container "</span> + stageCid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mResolvedStageDir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-commitLocked"><a href="#7-2-4-commitLocked" class="headerlink" title="7.2.4 commitLocked"></a>7.2.4 commitLocked</h3><p>按照流程，我们进入了 commitLocked 中：</p><p>参数 PackageInfo pkgInfo 和 ApplicationInfo appInfo 分别表示已经安装的主 apk 的信息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mSealed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INTERNAL_ERROR, <span class="string">"Session not sealed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【*7.2.3.1】获得 tmp 目录，也就是前面我们的 .removed 文件所在的目录；</span></span><br><span class="line">        resolveStageDir();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_CONTAINER_ERROR,</span><br><span class="line">                <span class="string">"Failed to resolve stage location"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*7.2.4.1】校验安装有效性！</span></span><br><span class="line">    validateInstallLocked(pkgInfo, appInfo);</span><br><span class="line"></span><br><span class="line">    Preconditions.checkNotNull(mPackageName);</span><br><span class="line">    Preconditions.checkNotNull(mSignatures);</span><br><span class="line">    Preconditions.checkNotNull(mResolvedBaseFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mPermissionsAccepted) &#123; <span class="comment">// 这里我们就跳过，不分析，install 的时候分析过！</span></span><br><span class="line">        <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(PackageInstaller.ACTION_CONFIRM_PERMISSIONS);</span><br><span class="line">        intent.setPackage(mContext.getPackageManager().getPermissionControllerPackageName());</span><br><span class="line">        intent.putExtra(PackageInstaller.EXTRA_SESSION_ID, sessionId);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mRemoteObserver.onUserActionRequired(intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> finalSize = calculateInstalledSize();</span><br><span class="line">        resizeContainer(stageCid, finalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果安装方式是继承已存在的 apk，那我们要尝试继承！！</span></span><br><span class="line">    <span class="comment">// 显然，对于卸载 split apk 肯定是会走这一步的！！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_INHERIT_EXISTING) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【1.1】mResolvedInheritedFiles 中都是需要从之前安装的目录下继承过来的 apk 和 odex 文件；</span></span><br><span class="line">            <span class="keyword">final</span> List&lt;File&gt; fromFiles = mResolvedInheritedFiles;</span><br><span class="line">            <span class="comment">//【1.2】这是我们本次安装的目录；</span></span><br><span class="line">            <span class="keyword">final</span> File toDir = resolveStageDir();</span><br><span class="line">            <span class="keyword">if</span> (LOGD) Slog.d(TAG, <span class="string">"Inherited files: "</span> + mResolvedInheritedFiles);</span><br><span class="line">            <span class="keyword">if</span> (!mResolvedInheritedFiles.isEmpty() &amp;&amp; mInheritedFilesBase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"mInheritedFilesBase == null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【1.3】如果可以直接建立 link 的话，不行的话，就 copy！</span></span><br><span class="line">            <span class="keyword">if</span> (isLinkPossible(fromFiles, toDir)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mResolvedInstructionSets.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(toDir, <span class="string">"oat"</span>);</span><br><span class="line">                    createOatDirs(mResolvedInstructionSets, oatDir);</span><br><span class="line">                &#125;</span><br><span class="line">                linkFiles(fromFiles, toDir, mInheritedFilesBase);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【1.4】拷贝已经安装的 apk 到新目录下！</span></span><br><span class="line">                copyFiles(fromFiles, toDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INSUFFICIENT_STORAGE,</span><br><span class="line">                    <span class="string">"Failed to inherit existing install"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mInternalProgress = <span class="number">0.5f</span>;</span><br><span class="line">    computeProgressLocked(<span class="keyword">true</span>);</span><br><span class="line">    extractNativeLibraries(mResolvedStageDir, params.abiOverride);</span><br><span class="line">    <span class="keyword">if</span> (stageCid != <span class="keyword">null</span>) &#123;</span><br><span class="line">        finalizeAndFixContainer(stageCid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> IPackageInstallObserver2 localObserver = <span class="keyword">new</span> IPackageInstallObserver2.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUserActionRequired</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPackageInstalled</span><span class="params">(String basePackageName, <span class="keyword">int</span> returnCode, String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                Bundle extras)</span> </span>&#123;；</span><br><span class="line">            destroyInternal();</span><br><span class="line">            dispatchSessionFinished(returnCode, msg, extras);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">final</span> UserHandle user;</span><br><span class="line">    <span class="keyword">if</span> ((params.installFlags &amp; PackageManager.INSTALL_ALL_USERS) != <span class="number">0</span>) &#123;</span><br><span class="line">        user = UserHandle.ALL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = <span class="keyword">new</span> UserHandle(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    mRelinquished = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】开始安装！</span></span><br><span class="line">    mPm.installStage(mPackageName, stageDir, stageCid, localObserver, params,</span><br><span class="line">            installerPackageName, installerUid, user, mCertificates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于卸载 split apk 的情况：</p><p>可以看到和 install 是一样的，唯独不一样的是，会将之前已经安装的 /data/app/package-Name/ 中除了要卸载的 split apk 以外的其他 apk 拷贝到新创建的目录下，重新安装；</p><h4 id="7-2-4-1-validateInstallLocked"><a href="#7-2-4-1-validateInstallLocked" class="headerlink" title="7.2.4.1 validateInstallLocked"></a>7.2.4.1 validateInstallLocked</h4><p>校验安装有效性，这里的 mResolvedStageDir 就是前面的 /data/app/vmdl[sessionId].tmp 目录！</p><p>removeSplitList 用于表示要删除的 split apk 列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateInstallLocked</span><span class="params">(PackageInfo pkgInfo, ApplicationInfo appInfo)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> PackageManagerException </span>&#123;</span><br><span class="line">    mPackageName = <span class="keyword">null</span>;</span><br><span class="line">    mVersionCode = -<span class="number">1</span>;</span><br><span class="line">    mSignatures = <span class="keyword">null</span>;</span><br><span class="line">    mResolvedBaseFile = <span class="keyword">null</span>;</span><br><span class="line">    mResolvedStagedFiles.clear();</span><br><span class="line">    mResolvedInheritedFiles.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】返回 /data/app/vmdl[sessionId].tmp 目录下所有的 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 去除后缀，将前缀名保存到 removeSplitList！</span></span><br><span class="line">    <span class="keyword">final</span> File[] removedFiles = mResolvedStageDir.listFiles(sRemovedFilter);</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; removeSplitList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!ArrayUtils.isEmpty(removedFiles)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File removedFile : removedFiles) &#123;</span><br><span class="line">            <span class="keyword">final</span> String fileName = removedFile.getName();</span><br><span class="line">            <span class="keyword">final</span> String splitName = fileName.substring(</span><br><span class="line">                    <span class="number">0</span>, fileName.length() - REMOVE_SPLIT_MARKER_EXTENSION.length());</span><br><span class="line">            removeSplitList.add(splitName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】返回 /data/app/vmdl[sessionId].tmp 目录下所有的非 .removed 文件！</span></span><br><span class="line">    <span class="comment">// 并判断是否正常，如果该目录下没有任何 apk 和 .removed 文件，那么抛出异常！</span></span><br><span class="line">    <span class="keyword">final</span> File[] addedFiles = mResolvedStageDir.listFiles(sAddedFilter);</span><br><span class="line">    <span class="keyword">if</span> (ArrayUtils.isEmpty(addedFiles) &amp;&amp; removeSplitList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK, <span class="string">"No packages staged"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】遍历该目录下的非 .removed 文件，解析其中的 apk 文件，也就是我们之前 copy 到这里的目标文件！</span></span><br><span class="line">    <span class="comment">// 对于卸载 split apk 的情况，显然这里不会进入，因为我们的目录里面只有 .removed 文件！</span></span><br><span class="line">    <span class="keyword">final</span> ArraySet&lt;String&gt; stagedSplits = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File addedFile : addedFiles) &#123;</span><br><span class="line">        <span class="keyword">final</span> ApkLite apk;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3.1】解析要安装的 apk，具体的流程这里就不分析了！</span></span><br><span class="line">            apk = PackageParser.parseApkLite(</span><br><span class="line">                    addedFile, PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.2】将其添加到 stagedSplits 中，注意 base.apk 的 apk.splitName 为 null！</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.add(apk.splitName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Split "</span> + apk.splitName + <span class="string">" was defined multiple times"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.3】将第一个被解析 apk 的包名，版本号，签名，证书保存下载，这个目录下的其他 apk </span></span><br><span class="line">        <span class="comment">// 的这几项要和其保持一致！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = apk.packageName;</span><br><span class="line">            mVersionCode = apk.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = apk.signatures;</span><br><span class="line">            mCertificates = apk.certificates;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.4】校验 apk 关联性，校验包名。版本号，签名；</span></span><br><span class="line">        assertApkConsistent(String.valueOf(addedFile), apk);</span><br><span class="line">        <span class="comment">//【3.5】设置 apk 文件的目标名称！</span></span><br><span class="line">        <span class="keyword">final</span> String targetName;</span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            targetName = <span class="string">"base.apk"</span>; <span class="comment">// 一般情况下！</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetName = <span class="string">"split_"</span> + apk.splitName + <span class="string">".apk"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!FileUtils.isValidExtFilename(targetName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Invalid filename: "</span> + targetName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.6】当 addedFile 命名不标准的话，会改名;</span></span><br><span class="line">        <span class="keyword">final</span> File targetFile = <span class="keyword">new</span> File(mResolvedStageDir, targetName);</span><br><span class="line">        <span class="keyword">if</span> (!addedFile.equals(targetFile)) &#123;</span><br><span class="line">            addedFile.renameTo(targetFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3.7】找到了 base apk，将其保存到 mResolvedBaseFile！</span></span><br><span class="line">        <span class="comment">// 同时将其添加到 mResolvedStagedFiles 中！</span></span><br><span class="line">        <span class="keyword">if</span> (apk.splitName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = targetFile;</span><br><span class="line">        &#125;</span><br><span class="line">        mResolvedStagedFiles.add(targetFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】处理 .removed 文件，此时我们正在卸载 split apk，所以会进入这里！！</span></span><br><span class="line">    <span class="keyword">if</span> (removeSplitList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【4.1】如果找不到该 split apk 文件的话，抛出异常！</span></span><br><span class="line">        <span class="keyword">for</span> (String splitName : removeSplitList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ArrayUtils.contains(pkgInfo.splitNames, splitName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                        <span class="string">"Split not found: "</span> + splitName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4.2】再次获得要安装的应用的包名，版本号，签名！</span></span><br><span class="line">        <span class="keyword">if</span> (mPackageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPackageName = pkgInfo.packageName;</span><br><span class="line">            mVersionCode = pkgInfo.versionCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mSignatures == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSignatures = pkgInfo.signatures;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】处理安装模式！</span></span><br><span class="line">    <span class="keyword">if</span> (params.mode == SessionParams.MODE_FULL_INSTALL) &#123;</span><br><span class="line">        <span class="comment">//【5.1】全量安装必须要有 base.apk</span></span><br><span class="line">        <span class="keyword">if</span> (!stagedSplits.contains(<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Full install must include a base package"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【5.2】部分安装必须基于现有的安装！</span></span><br><span class="line">        <span class="keyword">if</span> (appInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PackageManagerException(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">                    <span class="string">"Missing existing base package for "</span> + mPackageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.3】获得已存在的 apk 安装信息！</span></span><br><span class="line">        <span class="keyword">final</span> PackageLite existing;</span><br><span class="line">        <span class="keyword">final</span> ApkLite existingBase;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【5.3.1】对于安装 split apk，我们会解析下已存在的 split apk！！</span></span><br><span class="line">            existing = PackageParser.parsePackageLite(<span class="keyword">new</span> File(appInfo.getCodePath()), <span class="number">0</span>);</span><br><span class="line">            existingBase = PackageParser.parseApkLite(<span class="keyword">new</span> File(appInfo.getBaseCodePath()),</span><br><span class="line">                    PackageParser.PARSE_COLLECT_CERTIFICATES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PackageParserException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> PackageManagerException.from(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*4.3.2.1】再次校验要本次要安装的 apk 和已存在的 apk 是有关联，包括包名，签名，版本号！</span></span><br><span class="line">        assertApkConsistent(<span class="string">"Existing base"</span>, existingBase);</span><br><span class="line">        <span class="comment">//【5.4】继承已有的 base apk，如果没有指定安装的 apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (mResolvedBaseFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mResolvedBaseFile = <span class="keyword">new</span> File(appInfo.getBaseCodePath());</span><br><span class="line">            mResolvedInheritedFiles.add(mResolvedBaseFile);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.5】继承已有的 split apk！！</span></span><br><span class="line">        <span class="keyword">if</span> (!ArrayUtils.isEmpty(existing.splitNames)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; existing.splitNames.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> String splitName = existing.splitNames[i];</span><br><span class="line">                <span class="keyword">final</span> File splitFile = <span class="keyword">new</span> File(existing.splitCodePaths[i]);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> splitRemoved = removeSplitList.contains(splitName);</span><br><span class="line">                <span class="keyword">if</span> (!stagedSplits.contains(splitName) &amp;&amp; !splitRemoved) &#123;</span><br><span class="line">                    mResolvedInheritedFiles.add(splitFile);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5.6】继承已有的 oat 相关文件！！</span></span><br><span class="line">        <span class="keyword">final</span> File packageInstallDir = (<span class="keyword">new</span> File(appInfo.getBaseCodePath())).getParentFile();</span><br><span class="line">        mInheritedFilesBase = packageInstallDir;</span><br><span class="line">        <span class="keyword">final</span> File oatDir = <span class="keyword">new</span> File(packageInstallDir, <span class="string">"oat"</span>);</span><br><span class="line">        <span class="keyword">if</span> (oatDir.exists()) &#123;</span><br><span class="line">            <span class="keyword">final</span> File[] archSubdirs = oatDir.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (archSubdirs != <span class="keyword">null</span> &amp;&amp; archSubdirs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String[] instructionSets = InstructionSets.getAllDexCodeInstructionSets();</span><br><span class="line">                <span class="keyword">for</span> (File archSubDir : archSubdirs) &#123;</span><br><span class="line">                    <span class="comment">// Skip any directory that isn't an ISA subdir.</span></span><br><span class="line">                    <span class="keyword">if</span> (!ArrayUtils.contains(instructionSets, archSubDir.getName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将要继承的 oat 目录文件名添加到 mResolvedInstructionSets！</span></span><br><span class="line">                    mResolvedInstructionSets.add(archSubDir.getName());</span><br><span class="line">                    List&lt;File&gt; oatFiles = Arrays.asList(archSubDir.listFiles());</span><br><span class="line">                    <span class="keyword">if</span> (!oatFiles.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">// 将要继承的 odex 相关文件添加到 mResolvedInheritedFiles！</span></span><br><span class="line">                        mResolvedInheritedFiles.addAll(oatFiles);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里，我们可以看到。对于卸载 split apk 的情况，我们会收集之前安装的目录下的所有不再 remove 列表中的 apk 文件到 mResolvedInheritedFiles 集合中！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;基于 Android 7.1.1 源码分析 PackageManagerService 的架构和逻辑实现！&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="PackageManager包管理" scheme="https://coolqi.top/tags/PackageManager%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
