<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coolqi`s Blog</title>
  
  <subtitle>Every day is always sleepy.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lishuaiqi.top/"/>
  <updated>2022-10-23T11:06:49.654Z</updated>
  <id>https://lishuaiqi.top/</id>
  
  <author>
    <name>Coolqi.Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shadow 原理分析</title>
    <link href="https://lishuaiqi.top/2022/10/13/Shadow-HowToWork/"/>
    <id>https://lishuaiqi.top/2022/10/13/Shadow-HowToWork/</id>
    <published>2022-10-13T12:46:25.000Z</published>
    <updated>2022-10-23T11:06:49.654Z</updated>
    
    <content type="html"><![CDATA[<p>上周在团队内部做了一次技术分享，关于 shadow 核心技术原理：</p><p>这里分享出来给大家～～～</p><p>手机端阅读估计有问题，大家可以在电脑端看：</p><div class="row">    <embed src="/pdf/shadow-howtowork.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周在团队内部做了一次技术分享，关于 shadow 核心技术原理：&lt;/p&gt;
&lt;p&gt;这里分享出来给大家～～～&lt;/p&gt;
&lt;p&gt;手机端阅读估计有问题，大家可以在电脑端看：&lt;/p&gt;


	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/pdf/shadow-h
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Shadow" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Shadow/"/>
    
    
      <category term="Shadow" scheme="https://lishuaiqi.top/tags/Shadow/"/>
    
  </entry>
  
  <entry>
    <title>ViewDraw 第五篇 layout 流程分析</title>
    <link href="https://lishuaiqi.top/2020/04/21/ViewDraw-5-layout/"/>
    <id>https://lishuaiqi.top/2020/04/21/ViewDraw-5-layout/</id>
    <published>2020-04-21T12:46:25.000Z</published>
    <updated>2020-05-09T18:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Android N 分析下 View 的 layout，N 虽然看起来略有些旧，但是框架的核心思想才是最重要的，新的一天开始了。</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们来回顾下，performLayout 请求布局的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performLayout</span><span class="params">(WindowManager.LayoutParams lp, <span class="keyword">int</span> desiredWindowWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> desiredWindowHeight)</span> </span>&#123;</span><br><span class="line">    mLayoutRequested = <span class="keyword">false</span>;</span><br><span class="line">    mScrollMayChange = <span class="keyword">true</span>;</span><br><span class="line">    mInLayout = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> View host = mView;</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_ORIENTATION || DEBUG_LAYOUT) &#123;</span><br><span class="line">        Log.v(mTag, <span class="string">"Laying out "</span> + host + <span class="string">" to ("</span> +</span><br><span class="line">                host.getMeasuredWidth() + <span class="string">", "</span> + host.getMeasuredHeight() + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"layout"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1-core】调用 DecorView（ViewGroup）的 layout；</span></span><br><span class="line">        host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</span><br><span class="line"></span><br><span class="line">        mInLayout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> numViewsRequestingLayout = mLayoutRequesters.size();</span><br><span class="line">        <span class="comment">//【2】如果 mLayoutRequesters 大小不为 0 ；说明我们在布局的过程中调用了 requestLayout 方法；</span></span><br><span class="line">        <span class="keyword">if</span> (numViewsRequestingLayout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 在布局期间调用了 requestLayout()。</span></span><br><span class="line">            <span class="comment">// 如果在请求的视图上未设置布局请求标志，则没有问题。</span></span><br><span class="line">            <span class="comment">// 如果某些请求仍在等待处理中，那么我们需要清除这些标志并进行完整的请求/度量/布局传递以处理这种情况。</span></span><br><span class="line">            <span class="comment">//【--&gt;2.5.1】获取有效的布局请求；</span></span><br><span class="line">            ArrayList&lt;View&gt; validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters,</span><br><span class="line">                    <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (validLayoutRequesters != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【3】设置此标志，表示即将进入第二次布局中，这样的话，如果再发起 requestlayout 的话；</span></span><br><span class="line">                <span class="comment">// 这些请求会延迟到下一帧</span></span><br><span class="line">                mHandlingLayoutInLayoutRequest = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【4】处理有效的布局请求；</span></span><br><span class="line">                <span class="keyword">int</span> numValidRequests = validLayoutRequesters.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValidRequests; ++i) &#123;</span><br><span class="line">                    <span class="keyword">final</span> View view = validLayoutRequesters.get(i);</span><br><span class="line">                    Log.w(<span class="string">"View"</span>, <span class="string">"requestLayout() improperly called by "</span> + view +</span><br><span class="line">                            <span class="string">" during layout: running second layout pass"</span>);</span><br><span class="line">                    <span class="comment">//【4.1-core】调用每一个 View 的 layout 方法；</span></span><br><span class="line">                    view.requestLayout();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;2.2】再次预测量；</span></span><br><span class="line">                measureHierarchy(host, lp, mView.getContext().getResources(),</span><br><span class="line">                        desiredWindowWidth, desiredWindowHeight);</span><br><span class="line">                mInLayout = <span class="keyword">true</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//【5-core】调用 DecorView（GroupView）的 layout，再次布局；</span></span><br><span class="line">                host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</span><br><span class="line"></span><br><span class="line">                mHandlingLayoutInLayoutRequest = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【--&gt;2.5.1】再次获取有效的布局请求，注意这里第二个参数传入的是 true</span></span><br><span class="line">                <span class="comment">// 这次不会清除布局标志，因为在第二次布局中的请求会延迟到下一帧;</span></span><br><span class="line">                validLayoutRequesters = getValidLayoutRequesters(mLayoutRequesters, <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (validLayoutRequesters != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> ArrayList&lt;View&gt; finalRequesters = validLayoutRequesters;</span><br><span class="line">                    <span class="comment">//【6】将第二次的请求发布到下一帧，这个 runnable 会在 performTraversals 中执行；</span></span><br><span class="line">                    getRunQueue().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">int</span> numValidRequests = finalRequesters.size();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValidRequests; ++i) &#123;</span><br><span class="line">                                <span class="keyword">final</span> View view = finalRequesters.get(i);</span><br><span class="line">                                Log.w(<span class="string">"View"</span>, <span class="string">"requestLayout() improperly called by "</span> + view +</span><br><span class="line">                                        <span class="string">" during second layout pass: posting in next frame"</span>);</span><br><span class="line">                                <span class="comment">//【6.1】触发 requestLayout 方法！</span></span><br><span class="line">                                view.requestLayout();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">    mInLayout = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在测量后布局阶段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【--&gt;2.1】调用 DecorView（ViewGroup）的 layout；</span></span><br><span class="line">host.layout(<span class="number">0</span>, <span class="number">0</span>, host.getMeasuredWidth(), host.getMeasuredHeight());</span><br></pre></td></tr></table></figure><p>是通过 view 的 layout 方法出发布局的；</p><h1 id="2-ViewGroup"><a href="#2-ViewGroup" class="headerlink" title="2 ViewGroup"></a>2 ViewGroup</h1><h2 id="2-1-layout-核心"><a href="#2-1-layout-核心" class="headerlink" title="2.1 layout - 核心"></a>2.1 layout - 核心</h2><p>DecorView 是一个 ViewGroup，所以会先执行 ViewGroup 的 layout：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class="keyword">null</span> || !mTransition.isChangingLayout())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTransition != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTransition.layoutChange(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;2.1】执行 view 的 layout 方法：</span></span><br><span class="line">        <span class="keyword">super</span>.layout(l, t, r, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// record the fact that we noop'd it; request layout when transition finishes</span></span><br><span class="line">        mLayoutCalledWhileSuppressed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewGroup -&gt; View</p><h1 id="3-View"><a href="#3-View" class="headerlink" title="3 View"></a>3 View</h1><h2 id="3-1-layout-核心"><a href="#3-1-layout-核心" class="headerlink" title="3.1 layout - 核心"></a>3.1 layout - 核心</h2><p>执行布局，参数是左上角，右下角的测量坐标，是相对于 parent 的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果设置了这个的 flags 的话，那么在 measure 阶段实际上是没有执行，而是放到了 layout 阶段</span></span><br><span class="line">    <span class="comment">// 这个 flags 是在 measure 时期判断是否；使用缓存的时候调用的；</span></span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【1.1】执行测量操作，这里就不再分析了；</span></span><br><span class="line">        onMeasure(mOldWidthMeasureSpec, mOldHeightMeasureSpec);</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldL = mLeft;</span><br><span class="line">    <span class="keyword">int</span> oldT = mTop;</span><br><span class="line">    <span class="keyword">int</span> oldB = mBottom;</span><br><span class="line">    <span class="keyword">int</span> oldR = mRight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> changed = isLayoutModeOptical(mParent) ? <span class="comment">// 这里是针对于 Optical bounds 的处理，先不关注；</span></span><br><span class="line">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果设置了 PFLAG_LAYOUT_REQUIRED 标志位的话，那么就要执行布局了。</span></span><br><span class="line">    <span class="comment">// 这个 flags 依然是在 measure 阶段设置的；</span></span><br><span class="line">    <span class="keyword">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1--&gt;5.1】执行布局，这里 DecorView，FlameLayout 均复写了这个方法；</span></span><br><span class="line">        onLayout(changed, l, t, r, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldDrawRoundScrollbar()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mRoundScrollbarRenderer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mRoundScrollbarRenderer = <span class="keyword">new</span> RoundScrollbarRenderer(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mRoundScrollbarRenderer = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_LAYOUT_REQUIRED;</span><br><span class="line"></span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnLayoutChangeListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =</span><br><span class="line">                    (ArrayList&lt;OnLayoutChangeListener&gt;)li.mOnLayoutChangeListeners.clone();</span><br><span class="line">            <span class="keyword">int</span> numListeners = listenersCopy.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                <span class="comment">//【2.2】如果有注册 LayoutChangeListener 的话，这里会回调通知；</span></span><br><span class="line">                listenersCopy.get(i).onLayoutChange(<span class="keyword">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mPrivateFlags &amp;= ~PFLAG_FORCE_LAYOUT;</span><br><span class="line">    mPrivateFlags3 |= PFLAG3_IS_LAID_OUT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里的核心的方法就是执行了 onLayout 方法：</p><h2 id="3-2-onLayout-核心"><a href="#3-2-onLayout-核心" class="headerlink" title="3.2 onLayout - 核心"></a>3.2 onLayout - 核心</h2><p>可以看到 view 的 onLayout  方法是一个空的实现!!</p><ul><li>当 View 需要为每个 child view 分配大小和位置时，会通过 layout 方法调用。</li><li>有 child 的 ViewGroup 要重写该方法，并在每个子级上调用布局。</li></ul><p>参数分析：</p><ul><li>boolean changed：表示 VIew 的大小或位置是否发生了变化；</li><li>int left：相对于父级的左侧位置</li><li>int top：相对于父级的顶部位置</li><li>int right：相对于父级的右侧位置</li><li>int bottom：相对于父级的底部位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说；</p><h2 id="3-3-getLayoutDirection"><a href="#3-3-getLayoutDirection" class="headerlink" title="3.3 getLayoutDirection"></a>3.3 getLayoutDirection</h2><p>用于获取水平的布局方向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"layout"</span>, mapping = &#123;</span><br><span class="line">    <span class="meta">@ViewDebug</span>.IntToString(from = LAYOUT_DIRECTION_LTR, to = <span class="string">"RESOLVED_DIRECTION_LTR"</span>),</span><br><span class="line">    <span class="meta">@ViewDebug</span>.IntToString(from = LAYOUT_DIRECTION_RTL, to = <span class="string">"RESOLVED_DIRECTION_RTL"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@ResolvedLayoutDir</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLayoutDirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> targetSdkVersion = getContext().getApplicationInfo().targetSdkVersion;</span><br><span class="line">    <span class="comment">//【1】当目标 sdk 小于 JELLY_BEAN_MR1，默认返回的是 LTR；</span></span><br><span class="line">    <span class="keyword">if</span> (targetSdkVersion &lt; JELLY_BEAN_MR1) &#123;</span><br><span class="line">        mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED;</span><br><span class="line">        <span class="keyword">return</span> LAYOUT_DIRECTION_RESOLVED_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】否则，根据属性色设置返回；</span></span><br><span class="line">    <span class="keyword">return</span> ((mPrivateFlags2 &amp; PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) ==</span><br><span class="line">            PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) ? LAYOUT_DIRECTION_RTL : LAYOUT_DIRECTION_LTR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值是通过 setLayoutDirection 方法或者 android:layoutDirection 设置的纸；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 水平方向从左到右；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_DIRECTION_LTR = LayoutDirection.LTR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 水平方向从右到左（相反）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_DIRECTION_RTL = LayoutDirection.RTL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认方向：LTR</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_DIRECTION_RESOLVED_DEFAULT = LAYOUT_DIRECTION_LTR;</span><br></pre></td></tr></table></figure><h1 id="4-DecorView"><a href="#4-DecorView" class="headerlink" title="4 DecorView"></a>4 DecorView</h1><h2 id="4-1-onLayout-核心"><a href="#4-1-onLayout-核心" class="headerlink" title="4.1 onLayout - 核心"></a>4.1 onLayout - 核心</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.1】进入 FrameLayout 中，进行布局；</span></span><br><span class="line">    <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">    <span class="comment">//【1】处理下 mOutsets 的数据；</span></span><br><span class="line">    getOutsets(mOutsets);</span><br><span class="line">    <span class="keyword">if</span> (mOutsets.left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        offsetLeftAndRight(-mOutsets.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mOutsets.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        offsetTopAndBottom(-mOutsets.top);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mApplyFloatingVerticalInsets) &#123;</span><br><span class="line">        offsetTopAndBottom(mFloatingInsets.top);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mApplyFloatingHorizontalInsets) &#123;</span><br><span class="line">        offsetLeftAndRight(mFloatingInsets.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the application changed its SystemUI metrics, we might also have to adapt</span></span><br><span class="line">    <span class="comment">// our shadow elevation.</span></span><br><span class="line">    updateElevation();</span><br><span class="line">    mAllowUpdateElevation = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (changed &amp;&amp; mResizeMode == RESIZE_MODE_DOCKED_DIVIDER) &#123;</span><br><span class="line">        getViewRootImpl().requestInvalidateRootRenderNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看～</p><h1 id="5-FrameLayout"><a href="#5-FrameLayout" class="headerlink" title="5 FrameLayout"></a>5 FrameLayout</h1><h2 id="5-1-onLayout-核心"><a href="#5-1-onLayout-核心" class="headerlink" title="5.1 onLayout - 核心"></a>5.1 onLayout - 核心</h2><p>我们看到 child layout 实际上是在 FrameLayout 中发起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.2】进行 child layout 布局；</span></span><br><span class="line">    layoutChildren(left, top, right, bottom, <span class="keyword">false</span> <span class="comment">/* no force left gravity */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-layoutChildren-核心"><a href="#5-2-layoutChildren-核心" class="headerlink" title="5.2 layoutChildren - 核心"></a>5.2 layoutChildren - 核心</h2><p>对 child 进行布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layoutChildren</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, <span class="keyword">boolean</span> forceLeftGravity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取到所有的孩子；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getChildCount();</span><br><span class="line">    <span class="comment">//【2】child 的坐标是基于 parent 的，所以可以看到这里计算了基于 parent 的坐标；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parentLeft = getPaddingLeftWithForeground();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parentRight = right - left - getPaddingRightWithForeground();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parentTop = getPaddingTopWithForeground();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parentBottom = bottom - top - getPaddingBottomWithForeground();</span><br><span class="line">    <span class="comment">//【3】遍历每一个 child view；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="comment">//【4】获取到 child 的布局参数；</span></span><br><span class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="comment">//【5】获取到 child 的测量宽/高，基于此决定 right/bottom；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = child.getMeasuredWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = child.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> childLeft;</span><br><span class="line">            <span class="keyword">int</span> childTop;</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//【--&gt;2.3】根据布局参数 LayoutParams 的 gravity 属性，就是 android:layout_gravity</span></span><br><span class="line">            <span class="comment">// 如果没有指定的话，那么默认是 DEFAULT_CHILD_GRAVITY，也就是左上角开始；</span></span><br><span class="line">            <span class="keyword">int</span> gravity = lp.gravity;</span><br><span class="line">            <span class="keyword">if</span> (gravity == -<span class="number">1</span>) &#123;</span><br><span class="line">                gravity = DEFAULT_CHILD_GRAVITY;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【--&gt;3.3】返回 view 的布局方向：LTR 或者 RTL</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> layoutDirection = getLayoutDirection();</span><br><span class="line">            <span class="comment">//【--&gt;6.1】将相对对其转为绝对对齐；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);</span><br><span class="line">            <span class="comment">//【6】获取 TOP BOTTOM 的设置情况</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> verticalGravity = gravity &amp; Gravity.VERTICAL_GRAVITY_MASK;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【7】获取 LEFT RIGHT 的设置情况，来计算 childLeft 值； </span></span><br><span class="line">            <span class="keyword">switch</span> (absoluteGravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) &#123;</span><br><span class="line">                <span class="keyword">case</span> Gravity.CENTER_HORIZONTAL:</span><br><span class="line">                    <span class="comment">//【7.1】如果设置了 CENTER_HORIZONTAL，那么显然是水平居中了</span></span><br><span class="line">                    childLeft = parentLeft + (parentRight - parentLeft - width) / <span class="number">2</span> +</span><br><span class="line">                    lp.leftMargin - lp.rightMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Gravity.RIGHT:</span><br><span class="line">                    <span class="comment">//【7.2】如果是 RIGHT，那就要靠右布局了；</span></span><br><span class="line">                    <span class="keyword">if</span> (!forceLeftGravity) &#123;</span><br><span class="line">                        childLeft = parentRight - width - lp.rightMargin;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> Gravity.LEFT:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">//【7.3】如果是 LEFT 或者其他，那就要靠左布局了；</span></span><br><span class="line">                    childLeft = parentLeft + lp.leftMargin;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【8】获取 TOP BOTTOM 的设置情况，来计算 childTop 值； </span></span><br><span class="line">            <span class="keyword">switch</span> (verticalGravity) &#123;</span><br><span class="line">                <span class="keyword">case</span> Gravity.TOP:</span><br><span class="line">                    <span class="comment">//【7.1】如果设置了 TOP，那么显然是靠上布局了；</span></span><br><span class="line">                    childTop = parentTop + lp.topMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</span><br><span class="line">                    <span class="comment">//【7.2】如果设置了 CENTER_VERTICAL，那么显然是垂直居中布局了；</span></span><br><span class="line">                    childTop = parentTop + (parentBottom - parentTop - height) / <span class="number">2</span> +</span><br><span class="line">                    lp.topMargin - lp.bottomMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Gravity.BOTTOM:</span><br><span class="line">                    <span class="comment">//【7.3】如果设置了 BOTTOM，那么显然是垂直居中布局了；</span></span><br><span class="line">                    childTop = parentBottom - height - lp.bottomMargin;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    childTop = parentTop + lp.topMargin;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;3.1/2.1】这有会执行 child view 的 layout 执行布局，注意 child 可能 view 也可能是 view group</span></span><br><span class="line">            child.layout(childLeft, childTop, childLeft + width, childTop + height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DEFAULT_CHILD_GRAVITY 的取值如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CHILD_GRAVITY = Gravity.TOP | Gravity.START;</span><br></pre></td></tr></table></figure><p>对于 Gravity 的 TOP BOTTOM LEFT RIGHT 取值如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Push object to the top of its container, not changing its size. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOP = (AXIS_PULL_BEFORE|AXIS_SPECIFIED)&lt;&lt;AXIS_Y_SHIFT;</span><br><span class="line"><span class="comment">/** Push object to the bottom of its container, not changing its size. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOTTOM = (AXIS_PULL_AFTER|AXIS_SPECIFIED)&lt;&lt;AXIS_Y_SHIFT;</span><br><span class="line"><span class="comment">/** Push object to the left of its container, not changing its size. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEFT = (AXIS_PULL_BEFORE|AXIS_SPECIFIED)&lt;&lt;AXIS_X_SHIFT;</span><br><span class="line"><span class="comment">/** Push object to the right of its container, not changing its size. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RIGHT = (AXIS_PULL_AFTER|AXIS_SPECIFIED)&lt;&lt;AXIS_X_SHIFT;</span><br></pre></td></tr></table></figure><p>所以可以根据上看的  gravity &amp; Gravity.VERTICAL_GRAVITY_MASK 操作获取的是什么了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 LEFT RIGHT 的设置情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_GRAVITY_MASK = (AXIS_SPECIFIED |</span><br><span class="line">        AXIS_PULL_BEFORE | AXIS_PULL_AFTER) &lt;&lt; AXIS_X_SHIFT;</span><br><span class="line"><span class="comment">// 获取 TOP BOTTOM 的设置情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_GRAVITY_MASK = (AXIS_SPECIFIED |</span><br><span class="line">        AXIS_PULL_BEFORE | AXIS_PULL_AFTER) &lt;&lt; AXIS_Y_SHIFT;</span><br></pre></td></tr></table></figure><p>不多说了～</p><h1 id="6-Gravity"><a href="#6-Gravity" class="headerlink" title="6 Gravity"></a>6 Gravity</h1><h2 id="6-1-getAbsoluteGravity"><a href="#6-1-getAbsoluteGravity" class="headerlink" title="6.1 getAbsoluteGravity"></a>6.1 getAbsoluteGravity</h2><p>将相对对齐转为绝对对齐，根据 RTL 或者 LTR 进行设置：</p><ul><li>如果水平方向为 LTR，则 START 将设置 LEFT，而 END 将设置 RIGHT。</li><li>如果水平方向是 RTL，则 START 将设置 RIGHT，而 END 将设置 LEFT。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAbsoluteGravity</span><span class="params">(<span class="keyword">int</span> gravity, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = gravity;</span><br><span class="line">    <span class="comment">//【1】判断下对齐方式是不是相对的，start 和 end 多一个 RELATIVE_LAYOUT_DIRECTION 的标志位；</span></span><br><span class="line">    <span class="keyword">if</span> ((result &amp; RELATIVE_LAYOUT_DIRECTION) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((result &amp; Gravity.START) == Gravity.START) &#123;</span><br><span class="line">            <span class="comment">//【1.1】去掉 START，如果是 RTL，那么就设置成 RIGHT，不是就是 LEFT</span></span><br><span class="line">            result &amp;= ~START;</span><br><span class="line">            <span class="keyword">if</span> (layoutDirection == View.LAYOUT_DIRECTION_RTL) &#123;</span><br><span class="line">                result |= RIGHT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                result |= LEFT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((result &amp; Gravity.END) == Gravity.END) &#123;</span><br><span class="line">            <span class="comment">//【1.1】去掉 END，如果是 RTL，那么就设置成 LEFT，不是就是 RIGHT</span></span><br><span class="line">            result &amp;= ~END;</span><br><span class="line">            <span class="keyword">if</span> (layoutDirection == View.LAYOUT_DIRECTION_RTL) &#123;</span><br><span class="line">                result |= LEFT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result |= RIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】去掉相对标志位</span></span><br><span class="line">        result &amp;= ~RELATIVE_LAYOUT_DIRECTION;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于 gravity：</li></ul><p>这里的 gravity 是 android:layout_gravity 的取值，就是相对 parent 的布局比重；</p><ul><li>关于绝对/相对对齐</li></ul><p>我们在设置 view 的 android:gravity＝”” 的时候，会设置比如 “left|bottom” 这样的值，那么这些值具体的意思是什么呢？</p><p>left 和 right 代表一种绝对的对齐，而 start 和 end 表示基于阅读顺序的对齐。</p><p>如何理解呢，我们可以通过 android:layoutDirection=”rtl” 来设置视图的排列顺序，对于阿拉伯语的话，需要 RTL 的显示方式的。</p><p>当使用 left 的时候，无论是 LTR 还是 RTL，总是左对齐的；</p><p>而使用 start，在 LTR 中是左对齐，而在 RTL 中则是右对齐。</p><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h1><p>我们用一张图直观的看下 layout 的流程：</p><p><img src="//lishuaiqi.top/2020/04/21/ViewDraw-5-layout/View.layout-process.png" alt="View.layout-process" style="zoom:50%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于 Android N 分析下 View 的 layout，N 虽然看起来略有些旧，但是框架的核心思想才是最重要的，新的一天开始了。&lt;/p&gt;
&lt;h1 id=&quot;1-回顾&quot;&gt;&lt;a href=&quot;#1-回顾&quot; class=&quot;headerlink&quot; title=&quot;1 回顾&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="View 视图" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/"/>
    
      <category term="View 的加载和绘制" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/View-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BB%98%E5%88%B6/"/>
    
    
      <category term="ViewDraw" scheme="https://lishuaiqi.top/tags/ViewDraw/"/>
    
  </entry>
  
  <entry>
    <title>ViewDraw 第六篇 draw 流程分析</title>
    <link href="https://lishuaiqi.top/2020/04/21/ViewDraw-6-draw/"/>
    <id>https://lishuaiqi.top/2020/04/21/ViewDraw-6-draw/</id>
    <published>2020-04-21T12:46:25.000Z</published>
    <updated>2020-07-19T17:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章基于 Android N - 7.1.1 主要分析下 draw 方法的执行流程；</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>在上面的 performTraversals 文章中，我们知道 perfomDraw 分为硬件绘制和软件绘制，这里我们只看软件绘制：</p><h2 id="1-1-mHardwareRenderer-draw-硬件绘制"><a href="#1-1-mHardwareRenderer-draw-硬件绘制" class="headerlink" title="1.1 mHardwareRenderer.draw - 硬件绘制"></a>1.1 mHardwareRenderer.draw - 硬件绘制</h2><p>我们先来看看硬件绘制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mAttachInfo.mHardwareRenderer != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mHardwareRenderer.isEnabled()) &#123;</span><br><span class="line">    <span class="comment">// If accessibility focus moved, always invalidate the root.</span></span><br><span class="line">    <span class="keyword">boolean</span> invalidateRoot = accessibilityFocusDirty || mInvalidateRootRequested;</span><br><span class="line">    mInvalidateRootRequested = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Draw with hardware renderer.</span></span><br><span class="line">    mIsAnimating = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mHardwareYOffset != yOffset || mHardwareXOffset != xOffset) &#123;</span><br><span class="line">        mHardwareYOffset = yOffset;</span><br><span class="line">        mHardwareXOffset = xOffset;</span><br><span class="line">        invalidateRoot = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (invalidateRoot) &#123;</span><br><span class="line">        mAttachInfo.mHardwareRenderer.invalidateRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dirty.setEmpty();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updated = updateContentDrawBounds();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mReportNextDraw) &#123;</span><br><span class="line">        mAttachInfo.mHardwareRenderer.setStopped(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (updated) &#123;</span><br><span class="line">        requestDrawWindow();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】通过 ThreadedRenderer 进行绘制；</span></span><br><span class="line">    mAttachInfo.mHardwareRenderer.draw(mView, mAttachInfo, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-drawSoftware-软件绘制"><a href="#1-2-drawSoftware-软件绘制" class="headerlink" title="1.2 drawSoftware - 软件绘制"></a>1.2 drawSoftware - 软件绘制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">drawSoftware</span><span class="params">(Surface surface, AttachInfo attachInfo, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> scalingRequired, Rect dirty)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Canvas canvas;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = dirty.left;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = dirty.top;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = dirty.right;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = dirty.bottom;</span><br><span class="line">        <span class="comment">//【1】锁定 canvas，并返回画布 Canvas；</span></span><br><span class="line">        canvas = mSurface.lockCanvas(dirty);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The dirty rectangle can be modified by Surface.lockCanvas()</span></span><br><span class="line">        <span class="comment">// noinspection ConstantConditions</span></span><br><span class="line">        <span class="keyword">if</span> (left != dirty.left || top != dirty.top || right != dirty.right</span><br><span class="line">                || bottom != dirty.bottom) &#123;</span><br><span class="line">            attachInfo.mIgnoreDirtyState = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Do this in native</span></span><br><span class="line">        canvas.setDensity(mDensity);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Surface.OutOfResourcesException e) &#123;</span><br><span class="line">        handleOutOfResourcesException(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        Log.e(mTag, <span class="string">"Could not lock surface"</span>, e);</span><br><span class="line">        <span class="comment">// Don't assume this is due to out of memory, it could be</span></span><br><span class="line">        <span class="comment">// something else, and if it is something else then we could</span></span><br><span class="line">        <span class="comment">// kill stuff (or ourself) for no reason.</span></span><br><span class="line">        mLayoutRequested = <span class="keyword">true</span>;    <span class="comment">// ask wm for a new surface next time.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_ORIENTATION || DEBUG_DRAW) &#123;</span><br><span class="line">            Log.v(mTag, <span class="string">"Surface "</span> + surface + <span class="string">" drawing to bitmap w="</span></span><br><span class="line">                    + canvas.getWidth() + <span class="string">", h="</span> + canvas.getHeight());</span><br><span class="line">            <span class="comment">//canvas.drawARGB(255, 255, 0, 0);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果该位图的格式包含 Alpha 通道，则我们需要在绘制之前清除它，以便 child 可以在透明背景上正确地重新组合其图形。</span></span><br><span class="line">        <span class="comment">// 这将自动考虑裁剪区域或者脏区，或者如果我们要应用偏移，则需要清除没有出现偏移的区域，以避免在空白区域中留下垃圾。</span></span><br><span class="line">        <span class="keyword">if</span> (!canvas.isOpaque() || yoff != <span class="number">0</span> || xoff != <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.drawColor(<span class="number">0</span>, PorterDuff.Mode.CLEAR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dirty.setEmpty(); <span class="comment">// 将 dirty 区域置空；</span></span><br><span class="line">        mIsAnimating = <span class="keyword">false</span>;</span><br><span class="line">        mView.mPrivateFlags |= View.PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DRAW) &#123;</span><br><span class="line">            Context cxt = mView.getContext();</span><br><span class="line">            Log.i(mTag, <span class="string">"Drawing: package:"</span> + cxt.getPackageName() +</span><br><span class="line">                    <span class="string">", metrics="</span> + cxt.getResources().getDisplayMetrics() +</span><br><span class="line">                    <span class="string">", compatibilityInfo="</span> + cxt.getResources().getCompatibilityInfo());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            canvas.translate(-xoff, -yoff);</span><br><span class="line">            <span class="keyword">if</span> (mTranslator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mTranslator.translateCanvas(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : <span class="number">0</span>);</span><br><span class="line">            attachInfo.mSetIgnoreDirtyState = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【2-core】调用 DecorView（GroupView）的 draw 方法；</span></span><br><span class="line">            mView.draw(canvas);</span><br><span class="line"></span><br><span class="line">            drawAccessibilityFocusedDrawableIfNeeded(canvas);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!attachInfo.mSetIgnoreDirtyState) &#123;</span><br><span class="line">                <span class="comment">// Only clear the flag if it was not set during the mView.draw() call</span></span><br><span class="line">                attachInfo.mIgnoreDirtyState = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【3】解锁 canvas</span></span><br><span class="line">            surface.unlockCanvasAndPost(canvas);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            Log.e(mTag, <span class="string">"Could not unlock surface"</span>, e);</span><br><span class="line">            mLayoutRequested = <span class="keyword">true</span>;    <span class="comment">// ask wm for a new surface next time.</span></span><br><span class="line">            <span class="comment">//noinspection ReturnInsideFinallyBlock</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOCAL_LOGV) &#123;</span><br><span class="line">            Log.v(mTag, <span class="string">"Surface "</span> + surface + <span class="string">" unlockCanvasAndPost"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的关键代码就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【2-core】调用 DecorView（GroupView）的 draw 方法；</span></span><br><span class="line">mView.draw(canvas);</span><br></pre></td></tr></table></figure><p>这里的 mView 是 DecorView：</p><h1 id="2-DecorView"><a href="#2-DecorView" class="headerlink" title="2 DecorView"></a>2 DecorView</h1><h2 id="2-1-draw"><a href="#2-1-draw" class="headerlink" title="2.1 draw"></a>2.1 draw</h2><p>DecorView 复写了 draw 方法，但是其内部依然是调用了父类 View 的 draw 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.1】进入 view；</span></span><br><span class="line">    <span class="keyword">super</span>.draw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mMenuBackground != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mMenuBackground.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-onDraw"><a href="#2-2-onDraw" class="headerlink" title="2.2 onDraw"></a>2.2 onDraw</h2><p>DecorView 复写了 view 的 onDraw 方法，但是其内部主要逻辑依然是调用了父类的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.1】开启 view 的绘制；</span></span><br><span class="line">    <span class="keyword">super</span>.onDraw(c);</span><br><span class="line">    mBackgroundFallback.draw(mContentRoot, c, mWindow.mContentParent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-ViewGroup"><a href="#3-ViewGroup" class="headerlink" title="3 ViewGroup"></a>3 ViewGroup</h1><h2 id="3-1-dispatchDraw-核心"><a href="#3-1-dispatchDraw-核心" class="headerlink" title="3.1 dispatchDraw - 核心"></a>3.1 dispatchDraw - 核心</h2><p>ViewGroup 复写了 view 的 dispatchDraw 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【0】是否使用 renderNode 属性，实际上是针对于硬件加速的，软件绘制返回的是 false；</span></span><br><span class="line">    <span class="keyword">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="keyword">int</span> flags = mGroupFlags;</span><br><span class="line">    <span class="comment">//【1】判断是否有动画，如果有动画，同时 child view 是可见的 VISIBLE，那么这里会设置动画参数；</span></span><br><span class="line">    <span class="comment">// FLAG_RUN_ANIMATION 标志位表示要运行动画。</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class="number">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = children[i];</span><br><span class="line">            <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class="line">                <span class="comment">//【1.1】动画的参数是保存在 view 的 LayoutParams 中的；</span></span><br><span class="line">                <span class="keyword">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class="line">                attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class="line">                bindLayoutAnimation(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1.2】将布局动画器的应用保存到 controller，并启动动画；</span></span><br><span class="line">        <span class="comment">// 布局动画控制器用于对布局或视图组的 child view 进行动画处理。每个孩子都使用相同的动画，但是对于每个孩子，动画在不同的时间开始。</span></span><br><span class="line">        <span class="keyword">final</span> LayoutAnimationController controller = mLayoutAnimationController;</span><br><span class="line">        <span class="keyword">if</span> (controller.willOverlap()) &#123;</span><br><span class="line">            mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        controller.start();</span><br><span class="line">        <span class="comment">//【1.3】去掉上面的 FLAG_RUN_ANIMATION 标志位，因为动画开始了，同时要去掉 FLAG_ANIMATION_DONE 标志位</span></span><br><span class="line">        <span class="comment">// FLAG_ANIMATION_DONE 表示动画结束了或者没有动画；</span></span><br><span class="line">        mGroupFlags &amp;= ~FLAG_RUN_ANIMATION;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_ANIMATION_DONE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.4】如果有动画监听器，那就回调，显然，这个是我们要设置进去的；</span></span><br><span class="line">        <span class="keyword">if</span> (mAnimationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAnimationListener.onAnimationStart(controller.getAnimation());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> clipSaveCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//【2】这里判断了下 viewgroup 是否有 padding 区域，如果有的话，那么绘制的区域就要减去 padding</span></span><br><span class="line">    <span class="comment">// 所以下面 save 的画布的状态，裁剪了 canvas，去掉了 padding 区域；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class="line">    <span class="keyword">if</span> (clipToPadding) &#123;</span><br><span class="line">        clipSaveCount = canvas.save(Canvas.CLIP_SAVE_FLAG);</span><br><span class="line">        canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class="line">                mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class="line">                mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】这里又去掉了 PFLAG_DRAW_ANIMATION 和 FLAG_INVALIDATE_REQUIRED 标志位；</span></span><br><span class="line">    <span class="comment">// 如果设置了 FLAG_INVALIDATE_REQUIRED ，dispatchDraw 将调用 invalidate，</span></span><br><span class="line">    <span class="comment">// 当一个 child 需要 invalidate 并且设置了 FLAG_OPTIMIZE_INVALIDATE 时，</span></span><br><span class="line">    <span class="comment">// drawChild 会设置该标志位；</span></span><br><span class="line">    mPrivateFlags &amp;= ~PFLAG_DRAW_ANIMATION;</span><br><span class="line">    mGroupFlags &amp;= ~FLAG_INVALIDATE_REQUIRED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> more = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> drawingTime = getDrawingTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (usingRenderNodeProperties) canvas.insertReorderBarrier();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> transientCount = mTransientIndices == <span class="keyword">null</span> ? <span class="number">0</span> : mTransientIndices.size();</span><br><span class="line">    <span class="keyword">int</span> transientIndex = transientCount != <span class="number">0</span> ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】这里的意思：如果没有开启硬件加速（HW accelerated），那么会对 child 的绘制顺序做一个预排列 preorderedList</span></span><br><span class="line">    <span class="comment">// 如果开启硬件加速，那么这里无需排列，因为硬件管道会在内部进行重新排序；</span></span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = usingRenderNodeProperties <span class="comment">// 软件绘制返回 false</span></span><br><span class="line">            ? <span class="keyword">null</span> : buildOrderedChildList(); <span class="comment">//【--&gt;3.1.1】这里是会对 view 预排列；</span></span><br><span class="line">    <span class="comment">//【5】如果开启了硬件加速（没有预排列），同时我们指定了 ViewGroup 按照 getChildDrawingOrder 定义的顺序绘制其子级 view</span></span><br><span class="line">    <span class="comment">// 是否按照指定顺序，看是否指定了 FLAG_USE_CHILD_DRAWING_ORDER 标志位；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span> &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123;</span><br><span class="line">            <span class="keyword">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class="line">            <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class="line">                    transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;3.2】绘制 transientChild（可能是 view/viewGroup）</span></span><br><span class="line">                more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class="line">            &#125;</span><br><span class="line">            transientIndex++;</span><br><span class="line">            <span class="keyword">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class="line">                transientIndex = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】这里就是绘制 child view 了，这里会对 child 的绘制顺序做调整，有一个容器顺序和绘制顺序的不同；</span></span><br><span class="line">        <span class="comment">//【--&gt;3.1.1】获取调整后的绘制顺序；</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class="line">        <span class="comment">//【--&gt;3.1.2】根据调整后的绘制顺序返回 view；</span></span><br><span class="line">        <span class="keyword">final</span> View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.2】绘制 child（可能是 view/viewGroup）</span></span><br><span class="line">            more |= drawChild(canvas, child, drawingTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class="line">        <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class="line">                transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.2】绘制额外的 transient child view（可能是 view/viewGroup）</span></span><br><span class="line">            more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class="line">        &#125;</span><br><span class="line">        transientIndex++;</span><br><span class="line">        <span class="keyword">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】绘制所有的正在消失的有动画的 view；</span></span><br><span class="line">    <span class="keyword">if</span> (mDisappearingChildren != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> disappearingCount = disappearingChildren.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = disappearingCount; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = disappearingChildren.get(i);</span><br><span class="line">            <span class="comment">//【--&gt;3.2】绘制 child（可能是 view/viewGroup）</span></span><br><span class="line">            more |= drawChild(canvas, child, drawingTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (usingRenderNodeProperties) canvas.insertInorderBarrier();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debugDraw()) &#123;</span><br><span class="line">        onDebugDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【8】如果前面针对 padding 做了画布裁剪，这里就恢复它；</span></span><br><span class="line">    <span class="keyword">if</span> (clipToPadding) &#123;</span><br><span class="line">        canvas.restoreToCount(clipSaveCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【9】mGroupFlags 可能会被 drawChild() 更改，所以这里将副本保存到 flags 中；</span></span><br><span class="line">    flags = mGroupFlags;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123;</span><br><span class="line">        invalidate(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【10】判断完成了吗</span></span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; FLAG_ANIMATION_DONE) == <span class="number">0</span> &amp;&amp; (flags &amp; FLAG_NOTIFY_ANIMATION_LISTENER) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            mLayoutAnimationController.isDone() &amp;&amp; !more) &#123;</span><br><span class="line">        <span class="comment">//【10。1】设置 FLAG_NOTIFY_ANIMATION_LISTENER，调用 mAnimationListener.onAnimationEnd() 并在必要时删除子级Bitmap缓存。</span></span><br><span class="line">        <span class="comment">// 当布局动画结束时（设置FLAG_ANIMATION_DONE之后）设置此标志。</span></span><br><span class="line">        mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;</span><br><span class="line">        <span class="keyword">final</span> Runnable end = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                notifyAnimationListener(); <span class="comment">// 这里面会调用 mAnimationListener.onAnimationEnd()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        post(end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-1-buildOrderedChildList"><a href="#3-1-1-buildOrderedChildList" class="headerlink" title="3.1.1 buildOrderedChildList"></a>3.1.1 buildOrderedChildList</h3><p>该方法会返回 child view 的预排序列表 mPreSortedChildren，首先按 Z 排序，然后按 child view 绘制顺序排序（如果适用）。</p><p>使用后必须清除此列表，以免泄漏子视图。</p><p>使用稳定的插入排序，通常为 O（n）时间复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ArrayList&lt;View&gt; <span class="title">buildOrderedChildList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">    <span class="comment">//【1】如果 child 不超过 2 个，或者没有 view 设置了 android:elevation android:translationZ</span></span><br><span class="line">    <span class="comment">// 那就无需排序；</span></span><br><span class="line">    <span class="keyword">if</span> (childrenCount &lt;= <span class="number">1</span> || !hasChildWithZ()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (mPreSortedChildren == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mPreSortedChildren = <span class="keyword">new</span> ArrayList&lt;&gt;(childrenCount);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// callers should clear, so clear shouldn't be necessary, but for safety...</span></span><br><span class="line">        mPreSortedChildren.clear();</span><br><span class="line">        mPreSortedChildren.ensureCapacity(childrenCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.1.1】判断是否开启自定义绘制顺序；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = isChildrenDrawingOrderEnabled();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.2】获取绘制顺序（可能被更改）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</span><br><span class="line">        <span class="keyword">final</span> View nextChild = mChildren[childIndex];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> currentZ = nextChild.getZ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 Z 值越大的 view 查到 list 的前面，其他的相对位置不变；</span></span><br><span class="line">        <span class="keyword">int</span> insertIndex = i;</span><br><span class="line">        <span class="keyword">while</span> (insertIndex &gt; <span class="number">0</span> &amp;&amp; mPreSortedChildren.get(insertIndex - <span class="number">1</span>).getZ() &gt; currentZ) &#123;</span><br><span class="line">            insertIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        mPreSortedChildren.add(insertIndex, nextChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mPreSortedChildren;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 view 内部都有一个，它包含 View 属性（软硬都用），也可能包含 View 内容的 DisplayList（硬件加速使用）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RenderNode mRenderNode</span><br></pre></td></tr></table></figure><p>我们看看 hasChildWithZ ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// Child views of this ViewGroup</span></span><br><span class="line">   <span class="keyword">private</span> View[] mChildren;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasChildWithZ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mChildrenCount; i++) &#123;</span><br><span class="line">           <span class="comment">//【1】这里调用了 View 的 getZ 方法：</span></span><br><span class="line">           <span class="keyword">if</span> (mChildren[i].getZ() != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>判断该 View 的是否有可视 z 位置（以像素为单位）。该方法等价于  setTranslationZ + getElevation 属性；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"drawing"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getZ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getElevation() + getTranslationZ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是 android:elevation 和 android:translationZ </p><h4 id="3-1-1-1-isChildrenDrawingOrderEnabled"><a href="#3-1-1-1-isChildrenDrawingOrderEnabled" class="headerlink" title="3.1.1.1 isChildrenDrawingOrderEnabled"></a>3.1.1.1 isChildrenDrawingOrderEnabled</h4><p>判断下 ViewGroup 是否按照 getChildDrawingOrder 返回的方式绘制 view：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"drawing"</span>)</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isChildrenDrawingOrderEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mGroupFlags &amp; FLAG_USE_CHILD_DRAWING_ORDER) == FLAG_USE_CHILD_DRAWING_ORDER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-getAndVerifyPreorderedIndex"><a href="#3-1-2-getAndVerifyPreorderedIndex" class="headerlink" title="3.1.2 getAndVerifyPreorderedIndex"></a>3.1.2 getAndVerifyPreorderedIndex</h3><p>获取 view 实际绘制顺序；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getAndVerifyPreorderedIndex</span><span class="params">(<span class="keyword">int</span> childrenCount, <span class="keyword">int</span> i, <span class="keyword">boolean</span> customOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childIndex;</span><br><span class="line">    <span class="keyword">if</span> (customOrder) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.2】如果 view group 重写了绘制顺序，那么这会获取重写后的绘制顺序；</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childIndex1 = getChildDrawingOrder(childrenCount, i);</span><br><span class="line">        <span class="keyword">if</span> (childIndex1 &gt;= childrenCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"getChildDrawingOrder() "</span></span><br><span class="line">                    + <span class="string">"returned invalid index "</span> + childIndex1</span><br><span class="line">                    + <span class="string">" (child count is "</span> + childrenCount + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        childIndex = childIndex1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        childIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-getChildDrawingOrder"><a href="#3-1-3-getChildDrawingOrder" class="headerlink" title="3.1.3 getChildDrawingOrder"></a>3.1.3 getChildDrawingOrder</h3><p>修改绘制顺序，如果要更改子代的绘制顺序，ViewGroup 要重写此方法。默认情况下，它返回 drawingPosition！</p><p>想要这个方法生效，那么就要先调用：setChildrenDrawingOrderEnabled</p><p>参数：drawingPosition，当前的绘制顺序；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getChildDrawingOrder</span><span class="params">(<span class="keyword">int</span> childCount, <span class="keyword">int</span> drawingPosition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> drawingPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-drawChild-核心"><a href="#3-2-drawChild-核心" class="headerlink" title="3.2 drawChild - 核心"></a>3.2 drawChild - 核心</h2><p>绘制 child view。</p><p>这个是直接翻译的注视：此方法负责使画布处于正确的状态。这包括剪切，平移以使孩子的滚动原点位于 0、0，并应用任何动画转换。</p><p>可以看出子至少有个作用：</p><p>1、修正 canvas 的自己状态；2、动画处理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.2】绘制 child 开始了，调用了每个 child 的 draw 方法；</span></span><br><span class="line">    <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制 child 的逻辑是在 view 的 draw[3] 里面；</p><h2 id="3-3-dispatchGetDisplayList-核心"><a href="#3-3-dispatchGetDisplayList-核心" class="headerlink" title="3.3 dispatchGetDisplayList - 核心"></a>3.3 dispatchGetDisplayList - 核心</h2><p>ViewGroup 通知 child view 重新创建自身的 DisplayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchGetDisplayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = mChildrenCount;</span><br><span class="line">    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = children[i];</span><br><span class="line">        <span class="keyword">if</span> (((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.3.1】对于每个可见或者有动画的 child view，创建其 DisplayList！</span></span><br><span class="line">            recreateChildDisplayList(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span>) &#123;</span><br><span class="line">        View overlayView = mOverlay.getOverlayView();</span><br><span class="line">        recreateChildDisplayList(overlayView);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDisappearingChildren != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> disappearingCount = disappearingChildren.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; disappearingCount; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = disappearingChildren.get(i);</span><br><span class="line">            recreateChildDisplayList(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-recreateChildDisplayList"><a href="#3-3-1-recreateChildDisplayList" class="headerlink" title="3.3.1 recreateChildDisplayList"></a>3.3.1 recreateChildDisplayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateChildDisplayList</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">    child.mRecreateDisplayList = (child.mPrivateFlags &amp; PFLAG_INVALIDATED) != <span class="number">0</span>;</span><br><span class="line">    child.mPrivateFlags &amp;= ~PFLAG_INVALIDATED;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】这里又调用了 updateDisplayListIfDirty 方法：</span></span><br><span class="line">    child.updateDisplayListIfDirty();</span><br><span class="line">    child.mRecreateDisplayList = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-View"><a href="#4-View" class="headerlink" title="4 View"></a>4 View</h1><h2 id="4-1-draw-1-核心"><a href="#4-1-draw-1-核心" class="headerlink" title="4.1 draw[1] - 核心"></a>4.1 draw[1] - 核心</h2><p>View 的方法是最核心的部分：</p><p>将 View（及其所有 child）绘制（渲染）到给定的 Canvas。 在调用此函数之前，View 必须完成测量和布局。</p><p>自定义 View 时，请实现 onDraw 而不要重写 draw（draw 方法会调用 onDraw）。</p><p> 如果确实需要重写 draw，一定要调用 super.draw!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</span><br><span class="line">            (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</span><br><span class="line">    mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> saveCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】绘制背景：</span></span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.1】绘制背景；</span></span><br><span class="line">        drawBackground(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】是否跳过 2 到 5 的步骤，这里判断了 ViewFlags 是否设置了 FADING_EDGE_HORIZONTAL/FADING_EDGE_VERTICAL</span></span><br><span class="line">    <span class="comment">// 这两个标志位表示，如果 view 滚动的话，那么他的边缘会变淡（淡入淡出效果）；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</span><br><span class="line">    <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.2】绘制当前 view 的内容；</span></span><br><span class="line">        <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【--&gt;4.1.2】如果是 view 的话，只是一个空实现；</span></span><br><span class="line">        <span class="comment">//【--&gt;3.1】如果是 ViewGroup 的话，尝试绘制 child view 的内容；</span></span><br><span class="line">        dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】绘制叠加层；</span></span><br><span class="line">        <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">            mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【--&gt;4.1.4】绘制装饰前景（前景，滚动条等等）</span></span><br><span class="line">        onDrawForeground(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正常来说，到这里绘制就结束了；</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【7】如果设置了 fade 效果的话，那么上面会跳过一系列的绘制操作；</span></span><br><span class="line">    <span class="comment">// 因为下面会特殊的处理；</span></span><br><span class="line">    <span class="keyword">boolean</span> drawTop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> drawBottom = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> drawLeft = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> drawRight = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> topFadeStrength = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">float</span> bottomFadeStrength = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">float</span> leftFadeStrength = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">float</span> rightFadeStrength = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【8】如果是设置了 fade 效果的话，下面会对 canvas 的 layer 图层进行保存；</span></span><br><span class="line">    <span class="comment">// 下面先是计算了下要绘制的边界距离；</span></span><br><span class="line">    <span class="keyword">int</span> paddingLeft = mPaddingLeft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> offsetRequired = isPaddingOffsetRequired();</span><br><span class="line">    <span class="keyword">if</span> (offsetRequired) &#123;</span><br><span class="line">        paddingLeft += getLeftPaddingOffset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = mScrollX + paddingLeft;</span><br><span class="line">    <span class="keyword">int</span> right = left + mRight - mLeft - mPaddingRight - paddingLeft;</span><br><span class="line">    <span class="keyword">int</span> top = mScrollY + getFadeTop(offsetRequired);</span><br><span class="line">    <span class="keyword">int</span> bottom = top + getFadeHeight(offsetRequired);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offsetRequired) &#123;</span><br><span class="line">        right += getRightPaddingOffset();</span><br><span class="line">        bottom += getBottomPaddingOffset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ScrollabilityCache scrollabilityCache = mScrollCache;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> fadeHeight = scrollabilityCache.fadingEdgeLength;</span><br><span class="line">    <span class="keyword">int</span> length = (<span class="keyword">int</span>) fadeHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clip the fade length if top and bottom fades overlap</span></span><br><span class="line">    <span class="comment">// overlapping fades produce odd-looking artifacts</span></span><br><span class="line">    <span class="keyword">if</span> (verticalEdges &amp;&amp; (top + length &gt; bottom - length)) &#123;</span><br><span class="line">        length = (bottom - top) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// also clip horizontal fades if necessary</span></span><br><span class="line">    <span class="keyword">if</span> (horizontalEdges &amp;&amp; (left + length &gt; right - length)) &#123;</span><br><span class="line">        length = (right - left) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【9】判断下四个方向是否要绘制效果；</span></span><br><span class="line">    <span class="keyword">if</span> (verticalEdges) &#123;</span><br><span class="line">        topFadeStrength = Math.max(<span class="number">0.0f</span>, Math.min(<span class="number">1.0f</span>, getTopFadingEdgeStrength()));</span><br><span class="line">        drawTop = topFadeStrength * fadeHeight &gt; <span class="number">1.0f</span>;</span><br><span class="line">        bottomFadeStrength = Math.max(<span class="number">0.0f</span>, Math.min(<span class="number">1.0f</span>, getBottomFadingEdgeStrength()));</span><br><span class="line">        drawBottom = bottomFadeStrength * fadeHeight &gt; <span class="number">1.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (horizontalEdges) &#123;</span><br><span class="line">        leftFadeStrength = Math.max(<span class="number">0.0f</span>, Math.min(<span class="number">1.0f</span>, getLeftFadingEdgeStrength()));</span><br><span class="line">        drawLeft = leftFadeStrength * fadeHeight &gt; <span class="number">1.0f</span>;</span><br><span class="line">        rightFadeStrength = Math.max(<span class="number">0.0f</span>, Math.min(<span class="number">1.0f</span>, getRightFadingEdgeStrength()));</span><br><span class="line">        drawRight = rightFadeStrength * fadeHeight &gt; <span class="number">1.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    saveCount = canvas.getSaveCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> solidColor = getSolidColor();</span><br><span class="line">    <span class="keyword">if</span> (solidColor == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags = Canvas.HAS_ALPHA_LAYER_SAVE_FLAG;</span><br><span class="line">        <span class="comment">//【10】这里开始保存了画布的 layer，length 表示这个 fade 区域的宽度。</span></span><br><span class="line">        <span class="comment">// 这里相当于创建了一个新的 layer 并入栈，四个坐标构成了一个矩形区域；</span></span><br><span class="line">        <span class="keyword">if</span> (drawTop) &#123;</span><br><span class="line">            canvas.saveLayer(left, top, right, top + length, <span class="keyword">null</span>, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drawBottom) &#123;</span><br><span class="line">            canvas.saveLayer(left, bottom - length, right, bottom, <span class="keyword">null</span>, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drawLeft) &#123;</span><br><span class="line">            canvas.saveLayer(left, top, left + length, bottom, <span class="keyword">null</span>, flags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drawRight) &#123;</span><br><span class="line">            canvas.saveLayer(right - length, top, right, bottom, <span class="keyword">null</span>, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        scrollabilityCache.setFadeColor(solidColor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;4.1.2】保存完 layer 后，我们先绘制当前 view 的内容；</span></span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;4.1.3】然后绘制 child 的内容；</span></span><br><span class="line">    dispatchDraw(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【11】绘制淡入淡出效果，并还原图层，淡入淡出实际上是在另外一个 layer 上绘制的；</span></span><br><span class="line">    <span class="keyword">final</span> Paint p = scrollabilityCache.paint;</span><br><span class="line">    <span class="keyword">final</span> Matrix matrix = scrollabilityCache.matrix;</span><br><span class="line">    <span class="keyword">final</span> Shader fade = scrollabilityCache.shader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (drawTop) &#123;</span><br><span class="line">        matrix.setScale(<span class="number">1</span>, fadeHeight * topFadeStrength);</span><br><span class="line">        matrix.postTranslate(left, top);</span><br><span class="line">        fade.setLocalMatrix(matrix);</span><br><span class="line">        p.setShader(fade);</span><br><span class="line">        canvas.drawRect(left, top, right, top + length, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (drawBottom) &#123;</span><br><span class="line">        matrix.setScale(<span class="number">1</span>, fadeHeight * bottomFadeStrength);</span><br><span class="line">        matrix.postRotate(<span class="number">180</span>);</span><br><span class="line">        matrix.postTranslate(left, bottom);</span><br><span class="line">        fade.setLocalMatrix(matrix);</span><br><span class="line">        p.setShader(fade);</span><br><span class="line">        canvas.drawRect(left, bottom - length, right, bottom, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (drawLeft) &#123;</span><br><span class="line">        matrix.setScale(<span class="number">1</span>, fadeHeight * leftFadeStrength);</span><br><span class="line">        matrix.postRotate(-<span class="number">90</span>);</span><br><span class="line">        matrix.postTranslate(left, top);</span><br><span class="line">        fade.setLocalMatrix(matrix);</span><br><span class="line">        p.setShader(fade);</span><br><span class="line">        canvas.drawRect(left, top, left + length, bottom, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (drawRight) &#123;</span><br><span class="line">        matrix.setScale(<span class="number">1</span>, fadeHeight * rightFadeStrength);</span><br><span class="line">        matrix.postRotate(<span class="number">90</span>);</span><br><span class="line">        matrix.postTranslate(right, top);</span><br><span class="line">        fade.setLocalMatrix(matrix);</span><br><span class="line">        p.setShader(fade);</span><br><span class="line">        canvas.drawRect(right - length, top, right, bottom, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.restoreToCount(saveCount); <span class="comment">// 还原图层；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【12】绘制叠加层；</span></span><br><span class="line">    <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">        mOverlay.getOverlayView().dispatchDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【13】绘制装饰前景（前景，滚动条等等）</span></span><br><span class="line">    onDrawForeground(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从注视我们可以看出，绘制过程有如下的绘制步骤，这些绘制步骤必须以适当的顺序执行：</p><p>1、绘制背景<br>2、如有必要，保存画布的图层以准备淡入淡出<br>3、绘制视图的内容<br>4、绘制 child<br>5、如有必要，绘制褪色边缘并还原图层<br>6、绘制装饰（例如滚动条）</p><p>对于增加了淡入淡出效果情况，也是很类似，只不过增加了 savelayer 和 restore 的操作；</p><h3 id="4-1-1-drawBackground"><a href="#4-1-1-drawBackground" class="headerlink" title="4.1.1 drawBackground"></a>4.1.1 drawBackground</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Drawable background = mBackground;</span><br><span class="line">    <span class="keyword">if</span> (background == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setBackgroundBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果是硬件加速的话，通过 renderNode 记录绘制操作；</span></span><br><span class="line">    <span class="keyword">if</span> (canvas.isHardwareAccelerated() &amp;&amp; mAttachInfo != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; mAttachInfo.mHardwareRenderer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mBackgroundRenderNode = getDrawableRenderNode(background, mBackgroundRenderNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> RenderNode renderNode = mBackgroundRenderNode;</span><br><span class="line">        <span class="keyword">if</span> (renderNode != <span class="keyword">null</span> &amp;&amp; renderNode.isValid()) &#123;</span><br><span class="line">            setBackgroundRenderNodeProperties(renderNode);</span><br><span class="line">            <span class="comment">//【1.1】可以看到硬件加速的 canvas 是 DisplayListCanvas 类型的；</span></span><br><span class="line">            ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;</span><br><span class="line">    <span class="comment">//【2】软件绘制，就是调用 Drawable.draw 方法；</span></span><br><span class="line">    <span class="keyword">if</span> ((scrollX | scrollY) == <span class="number">0</span>) &#123;</span><br><span class="line">        background.draw(canvas);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        canvas.translate(scrollX, scrollY);</span><br><span class="line">        background.draw(canvas);</span><br><span class="line">        canvas.translate(-scrollX, -scrollY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了；</p><h3 id="4-1-2-onDraw-核心"><a href="#4-1-2-onDraw-核心" class="headerlink" title="4.1.2 onDraw - 核心"></a>4.1.2 onDraw - 核心</h3><p>默认是空方法，需要自己实现；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是绘制 background 的；</p><h3 id="4-1-3-dispatchDraw-核心"><a href="#4-1-3-dispatchDraw-核心" class="headerlink" title="4.1.3 dispatchDraw - 核心"></a>4.1.3 dispatchDraw - 核心</h3><p>默认是空方法，需要自己实现；</p><p>这个方法由 draw 调用，用于绘制 child view，一般来说 view group 肯定是需要重写这个方法，在 onDraw 方法调用后再调用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-onDrawForeground"><a href="#4-1-4-onDrawForeground" class="headerlink" title="4.1.4 onDrawForeground"></a>4.1.4 onDrawForeground</h3><p>绘制 view 的所有前景内容。</p><p>前景内容可能包括滚动条、可绘制对象或其他特定于视图的装饰。前景会被绘制在 view 内容的顶部。</p><p>前景可以通过 setForeground 方法设置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawForeground</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    onDrawScrollIndicators(canvas);</span><br><span class="line">    onDrawScrollBars(canvas);</span><br><span class="line">    <span class="comment">//【1】依然是获取 Drawable，然后将 Drawable 会知道 canvas 上去；</span></span><br><span class="line">    <span class="keyword">final</span> Drawable foreground = mForegroundInfo != <span class="keyword">null</span> ? mForegroundInfo.mDrawable : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mForegroundInfo.mBoundsChanged) &#123;</span><br><span class="line">            mForegroundInfo.mBoundsChanged = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">final</span> Rect selfBounds = mForegroundInfo.mSelfBounds;</span><br><span class="line">            <span class="keyword">final</span> Rect overlayBounds = mForegroundInfo.mOverlayBounds;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mForegroundInfo.mInsidePadding) &#123;</span><br><span class="line">                selfBounds.set(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                selfBounds.set(getPaddingLeft(), getPaddingTop(),</span><br><span class="line">                        getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> ld = getLayoutDirection();</span><br><span class="line">            Gravity.apply(mForegroundInfo.mGravity, foreground.getIntrinsicWidth(),</span><br><span class="line">                    foreground.getIntrinsicHeight(), selfBounds, overlayBounds, ld);</span><br><span class="line">            foreground.setBounds(overlayBounds);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】核心逻辑，软件绘制；</span></span><br><span class="line">        foreground.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-draw-3-核心"><a href="#4-2-draw-3-核心" class="headerlink" title="4.2 draw[3] - 核心"></a>4.2 draw[3] - 核心</h2><p> 这个方法由 ViewGroup.drawChild() 触发，绘制 child；</p><p>其实可以看到，无论是软件绘制，还是硬件绘制，都会进入这个方法，最终都会调用到<code>draw(Canvas canvas)</code>方法来绘制，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">draw</span><span class="params">(Canvas canvas, ViewGroup parent, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断是否开启了硬件加速，软件绘制返回 false，硬件绘制对应的是 DisplayListCanvas 返回的是 true；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> hardwareAcceleratedCanvas = canvas.isHardwareAccelerated();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】如果使用的是硬件加速，那么是通过 RenderNode + DisplayList 的方式绘制，那么 drawingWithRenderNode 为 true；</span></span><br><span class="line">    <span class="comment">//（对于没有 attach 的 view（不需要显示），他是没有 DisplayList；如果不是通过硬件减速的话，那么不会通过 RenderNode 绘制）</span></span><br><span class="line">    <span class="keyword">boolean</span> drawingWithRenderNode = mAttachInfo != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; mAttachInfo.mHardwareAccelerated</span><br><span class="line">        &amp;&amp; hardwareAcceleratedCanvas;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> more = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> childHasIdentityMatrix = hasIdentityMatrix();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> parentFlags = parent.mGroupFlags;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((parentFlags &amp; ViewGroup.FLAG_CLEAR_TRANSFORMATION) != <span class="number">0</span>) &#123;</span><br><span class="line">        parent.getChildTransformation().clear();</span><br><span class="line">        parent.mGroupFlags &amp;= ~ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Transformation transformToApply = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> concatMatrix = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【3】对动画的一些处理；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> scalingRequired = mAttachInfo != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mScalingRequired;</span><br><span class="line">    <span class="keyword">final</span> Animation a = getAnimation(); <span class="comment">// 获取当前 view 关联的动画；</span></span><br><span class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">        more = applyLegacyAnimation(parent, drawingTime, a, scalingRequired);</span><br><span class="line">        concatMatrix = a.willChangeTransformationMatrix();</span><br><span class="line">        <span class="keyword">if</span> (concatMatrix) &#123;</span><br><span class="line">            mPrivateFlags3 |= PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;</span><br><span class="line">        &#125;</span><br><span class="line">        transformToApply = parent.getChildTransformation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有动画的话，就就清除掉动画相关的数据 matrix；</span></span><br><span class="line">        <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_TRANSFORM) != <span class="number">0</span>) &#123;</span><br><span class="line">            mRenderNode.setAnimationMatrix(<span class="keyword">null</span>);</span><br><span class="line">            mPrivateFlags3 &amp;= ~PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!drawingWithRenderNode</span><br><span class="line">            &amp;&amp; (parentFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Transformation t = parent.getChildTransformation();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> hasTransform = parent.getChildStaticTransformation(<span class="keyword">this</span>, t);</span><br><span class="line">            <span class="keyword">if</span> (hasTransform) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> transformType = t.getTransformationType();</span><br><span class="line">                transformToApply = transformType != Transformation.TYPE_IDENTITY ? t : <span class="keyword">null</span>;</span><br><span class="line">                concatMatrix = (transformType &amp; Transformation.TYPE_MATRIX) != <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    concatMatrix |= !childHasIdentityMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】设置该标志位，draw 才能成功调用 invalidate 方法；</span></span><br><span class="line">    mPrivateFlags |= PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!concatMatrix &amp;&amp;</span><br><span class="line">        (parentFlags &amp; (ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS |</span><br><span class="line">                        ViewGroup.FLAG_CLIP_CHILDREN)) == ViewGroup.FLAG_CLIP_CHILDREN &amp;&amp;</span><br><span class="line">        canvas.quickReject(mLeft, mTop, mRight, mBottom, Canvas.EdgeType.BW) &amp;&amp;</span><br><span class="line">        (mPrivateFlags &amp; PFLAG_DRAW_ANIMATION) == <span class="number">0</span>) &#123;</span><br><span class="line">        mPrivateFlags2 |= PFLAG2_VIEW_QUICK_REJECTED;</span><br><span class="line">        <span class="keyword">return</span> more;</span><br><span class="line">    &#125;</span><br><span class="line">    mPrivateFlags2 &amp;= ~PFLAG2_VIEW_QUICK_REJECTED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】如果是使用的硬件加速，那么会处理下 INVALIDATED 标记；</span></span><br><span class="line">    <span class="keyword">if</span> (hardwareAcceleratedCanvas) &#123;</span><br><span class="line">        <span class="comment">//【5.1】清除 PFLAG_INVALIDATED 标志，让 invalidate 在渲染过程中发生，但将标志的值临时保留在 mRecreateDisplayList 标志中</span></span><br><span class="line">        mRecreateDisplayList = (mPrivateFlags &amp; PFLAG_INVALIDATED) != <span class="number">0</span>;</span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_INVALIDATED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RenderNode renderNode = <span class="keyword">null</span>; <span class="comment">// 硬件绘制用到的渲染节点（gpu）</span></span><br><span class="line">    Bitmap cache = <span class="keyword">null</span>; <span class="comment">// 软件绘制用到的绘制缓存（cpu）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【6】针对 layer 做处理；</span></span><br><span class="line">    <span class="keyword">int</span> layerType = getLayerType();</span><br><span class="line">    <span class="keyword">if</span> (layerType == LAYER_TYPE_SOFTWARE || !drawingWithRenderNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (layerType != LAYER_TYPE_NONE) &#123;</span><br><span class="line">            <span class="comment">// 如果不是硬件绘制，也没制定 layer 类型，则将 HW 图层视为 SW，同时创建绘制缓存；</span></span><br><span class="line">            layerType = LAYER_TYPE_SOFTWARE;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.2】创建绘制缓存；</span></span><br><span class="line">            buildDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;4.2.3】获取绘制缓存；</span></span><br><span class="line">        cache = getDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【7】如果是硬件绘制的话，这里会对 display list 做处理；</span></span><br><span class="line">    <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.2.1】更新 gpu 绘制列表，保存在 RenderNode 中；</span></span><br><span class="line">        renderNode = updateDisplayListIfDirty();</span><br><span class="line">        <span class="keyword">if</span> (!renderNode.isValid()) &#123;</span><br><span class="line">            <span class="comment">// 如果在调用 getDisplayList() 的过程中将 View 从层次结构中删除，</span></span><br><span class="line">            <span class="comment">// 显示列表将被标记为无效，那么这就不会是使用 renderNode 绘制；</span></span><br><span class="line">            renderNode = <span class="keyword">null</span>;</span><br><span class="line">            drawingWithRenderNode = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">        computeScroll();</span><br><span class="line">        sx = mScrollX;</span><br><span class="line">        sy = mScrollY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【8】判断下是否使用缓存进行绘制（不是硬件绘制，可能是上面的 renderNode inValid 了，同时缓存不为 null）</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> drawingWithDrawingCache = cache != <span class="keyword">null</span> &amp;&amp; !drawingWithRenderNode;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> offsetForScroll = cache == <span class="keyword">null</span> &amp;&amp; !drawingWithRenderNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> restoreTo = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!drawingWithRenderNode || transformToApply != <span class="keyword">null</span>) &#123;</span><br><span class="line">        restoreTo = canvas.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">        canvas.translate(mLeft - sx, mTop - sy);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">            canvas.translate(mLeft, mTop);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (scalingRequired) &#123;</span><br><span class="line">            <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> Might not need this if we put everything inside the DL</span></span><br><span class="line">                restoreTo = canvas.save();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// mAttachInfo cannot be null, otherwise scalingRequired == false</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> scale = <span class="number">1.0f</span> / mAttachInfo.mApplicationScale;</span><br><span class="line">            canvas.scale(scale, scale);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【9】处理 alpha 的变化；</span></span><br><span class="line">    <span class="keyword">float</span> alpha = drawingWithRenderNode ? <span class="number">1</span> : (getAlpha() * getTransitionAlpha());</span><br><span class="line">    <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span></span><br><span class="line">        || alpha &lt; <span class="number">1</span></span><br><span class="line">        || !hasIdentityMatrix()</span><br><span class="line">        || (mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_ALPHA) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span> || !childHasIdentityMatrix) &#123;</span><br><span class="line">            <span class="keyword">int</span> transX = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> transY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">                transX = -sx;</span><br><span class="line">                transY = -sy;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (concatMatrix) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                        renderNode.setAnimationMatrix(transformToApply.getMatrix());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Undo the scroll translation, apply the transformation matrix,</span></span><br><span class="line">                        <span class="comment">// then redo the scroll translate to get the correct result.</span></span><br><span class="line">                        canvas.translate(-transX, -transY);</span><br><span class="line">                        canvas.concat(transformToApply.getMatrix());</span><br><span class="line">                        canvas.translate(transX, transY);</span><br><span class="line">                    &#125;</span><br><span class="line">                    parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> transformAlpha = transformToApply.getAlpha();</span><br><span class="line">                <span class="keyword">if</span> (transformAlpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    alpha *= transformAlpha;</span><br><span class="line">                    parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!childHasIdentityMatrix &amp;&amp; !drawingWithRenderNode) &#123;</span><br><span class="line">                canvas.translate(-transX, -transY);</span><br><span class="line">                canvas.concat(getMatrix());</span><br><span class="line">                canvas.translate(transX, transY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deal with alpha if it is or used to be &lt;1</span></span><br><span class="line">        <span class="keyword">if</span> (alpha &lt; <span class="number">1</span> || (mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_ALPHA) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (alpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                mPrivateFlags3 |= PFLAG3_VIEW_IS_ANIMATING_ALPHA;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPrivateFlags3 &amp;= ~PFLAG3_VIEW_IS_ANIMATING_ALPHA;</span><br><span class="line">            &#125;</span><br><span class="line">            parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">            <span class="keyword">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> multipliedAlpha = (<span class="keyword">int</span>) (<span class="number">255</span> * alpha);</span><br><span class="line">                <span class="keyword">if</span> (!onSetAlpha(multipliedAlpha)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                        renderNode.setAlpha(alpha * getAlpha() * getTransitionAlpha());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layerType == LAYER_TYPE_NONE) &#123;</span><br><span class="line">                        canvas.saveLayerAlpha(sx, sy, sx + getWidth(), sy + getHeight(),</span><br><span class="line">                                              multipliedAlpha);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Alpha is handled by the child directly, clobber the layer's alpha</span></span><br><span class="line">                    mPrivateFlags |= PFLAG_ALPHA_SET;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) &#123;</span><br><span class="line">        onSetAlpha(<span class="number">255</span>);</span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_ALPHA_SET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【10】对于软件绘制的情况，处理 clip</span></span><br><span class="line">    <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((parentFlags &amp; ViewGroup.FLAG_CLIP_CHILDREN) != <span class="number">0</span> &amp;&amp; cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">                canvas.clipRect(sx, sy, sx + getWidth(), sy + getHeight());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!scalingRequired || cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, cache.getWidth(), cache.getHeight());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mClipBounds != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// clip bounds ignore scroll</span></span><br><span class="line">            canvas.clipRect(mClipBounds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【11】如果不使用绘制缓存的话，会进行不同的处理；</span></span><br><span class="line">    <span class="keyword">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class="line">        <span class="comment">//【11.1】如果是硬件加速，这里会调用 DisplayListCanvas.drawRenderNode 方法，根据</span></span><br><span class="line">        <span class="comment">// 收集到的 renderNode 树进行绘制；</span></span><br><span class="line">        <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">            ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【11.2】对于软件绘制，这里会判断下当前的 view 是否要跳过绘制；</span></span><br><span class="line">            <span class="comment">// 这里可能是硬件绘制被取消了，也可能就是软件绘制～～</span></span><br><span class="line">            <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">                <span class="comment">//【--&gt;4.1.3】如果跳过绘制，那就会触发 dispatchDraw 方法；</span></span><br><span class="line">                dispatchDraw(canvas);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【--&gt;4.1】如果需要绘制，就绘制自身，如果是 ViewGroup 的话，还会触发 dispatchDraw 方法；</span></span><br><span class="line">                draw(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【10.3】这里是使用绘制缓存，必须是软件绘制才行；</span></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">        <span class="keyword">if</span> (layerType == LAYER_TYPE_NONE || mLayerPaint == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// no layer paint, use temporary paint to draw bitmap</span></span><br><span class="line">            Paint cachePaint = parent.mCachePaint;</span><br><span class="line">            <span class="keyword">if</span> (cachePaint == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cachePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">                cachePaint.setDither(<span class="keyword">false</span>);</span><br><span class="line">                parent.mCachePaint = cachePaint;</span><br><span class="line">            &#125;</span><br><span class="line">            cachePaint.setAlpha((<span class="keyword">int</span>) (alpha * <span class="number">255</span>));</span><br><span class="line">            <span class="comment">//【10.4】把存储 cpu 绘制缓存的 Bitmap 绘制到 canvas 上 ( skia 渲染引擎 )</span></span><br><span class="line">            <span class="comment">// 下面也是一样的；</span></span><br><span class="line">            canvas.drawBitmap(cache, <span class="number">0.0f</span>, <span class="number">0.0f</span>, cachePaint);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// use layer paint to draw the bitmap, merging the two alphas, but also restore</span></span><br><span class="line">            <span class="keyword">int</span> layerPaintAlpha = mLayerPaint.getAlpha();</span><br><span class="line">            <span class="keyword">if</span> (alpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                mLayerPaint.setAlpha((<span class="keyword">int</span>) (alpha * layerPaintAlpha));</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawBitmap(cache, <span class="number">0.0f</span>, <span class="number">0.0f</span>, mLayerPaint);</span><br><span class="line">            <span class="keyword">if</span> (alpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                mLayerPaint.setAlpha(layerPaintAlpha);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (restoreTo &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        canvas.restoreToCount(restoreTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; !more) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hardwareAcceleratedCanvas &amp;&amp; !a.getFillAfter()) &#123;</span><br><span class="line">            onSetAlpha(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.finishAnimatingView(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (more &amp;&amp; hardwareAcceleratedCanvas) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.hasAlpha() &amp;&amp; (mPrivateFlags &amp; PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) &#123;</span><br><span class="line">            <span class="comment">// alpha animations should cause the child to recreate its display list</span></span><br><span class="line">            invalidate(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mRecreateDisplayList = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> more;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li><p>对于软件绘制：</p><ul><li>会有一个叫绘制缓存的概念，buildDrawingCache 负责创建绘制缓存，view 会将自身绘制到缓存上，然后再绘制到 parent 的 canvas 上；</li><li>如果不使用绘制缓存的话，就会直接绘制到  parent 传进来的 canvas 上；</li></ul></li><li><p>对于硬件绘制：</p><ul><li>会有一个叫 RenderBode 和 DisplayList 的概念；</li></ul></li></ul><h3 id="4-2-1-updateDisplayListIfDirty"><a href="#4-2-1-updateDisplayListIfDirty" class="headerlink" title="4.2.1 updateDisplayListIfDirty"></a>4.2.1 updateDisplayListIfDirty</h3><p> 获取 View 的 RenderNode，同时更新显示列表 DisplayList；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RenderNode <span class="title">updateDisplayListIfDirty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】将自身的 rn 保存到 renderNode 临时变量中；</span></span><br><span class="line">    <span class="keyword">final</span> RenderNode renderNode = mRenderNode;</span><br><span class="line">    <span class="keyword">if</span> (!canHaveDisplayList()) &#123;</span><br><span class="line">        <span class="comment">// 如果不是硬件加速，不能有 DisplayList，直接返回 renderNode 内部有属性呀；</span></span><br><span class="line">        <span class="keyword">return</span> renderNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】这里是针对硬件绘制的情况，PFLAG_DRAWING_CACHE_VALID 标志位表示是否通过缓存绘制；</span></span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == <span class="number">0</span></span><br><span class="line">            || !renderNode.isValid()</span><br><span class="line">            || (mRecreateDisplayList)) &#123;</span><br><span class="line">        <span class="comment">//【2.1】如果没有设置了 PFLAG_DRAWING_CACHE_VALID 标志位的话，那么会进入这里：</span></span><br><span class="line">        <span class="keyword">if</span> (renderNode.isValid()  <span class="comment">// isValid：返回 RenderNode 的显示列表内容当前是否可用。</span></span><br><span class="line">                &amp;&amp; !mRecreateDisplayList) &#123; <span class="comment">// 无需重新创建 DisplayList；</span></span><br><span class="line">            <span class="comment">//【2.2】这里设置了标志位 PFLAG_DRAWING_CACHE_VALID</span></span><br><span class="line">            mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">            <span class="comment">//【--&gt;3.3】硬件绘制，无需重新创建 DisplayList，只需要告诉 child 恢复/重新创建自身即可；</span></span><br><span class="line">            dispatchGetDisplayList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> renderNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】表示要重新创建显示列表；</span></span><br><span class="line">        <span class="comment">// 如此标记以确保我们将子显示列表中的内容复制到 drawChild() 中？？</span></span><br><span class="line">        mRecreateDisplayList = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = mRight - mLeft;</span><br><span class="line">        <span class="keyword">int</span> height = mBottom - mTop;</span><br><span class="line">        <span class="keyword">int</span> layerType = getLayerType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.1】这是硬件绘制的情况，开始记录渲染节点的显示列表，返回一个 DisplayListCanvas，用于记录绘制操作；</span></span><br><span class="line">        <span class="keyword">final</span> DisplayListCanvas canvas = renderNode.start(width, height);</span><br><span class="line">        canvas.setHighContrastText(mAttachInfo.mHighContrastText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【5】这里针对 layer 的情况做了区分；</span></span><br><span class="line">            <span class="keyword">if</span> (layerType == LAYER_TYPE_SOFTWARE) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;4.2.2】如果是 SOFTWARE 层的话，那么会构建绘制缓存，通过缓存绘制；</span></span><br><span class="line">                buildDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//【--&gt;】获取缓存 cache，并绘制；</span></span><br><span class="line">                Bitmap cache = getDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    canvas.drawBitmap(cache, <span class="number">0</span>, <span class="number">0</span>, mLayerPaint);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【5.1】如果是 HARDWARE 层的话，那就不使用缓存了；</span></span><br><span class="line">                computeScroll();</span><br><span class="line"></span><br><span class="line">                canvas.translate(-mScrollX, -mScrollY);</span><br><span class="line">                mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Fast path for layouts with no backgrounds</span></span><br><span class="line">                <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;4.1.3】如果跳过自身的话，那就分发出去；</span></span><br><span class="line">                    dispatchDraw(canvas);</span><br><span class="line">                    <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">                        mOverlay.getOverlayView().draw(canvas);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;4.1】绘制自身；</span></span><br><span class="line">                    draw(canvas);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//【6】结束记录；</span></span><br><span class="line">            renderNode.end(canvas);</span><br><span class="line">            setDisplayListProperties(renderNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> renderNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几个标志位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mRecreateDisplayList = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>表示 View 在当前图形绘制之前被标记为 INVALIDATED 或者起 DisplayList 无效。</p><p>如果为 true，则 View 必须重新计算其 DisplayList，仅在硬件加速时使用。</p><p>系统会清除 INVALIDATED 标志，同时将是否 INVALIDATED 保存到该变量中，硬件加速后续会用到</p><p>（ 比如在 getDisplayList() 时和在 drawChild() 中，当我们决定将视图的子级显示列表绘制到我们自己的状态中）。</p><h3 id="4-2-2-buildDrawingCache"><a href="#4-2-2-buildDrawingCache" class="headerlink" title="4.2.2 buildDrawingCache"></a>4.2.2 buildDrawingCache</h3><p>构建绘制缓存，参数 autoScale 表示是否自动缩放；</p><p>如果未启用自动缩放，则此方法将创建与该 view 相同大小的 bitmap 缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDrawingCache</span><span class="params">(<span class="keyword">boolean</span> autoScale)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果没有设置 PFLAG_DRAWING_CACHE_VALID 有效性标志位，或者要强制进入的话；</span></span><br><span class="line">    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == <span class="number">0</span> || (autoScale ?</span><br><span class="line">            mDrawingCache == <span class="keyword">null</span> : mUnscaledDrawingCache == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Trace.isTagEnabled(Trace.TRACE_TAG_VIEW)) &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW,</span><br><span class="line">                    <span class="string">"buildDrawingCache/SW Layer for "</span> + getClass().getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.2.1】创建绘制缓存；</span></span><br><span class="line">            buildDrawingCacheImpl(autoScale);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果图形缓存无效，则强制构建图形缓存，如果只调用  buildDrawingCache() 而没有调用 setDrawingCacheEnabled(true)<br>则应在之后调用  destroyDrawingCache()；</p><p>启用硬件加速后，不应使用此方法。如果不需要图形缓存，则调用此方法将增加内存使用量，并使 view 一次性通过软件绘制出来，从而对性能产生负面影响。</p><h4 id="4-2-2-1-buildDrawingCacheImpl"><a href="#4-2-2-1-buildDrawingCacheImpl" class="headerlink" title="4.2.2.1 buildDrawingCacheImpl"></a>4.2.2.1 buildDrawingCacheImpl</h4><p>构建绘制缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildDrawingCacheImpl</span><span class="params">(<span class="keyword">boolean</span> autoScale)</span> </span>&#123;</span><br><span class="line">      mCachingFailed = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//【1】计算一下绘制的宽/高；</span></span><br><span class="line">      <span class="keyword">int</span> width = mRight - mLeft;</span><br><span class="line">      <span class="keyword">int</span> height = mBottom - mTop;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">      <span class="comment">//【2】是否需要缩放，如果需要的话，会根据 view root 设置的缩放比，对绘制宽高缩放；</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> scalingRequired = attachInfo != <span class="keyword">null</span> &amp;&amp; attachInfo.mScalingRequired;</span><br><span class="line">      <span class="keyword">if</span> (autoScale &amp;&amp; scalingRequired) &#123;</span><br><span class="line">          width = (<span class="keyword">int</span>) ((width * attachInfo.mApplicationScale) + <span class="number">0.5f</span>);</span><br><span class="line">          height = (<span class="keyword">int</span>) ((height * attachInfo.mApplicationScale) + <span class="number">0.5f</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> drawingCacheBackgroundColor = mDrawingCacheBackgroundColor;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> opaque = drawingCacheBackgroundColor != <span class="number">0</span> || isOpaque();</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> use32BitCache = attachInfo != <span class="keyword">null</span> &amp;&amp; attachInfo.mUse32BitDrawingCache;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> projectedBitmapSize = width * height * (opaque &amp;&amp; !use32BitCache ? <span class="number">2</span> : <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">long</span> drawingCacheSize =</span><br><span class="line">              ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize();</span><br><span class="line">      <span class="comment">//【3】这里比较了下要绘制的图案的内存大小是不是比允许缓存的最大值大，如果是的话，不允许缓存；</span></span><br><span class="line">      <span class="keyword">if</span> (width &lt;= <span class="number">0</span> || height &lt;= <span class="number">0</span> || projectedBitmapSize &gt; drawingCacheSize) &#123;</span><br><span class="line">          <span class="keyword">if</span> (width &gt; <span class="number">0</span> &amp;&amp; height &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              Log.w(VIEW_LOG_TAG, getClass().getSimpleName() + <span class="string">" not displayed because it is"</span></span><br><span class="line">                      + <span class="string">" too large to fit into a software layer (or drawing cache), needs "</span></span><br><span class="line">                      + projectedBitmapSize + <span class="string">" bytes, only "</span></span><br><span class="line">                      + drawingCacheSize + <span class="string">" available"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          destroyDrawingCache();</span><br><span class="line">          mCachingFailed = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> clear = <span class="keyword">true</span>;</span><br><span class="line">      <span class="comment">//【4】选择哪一种缓存；</span></span><br><span class="line">      Bitmap bitmap = autoScale ? mDrawingCache : mUnscaledDrawingCache;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//【5】选择缓存对应的质量；</span></span><br><span class="line">      <span class="keyword">if</span> (bitmap == <span class="keyword">null</span> || bitmap.getWidth() != width || bitmap.getHeight() != height) &#123;</span><br><span class="line">          Bitmap.Config quality;</span><br><span class="line">          <span class="keyword">if</span> (!opaque) &#123;</span><br><span class="line">              <span class="comment">// Never pick ARGB_4444 because it looks awful</span></span><br><span class="line">              <span class="comment">// Keep the DRAWING_CACHE_QUALITY_LOW flag just in case</span></span><br><span class="line">              <span class="keyword">switch</span> (mViewFlags &amp; DRAWING_CACHE_QUALITY_MASK) &#123;</span><br><span class="line">                  <span class="keyword">case</span> DRAWING_CACHE_QUALITY_AUTO:</span><br><span class="line">                  <span class="keyword">case</span> DRAWING_CACHE_QUALITY_LOW:</span><br><span class="line">                  <span class="keyword">case</span> DRAWING_CACHE_QUALITY_HIGH:</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      quality = Bitmap.Config.ARGB_8888;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Optimization for translucent windows</span></span><br><span class="line">              <span class="comment">// If the window is translucent, use a 32 bits bitmap to benefit from memcpy()</span></span><br><span class="line">              quality = use32BitCache ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) bitmap.recycle();</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//【6】创建一个 Bitmap 缓存保存到 mDrawingCache/mUnscaledDrawingCache 中；</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              bitmap = Bitmap.createBitmap(mResources.getDisplayMetrics(),</span><br><span class="line">                      width, height, quality);</span><br><span class="line">              bitmap.setDensity(getResources().getDisplayMetrics().densityDpi);</span><br><span class="line">              <span class="keyword">if</span> (autoScale) &#123;</span><br><span class="line">                  mDrawingCache = bitmap;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  mUnscaledDrawingCache = bitmap;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (opaque &amp;&amp; use32BitCache) bitmap.setHasAlpha(<span class="keyword">false</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line"><span class="comment">// 如果没有足够的内存的话，那就不使用缓存了；</span></span><br><span class="line">              <span class="keyword">if</span> (autoScale) &#123;</span><br><span class="line">                  mDrawingCache = <span class="keyword">null</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  mUnscaledDrawingCache = <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              mCachingFailed = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          clear = drawingCacheBackgroundColor != <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Canvas canvas;</span><br><span class="line">      <span class="comment">//【7】这里的 attachInfo 来自于 ViewRootImpl。下面会对 canvas 做一下调整；</span></span><br><span class="line">      <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">          canvas = attachInfo.mCanvas;</span><br><span class="line">          <span class="keyword">if</span> (canvas == <span class="keyword">null</span>) &#123;</span><br><span class="line">              canvas = <span class="keyword">new</span> Canvas();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//【7.1】canvas 的 Bitmap 设置为我们创建的缓存 Bitmap；</span></span><br><span class="line">          canvas.setBitmap(bitmap);</span><br><span class="line">          <span class="comment">// Temporarily clobber the cached Canvas in case one of our children</span></span><br><span class="line">          <span class="comment">// is also using a drawing cache. Without this, the children would</span></span><br><span class="line">          <span class="comment">// steal the canvas by attaching their own bitmap to it and bad, bad</span></span><br><span class="line">          <span class="comment">// thing would happen (invisible views, corrupted drawings, etc.)</span></span><br><span class="line">          attachInfo.mCanvas = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 这是极端的情况，view 没有 attach 上；</span></span><br><span class="line">          canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (clear) &#123;</span><br><span class="line">          bitmap.eraseColor(drawingCacheBackgroundColor);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      computeScroll();</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> restoreCount = canvas.save();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (autoScale &amp;&amp; scalingRequired) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">float</span> scale = attachInfo.mApplicationScale;</span><br><span class="line">          canvas.scale(scale, scale);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      canvas.translate(-mScrollX, -mScrollY);</span><br><span class="line"></span><br><span class="line">      mPrivateFlags |= PFLAG_DRAWN;</span><br><span class="line">      <span class="keyword">if</span> (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mHardwareAccelerated ||</span><br><span class="line">              mLayerType != LAYER_TYPE_NONE) &#123;</span><br><span class="line">          mPrivateFlags |= PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【8】注意：这里又执行了一次绘制，但这是将自身绘制到这个缓存 bitmap 上；</span></span><br><span class="line">      <span class="comment">// 同时将缓存 canvas 传递给了 child view（如果有的话）</span></span><br><span class="line">      <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class="line">          mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">          <span class="comment">//【--&gt;4.1.3】分发绘制；</span></span><br><span class="line">          dispatchDraw(canvas);</span><br><span class="line">          <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</span><br><span class="line">              mOverlay.getOverlayView().draw(canvas);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//【--&gt;4.1】绘制自身以及 child view</span></span><br><span class="line">          draw(canvas);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      canvas.restoreToCount(restoreCount);</span><br><span class="line">      canvas.setBitmap(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//【9】将缓存画布保存到 attachInfo，下次再用；</span></span><br><span class="line">          attachInfo.mCanvas = canvas;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-getDrawingCache"><a href="#4-2-3-getDrawingCache" class="headerlink" title="4.2.3 getDrawingCache"></a>4.2.3 getDrawingCache</h3><p>返回一个绘制缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getDrawingCache</span><span class="params">(<span class="keyword">boolean</span> autoScale)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】该 view 不创建绘制缓存，返回 null；</span></span><br><span class="line">    <span class="keyword">if</span> ((mViewFlags &amp; WILL_NOT_CACHE_DRAWING) == WILL_NOT_CACHE_DRAWING) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((mViewFlags &amp; DRAWING_CACHE_ENABLED) == DRAWING_CACHE_ENABLED) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.2.2】创建一个绘制缓存；</span></span><br><span class="line">        buildDrawingCache(autoScale);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】根据是否自动缩放，返回对应的 cache；</span></span><br><span class="line">    <span class="keyword">return</span> autoScale ? mDrawingCache : mUnscaledDrawingCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-dispatchGetDisplayList-核心"><a href="#4-3-dispatchGetDisplayList-核心" class="headerlink" title="4.3 dispatchGetDisplayList - 核心"></a>4.3 dispatchGetDisplayList - 核心</h2><p>ViewGroup 使用该方法来还原或重新创建 child view 的显示列表。</p><p>常规的 draw/dispatchDraw 过程中，当 ViewGroup 不需要重新创建自己的显示列表时，getDisplayList() 会调用此方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchGetDisplayList</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以看到。真正的实现在 ViewGroup 中。</p><h1 id="5-ThreadedRenderer-硬件绘制简单记录"><a href="#5-ThreadedRenderer-硬件绘制简单记录" class="headerlink" title="5 ThreadedRenderer - 硬件绘制简单记录"></a>5 ThreadedRenderer - 硬件绘制简单记录</h1><p>硬件绘制的操作要比软件绘制复杂的多，这里只简单的分析下：</p><h2 id="5-1-draw-核心"><a href="#5-1-draw-核心" class="headerlink" title="5.1 draw - 核心"></a>5.1 draw - 核心</h2><p>我们来看看硬件绘制的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(View view, AttachInfo attachInfo, HardwareDrawCallbacks callbacks)</span> </span>&#123;</span><br><span class="line">    attachInfo.mIgnoreDirtyState = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Choreographer choreographer = attachInfo.mViewRootImpl.mChoreographer;</span><br><span class="line">    choreographer.mFrameInfo.markDrawStart();</span><br><span class="line">    <span class="comment">//【--&gt;5.2】更新 DecorView 的 DisplayList 显示列表；</span></span><br><span class="line">    <span class="comment">// 该方法会遍历整个树形视图结构，从 DecorView 开始，更新所有视图的 DisplayList。</span></span><br><span class="line">    updateRootDisplayList(view, callbacks);</span><br><span class="line"></span><br><span class="line">    attachInfo.mIgnoreDirtyState = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register animating rendernodes which started animating prior to renderer</span></span><br><span class="line">    <span class="comment">// creation, which is typical for animators started prior to first draw</span></span><br><span class="line">    <span class="keyword">if</span> (attachInfo.mPendingAnimatingRenderNodes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = attachInfo.mPendingAnimatingRenderNodes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            registerAnimatingRenderNode(</span><br><span class="line">                    attachInfo.mPendingAnimatingRenderNodes.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        attachInfo.mPendingAnimatingRenderNodes.clear();</span><br><span class="line">        <span class="comment">// We don't need this anymore as subsequent calls to</span></span><br><span class="line">        <span class="comment">// ViewRootImpl#attachRenderNodeAnimator will go directly to us.</span></span><br><span class="line">        attachInfo.mPendingAnimatingRenderNodes = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span>[] frameInfo = choreographer.mFrameInfo.mFrameInfo;</span><br><span class="line">    <span class="comment">//【2】同步帧数据，最终目的是将 OpenGL 指令写入 gpu；</span></span><br><span class="line">    <span class="keyword">int</span> syncResult = nSyncAndDrawFrame(mNativeProxy, frameInfo, frameInfo.length);</span><br><span class="line">    <span class="keyword">if</span> ((syncResult &amp; SYNC_LOST_SURFACE_REWARD_IF_FOUND) != <span class="number">0</span>) &#123;</span><br><span class="line">        setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        attachInfo.mViewRootImpl.mSurface.release();</span><br><span class="line">        <span class="comment">// Invalidate since we failed to draw. This should fetch a Surface</span></span><br><span class="line">        <span class="comment">// if it is still needed or do nothing if we are no longer drawing</span></span><br><span class="line">        attachInfo.mViewRootImpl.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((syncResult &amp; SYNC_INVALIDATE_REQUIRED) != <span class="number">0</span>) &#123;</span><br><span class="line">        attachInfo.mViewRootImpl.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>硬件绘制的 canvas 它是一个 DisplayListCanvas 对象，它的每一个 drawxxx 的方法并不是真正的绘制，而是在记录绘制的操作；</p><p>和软件绘制绘制类似，由于 View 体系是一个树形结构，所以硬件绘制也要遍历这个 tree，但是他的遍历是记录每个 view 的绘制操作，而不是直接绘制；</p><p>而触发这个遍历的方法就是：updateRootDisplayList，updateViewTreeDisplayList 还有 updateDisplayListIfDirty 方法；</p><h2 id="5-2-updateRootDisplayList-核心"><a href="#5-2-updateRootDisplayList-核心" class="headerlink" title="5.2 updateRootDisplayList - 核心"></a>5.2 updateRootDisplayList - 核心</h2><p>继续看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateRootDisplayList</span><span class="params">(View view, HardwareDrawCallbacks callbacks)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"Record View#draw()"</span>);</span><br><span class="line">    <span class="comment">//【--&gt;5.3】遍历整个树形视图结构，从 DecorView 开始，更新所有视图的 DisplayList。</span></span><br><span class="line">    updateViewTreeDisplayList(view);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mRootNodeNeedsUpdate || !mRootNode.isValid()) &#123;</span><br><span class="line">        <span class="comment">//【1】开始记录渲染节点的显示列表，返回一个 DisplayListCanvas，用于记录绘制操作；</span></span><br><span class="line">        DisplayListCanvas canvas = mRootNode.start(mSurfaceWidth, mSurfaceHeight);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> saveCount = canvas.save();</span><br><span class="line">            canvas.translate(mInsetLeft, mInsetTop);</span><br><span class="line">            callbacks.onHardwarePreDraw(canvas);</span><br><span class="line">            <span class="comment">//【2】插入栅栏，隔离 canvas 操作</span></span><br><span class="line">            canvas.insertReorderBarrier();</span><br><span class="line">            <span class="comment">//【3】绘制顶层视图 RenderNode；</span></span><br><span class="line">            canvas.drawRenderNode(view.updateDisplayListIfDirty());</span><br><span class="line">            canvas.insertInorderBarrier();</span><br><span class="line"></span><br><span class="line">            callbacks.onHardwarePostDraw(canvas);</span><br><span class="line">            canvas.restoreToCount(saveCount);</span><br><span class="line">            mRootNodeNeedsUpdate = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//【4】停止记录；</span></span><br><span class="line">            mRootNode.end(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看：</p><h2 id="5-3-updateViewTreeDisplayList-核心"><a href="#5-3-updateViewTreeDisplayList-核心" class="headerlink" title="5.3 updateViewTreeDisplayList - 核心"></a>5.3 updateViewTreeDisplayList - 核心</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateViewTreeDisplayList</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    view.mPrivateFlags |= View.PFLAG_DRAWN;</span><br><span class="line">    view.mRecreateDisplayList = (view.mPrivateFlags &amp; </span><br><span class="line">                View.PFLAG_INVALIDATED)== View.PFLAG_INVALIDATED;</span><br><span class="line">    view.mPrivateFlags &amp;= ~View.PFLAG_INVALIDATED;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】更新 DecorView 的 DisplayList；</span></span><br><span class="line">    view.updateDisplayListIfDirty();</span><br><span class="line">    view.mRecreateDisplayList = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h1><p>我们用一张图来总结下整个的软件绘制的流程；</p><p>最近加班多，要休息下～～～（略）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章基于 Android N - 7.1.1 主要分析下 draw 方法的执行流程；&lt;/p&gt;
&lt;h1 id=&quot;1-回顾&quot;&gt;&lt;a href=&quot;#1-回顾&quot; class=&quot;headerlink&quot; title=&quot;1 回顾&quot;&gt;&lt;/a&gt;1 回顾&lt;/h1&gt;&lt;p&gt;在上面的 perfo
      
    
    </summary>
    
      <category term="View 视图" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/"/>
    
      <category term="View 的加载和绘制" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/View-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BB%98%E5%88%B6/"/>
    
    
      <category term="ViewDraw" scheme="https://lishuaiqi.top/tags/ViewDraw/"/>
    
  </entry>
  
  <entry>
    <title>ViewDraw 第四篇 measure 流程分析</title>
    <link href="https://lishuaiqi.top/2020/04/15/ViewDraw-4-measure/"/>
    <id>https://lishuaiqi.top/2020/04/15/ViewDraw-4-measure/</id>
    <published>2020-04-15T12:46:25.000Z</published>
    <updated>2020-07-17T07:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章基于 Android N - 7.1.1 主要分析下 measure 方法的执行流程；</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们来回顾下，performMeasure 请求测量的地方：</p><p>这里的参数：childWidthMeasureSpec 和 childHeightMeasureSpec 是 root view 也就是 DecorView 的测量标准！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"measure"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.1】最终调用了 DecorView（ViewGroup）的 measure 方法，并将测量规范传递下去；</span></span><br><span class="line">        <span class="comment">// 这里的 childWidthMeasureSpec 和 childHeightMeasureSpec 是 parent 指定的 child view 的测量规格，也就是 DecorView 的；</span></span><br><span class="line">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mView 就是我们 DecorView，然而 DecorView 有如下的继承实现关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">RootViewSurfaceTaker</span>, <span class="title">WindowCallbacks</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>实际上 measure 是 view 的方法；</p><h2 id="1-1-MeasureSpec-测量规格"><a href="#1-1-MeasureSpec-测量规格" class="headerlink" title="1.1 MeasureSpec - 测量规格"></a>1.1 MeasureSpec - 测量规格</h2><p>MeasureSpec 是 View 的内部类。他表示一种测量规格。MeasureSpec 由测量模式 mode 和测量大小 size 组成；</p><p><strong>View 的测量规格是由 parent view 的测量规格和自身的 LayoutParams 共同决定的</strong>。</p><h3 id="1-1-1-测量模式"><a href="#1-1-1-测量模式" class="headerlink" title="1.1.1 测量模式"></a>1.1.1 测量模式</h3><ul><li><strong>UNSPECIFIED</strong>：父视图不对 View 大小做限制，当然并不是真的说想要多大最后就真有多大，例如：ListView，ScrollView；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父视图没有对 child 施加任何约束。它可以是任何大小；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</span><br></pre></td></tr></table></figure><ul><li><strong>EXACTLY</strong>：父试图已经知道了 view 确切的大小，例如：100dp 或者 march_parent</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父视图已经确定了孩子的确切尺寸。不管孩子想要多大，都会给孩子以这些界限；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</span><br></pre></td></tr></table></figure><ul><li><strong>AT_MOST</strong>：大小不可超过某数值，例如：wrap_content</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child 可以根据自身需要的大小而确定大小，但是存在上限，上限一般为父视图大小。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-makeMeasureSpec"><a href="#1-1-2-makeMeasureSpec" class="headerlink" title="1.1.2 makeMeasureSpec"></a>1.1.2 makeMeasureSpec</h3><p>根据测量大小 size 和测量模式 mode 创建测量规格：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">makeMeasureSpec</span><span class="params">(@IntRange(from = <span class="number">0</span>, to = (<span class="number">1</span> &lt;&lt; MeasureSpec.MODE_SHIFT)</span> - 1) <span class="keyword">int</span> size,</span></span><br><span class="line"><span class="function">                                  @MeasureSpecMode <span class="keyword">int</span> mode) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】使用旧的方式建立 MeasureSpecs，sUseBrokenMakeMeasureSpec 值默认为 false。</span></span><br><span class="line">    <span class="keyword">if</span> (sUseBrokenMakeMeasureSpec) &#123; </span><br><span class="line">        <span class="keyword">return</span> size + mode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】模式占高 2 位，大小占低 30 位，合成 MeasureSpec</span></span><br><span class="line">        <span class="keyword">return</span> (size &amp; ~MODE_MASK) | (mode &amp; MODE_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，MeasureSpec 是 32 位的  Int 型，高两位表示 mode，低 30 位表示 size，这里的 MODE_MASK 的作用实际上就是做位操作！</p><p>MODE_MASK 取如下的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</span><br></pre></td></tr></table></figure><p>其中 0x3 是十六进制，转为二进制是 11，向左移位30，结果是 11000…..0000（一共 30 个 0）！</p><ul><li>size &amp; ~MODE_MASK：获取 size 的低 30 位；</li><li>mode &amp; MODE_MASK：获取 mode 的高两位；</li></ul><p>最终合成测量规格；</p><h1 id="2-View"><a href="#2-View" class="headerlink" title="2 View"></a>2 View</h1><h2 id="2-1-measure-核心1"><a href="#2-1-measure-核心1" class="headerlink" title="2.1 measure - 核心1"></a>2.1 measure - 核心1</h2><p>View 的这个方法是被它的 parent view 调用的，而 widthMeasureSpec 和 heightMeasureSpec 则是 parent 指定的当前 view 的测量规格；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> optical = isLayoutModeOptical(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (optical != isLayoutModeOptical(mParent)) &#123; <span class="comment">// 这里是对其做一个调整，我们先不看；</span></span><br><span class="line">          Insets insets = getOpticalInsets();</span><br><span class="line">          <span class="keyword">int</span> oWidth  = insets.left + insets.right;</span><br><span class="line">          <span class="keyword">int</span> oHeight = insets.top  + insets.bottom;</span><br><span class="line">          widthMeasureSpec  = MeasureSpec.adjust(widthMeasureSpec,  optical ? -oWidth  : oWidth);</span><br><span class="line">          heightMeasureSpec = MeasureSpec.adjust(heightMeasureSpec, optical ? -oHeight : oHeight);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【1】计算缓存的 key，高 32 低 32 位交错取值；</span></span><br><span class="line">      <span class="keyword">long</span> key = (<span class="keyword">long</span>) widthMeasureSpec &lt;&lt; <span class="number">32</span> | (<span class="keyword">long</span>) heightMeasureSpec &amp; <span class="number">0xffffffffL</span>;</span><br><span class="line">      <span class="keyword">if</span> (mMeasureCache == <span class="keyword">null</span>) mMeasureCache = <span class="keyword">new</span> LongSparseLongArray(<span class="number">2</span>);</span><br><span class="line">      <span class="comment">//【2】判断是否强制布局；</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> forceLayout = (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Optimize layout by avoiding an extra EXACTLY pass when the view is</span></span><br><span class="line">      <span class="comment">// already measured as the correct size. In API 23 and below, this</span></span><br><span class="line">      <span class="comment">// extra pass is required to make LinearLayout re-distribute weight.</span></span><br><span class="line">      <span class="comment">// 如果视图已经被测量获得了正确的尺寸，那么这里会判断下测量模式是否是 EXACTLY 如果是的话，那么就可能不会重新测量；</span></span><br><span class="line">      <span class="comment">// 在 API 23 及以下版本中，需要这样的额外遍历才能使 LinearLayout 重新分配权重。</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> specChanged = widthMeasureSpec != mOldWidthMeasureSpec</span><br><span class="line">              || heightMeasureSpec != mOldHeightMeasureSpec; <span class="comment">// 测量标准是否变化</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> isSpecExactly = MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.EXACTLY</span><br><span class="line">              &amp;&amp; MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.EXACTLY; <span class="comment">// 是否是精确布局</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> matchesSpecSize = getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec)</span><br><span class="line">              &amp;&amp; getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec); <span class="comment">// 尺寸是否变化</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> needsLayout = specChanged <span class="comment">// 判断是否需要布局；</span></span><br><span class="line">              &amp;&amp; (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (forceLayout || needsLayout) &#123;</span><br><span class="line">          <span class="comment">// 这里会清除掉测量的标志位 measured dimension flag；</span></span><br><span class="line">          mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</span><br><span class="line"></span><br><span class="line">          resolveRtlPropertiesIfNeeded(); <span class="comment">// 处理 RTL 左右翻转属性；</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//【3】判断是否需要使用缓存，forceLayout 的话，或者忽视缓存的话，那就会使用本次新的测量模式；</span></span><br><span class="line">          <span class="keyword">int</span> cacheIndex = forceLayout ? -<span class="number">1</span> : mMeasureCache.indexOfKey(key);</span><br><span class="line">          <span class="keyword">if</span> (cacheIndex &lt; <span class="number">0</span> || sIgnoreMeasureCache) &#123;</span><br><span class="line">              <span class="comment">//【--&gt;3.1】开始测量自身，这里会把清除掉测量的标志位 measured dimension flag 设置回去；</span></span><br><span class="line">              <span class="comment">// 这里会先调用 DecorView 的 onMeasure 方法；</span></span><br><span class="line">              <span class="comment">// (当然如果是 view 的话，这里会直接进入 view 的 onMeasure 的【--&gt;2.2】)</span></span><br><span class="line">              onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">              mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">long</span> value = mMeasureCache.valueAt(cacheIndex);</span><br><span class="line">              <span class="comment">// Casting a long to int drops the high 32 bits, no mask needed</span></span><br><span class="line">              setMeasuredDimensionRaw((<span class="keyword">int</span>) (value &gt;&gt; <span class="number">32</span>), (<span class="keyword">int</span>) value);</span><br><span class="line">              mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果 measured dimension flag 没有设置或者 setMeasuredDimension 方法咩有执行，抛出异常；</span></span><br><span class="line">          <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"View with id "</span> + getId() + <span class="string">": "</span></span><br><span class="line">                      + getClass().getName() + <span class="string">"#onMeasure() did not set the"</span></span><br><span class="line">                      + <span class="string">" measured dimension by calling"</span></span><br><span class="line">                      + <span class="string">" setMeasuredDimension()"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          mPrivateFlags |= PFLAG_LAYOUT_REQUIRED; <span class="comment">// 设置需要布局的标志</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//【4】保存本次的测量模式；</span></span><br><span class="line">      mOldWidthMeasureSpec = widthMeasureSpec;</span><br><span class="line">      mOldHeightMeasureSpec = heightMeasureSpec;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【5】将其保存到布局缓存中；</span></span><br><span class="line">      mMeasureCache.put(key, ((<span class="keyword">long</span>) mMeasuredWidth) &lt;&lt; <span class="number">32</span> |</span><br><span class="line">              (<span class="keyword">long</span>) mMeasuredHeight &amp; <span class="number">0xffffffffL</span>); <span class="comment">// suppress sign extension</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>执行测量！</p><h2 id="2-2-onMeasure-核心2-1"><a href="#2-2-onMeasure-核心2-1" class="headerlink" title="2.2 onMeasure - 核心2.1"></a>2.2 onMeasure - 核心2.1</h2><p>view 的 onMeasure 实际上很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.1】设置测量后的宽高像素值；</span></span><br><span class="line">    <span class="comment">//【--&gt;2.2.3】获取默认的宽/高；</span></span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于测量视图及其内容，以确定测量的宽度和测量的高度。 </p><p>measure 方法会调用此方法，并且子类必须重写此方法，同时提供对其自身的准确测量。</p><p>复写此方法时， 必须调用 setMeasuredDimension 来存储此视图的测量宽度和高度。否则，将抛出 IllegalStateException 的异常。</p><p>调用超类的 onMeasure 是有效的用法。</p><p>子类应重写 onMeasure，以提供对其内容更好的度量。</p><p>如果重写此方法，则子类必须要确保测量的高度和宽度至少为视图的最小高度和宽度 getSuggestedMinimumHeight  getSuggestedMinimumWidth</p><h3 id="2-2-1-setMeasuredDimension-核心7"><a href="#2-2-1-setMeasuredDimension-核心7" class="headerlink" title="2.2.1 setMeasuredDimension - 核心7"></a>2.2.1 setMeasuredDimension - 核心7</h3><p>保存测量的宽度和测量的高度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setMeasuredDimension</span><span class="params">(<span class="keyword">int</span> measuredWidth, <span class="keyword">int</span> measuredHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> optical = isLayoutModeOptical(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (optical != isLayoutModeOptical(mParent)) &#123; <span class="comment">// 这部份是根据 outInsert 调整；</span></span><br><span class="line">        Insets insets = getOpticalInsets();</span><br><span class="line">        <span class="keyword">int</span> opticalWidth  = insets.left + insets.right;</span><br><span class="line">        <span class="keyword">int</span> opticalHeight = insets.top  + insets.bottom;</span><br><span class="line"></span><br><span class="line">        measuredWidth  += optical ? opticalWidth  : -opticalWidth;</span><br><span class="line">        measuredHeight += optical ? opticalHeight : -opticalHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】继续设置；</span></span><br><span class="line">    setMeasuredDimensionRaw(measuredWidth, measuredHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法必须要被 onMeasure(int, int) 调用，不然的话会抛出异常；</p><h3 id="2-2-2-setMeasuredDimensionRaw-核心8"><a href="#2-2-2-setMeasuredDimensionRaw-核心8" class="headerlink" title="2.2.2 setMeasuredDimensionRaw - 核心8"></a>2.2.2 setMeasuredDimensionRaw - 核心8</h3><p>存储测量的宽度和测量的高度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setMeasuredDimensionRaw</span><span class="params">(<span class="keyword">int</span> measuredWidth, <span class="keyword">int</span> measuredHeight)</span> </span>&#123;</span><br><span class="line">    mMeasuredWidth = measuredWidth;</span><br><span class="line">    mMeasuredHeight = measuredHeight;</span><br><span class="line">    <span class="comment">//【1】更新标志位，不然上面会抛异常的；</span></span><br><span class="line">    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-getDefaultSize-核心3-1"><a href="#2-2-3-getDefaultSize-核心3-1" class="headerlink" title="2.2.3 getDefaultSize - 核心3.1"></a>2.2.3 getDefaultSize - 核心3.1</h3><p>参数 size 表示的是这个 view 默认的测量大小，measureSpec 则是 view 的测量规格，返回值表示这个 view 测量大小: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = size;</span><br><span class="line">    <span class="comment">//【1】获取测量约束指定的模式和距离；</span></span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">//【2】如果是 view 的测量模式是 UNSPECIFIED 数值，那么就去取自己的默认值；</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        result = size;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//【3】如果是其他的两种情况，取测量规格指定的大小；       </span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        result = specSize;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，自定义 view，重写 onMeasure 方法的，如果不针对 AT_MOST 和 EXACTLY 做处理，那么使用 wrap_content 时与 match_parent 的效果将会是一样；</p><h4 id="2-2-3-1-getSuggestedMinimumXXXX"><a href="#2-2-3-1-getSuggestedMinimumXXXX" class="headerlink" title="2.2.3.1 getSuggestedMinimumXXXX"></a>2.2.3.1 getSuggestedMinimumXXXX</h4><p>返回最小的宽/高：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getSuggestedMinimumHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mBackground == <span class="keyword">null</span>) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有设置背景，则获取背景 Background 的宽/高度，如果没有设置背景，则取 xml 中 android:minWidth/mMinHeight 的值；</p><h2 id="2-3-combineMeasuredStates"><a href="#2-3-combineMeasuredStates" class="headerlink" title="2.3 combineMeasuredStates"></a>2.3 combineMeasuredStates</h2><p>合并测量状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">combineMeasuredStates</span><span class="params">(<span class="keyword">int</span> curState, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> curState | newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-getMeasuredState"><a href="#2-4-getMeasuredState" class="headerlink" title="2.4 getMeasuredState"></a>2.4 getMeasuredState</h2><p>返回测量状态，实际上就是宽和高的复合整型数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMeasuredState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mMeasuredWidth &amp; MEASURED_STATE_MASK) <span class="comment">// 取宽的高 8 位；</span></span><br><span class="line">            | ((mMeasuredHeight &gt;&gt; MEASURED_HEIGHT_STATE_SHIFT) <span class="comment">// 取高的高 8 位置，然后右移了 16 位；</span></span><br><span class="line">                    &amp; (MEASURED_STATE_MASK &gt;&gt; MEASURED_HEIGHT_STATE_SHIFT));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int 是 32 位，可以看到：</p><ul><li><p>将 mMeasuredWidth 左起高 8 位作为宽的测量状态；</p></li><li><p>将 mMeasuredHeight 左起高 8 位作为高的测量状态；</p></li></ul><p>但它将二者存到了一个复合整型中，对于 mMeasuredWidth 取左起高 8 位，mMeasuredHeight 也是左起高 8 位；但是右移了 16 位；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高 8 位都是 1；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEASURED_STATE_MASK = <span class="number">0xff000000</span>;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于将宽高合并成一个复合整型；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEASURED_HEIGHT_STATE_SHIFT = <span class="number">16</span>; <span class="comment">// 用于将高的测量值右移 16 位；</span></span><br></pre></td></tr></table></figure><p>实际结果如下：</p><p><code>wwww 0000 hhhh 0000</code></p><h2 id="2-5-resolveSizeAndState-核心6"><a href="#2-5-resolveSizeAndState-核心6" class="headerlink" title="2.5 resolveSizeAndState-核心6"></a>2.5 resolveSizeAndState-核心6</h2><p>回顾下前面的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 maxWidth 和 maxHeight 表示了 child view 中最大的宽度和高度，那么对于 view group，</span></span><br><span class="line"><span class="comment">// 需要基于这个值来设置自身的宽高；</span></span><br><span class="line">setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState), <span class="comment">// 宽的测量状态在高 8 位；</span></span><br><span class="line">        resolveSizeAndState(maxHeight, heightMeasureSpec,</span><br><span class="line">                childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT)); <span class="comment">// 高的测量状态在第三个 8 位，所以要左移 16 位；</span></span><br></pre></td></tr></table></figure><p>参数 size：表示的是这个 view 想显示的大小；</p><p>参数 measureSpec：是 parent view 指定的测量规格（或者是自身的测量规格，这个要看情况而定）；</p><p>参数 childMeasuredState：为 child view 的测量状态；</p><p>此时上面的代码调用，我们要基于 child view 的测量结果，设置 view group 的宽高；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">resolveSizeAndState</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec, <span class="keyword">int</span> childMeasuredState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取测量规格指定的测量模式和测量大小；</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">        <span class="comment">//【2】如果此时 view (parent) 的测量模式是 AT_MOST，那么说明 view (parent) 最大不能超过 specSize；</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">            <span class="keyword">if</span> (specSize &lt; size) &#123;</span><br><span class="line">                <span class="comment">//【2.1】如果 view (parent) 的测量大小 specSize 小于 view 实际想要 size，</span></span><br><span class="line">                <span class="comment">// 应该以测量大小 specSize 为准，同时设置 MEASURED_STATE_TOO_SMALL 标志位；</span></span><br><span class="line">                result = specSize | MEASURED_STATE_TOO_SMALL;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【2.2】否则的话，测量大小为 view 期望的大小 size；</span></span><br><span class="line">                result = size;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            <span class="comment">//【3】如果此时 view (parent) 的测量模式为 EXACTLY，那么 view (parent) 最大不能超过 specSize；</span></span><br><span class="line">            result = specSize;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//【4】未指定为 size</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            result = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【5】最后的结果是一个复合整数，这里会 | 上 child 的测量状态（高 8 位）；</span></span><br><span class="line">    <span class="keyword">return</span> result | (childMeasuredState &amp; MEASURED_STATE_MASK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值是一个复合整数，实际的大小在 MEASURED_SIZE_MASK 位中，可以看到 32 位，24 位用来存储测量大小，剩下的 8 位是测量状态的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bits of &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; that provide the actual measured size.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEASURED_SIZE_MASK = <span class="number">0x00ffffff</span>; <span class="comment">// 低 24 位；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bits of &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; that provide the additional state bits.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEASURED_STATE_MASK = <span class="number">0xff000000</span>; <span class="comment">// 高 8 位；</span></span><br></pre></td></tr></table></figure><p>那么这个状态是什么呢，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bit of &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125; that indicates the measured size</span></span><br><span class="line"><span class="comment"> * is smaller that the space the view would like to have.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MEASURED_STATE_TOO_SMALL = <span class="number">0x01000000</span>; <span class="comment">// 表示测量值小于 view 想显示的大小；</span></span><br></pre></td></tr></table></figure><p>如果如果测量约束指定的 size 小于 view 想要的 size ，那么会设置 MEASURED_STATE_TOO_SMALL 标志位</p><h1 id="3-DecorView"><a href="#3-DecorView" class="headerlink" title="3 DecorView"></a>3 DecorView</h1><h2 id="3-1-onMeasure-核心2"><a href="#3-1-onMeasure-核心2" class="headerlink" title="3.1 onMeasure - 核心2"></a>3.1 onMeasure - 核心2</h2><p>参数是 parent 指定的测量规格，里面包含了测量模式和 parent 的剩余大小，这里根据 parent 的测量规格，计算自身的测量模式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得屏幕的信息;</span></span><br><span class="line">    <span class="keyword">final</span> DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isPortrait = <span class="comment">// 判断下横屏竖屏;</span></span><br><span class="line">            getResources().getConfiguration().orientation == ORIENTATION_PORTRAIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】获得宽高的测量模式;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> widthMode = getMode(widthMeasureSpec);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> heightMode = getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> fixedWidth = <span class="keyword">false</span>;</span><br><span class="line">    mApplyFloatingHorizontalInsets = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】如果宽的测量模式是 AT_MOST，表示不能超过 parent 指定的值;</span></span><br><span class="line">    <span class="keyword">if</span> (widthMode == AT_MOST) &#123;</span><br><span class="line">        <span class="comment">//【2.1】这会根据横竖屏，判断宽度的最大值，调整宽度;</span></span><br><span class="line">        <span class="keyword">final</span> TypedValue tvw = isPortrait ? mWindow.mFixedWidthMinor : mWindow.mFixedWidthMajor;</span><br><span class="line">        <span class="keyword">if</span> (tvw != <span class="keyword">null</span> &amp;&amp; tvw.type != TypedValue.TYPE_NULL) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> w;</span><br><span class="line">            <span class="keyword">if</span> (tvw.type == TypedValue.TYPE_DIMENSION) &#123; <span class="comment">// 具体像素值;</span></span><br><span class="line">                w = (<span class="keyword">int</span>) tvw.getDimension(metrics);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tvw.type == TypedValue.TYPE_FRACTION) &#123; <span class="comment">// 百分比因子;</span></span><br><span class="line">                w = (<span class="keyword">int</span>) tvw.getFraction(metrics.widthPixels, metrics.widthPixels);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                w = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MEASURE) Log.d(mLogTag, <span class="string">"Fixed width: "</span> + w);</span><br><span class="line">            <span class="comment">//【2.2】获取测量约束的指定的宽度，然后计算新的测量模式;</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">            <span class="keyword">if</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                widthMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        Math.min(w, widthSize), EXACTLY); <span class="comment">// 如果 w 大于 0，说明已经可以计算出确切的大小;</span></span><br><span class="line">                <span class="comment">// 标示已经修复了宽度;</span></span><br><span class="line">                fixedWidth = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 特殊情况，w 为 0，这里会用 DecorView 的宽度减去 mFloatingInsets 和 AT_MOST</span></span><br><span class="line">                <span class="comment">// 计算新的测量模式，child 会以此为标准;</span></span><br><span class="line">                widthMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        widthSize - mFloatingInsets.left - mFloatingInsets.right,</span><br><span class="line">                        AT_MOST);</span><br><span class="line">                mApplyFloatingHorizontalInsets = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mApplyFloatingVerticalInsets = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【3】如果高的测量模式是 AT_MOST，那么就不能超过 parent 指定的 size 值;</span></span><br><span class="line">    <span class="keyword">if</span> (heightMode == AT_MOST) &#123;</span><br><span class="line">        <span class="comment">//【3.1】这会根据横竖屏，判断宽度的最大值，调整组件的宽度;</span></span><br><span class="line">        <span class="keyword">final</span> TypedValue tvh = isPortrait ? mWindow.mFixedHeightMajor</span><br><span class="line">                : mWindow.mFixedHeightMinor;</span><br><span class="line">        <span class="keyword">if</span> (tvh != <span class="keyword">null</span> &amp;&amp; tvh.type != TypedValue.TYPE_NULL) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> h;</span><br><span class="line">            <span class="keyword">if</span> (tvh.type == TypedValue.TYPE_DIMENSION) &#123;</span><br><span class="line">                h = (<span class="keyword">int</span>) tvh.getDimension(metrics);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tvh.type == TypedValue.TYPE_FRACTION) &#123;</span><br><span class="line">                h = (<span class="keyword">int</span>) tvh.getFraction(metrics.heightPixels, metrics.heightPixels);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                h = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MEASURE) Log.d(mLogTag, <span class="string">"Fixed height: "</span> + h);</span><br><span class="line">            <span class="comment">//【3.2】获取设置的高度，然后计算孩子的测量模式；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">            <span class="keyword">if</span> (h &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                heightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        Math.min(h, heightSize), EXACTLY);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mWindow.getAttributes().flags &amp; FLAG_LAYOUT_IN_SCREEN) == <span class="number">0</span>) &#123;</span><br><span class="line">                heightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        heightSize - mFloatingInsets.top - mFloatingInsets.bottom, AT_MOST);</span><br><span class="line">                mApplyFloatingVerticalInsets = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】如果设置了 outset 区域，那么要对测量模式再次进行调整；</span></span><br><span class="line">    getOutsets(mOutsets);</span><br><span class="line">    <span class="keyword">if</span> (mOutsets.top &gt; <span class="number">0</span> || mOutsets.bottom &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (mode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class="line">            <span class="keyword">int</span> height = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">            heightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                    height + mOutsets.top + mOutsets.bottom, mode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mOutsets.left &gt; <span class="number">0</span> || mOutsets.right &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">if</span> (mode != MeasureSpec.UNSPECIFIED) &#123;</span><br><span class="line">            <span class="keyword">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">            widthMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                    width + mOutsets.left + mOutsets.right, mode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;4.1】进入父类的 onMeasure 方法，传入新的测量模式；</span></span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> width = getMeasuredWidth();</span><br><span class="line">    <span class="keyword">boolean</span> measure = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里会获取测量的宽度，然后测试模式使用 EXACTLY 定义新的测量标准，进行第二次调整；</span></span><br><span class="line">    widthMeasureSpec = MeasureSpec.makeMeasureSpec(width, EXACTLY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fixedWidth &amp;&amp; widthMode == AT_MOST) &#123;</span><br><span class="line">        <span class="keyword">final</span> TypedValue tv = isPortrait ? mWindow.mMinWidthMinor : mWindow.mMinWidthMajor;</span><br><span class="line">        <span class="keyword">if</span> (tv.type != TypedValue.TYPE_NULL) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> min;</span><br><span class="line">            <span class="keyword">if</span> (tv.type == TypedValue.TYPE_DIMENSION) &#123;</span><br><span class="line">                min = (<span class="keyword">int</span>)tv.getDimension(metrics);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tv.type == TypedValue.TYPE_FRACTION) &#123;</span><br><span class="line">                min = (<span class="keyword">int</span>)tv.getFraction(mAvailableWidth, mAvailableWidth);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MEASURE) Log.d(mLogTag, <span class="string">"Adjust for min width: "</span> + min + <span class="string">", value::"</span></span><br><span class="line">                    + tv.coerceToString() + <span class="string">", mAvailableWidth="</span> + mAvailableWidth);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (width &lt; min) &#123;</span><br><span class="line">                widthMeasureSpec = MeasureSpec.makeMeasureSpec(min, EXACTLY);</span><br><span class="line">                measure = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;4.1】进入父类的 onMeasure 方法；</span></span><br><span class="line">    <span class="keyword">if</span> (measure) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，上面的方法对 measure 传入的测量规格做了调整；</p><p>代码逻辑很简单，就不多说了；</p><h3 id="3-1-1-getMeasuredWidth"><a href="#3-1-1-getMeasuredWidth" class="headerlink" title="3.1.1 getMeasuredWidth"></a>3.1.1 getMeasuredWidth</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Like &#123;<span class="doctag">@link</span> #getMeasuredWidthAndState()&#125;, but only returns the</span></span><br><span class="line"><span class="comment"> * raw width component (that is the result is masked by</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #MEASURED_SIZE_MASK&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The raw measured width of this view.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getMeasuredWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mMeasuredWidth &amp; MEASURED_SIZE_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-getMode"><a href="#3-1-2-getMode" class="headerlink" title="3.1.2 getMode"></a>3.1.2 getMode</h3><p>获取测量模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MeasureSpecMode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-FrameLayout"><a href="#4-FrameLayout" class="headerlink" title="4 FrameLayout"></a>4 FrameLayout</h1><h2 id="4-1-onMeasure-核心3"><a href="#4-1-onMeasure-核心3" class="headerlink" title="4.1 onMeasure - 核心3"></a>4.1 onMeasure - 核心3</h2><p>DecorView.onMeasure 进入 FrameLayout.onMeasure 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.1.1】获取所有的 child view;</span></span><br><span class="line">    <span class="keyword">int</span> count = getChildCount();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】EXACTLY 表示父视图已经确定了孩子的确切尺寸。不管孩子想要多大，都会给孩子这些值；</span></span><br><span class="line">    <span class="comment">// 比如具体数值，或者 match_parent；</span></span><br><span class="line">    <span class="comment">// 但是如果不是 EXACTLY 那就要每个 child 重新测量;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> measureMatchParentChildren =</span><br><span class="line">            MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.EXACTLY ||</span><br><span class="line">            MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.EXACTLY;</span><br><span class="line">    mMatchParentChildren.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的 maxHeight 和 maxWidth 用来保存当前 view 的最大宽/高;</span></span><br><span class="line">    <span class="keyword">int</span> maxHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> childState = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】遍历每个 child view，可以看到，对于 ViewGroup，必须要先测量一下内部的 child view;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> View child = getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (mMeasureAllChildren || child.getVisibility() != GONE) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;5.1】测量 child view;</span></span><br><span class="line">            measureChildWithMargins(child, widthMeasureSpec, <span class="number">0</span>, heightMeasureSpec, <span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.1】获取到 child view 的布局参数，同时确定所有 child 的最大高度和最大宽度</span></span><br><span class="line">            <span class="comment">// 需要考虑 child 占用的 margin 距离;</span></span><br><span class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">            maxWidth = Math.max(maxWidth,</span><br><span class="line">                    child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin);</span><br><span class="line">            maxHeight = Math.max(maxHeight,</span><br><span class="line">                    child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【--&gt;2.4】获取每个 child view 的测量状态，同时【--&gt;2.3】合并 child 的测量状态;</span></span><br><span class="line">            childState = combineMeasuredStates(childState, child.getMeasuredState());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【2.2】如果需要对 child view 进行重新测量的话，同时 child view 的 lp 的 width/height</span></span><br><span class="line">            <span class="comment">// 至少有一个为 MATCH_PARENT，那么这个 view 就会被添加到 mMatchParentChildren 中;</span></span><br><span class="line">            <span class="keyword">if</span> (measureMatchParentChildren) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lp.width == LayoutParams.MATCH_PARENT ||</span><br><span class="line">                        lp.height == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                    mMatchParentChildren.add(child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】累加 padding 区域，这个是 FlameLayout 独有的；</span></span><br><span class="line">    maxWidth += getPaddingLeftWithForeground() + getPaddingRightWithForeground();</span><br><span class="line">    maxHeight += getPaddingTopWithForeground() + getPaddingBottomWithForeground();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【4】检查下最小的宽/高；</span></span><br><span class="line">    maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());</span><br><span class="line">    maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】检查下前景的宽/高；</span></span><br><span class="line">    <span class="keyword">final</span> Drawable drawable = getForeground();</span><br><span class="line">    <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">        maxHeight = Math.max(maxHeight, drawable.getMinimumHeight());</span><br><span class="line">        maxWidth = Math.max(maxWidth, drawable.getMinimumWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.2.1】设置 DecorView/FlameLayout 自身的测量宽高值，可以看到 viewGroup 的宽高值依赖 child view 的 max 宽高；</span></span><br><span class="line">    <span class="comment">//【--&gt;2.5】这里会根据 child 的测量状态，调整 FlameLayout 的测量状态；</span></span><br><span class="line">    <span class="comment">// 这里的 maxWidth 和 maxHeight 表示了 child view 中最大的宽度和高度，那么对于 view group，</span></span><br><span class="line">    <span class="comment">// 需要基于这个值来设置自身的宽高；</span></span><br><span class="line">    setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),</span><br><span class="line">            resolveSizeAndState(maxHeight, heightMeasureSpec,</span><br><span class="line">                    childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是正式处理 child view；</span></span><br><span class="line">    count = mMatchParentChildren.size();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 【3】count 大于 0，说明部分 child 也需要测量调整！</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = mMatchParentChildren.get(i);</span><br><span class="line">            <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="comment">//【3.1】重新计算 child view 的宽/高测量约束；</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec;</span><br><span class="line">            <span class="keyword">if</span> (lp.width == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">// 如果 child view 的布局参数是 match parent 的话，那么 child 的测量模式为 EXACTLY；</span></span><br><span class="line">                <span class="comment">// 同时会计算新的测量宽度 width（在父 view 的距离基础上 - 父 view 的 padding - child 的 margin）</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> width = Math.max(<span class="number">0</span>, getMeasuredWidth()</span><br><span class="line">                        - getPaddingLeftWithForeground() - getPaddingRightWithForeground()</span><br><span class="line">                        - lp.leftMargin - lp.rightMargin);</span><br><span class="line">                <span class="comment">// 计算新的测量规格；</span></span><br><span class="line">                childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        width, MeasureSpec.EXACTLY);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//【--&gt;5.2】如果 child view 的布局参数不是 match parent 的话，这里会调用</span></span><br><span class="line">                <span class="comment">// 新的方法计算测量规格；</span></span><br><span class="line">                childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</span><br><span class="line">                        getPaddingLeftWithForeground() + getPaddingRightWithForeground() +</span><br><span class="line">                        lp.leftMargin + lp.rightMargin,</span><br><span class="line">                        lp.width);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec;</span><br><span class="line">            <span class="keyword">if</span> (lp.height == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> height = Math.max(<span class="number">0</span>, getMeasuredHeight()</span><br><span class="line">                        - getPaddingTopWithForeground() - getPaddingBottomWithForeground()</span><br><span class="line">                        - lp.topMargin - lp.bottomMargin);</span><br><span class="line">                childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(</span><br><span class="line">                        height, MeasureSpec.EXACTLY);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                childHeightMeasureSpec = getChildMeasureSpec(heightMeasureSpec,</span><br><span class="line">                        getPaddingTopWithForeground() + getPaddingBottomWithForeground() +</span><br><span class="line">                        lp.topMargin + lp.bottomMargin,</span><br><span class="line">                        lp.height);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【--&gt;2.1】child view 处理，如果是 ViewGroup 的话，流程和 DecorView 类似；</span></span><br><span class="line">            child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了，对于 ViewGroup u </p><h3 id="4-1-1-getChildCount"><a href="#4-1-1-getChildCount" class="headerlink" title="4.1.1 getChildCount"></a>4.1.1 getChildCount</h3><p>返回内部的 child view 的个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChildCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mChildrenCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-ViewGroup"><a href="#5-ViewGroup" class="headerlink" title="5 ViewGroup"></a>5 ViewGroup</h1><h2 id="5-1-measureChildWithMargins-核心4"><a href="#5-1-measureChildWithMargins-核心4" class="headerlink" title="5.1 measureChildWithMargins - 核心4"></a>5.1 measureChildWithMargins - 核心4</h2><p>测量 child view 自身，但是要考虑到 child 的 Margin 距离和 parent 的 padding 距离；</p><ul><li>参数 View child：要测量的 child view；</li><li>参数 int parentWidthMeasureSpec：parent 的 width 测量约束；</li><li>参数 int widthUsed：parent view 已经被使用的距离（这个距离可能是被其他 view 使用了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildWithMargins</span><span class="params">(View child,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentWidthMeasureSpec, <span class="keyword">int</span> widthUsed,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec, <span class="keyword">int</span> heightUsed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取到 child 布局参数 LayoutParams；</span></span><br><span class="line">    <span class="keyword">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【--&gt;5.1.1】根据 parent 的测量规格和 child 的布局参数，计算 child view 的测量规格！！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</span><br><span class="line">                    + widthUsed, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</span><br><span class="line">                    + heightUsed, lp.height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【--&gt;2.1】每个 view 进行自身的测量的递归；</span></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ViewGroup 继承了 View，他没有 measure 方法呀，调用的依然是 View 的 measure 方法；</p><h3 id="5-1-1-getChildMeasureSpec-核心5"><a href="#5-1-1-getChildMeasureSpec-核心5" class="headerlink" title="5.1.1 getChildMeasureSpec - 核心5"></a>5.1.1 getChildMeasureSpec - 核心5</h3><p>getChildMeasureSpec 将 parent view 的 MeasureSpec 信息与 child 的 LayoutParams 结合起来，为一个 child 视图的高度或宽度，确定正确的 MeasureSpec。</p><ul><li><p>参数 int spec：parent view 的测量规格，parent 指定，child 需要根据他来计算自身实际的测量规格；</p></li><li><p>参数 int padding：parent view 里已经被占用的空间；</p></li><li><p>参数 int childDimension：child view 的  LayoutParams 指定的显示的大小；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getChildMeasureSpec</span><span class="params">(<span class="keyword">int</span> spec, <span class="keyword">int</span> padding, <span class="keyword">int</span> childDimension)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】根据测量约束返回测量模式和测量距离；</span></span><br><span class="line">    <span class="keyword">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="keyword">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class="line">    <span class="comment">//【2】由于 specSize 是 parent 指定的测量距离，换要减去 padding 的距离，才是 child 的测量距离；</span></span><br><span class="line">    <span class="keyword">int</span> size = Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> resultMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】处理测量模式；</span></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">//【3.1】如果 parent 的模式是 EXACTLY，表示 parent 知道了自己确切的大小；</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.1.1】如果 child 布局参数指定了具体大小，那么 child 的测量规格定下来了，</span></span><br><span class="line">            <span class="comment">// 测量大小就是 child 布局参数指定的，测量模式为 EXACTLY；</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">//【3.1.2】如果 child 布局参数指定了 MATCH_PARENT，意味着 child 要和 parent 一样，而 parent 已经确定自己的大小了，</span></span><br><span class="line">            <span class="comment">// 那么 child 的测量大小就是 parent 的大小，测量模式就是 EXACTLY；</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">//【3.1.3】如果 child 布局参数指定了 WRAP_CONTENT，意味着 child 自适应内容，但是不能超过 parent</span></span><br><span class="line">            <span class="comment">// 那么 child 可以自适应，但大小不能超过 parent size，而测试模式为 AT_MOST；</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3.2】如果 parent 的模式是 AT_MOST，也就是说 parent 还未确定自己的尺寸，但是大小不能超过 size</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.2.1】如果 child 布局参数指定了大小，那么 child 的测量规格可以定下来了，虽然 parent 不定，但是</span></span><br><span class="line">            <span class="comment">// 依然可以满足 child 的要求，测试大小为 child 布局参数指定的，测试模式为 EXACTLY；</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">//【3.2.2】如果 child 没有指定具体的大小，而是 MATCH_PARENT，但是由于 parent 的模式是 AT_MOST，无法确定自己的大小</span></span><br><span class="line">            <span class="comment">// 所以，child 和 parent 一样，测量大小是 parent 的上限 size，测试模式为 AT_MOST；</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">//【3.2.3】如果 child 布局参数指定了 WRAP_CONTENT，意味着 child 自适应内容，但是不能超过 parent</span></span><br><span class="line">            <span class="comment">// 那么 child 可以自适应，但大小不能超过 parent size，而测试模式同样为 AT_MOST；</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3.3】如果是 UNSPECIFIED，表示 parent 无法去确定自己的尺寸大小；</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//【3.3.1】如果 child 指定了大小，那么实际的测量大小就是 child 想要的，模式为 EXACTLY；</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">//【3.3.2】如果 child 没有指定具体的大小，而是 MATCH_PARENT，这里会计算出它实际的大小；</span></span><br><span class="line">            <span class="comment">// 模式为 UNSPECIFIED</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">//【3.3.3】如果 child 没有指定具体的大小，而是 WRAP_CONTENT，</span></span><br><span class="line">            <span class="comment">// 那么 child 想要自适应，自己调整大小，大小不能超过 size，模式为 AT_MOST；</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】生成 child 的测量约束；</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法实际上就是 ViewGroup 的核心之一，他会根据 parent 传入的测量模式，计算每个  child 的测量模式；</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h1><h2 id="6-1-测量的条件"><a href="#6-1-测量的条件" class="headerlink" title="6.1 测量的条件"></a>6.1 测量的条件</h2><p>每次都会 measure 嘛？未必，情况下面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果视图已经被测量获得了正确的尺寸，那么这里会判断下测量模式是否是 EXACTLY 如果是的话，那么就可能不会重新测量；</span></span><br><span class="line"><span class="comment">// 在 API 23 及以下版本中，需要这样的额外遍历才能使 LinearLayout 重新分配权重。</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> specChanged = widthMeasureSpec != mOldWidthMeasureSpec</span><br><span class="line">    || heightMeasureSpec != mOldHeightMeasureSpec; <span class="comment">// 测量标准是否变化</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isSpecExactly = MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.EXACTLY</span><br><span class="line">    &amp;&amp; MeasureSpec.getMode(heightMeasureSpec) == MeasureSpec.EXACTLY; <span class="comment">// 是否是精确布局</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> matchesSpecSize = getMeasuredWidth() == MeasureSpec.getSize(widthMeasureSpec)</span><br><span class="line">    &amp;&amp; getMeasuredHeight() == MeasureSpec.getSize(heightMeasureSpec); <span class="comment">// 尺寸是否变化</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> needsLayout = specChanged <span class="comment">// 判断是否需要布局；</span></span><br><span class="line">    &amp;&amp; (sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (forceLayout || needsLayout) &#123;</span><br></pre></td></tr></table></figure><p>可以看到，其实需要一些条件的；</p><h2 id="6-2-View-和-ViewGroup-的测量不同点"><a href="#6-2-View-和-ViewGroup-的测量不同点" class="headerlink" title="6.2 View 和 ViewGroup 的测量不同点"></a>6.2 View 和 ViewGroup 的测量不同点</h2><p>View：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">measure() -&gt; onMeasure()</span><br></pre></td></tr></table></figure><p>这里传递进来的就是 view 的测量布局；</p><p>View Group：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">measure() -&gt; measureChild()/</span><br></pre></td></tr></table></figure><p>开始是 view group 的测量规格，后面在 measureChild 中，会根据 view group 的测量规格，计算 view 的测量规格，然后进入上面 view 的逻辑：</p><h2 id="6-3-measure-测量"><a href="#6-3-measure-测量" class="headerlink" title="6.3 measure 测量"></a>6.3 measure 测量</h2><p>上面的流程里面 measureChildWithMargins 方法，考虑到了 child view 的 margin 距离，而 ViewGroup 内部还有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> parentHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</span><br><span class="line">    <span class="comment">//【1】可以看到，这里只考虑到了 parent view 的 padding 距离</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">            mPaddingLeft + mPaddingRight, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">            mPaddingTop + mPaddingBottom, lp.height);</span><br><span class="line"></span><br><span class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是实际上，正常情况来说，margin 距离肯定是要有的，所以 measureChildWithMargins 会更有用些；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章基于 Android N - 7.1.1 主要分析下 measure 方法的执行流程；&lt;/p&gt;
&lt;h1 id=&quot;1-回顾&quot;&gt;&lt;a href=&quot;#1-回顾&quot; class=&quot;headerlink&quot; title=&quot;1 回顾&quot;&gt;&lt;/a&gt;1 回顾&lt;/h1&gt;&lt;p&gt;我们来回顾下，
      
    
    </summary>
    
      <category term="View 视图" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/"/>
    
      <category term="View 的加载和绘制" scheme="https://lishuaiqi.top/categories/View-%E8%A7%86%E5%9B%BE/View-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BB%98%E5%88%B6/"/>
    
    
      <category term="ViewDraw" scheme="https://lishuaiqi.top/tags/ViewDraw/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第四篇 - 发送消息</title>
    <link href="https://lishuaiqi.top/2019/09/13/Eventbus-4-postMessage/"/>
    <id>https://lishuaiqi.top/2019/09/13/Eventbus-4-postMessage/</id>
    <published>2019-09-13T12:46:25.000Z</published>
    <updated>2019-09-20T14:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第四篇，主要分析发送消息的流程；</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们回顾下 eventbus 的使用：</p><ul><li>发送普通的消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(messageEvent);</span><br></pre></td></tr></table></figure><ul><li>发送 sticky 消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(messageEvent)</span><br></pre></td></tr></table></figure><p>这里我们来分析下 <strong>post</strong> 的流程，也是最后一篇了；</p><h1 id="2-EventBus"><a href="#2-EventBus" class="headerlink" title="2 EventBus"></a>2 EventBus</h1><h2 id="2-1-post"><a href="#2-1-post" class="headerlink" title="2.1 post"></a>2.1 post</h2><p>发送普通消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1】获取当前线程的 PostingThreadState 实例；</span></span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">    <span class="comment">//【2】获取每个线程的事件队列 queue；</span></span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(event);</span><br><span class="line">    <span class="comment">//【3】如果当前的状态不是正在 posting；</span></span><br><span class="line">    <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">        <span class="comment">//【4】判断当前是否是主线程；</span></span><br><span class="line">        postingState.isMainThread = isMainThread();</span><br><span class="line">        <span class="comment">//【5】将 posting 状态设置为 true；</span></span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【4】事件队列不为 Empty，所以要分发事件；</span></span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.1.1】分发单个消息；</span></span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段逻辑不是很复杂！！</p><p>isMainThread 方法很简单，就不多说了。。。</p><h3 id="2-1-1-postSingleEvent"><a href="#2-1-1-postSingleEvent" class="headerlink" title="2.1.1 postSingleEvent"></a>2.1.1 postSingleEvent</h3><p>发送单个事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取事件的 class 实例；</span></span><br><span class="line">    Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【2】如果允许继承的话，那就要针对事件类型做处理，因为可能有继承的关系；</span></span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.1.1.1】查询所有的事件类型；</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            <span class="comment">//【--&gt;2.1.2】开始根据每一种事件类型去分发事件（多态）；</span></span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.1.2】开始根据传入的事件类型去分发事件（无需继承）；</span></span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】处理没有订阅者的情况；</span></span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            logger.log(Level.FINE, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventBus  中有一个 eventTypesCache 的 hash：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>key 是事件的 class，而 value 是一个 list，用于保存 class 和其 superClass，以及其他的所有接口；</p><p>因为如果允许事件继承的话，那么根据多态的概念，必须要收集所有的父类和接口；</p><h4 id="2-1-1-1-lookupAllEventTypes"><a href="#2-1-1-1-lookupAllEventTypes" class="headerlink" title="2.1.1.1  lookupAllEventTypes"></a>2.1.1.1  lookupAllEventTypes</h4><p>查询所有的事件类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Class&lt;?&gt;&gt; lookupAllEventTypes(Class&lt;?&gt; eventClass) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (eventTypesCache) &#123;</span><br><span class="line">        <span class="comment">//【1】从 eventTypesCache 中获取事件 class 对应的事件类型列表；</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; eventTypes = eventTypesCache.get(eventClass);</span><br><span class="line">        <span class="keyword">if</span> (eventTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Class&lt;?&gt; clazz = eventClass;</span><br><span class="line">            <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                eventTypes.add(clazz);</span><br><span class="line">                <span class="comment">//【--&gt;2.1.1.2】添加接口，也就是获取 class 的所有接口；</span></span><br><span class="line">                addInterfaces(eventTypes, clazz.getInterfaces());、</span><br><span class="line">                <span class="comment">//【2】获取其父类，继续遍历；</span></span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3】最后放到 cache 目录中；</span></span><br><span class="line">            eventTypesCache.put(eventClass, eventTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eventTypes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这<strong>部分的代码</strong>，<strong>主要逻辑如下</strong>：</p><ul><li>将 <strong>eventClass</strong> 加入到 <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li><li><strong>向上遍历</strong>，对于每一个 <strong>super class</strong>，都会将其加入到  <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li><li>对于<strong>每个 class</strong>，将其直接实现和间接实现的所有接口，都添加到 <strong>eventTypesCache</strong> 的 <strong>eventTypes list</strong> 中；</li></ul><h4 id="2-1-1-2-addInterfaces"><a href="#2-1-1-2-addInterfaces" class="headerlink" title="2.1.1.2 addInterfaces"></a>2.1.1.2 addInterfaces</h4><p>添加接口集合，就是事件类实现的所有接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInterfaces</span><span class="params">(List&lt;Class&lt;?&gt;&gt; eventTypes, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历所有的接口，将其收集到 eventTypes 中；</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; interfaceClass : interfaces) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!eventTypes.contains(interfaceClass)) &#123;</span><br><span class="line">            eventTypes.add(interfaceClass);</span><br><span class="line">            <span class="comment">//【--&gt;】处理的接口的接口；</span></span><br><span class="line">            addInterfaces(eventTypes, interfaceClass.getInterfaces());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单！</p><h3 id="2-1-2-postSingleEventForEventType"><a href="#2-1-2-postSingleEventForEventType" class="headerlink" title="2.1.2  postSingleEventForEventType"></a>2.1.2  postSingleEventForEventType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【1】首先去查询该事件是否已经有订阅关系了，这个关系在 register 的时候会确定；</span></span><br><span class="line">        subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】存在订阅关系的话，那就 post 消息；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//【2.1】处理每一个订阅关系；</span></span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.event = event;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.1】分发事件；</span></span><br><span class="line">                postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                <span class="comment">//【2.2】判断是否取消事件分发；</span></span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123; <span class="comment">// 如果要取消分发，那么会跳出循环；</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单；</p><h4 id="2-2-1-postToSubscription-线程模式处理"><a href="#2-2-1-postToSubscription-线程模式处理" class="headerlink" title="2.2.1 postToSubscription - 线程模式处理"></a>2.2.1 postToSubscription - 线程模式处理</h4><p>分发事件，根据订阅方法的线程模式启动不同的 poster；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSTING:</span><br><span class="line">            <span class="comment">//【1】POSTING，就在事件分发的线程分发订阅；</span></span><br><span class="line">            <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="comment">//【2】MAIN，在主线程分发订阅，这里会判断是否已经在 main 线程，</span></span><br><span class="line">            <span class="comment">// 如果是的话，那就直接分发订阅，否则就通过 mainThreadPoster 分发；</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event); <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.1.2】加入队列；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">            <span class="comment">//【3】BACKGROUND，通过子线程分发订阅，如果当前是在 main 线程，</span></span><br><span class="line">            <span class="comment">// 那就通过 backgroundPoster 新起一个线程分发，如果当前是在自线程，那就当前线程分发；</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.2.2】加入队列；</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event); <span class="comment">//【--&gt;2.2.2】分发订阅；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            <span class="comment">//【4】ASYNC，异步分发订阅，通过 asyncPoster 每次都新起一个线程分发；</span></span><br><span class="line">            asyncPoster.enqueue(subscription, event); <span class="comment">//【--&gt;4.3.2】加入队列；</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到了四种不同的线程模式，每种模式有着不同的处理！</p><p>同时也看到了一个重要的数据结构：Poster</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Poster mainThreadPoster; <span class="comment">// 主线程 poster，指向一个 HandlerPoster 实例；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BackgroundPoster backgroundPoster; <span class="comment">// 后台线程 poster</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AsyncPoster asyncPoster; <span class="comment">// 异步 poster</span></span><br></pre></td></tr></table></figure><p>对于 mainThreadPoster，他是在 AndroidHandlerMainThreadSupport 中创建的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HandlerPoster(eventBus, looper, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h3 id="2-2-2-invokeSubscriber"><a href="#2-2-2-invokeSubscriber" class="headerlink" title="2.2.2 invokeSubscriber"></a>2.2.2 invokeSubscriber</h3><p>分发订阅，也就是调用订阅者的方法处理订阅事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】method.invoke 反射调用；</span></span><br><span class="line">        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        handleSubscriberException(subscription, event, e.getCause());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了；</p><h2 id="2-2-postSticky"><a href="#2-2-postSticky" class="headerlink" title="2.2 postSticky"></a>2.2 postSticky</h2><p>发送粘性消息，这可以看到，该方法会将 <strong>event</strong> 保存到 <strong>stickyEvents</strong> 表中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postSticky</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (stickyEvents) &#123;</span><br><span class="line">        <span class="comment">//【1】保存到 stickyEvents 中；</span></span><br><span class="line">        stickyEvents.put(event.getClass(), event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.1】发送该消息；</span></span><br><span class="line">    post(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面 <strong>register</strong> 的时候，我们有分析过在 <strong>register</strong> 时会立刻处理 <strong>Sticky</strong> 事件的分发；</p><p>这里就不再多说了；</p><h1 id="3-PostingThreadState"><a href="#3-PostingThreadState" class="headerlink" title="3 PostingThreadState"></a>3 PostingThreadState</h1><p>这个类用于保存 <strong>thread post</strong> 的状态，在 <strong>EventBus</strong> 中有个 <strong>ThreadLocal</strong> 成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1】创建 PostingThreadState 对象；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用于保存每一个线程的 <strong>post</strong> 状态！！</p><h2 id="3-1-成员变量"><a href="#3-1-成员变量" class="headerlink" title="3.1 成员变量"></a>3.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 事件队列；</span></span><br><span class="line">    <span class="keyword">boolean</span> isPosting; <span class="comment">// 线程是否正在 post 消息；</span></span><br><span class="line">    <span class="keyword">boolean</span> isMainThread; <span class="comment">// post 的线程是否是主线程；</span></span><br><span class="line">    Subscription subscription; <span class="comment">// 订阅关系；</span></span><br><span class="line">    Object event; <span class="comment">// 正在 post 的事件，会从 eventQueue 按照顺序来分发；</span></span><br><span class="line">    <span class="keyword">boolean</span> canceled; <span class="comment">// 是否被取消了；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Poster"><a href="#4-Poster" class="headerlink" title="4 Poster"></a>4 Poster</h1><p>poster 用于订阅事件的最终分发，所有的 Poster 都实现了下面的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Posts events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> William Ferguson</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Poster</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enqueue an event to be posted for a particular subscription.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subscription Subscription which will receive the event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event        Event that will be posted to subscribers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着分析：</p><h2 id="4-1-HandlerPoster"><a href="#4-1-HandlerPoster" class="headerlink" title="4.1 HandlerPoster"></a>4.1 HandlerPoster</h2><p>处理 main thread 的事件分发：</p><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 正在分发的 post 队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxMillisInsideHandleMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handlerActive; <span class="comment">// 是否处于激活状态；</span></span><br></pre></td></tr></table></figure><p>参数 maxMillisInsideHandleMessage 表示处理消息的函数的执行事件，单位是毫秒，传入的是 10；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---&gt; [AndroidHandlerMainThreadSupport.java]</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HandlerPoster(eventBus, looper, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 AndroidHandlerMainThreadSupport 创建了一个 HandlerPoster，他会作为 EventBus 单例的成员变量；</p><h3 id="4-1-2-enqueue"><a href="#4-1-2-enqueue" class="headerlink" title="4.1.2 enqueue"></a>4.1.2 enqueue</h3><p>添加 post 到队列 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">            handlerActive = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【3】发送消息；</span></span><br><span class="line">            <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerPoster 本质上是一个 handler！</p><h3 id="4-1-3-run"><a href="#4-1-3-run" class="headerlink" title="4.1.3 run"></a>4.1.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="comment">//【1】一个 while 循环，处理 PendingPostQueue 中所有的 post 操作；</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;7.3】post 出队列；</span></span><br><span class="line">            PendingPost pendingPost = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;7.3】第一次为 null，post 出队列；</span></span><br><span class="line">                    pendingPost = queue.poll();</span><br><span class="line">                    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">            eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">            <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line">            <span class="comment">//【2】判断了函数的执行时间，如果大于 10 毫秒，那么说明主线程比较卡顿，</span></span><br><span class="line">            <span class="comment">// 这里会再次发送消息，然后立刻退出循环，这是防止 while 循环堵塞主线程；</span></span><br><span class="line">            <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【3】设置为 true，handlerActive 会被设置为 rescheduled</span></span><br><span class="line">                <span class="comment">// 因为上面已经再次发送了消息。</span></span><br><span class="line">                rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        handlerActive = rescheduled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，主线程的分发策略是：</p><ul><li>尽可能一次性处理完成 <strong>PendingPostQueue</strong> 中的所有消息；</li><li>如果某个消息的处理时间超过 <strong>10</strong> 毫秒，说明主线程很卡，那么就会退出 <strong>while</strong> 循环；</li></ul><h2 id="4-2-BackgroundPoster"><a href="#4-2-BackgroundPoster" class="headerlink" title="4.2 BackgroundPoster"></a>4.2 BackgroundPoster</h2><p>处理 background thread 的事件分发：</p><h3 id="4-2-1-成员变量"><a href="#4-2-1-成员变量" class="headerlink" title="4.2.1 成员变量"></a>4.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 消息队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> executorRunning; <span class="comment">// 线程池是否在运行；</span></span><br></pre></td></tr></table></figure><p>可以看到 BackgroundPoster 是一个 Runnable；</p><h3 id="4-2-2-enqueue"><a href="#4-2-2-enqueue" class="headerlink" title="4.2.2 enqueue"></a>4.2.2 enqueue</h3><p>添加消息到 poster 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!executorRunning) &#123; <span class="comment">// executorRunning 设置为 true；</span></span><br><span class="line">            executorRunning = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.3】执行 BackgroundPoster;</span></span><br><span class="line">            eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方加了锁，这是因为 <strong>post</strong> 方法可以在多线程调用；</p><h3 id="4-2-3-run"><a href="#4-2-3-run" class="headerlink" title="4.2.3 run"></a>4.2.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//【1】post 出队列，这里有个超时处理：</span></span><br><span class="line">                PendingPost pendingPost = queue.poll(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123; <span class="comment">// 这里加锁了；</span></span><br><span class="line">                        <span class="comment">//【2】如果为 null，那就再次检查，如果依然为 null</span></span><br><span class="line">                        <span class="comment">// 那就退出 run 执行，executorRunning 设置为 false；</span></span><br><span class="line">                        pendingPost = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            executorRunning = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">                eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            eventBus.getLogger().log(Level.WARNING, Thread.currentThread().getName() + <span class="string">" was interruppted"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        executorRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这个线程因为 while (true) 一直处于 runnable/running 的状态；</p><h2 id="4-3-AsyncPoster"><a href="#4-3-AsyncPoster" class="headerlink" title="4.3 AsyncPoster"></a>4.3 AsyncPoster</h2><p>处理 async thread 的事件分发：</p><h3 id="4-3-1-成员变量"><a href="#4-3-1-成员变量" class="headerlink" title="4.3.1 成员变量"></a>4.3.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncPoster</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Poster</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue; <span class="comment">// 队列；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-enqueue"><a href="#4-3-2-enqueue" class="headerlink" title="4.3.2 enqueue"></a>4.3.2 enqueue</h3><p>添加消息到 poster 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;6.2】创建一个 PendingPost；</span></span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">    <span class="comment">//【--&gt;7.2】入队列：</span></span><br><span class="line">    queue.enqueue(pendingPost);</span><br><span class="line">    eventBus.getExecutorService().execute(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个人地方竟然没有加锁，奇怪啊～</p><h3 id="4-3-3-run"><a href="#4-3-3-run" class="headerlink" title="4.3.3 run"></a>4.3.3 run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;7.3】post 出队列；</span></span><br><span class="line">    PendingPost pendingPost = queue.poll();</span><br><span class="line">    <span class="keyword">if</span>(pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No pending post available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】执行方法；</span></span><br><span class="line">    eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-PendingPost"><a href="#6-PendingPost" class="headerlink" title="6 PendingPost"></a>6 PendingPost</h1><p>表示一个正在分发的 post。</p><h2 id="6-1-成员变量"><a href="#6-1-成员变量" class="headerlink" title="6.1 成员变量"></a>6.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPost</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存 post，用于复用；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;PendingPost&gt; pendingPostPool = <span class="keyword">new</span> ArrayList&lt;PendingPost&gt;(); </span><br><span class="line">    Object event; <span class="comment">// 要分发的事件；</span></span><br><span class="line">    Subscription subscription; <span class="comment">// 订阅关系；</span></span><br><span class="line">    PendingPost next; <span class="comment">// 下一个要分发的 post，用户构成链表结构；！</span></span><br></pre></td></tr></table></figure><h2 id="6-2-obtainPendingPost"><a href="#6-2-obtainPendingPost" class="headerlink" title="6.2 obtainPendingPost"></a>6.2 obtainPendingPost</h2><p>获取一个 <strong>PendingPost</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PendingPost <span class="title">obtainPendingPost</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = pendingPostPool.size();</span><br><span class="line">        <span class="comment">//【1】优先从 pendingPostPool 中获取；</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            PendingPost pendingPost = pendingPostPool.remove(size - <span class="number">1</span>);</span><br><span class="line">            pendingPost.event = event;</span><br><span class="line">            pendingPost.subscription = subscription;</span><br><span class="line">            pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> pendingPost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】没有的话，再创建新的；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PendingPost(event, subscription);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有加锁的！</p><h2 id="6-3-releasePendingPost"><a href="#6-3-releasePendingPost" class="headerlink" title="6.3 releasePendingPost"></a>6.3 releasePendingPost</h2><p>消息 <strong>post</strong> 完成后，会缓存 <strong>post</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releasePendingPost</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">    pendingPost.event = <span class="keyword">null</span>;</span><br><span class="line">    pendingPost.subscription = <span class="keyword">null</span>;</span><br><span class="line">    pendingPost.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (pendingPostPool) &#123;</span><br><span class="line">        <span class="comment">//【1】缓存已经 post 的消息的 PendingPost！！！</span></span><br><span class="line">        <span class="keyword">if</span> (pendingPostPool.size() &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">            pendingPostPool.add(pendingPost);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：pendingPostPool 不会超过 10000 个；</p><h1 id="7-PendingPostQueue"><a href="#7-PendingPostQueue" class="headerlink" title="7 PendingPostQueue"></a>7 PendingPostQueue</h1><p>这是一个由链表构成的 正在分发的 post 的队列！</p><h2 id="7-1-成员变量"><a href="#7-1-成员变量" class="headerlink" title="7.1 成员变量"></a>7.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPostQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PendingPost head; <span class="comment">// 队列头；</span></span><br><span class="line">    <span class="keyword">private</span> PendingPost tail; <span class="comment">// 队列尾；</span></span><br></pre></td></tr></table></figure><p>内部有队列头和队列尾两个属性；</p><p>这个方法的 <strong>enqueue</strong> 和 <strong>poll</strong> 是加锁的～</p><h2 id="7-2-enqueue"><a href="#7-2-enqueue" class="headerlink" title="7.2 enqueue"></a>7.2 enqueue</h2><p>将 PendingPost 放入到队列中，默认是加入到队尾，该方法是加锁了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(PendingPost pendingPost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"null cannot be enqueued"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】入队列；</span></span><br><span class="line">    <span class="keyword">if</span> (tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tail.next = pendingPost;</span><br><span class="line">        tail = pendingPost;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = tail = pendingPost;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Head present, but no tail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】提醒其他阻塞的线程；</span></span><br><span class="line">    notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-poll"><a href="#7-3-poll" class="headerlink" title="7.3 poll"></a>7.3 poll</h2><p>PendingPost 出队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】从 head 出队列，更改指针；</span></span><br><span class="line">    PendingPost pendingPost = head;</span><br><span class="line">    <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pendingPost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> PendingPost <span class="title">poll</span><span class="params">(<span class="keyword">int</span> maxMillisToWait)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【2】这个方法会在队列为 null 的时候，等待一会儿；</span></span><br><span class="line">        wait(maxMillisToWait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> poll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>到这里，EventBus 就整完了，驾鹤西去呦～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://lishuaiqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第三篇 - 初始化、注册和取消注册</title>
    <link href="https://lishuaiqi.top/2019/09/10/Eventbus-3-getDefaultAndRegister/"/>
    <id>https://lishuaiqi.top/2019/09/10/Eventbus-3-getDefaultAndRegister/</id>
    <published>2019-09-10T12:46:25.000Z</published>
    <updated>2019-09-16T14:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第三篇，主要分析 初始化，注册和取消注册；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以看成是 Handler + Thread 的替代品。</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们在使用的过程中，需要先进行注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>当我们的组件在销毁以后，就要执行取消注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>本篇文章，主要分析 register 和 unregister 的流程！</p><h1 id="2-EventBus"><a href="#2-EventBus" class="headerlink" title="2 EventBus"></a>2 EventBus</h1><p>EventBus 这个类是总的入口，我们可以通过 getDefault 返回默认配置的 EventBus，也可以通过 EventBusBuilder 去自定义配置：</p><p>EventBus 使用了单例模式！</p><h2 id="2-1-成员属性"><a href="#2-1-成员属性" class="headerlink" title="2.1 成员属性"></a>2.1 成员属性</h2><p>我们先去看看 EventBus 的成员属性，当然我们后面也会详细分析：</p><ul><li><strong>核心的变量：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存了</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; eventTypesCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 保存了 [订阅事件 class 实例 --&gt; 该事件的订阅关系的 list] 的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</span><br><span class="line"><span class="comment">// 保存了 [订阅者实例 --&gt; 订阅事件 class 的 list] 的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;</span><br><span class="line"><span class="comment">// 保存了 [粘性订阅事件 class 实例 --&gt; 粘性订阅事件实例] 的映射关系，只要是已经发送过的 sticky event 都会被加入这里；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; stickyEvents;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存每个 post 线程的状态；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;4】保存主线程的支持类，对 Looper 的封装；@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MainThreadSupport mainThreadSupport; </span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;4】用于分发消息；@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Poster mainThreadPoster;  <span class="comment">// 用于主线程的消息分发处理；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BackgroundPoster backgroundPoster; <span class="comment">// 用于后台线程的消息分发处理；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AsyncPoster asyncPoster; <span class="comment">// 用于异步线程的消息分发处理；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;5】用于查找订阅方法；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriberMethodFinder subscriberMethodFinder;</span><br></pre></td></tr></table></figure><ul><li><strong>其他的变量：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance; <span class="comment">//【1】EventBus 的单例对象；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EventBusBuilder DEFAULT_BUILDER = <span class="keyword">new</span> EventBusBuilder(); <span class="comment">//【--&gt;3.1】默认配置的 EventBusBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executorService; <span class="comment">// 线程池，用于分发异步和后台的消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> throwSubscriberException; <span class="comment">// 这些变量请参考 EventBusBuidler，这里不再多说！</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> logSubscriberExceptions;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> logNoSubscriberMessages;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sendSubscriberExceptionEvent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sendNoSubscriberEvent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> eventInheritance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> indexCount; <span class="comment">// subscriberInfoIndex 实例的个数；</span></span><br></pre></td></tr></table></figure><p>这里我简单的解释下：</p><ul><li>mainThreadPoster，backgroundPoster，asyncPoster 用于不同类型消息的分发，它们都是实现了 Post 接口，后面我们分析的时候再看！</li><li>currentPostingThreadState 是一个 ThreadLocal 变量，每个 post 线程都会有一个 PostingThreadState 属性，表示 post 的状态！</li><li>SubscriberMethodFinder 用于查找订阅方法；    </li></ul><h2 id="2-2-创建-EventBus-实例"><a href="#2-2-创建-EventBus-实例" class="headerlink" title="2.2 创建 EventBus 实例"></a>2.2 创建 EventBus 实例</h2><p>EventBus 提供了多种创建方式，既可以通过单例模式创建一个统一的 EventBus 对象，也可以创建多个 EventBus 实例，每个实例都是一个单独的作用域！</p><h3 id="2-2-1-getDefault"><a href="#2-2-1-getDefault" class="headerlink" title="2.2.1 getDefault"></a>2.2.1 getDefault</h3><p>单例模式方法，创建默认的 EventBus：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.2】构造器；</span></span><br><span class="line">                defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-new-EventBus"><a href="#2-2-2-new-EventBus" class="headerlink" title="2.2.2 new EventBus"></a>2.2.2 new EventBus</h3><p>非单例模式方法，两个构造器，默认构造器会传入一个默认的 <code>DEFAULT_BUILDER</code>，另一个需要传入指定的 EventBusBuilder 实例；</p><p>但是，我们只能通过无参数的构造器创建非单例的  EventBus 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】默认的构造器是通过默认的 builder 对象处理的；【--&gt;2.1】默认的 buidler 实例；</span></span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_BUILDER); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】通过建造者模式来初始化，注意这个构造器是 protected 的，我们无法访问！</span></span><br><span class="line">    EventBus(EventBusBuilder builder) &#123; </span><br><span class="line">        <span class="comment">//【--&gt;3.2.3】通过 EventBusBuilder 初始化 log 系统；</span></span><br><span class="line">        logger = builder.getLogger();</span><br><span class="line">        subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//【--&gt;3.2.1】通过 EventBusBuilder 初始化 mainThread 相关变量；</span></span><br><span class="line">        mainThreadSupport = builder.getMainThreadSupport();</span><br><span class="line">      </span><br><span class="line">        mainThreadPoster = mainThreadSupport != <span class="keyword">null</span> ? mainThreadSupport.createPoster(<span class="keyword">this</span>) : <span class="keyword">null</span>;</span><br><span class="line">        backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</span><br><span class="line">        asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【--&gt;3.1】通过 EventBusBuilder 初始化 EventBus 内部的变量：</span></span><br><span class="line">        indexCount = builder.subscriberInfoIndexes != <span class="keyword">null</span> ? builder.subscriberInfoIndexes.size() : <span class="number">0</span>;</span><br><span class="line">        subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</span><br><span class="line">                builder.strictMethodVerification, builder.ignoreGeneratedIndex); <span class="comment">//【--&gt;5.2】创建 SubscriberMethodFinder 对象；</span></span><br><span class="line">        logSubscriberExceptions = builder.logSubscriberExceptions;</span><br><span class="line">        logNoSubscriberMessages = builder.logNoSubscriberMessages;</span><br><span class="line">        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</span><br><span class="line">        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</span><br><span class="line">        throwSubscriberException = builder.throwSubscriberException;</span><br><span class="line">        eventInheritance = builder.eventInheritance;</span><br><span class="line">        executorService = builder.executorService;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过建造者模式来初始化部分变量，同时也会对其他变量做默认的初始化；</p><h3 id="2-2-3-通过-EventBusBuilder-创建"><a href="#2-2-3-通过-EventBusBuilder-创建" class="headerlink" title="2.2.3 通过 EventBusBuilder 创建"></a>2.2.3 通过 EventBusBuilder 创建</h3><p>EventBusBuilder 也提供了两个方法，通过 build 模式创建 EventBus 实例！</p><h4 id="2-2-3-1-installDefaultEventBus"><a href="#2-2-3-1-installDefaultEventBus" class="headerlink" title="2.2.3.1 installDefaultEventBus"></a>2.2.3.1 installDefaultEventBus</h4><p>单例模式方法，创建默认的 EventBus，但是如果已经创建了 EventBus 的单例，那就不能调用这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBus <span class="title">installDefaultEventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (EventBus.defaultInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Default instance already exists."</span> +</span><br><span class="line">                    <span class="string">" It may be only set once before it's used the first time to ensure consistent behavior."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.2】通过 build 方法创建单例！</span></span><br><span class="line">        EventBus.defaultInstance = build();</span><br><span class="line">        <span class="keyword">return</span> EventBus.defaultInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-build"><a href="#2-2-3-2-build" class="headerlink" title="2.2.3.2 build"></a>2.2.3.2 build</h4><p>这个方法可以用与创建非单例的 EventBus 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBus <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】调用一参数构造器；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EventBus(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-register-注册"><a href="#2-3-register-注册" class="headerlink" title="2.3 register - 注册"></a>2.3 register - 注册</h2><p>我们来看 register  的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取订阅者的 class 对象；</span></span><br><span class="line">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">    <span class="comment">//【--&gt;5.3】查询订阅者的方法；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.3.1】建立订阅关系；</span></span><br><span class="line">            subscribe(subscriber, subscriberMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程简单，不多说了；</p><p>注意：这里的 subscriberClass 是调用 register 方法所在的类；</p><h3 id="2-3-1-subscribe"><a href="#2-3-1-subscribe" class="headerlink" title="2.3.1 subscribe"></a>2.3.1 subscribe</h3><p>创建订阅关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取事件类型 eventType</span></span><br><span class="line">    Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">    <span class="comment">//【--&gt;7.1】创建订阅关系；</span></span><br><span class="line">    Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</span><br><span class="line">    <span class="comment">//【2】获取该 eventType 对应的订阅关系的 list；</span></span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions); <span class="comment">// 初始化操作；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span></span><br><span class="line">                    + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】调整优先级顺序，订阅关系的 list 是以 priority 从小到大排序的；</span></span><br><span class="line">    <span class="comment">// 将订阅关系加入到 subscriptionsByEventType 中；</span></span><br><span class="line">    <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class="line">            subscriptions.add(i, newSubscription);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】将订阅者实例和要订阅的 eventType 的 class 实例保存到 subscribedEvents 中；</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        typesBySubscriber.put(subscriber, subscribedEvents); <span class="comment">// 初始化；</span></span><br><span class="line">    &#125;</span><br><span class="line">    subscribedEvents.add(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【5】方法订阅的事件是 sticky 的，特殊处理；；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberMethod.sticky) &#123;</span><br><span class="line">        <span class="comment">//【5.1】如果允许事件继承，默认是为 true 的，可以去看 EventBusBuilder；</span></span><br><span class="line">        <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">            <span class="comment">//【5.2】获取已经存在的 sticky 事件；</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">                Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">                <span class="comment">//【5.3】因为可能一个父类有多个子类，所以这里要处理所有的 sticky event。</span></span><br><span class="line">                <span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                    Object stickyEvent = entry.getValue();</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2】分发 sticky Event</span></span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【5.4】如果不允许事件继承，那就只能找对应类型的 sticky event。</span></span><br><span class="line">            Object stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">            <span class="comment">//【--&gt;2.3.2】分发 sticky Event</span></span><br><span class="line">            checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程：</p><ul><li>将订阅关系保存到对应的缓存中；</li><li>处理 sticky 事件的分发；</li></ul><p>这里的 eventInheritance 是啥意思呢，其实就是事件继承关系：</p><p>比如 MessageEvent2 继承了 MessageEvent，那么如果订阅方法的参数是 MessageEvent，而粘性事件是 MessageEvent2，那么我们依然可以分发该消息；</p><h3 id="2-3-2-checkPostStickyEventToSubscription"><a href="#2-3-2-checkPostStickyEventToSubscription" class="headerlink" title="2.3.2 checkPostStickyEventToSubscription"></a>2.3.2 checkPostStickyEventToSubscription</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPostStickyEventToSubscription</span><span class="params">(Subscription newSubscription, Object stickyEvent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.3】分发 event；</span></span><br><span class="line">        postToSubscription(newSubscription, stickyEvent, isMainThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)<br>–&gt; Strange corner case, which we don’t take care of here.</p><h3 id="2-3-3-postToSubscription"><a href="#2-3-3-postToSubscription" class="headerlink" title="2.3.3 postToSubscription"></a>2.3.3 postToSubscription</h3><p>对于 sticky event 这个和粘性广播的道理是一样，如果它之前就已经分发过，那么他会被存储在系统里，下一个订阅者一旦注册，那就能够收到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSTING:</span><br><span class="line">            invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN_ORDERED:</span><br><span class="line">            <span class="keyword">if</span> (mainThreadPoster != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// temporary: technically not correct as poster not decoupled from subscriber</span></span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BACKGROUND:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ASYNC:</span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里开始事件的 post 了！</p><p>event post 这里我们不关注，后面会分析；</p><h2 id="2-4-unregister-反注册"><a href="#2-4-unregister-反注册" class="headerlink" title="2.4 unregister - 反注册"></a>2.4 unregister - 反注册</h2><p>我们来看看反注册的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class="line">    <span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.4.1】解除订阅；</span></span><br><span class="line">            unsubscribeByEventType(subscriber, eventType);</span><br><span class="line">        &#125;</span><br><span class="line">        typesBySubscriber.remove(subscriber);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(Level.WARNING, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-unsubscribeByEventType"><a href="#2-4-1-unsubscribeByEventType" class="headerlink" title="2.4.1 unsubscribeByEventType"></a>2.4.1 unsubscribeByEventType</h3><p>这个方法很简单，就是将订阅关系移除掉；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribeByEventType</span><span class="params">(Object subscriber, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】从 subscriptionsByEventType 返回 eventType 的所有订阅关系；</span></span><br><span class="line">    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//【2】处理当前订阅者的订阅关系，设置为 no active，同时从集合中移除；</span></span><br><span class="line">            Subscription subscription = subscriptions.get(i);</span><br><span class="line">            <span class="keyword">if</span> (subscription.subscriber == subscriber) &#123;</span><br><span class="line">                subscription.active = <span class="keyword">false</span>;</span><br><span class="line">                subscriptions.remove(i);</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h1 id="3-EventBusBuilder"><a href="#3-EventBusBuilder" class="headerlink" title="3 EventBusBuilder"></a>3 EventBusBuilder</h1><p>建造者模式，用于自定义 EventBus 的配置，并创建 EventBus 实例：</p><h2 id="3-1-成员变量"><a href="#3-1-成员变量" class="headerlink" title="3.1 成员变量"></a>3.1 成员变量</h2><p>我们来看下成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内置的默认线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> logSubscriberExceptions = <span class="keyword">true</span>; <span class="comment">// 是否记录订阅者的异常信息；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> logNoSubscriberMessages = <span class="keyword">true</span>; <span class="comment">// </span></span><br><span class="line">    <span class="keyword">boolean</span> sendSubscriberExceptionEvent = <span class="keyword">true</span>; <span class="comment">// 是否发送订阅异常的事件；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> sendNoSubscriberEvent = <span class="keyword">true</span>; <span class="comment">// 是否发送没有订阅者的消息；默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> throwSubscriberException; <span class="comment">// 是否抛出订阅异常，用于 debug；默认为 false；</span></span><br><span class="line">    <span class="keyword">boolean</span> eventInheritance = <span class="keyword">true</span>; <span class="comment">// 是否开启事件继承机制，默认为 true；</span></span><br><span class="line">    <span class="keyword">boolean</span> ignoreGeneratedIndex; <span class="comment">// 是否强制使用反射，即使开启了 Apt 特性；默认为 false；</span></span><br><span class="line">    <span class="keyword">boolean</span> strictMethodVerification; <span class="comment">// 是否强制方法校验；默认为 false；</span></span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE; <span class="comment">// 线程池，用于分发异步和后台的消息；默认为 DEFAULT_EXECUTOR_SERVICE</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; skipMethodVerificationForClasses; <span class="comment">// 用于保存哪些跳过方法校验的 class</span></span><br><span class="line">    List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes; <span class="comment">// 用于保存 SubscriberInfoIndex 实例，也就是 APT 技术生成的动态 java 类；</span></span><br><span class="line">    </span><br><span class="line">    Logger logger; <span class="comment">// log 系统；</span></span><br><span class="line">    MainThreadSupport mainThreadSupport; <span class="comment">// 用于提供对主线程的支持，指向 AndroidHandlerMainThreadSupport 实例；</span></span><br><span class="line"></span><br><span class="line">    EventBusBuilder() &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果我们使用默认的 EventBusBuilder 来初始化 EventBus 的话，那么 EventBusBuilder 的方法会返回属性的默认值：</p><p>这里我简单的说下：</p><ul><li>阿道夫</li><li>安抚</li><li>党法</li></ul><h2 id="3-2-方法"><a href="#3-2-方法" class="headerlink" title="3.2 方法"></a>3.2 方法</h2><p>前面我们顺便看了下通过 EventBusBuilder  创建 EventBus 的相关方法，这里就不再看了，我们来看下 EventBusBuilder 其中的部分方法：</p><h3 id="3-2-1-getMainThreadSupport"><a href="#3-2-1-getMainThreadSupport" class="headerlink" title="3.2.1 getMainThreadSupport"></a>3.2.1 getMainThreadSupport</h3><p>获取主线程的支持对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">MainThreadSupport <span class="title">getMainThreadSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainThreadSupport != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mainThreadSupport;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (AndroidLogger.isAndroidLogAvailable()) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.1.1】获取主线程的 looper 对象；</span></span><br><span class="line">        Object looperOrNull = getAndroidMainLooperOrNull();</span><br><span class="line">        <span class="keyword">return</span> looperOrNull == <span class="keyword">null</span> ? <span class="keyword">null</span> :</span><br><span class="line">          <span class="comment">//【--&gt;4】创建 AndroidHandlerMainThreadSupport 实例对象；</span></span><br><span class="line">                <span class="keyword">new</span> MainThreadSupport.AndroidHandlerMainThreadSupport((Looper) looperOrNull);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-1-getAndroidMainLooperOrNull"><a href="#3-2-1-1-getAndroidMainLooperOrNull" class="headerlink" title="3.2.1.1 getAndroidMainLooperOrNull"></a>3.2.1.1 getAndroidMainLooperOrNull</h4><p>获取主线程的 looper 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">getAndroidMainLooperOrNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.getMainLooper();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h3 id="3-2-2-addIndex"><a href="#3-2-2-addIndex" class="headerlink" title="3.2.2 addIndex"></a>3.2.2 addIndex</h3><p>改方法用于将通过 EventBus 的 annotation preprocessor 生成的 SubscriberInfoIndex 子类实例，加入到 EventBusBuilder.subscriberInfoIndexes 中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> EventBusBuilder <span class="title">addIndex</span><span class="params">(SubscriberInfoIndex index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (subscriberInfoIndexes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        subscriberInfoIndexes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    subscriberInfoIndexes.add(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h3 id="3-2-3-getLogger"><a href="#3-2-3-getLogger" class="headerlink" title="3.2.3 getLogger"></a>3.2.3 getLogger</h3><p>获取 log 系统：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Logger <span class="title">getLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// also check main looper to see if we have "good" Android classes (not Stubs etc.)</span></span><br><span class="line">        <span class="keyword">return</span> AndroidLogger.isAndroidLogAvailable() &amp;&amp; getAndroidMainLooperOrNull() != <span class="keyword">null</span></span><br><span class="line">                ? <span class="keyword">new</span> AndroidLogger(<span class="string">"EventBus"</span>) :</span><br><span class="line">                <span class="keyword">new</span> Logger.SystemOutLogger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-MainThreadSupport"><a href="#4-MainThreadSupport" class="headerlink" title="4 MainThreadSupport"></a>4 MainThreadSupport</h1><p>是一个接口，AndroidHandlerMainThreadSupport 内部类实现了该接口，作为主线程的支持类，是对 looper 对象的封装；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainThreadSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isMainThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Poster <span class="title">createPoster</span><span class="params">(EventBus eventBus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AndroidHandlerMainThreadSupport</span> <span class="keyword">implements</span> <span class="title">MainThreadSupport</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】主线程的 looper 对象；</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Looper looper;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AndroidHandlerMainThreadSupport</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.looper = looper;</span><br><span class="line">        &#125;</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先不看 AndroidHandlerMainThreadSupport 的其他方法，后面会分析。</p><p>暂时只需要知道，AndroidHandlerMainThreadSupport 的 createPoster 方法会创建一个 <strong>HandlerPoster</strong> 实例，他是 Handler 的子类，同时实现了 Poster 接口！</p><p>看到这里，其实能猜到，HandlerPoster 会持有主线程的 Looper 对象，像主线程发送消息！！</p><h1 id="5-SubscriberMethodFinder"><a href="#5-SubscriberMethodFinder" class="headerlink" title="5 SubscriberMethodFinder"></a>5 SubscriberMethodFinder</h1><p>该类用于查找订阅者的方法：</p><h2 id="5-1-成员变量"><a href="#5-1-成员变量" class="headerlink" title="5.1 成员变量"></a>5.1 成员变量</h2><p>我们来看一些核心的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BRIDGE = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x1000</span>;</span><br><span class="line"><span class="comment">// 方法校验位。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;</span><br><span class="line"><span class="comment">// 方法缓存，key 为订阅者的 class 实例，value 为订阅方法的 list；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下三个变量的值来自 EventBusBuilder，意思我已经解释过了；</span></span><br><span class="line"><span class="keyword">private</span> List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> strictMethodVerification;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ignoreGeneratedIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于保存 FindState 对象，每一个 FindState 用于记录查询订阅方法的结果和状态；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FindState[] FIND_STATE_POOL = <span class="keyword">new</span> FindState[POOL_SIZE];</span><br></pre></td></tr></table></figure><p>这里可以看到，subscriberInfoIndexes 是要手动设置到 EventBusBuilder 中；</p><h2 id="5-2-new-SubscriberMethodFinder"><a href="#5-2-new-SubscriberMethodFinder" class="headerlink" title="5.2 new SubscriberMethodFinder"></a>5.2 new SubscriberMethodFinder</h2><ul><li>参数 <strong>List<subscriberinfoindex> subscriberInfoIndexes</subscriberinfoindex></strong>：表示 SubscriberInfoIndex 集合，就是通过 APT 技术生成的，存储了订阅方法的对象；</li><li>参数 <strong>boolean strictMethodVerification</strong>：是否强制方法校验，默认为 false；</li><li>参数 <strong>boolean ignoreGeneratedIndex</strong>：是否强制使用反射，即使开启了 APT 特性；默认为 false；</li></ul><p>以上参数值均来自于 EventBusBuilder 中的默认值/自定义值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SubscriberMethodFinder(List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes, <span class="keyword">boolean</span> strictMethodVerification,</span><br><span class="line">                       <span class="keyword">boolean</span> ignoreGeneratedIndex) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriberInfoIndexes = subscriberInfoIndexes;</span><br><span class="line">    <span class="keyword">this</span>.strictMethodVerification = strictMethodVerification;</span><br><span class="line">    <span class="keyword">this</span>.ignoreGeneratedIndex = ignoreGeneratedIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-findSubscriberMethods"><a href="#5-3-findSubscriberMethods" class="headerlink" title="5.3 findSubscriberMethods"></a>5.3 findSubscriberMethods</h2><p>查询订阅者拥有的订阅方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】默认从方法 cache 中查询；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果从方法 cache中查询不到，那就判断是否不使用 GeneratedIndex；</span></span><br><span class="line">    <span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.1】不使用的话，就通过反射的方式访问方法；</span></span><br><span class="line">        subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.2】使用的话，就通过 GeneratedIndex 获取方法；</span></span><br><span class="line">        subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</span><br><span class="line">                + <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】加入到方法 cache 中去；</span></span><br><span class="line">        METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class="line">        <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ignoreGeneratedIndex 默认是 false 的；</p><p>核心代码在 <strong>findUsingReflection</strong> 和 <strong>findUsingInfo</strong> 中！</p><h3 id="5-3-1-findUsingReflection-反射获取"><a href="#5-3-1-findUsingReflection-反射获取" class="headerlink" title="5.3.1 findUsingReflection - 反射获取"></a>5.3.1 findUsingReflection - 反射获取</h3><p>我们来看下通过反射是如何获取的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingReflection</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.4】返回一个 FindState 对象，用于记录查询的结果和状态；</span></span><br><span class="line">    FindState findState = prepareFindState();</span><br><span class="line">    <span class="comment">//【--&gt;6.2】初始化 FindState；</span></span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.5】通过发射的方式收集注解方法；</span></span><br><span class="line">        findUsingReflectionInSingleClass(findState);</span><br><span class="line">        <span class="comment">//【--&gt;6.3】处理其 superClass；</span></span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;5.6】返回所有的订阅方法；</span></span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 subscriberClass 是调用 register 方法所在的类，所以找父类肯定是向上搜索；</p><p>对于每一个调用了 register 的 class，都会创建一个 FindState 对象，保存相关信息；</p><h3 id="5-3-2-findUsingInfo-APT-获取"><a href="#5-3-2-findUsingInfo-APT-获取" class="headerlink" title="5.3.2 findUsingInfo - APT 获取"></a>5.3.2 findUsingInfo - APT 获取</h3><p>开启了 APT 预处理技术的话，那就通过动态生成的类获取，这个过程比反射更快；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;5.4】返回一个 FindState 对象，用于记录查询的结果和状态；</span></span><br><span class="line">    FindState findState = prepareFindState();</span><br><span class="line">    <span class="comment">//【--&gt;6.2】初始化 FindState；</span></span><br><span class="line">    findState.initForSubscriber(subscriberClass);</span><br><span class="line">    <span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;5.3.2.1】返回订阅者对应的 SubscriberInfo 实例，保存到 findState.subscriberInfo 中；</span></span><br><span class="line">        findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">        <span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【1】返回 SubscriberInfo 的所有订阅方法 SubscriberMethod[]；</span></span><br><span class="line">            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">            <span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;6.4】对方法做检查，和反射调用一个吊样；</span></span><br><span class="line">                <span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">                    <span class="comment">//【2】检查没啥问题，就加入到 findState.subscriberMethods 中；</span></span><br><span class="line">                    findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【--&gt;5.5】如果订阅者没有对应的 SubscriberInfo 实例，通过发射的方式收集注解方法；</span></span><br><span class="line">            findUsingReflectionInSingleClass(findState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;6.3】处理其 superClass；</span></span><br><span class="line">        findState.moveToSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;5.6】返回所有的订阅方法；</span></span><br><span class="line">    <span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里会优先获取通过 APT 技术生成的类，如果没有对应的 SubscriberInfo，那就仍然通过反射来获取方法 Method；</p><p>这里的 subscriberClass 是调用 register 方法所在的类，所以找父类肯定是向上搜索；</p><h4 id="5-3-2-1-getSubscriberInfo"><a href="#5-3-2-1-getSubscriberInfo" class="headerlink" title="5.3.2.1 getSubscriberInfo"></a>5.3.2.1 getSubscriberInfo</h4><p>返回订阅者对应的 SubscriberInfo 实例，前面我们知道 findState.subscriberInfo  在初始化的时候是 null 的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是针对于继承关系的，因为是先处理子类，再处理父类，所以先处理的子类的话，findState.subscriberInfo 肯定不是 null</span></span><br><span class="line">    <span class="comment">// 那么就要通过 subscriberInfo.getSuperSubscriberInfo() 获取父类的 SubscriberInfo。</span></span><br><span class="line">    <span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span> &amp;&amp; findState.subscriberInfo.getSuperSubscriberInfo() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();</span><br><span class="line">        <span class="comment">//【2】额外还要做一次 class 判断，因为 while 循环会调整 clazz；</span></span><br><span class="line">        <span class="keyword">if</span> (findState.clazz == superclassInfo.getSubscriberClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> superclassInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】通过 subscriberInfoIndexes 来查找，getSubscriberInfo 方法是动态类的内置方法，通过 class 实例获取 SubscriberInfo；</span></span><br><span class="line">    <span class="keyword">if</span> (subscriberInfoIndexes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberInfoIndex index : subscriberInfoIndexes) &#123;</span><br><span class="line">            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们知道，通过前面的分析，每一个订阅者都是一个 SubscriberInfo 实例！</p><h2 id="5-4-prepareFindState"><a href="#5-4-prepareFindState" class="headerlink" title="5.4 prepareFindState"></a>5.4 prepareFindState</h2><p>主要是为每个 find 操作，创建一个 FindState 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FindState <span class="title">prepareFindState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (FIND_STATE_POOL) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">            FindState state = FIND_STATE_POOL[i];</span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                FIND_STATE_POOL[i] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;6】返回了一个 FindState 实例；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FindState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，<strong>FIND_STATE_POOL</strong> 是空的，所以会创建一个新的 <strong>FindState</strong> 实例；</p><h2 id="5-5-findUsingReflectionInSingleClass"><a href="#5-5-findUsingReflectionInSingleClass" class="headerlink" title="5.5 findUsingReflectionInSingleClass"></a>5.5 findUsingReflectionInSingleClass</h2><p>通过反射的方式获取注册方法，通过 SubscriberMethod 实例封装，保存到 findState.subscriberMethods 中：</p><p>参数为 FindState 实例，这里获取方法的是通过 findState.clazz，这个要注意；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    Method[] methods;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【0】这个方法比 getMethods 快，特别是当订阅者是像活动这样的方法很多的类的时候；</span></span><br><span class="line">        methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">        <span class="comment">// 可能会抛出 java.lang.NoClassDefFoundError, see [https://github.com/greenrobot/EventBus/issues/149]</span></span><br><span class="line">        <span class="comment">// 这里会使用 getMethods() 方法获取，注意，会跳过父类；</span></span><br><span class="line">        methods = findState.clazz.getMethods();</span><br><span class="line">        findState.skipSuperClasses = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">        <span class="comment">//【1】这里是对 method 方法访问域做校验，必须是 public，不能是 abstract 和 static 的；</span></span><br><span class="line">        <span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//【1.1】获取方法对应的注解 Subscribe，只处理被该注解修饰的方法;</span></span><br><span class="line">                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</span><br><span class="line">                <span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1.2】获取方法对应的参数；</span></span><br><span class="line">                    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//【--&gt;6.4】检查要添加方法的信息，没问题的话，就创建方法对应的 SubscriberMethod，添加到 findState.subscriberMethods；</span></span><br><span class="line">                    <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                        <span class="comment">//【1.3】获取订阅的分发线程信息；</span></span><br><span class="line">                        ThreadMode threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                        <span class="comment">//【1.4】创建方法对应的 SubscriberMethod，添加到 findState.subscriberMethods；</span></span><br><span class="line">                        <span class="comment">// SubscriberMethod 参数：订阅方法 method，订阅事件的 class 实例 eventType，线程模式 threadMode，优先级，粘性；</span></span><br><span class="line">                        findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode,</span><br><span class="line">                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">                <span class="comment">//【2】如果开启方法校验，那么被 @Subscribe 修饰的方法只能一个参数；</span></span><br><span class="line">                String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName +</span><br><span class="line">                        <span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">            String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName +</span><br><span class="line">                    <span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>strictMethodVerification</strong> 表示是否强制校验方法的访问修饰符；</p><h2 id="5-6-getMethodsAndRelease"><a href="#5-6-getMethodsAndRelease" class="headerlink" title="5.6 getMethodsAndRelease"></a>5.6 getMethodsAndRelease</h2><p>返回收集到的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">getMethodsAndRelease</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】通过 FindState 获取查询到的方法；</span></span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(findState.subscriberMethods);</span><br><span class="line">    <span class="comment">//【--&gt;6.5】clear 掉缓存；</span></span><br><span class="line">    findState.recycle();</span><br><span class="line">    <span class="keyword">synchronized</span> (FIND_STATE_POOL) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FIND_STATE_POOL[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                FIND_STATE_POOL[i] = findState; <span class="comment">// 将这个对象缓存下来，防止频繁的创建 FindState 对象；</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-FindState"><a href="#6-FindState" class="headerlink" title="6 FindState"></a>6 FindState</h1><p>FindState 是 SubscriberMethodFinder 的内部类，用于保存查询的结果和状态信息（包括子类和父类）：</p><h2 id="6-1-成员变量"><a href="#6-1-成员变量" class="headerlink" title="6.1 成员变量"></a>6.1 成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FindState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存订阅者的方法 SubscriberMethod；</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 保存订阅事件 class 实例 和 [订阅方法 Method/所属 FindState] 的映射关系；</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;Class, Object&gt; anyMethodByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 保存了 methodKey 和 method 所属的订阅类的 class 实例；</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Class&gt; subscriberClassByMethodKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 用于生成 subscriberClassByMethodKey 中的 methodKey</span></span><br><span class="line">    <span class="keyword">final</span> StringBuilder methodKeyBuilder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; subscriberClass; <span class="comment">// 订阅者 class 实例，也就是调用 register 方法的类；</span></span><br><span class="line">    Class&lt;?&gt; clazz; <span class="comment">// 初始化时，取值和 subscriberClass 一样，但是在处理继承关系时，会转为 superClass</span></span><br><span class="line">    <span class="keyword">boolean</span> skipSuperClasses; <span class="comment">// 是否 skip 父类，初始化为 false；</span></span><br><span class="line">    SubscriberInfo subscriberInfo; <span class="comment">// 订阅者信息，开启了 APT 才有，否则为 null；</span></span><br></pre></td></tr></table></figure><ul><li>subscriberClassByMethodKey：如果存在继承关系，同时方法有覆盖，那么以子类为准；</li></ul><h2 id="6-2-initForSubscriber"><a href="#6-2-initForSubscriber" class="headerlink" title="6.2 initForSubscriber"></a>6.2 initForSubscriber</h2><p>初始化操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initForSubscriber</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】初始化：subscriberClass == clazz</span></span><br><span class="line">    <span class="keyword">this</span>.subscriberClass = clazz = subscriberClass;</span><br><span class="line">    skipSuperClasses = <span class="keyword">false</span>;</span><br><span class="line">    subscriberInfo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-moveToSuperclass"><a href="#6-3-moveToSuperclass" class="headerlink" title="6.3 moveToSuperclass"></a>6.3 moveToSuperclass</h2><p>跳转到 superClass，处理父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveToSuperclass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果要跳过 superClass，那么 clazz 为 null；</span></span><br><span class="line">    <span class="keyword">if</span> (skipSuperClasses) &#123;</span><br><span class="line">        clazz = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】获取其 superClass；</span></span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">        String clazzName = clazz.getName();</span><br><span class="line">        <span class="comment">//【3】跳过系统的类；</span></span><br><span class="line">        <span class="keyword">if</span> (clazzName.startsWith(<span class="string">"java."</span>) || clazzName.startsWith(<span class="string">"javax."</span>) || clazzName.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            clazz = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了；</p><h2 id="6-4-checkAdd"><a href="#6-4-checkAdd" class="headerlink" title="6.4 checkAdd"></a>6.4 checkAdd</h2><p>检查要添加方法的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkAdd</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里会将订阅事件 class 实例 --&gt; 订阅方法 Method 放入 anyMethodByEventType 中；</span></span><br><span class="line">    <span class="comment">// 同时会返回以之前已经存在的 value；</span></span><br><span class="line">    Object existing = anyMethodByEventType.put(eventType, method);</span><br><span class="line">    <span class="keyword">if</span> (existing == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//【2】如果是第一次添加，那么 check 成功，直接返回 true；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】如果之前添加过 eventType，说明可能一个类有多个处理该 eventType 的函数；</span></span><br><span class="line">        <span class="comment">// 也有可能是有继承关系，此时处理的是父类的方法，子类覆盖了父类的同名方法；</span></span><br><span class="line">        <span class="keyword">if</span> (existing <span class="keyword">instanceof</span> Method) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;6.4.1】检查已经添加的方法 existing 的方法签名，只有第二次处理同一个 eventType 才会进入这里</span></span><br><span class="line">            <span class="comment">// 此时该方法是会返回 true 的，因为第一次添加的 method 还没有做签名校验；</span></span><br><span class="line">            <span class="keyword">if</span> (!checkAddWithMethodSignature((Method) existing, eventType)) &#123;</span><br><span class="line">                <span class="comment">// Paranoia check</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】这里很奇怪，直接将之前的 Method 替换成了 FindState 实例；</span></span><br><span class="line">            <span class="comment">// 如果有多个方法都处理同一个 eventType 的话，显然 value 就不是 Method 的实例了；</span></span><br><span class="line">            anyMethodByEventType.put(eventType, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;6.4.1】检查新添加的方法 method 的方法签名；</span></span><br><span class="line">        <span class="keyword">return</span> checkAddWithMethodSignature(method, eventType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，作者其实在注释里面也有说明：有两级的检查：</p><ul><li>第一级：检查时间类型；</li><li>第二级：检查方法签名；</li></ul><p>可能有多个处理该 eventType 的函数：</p><ul><li>只有第一次添加会进入 <code>if (existing instanceof Method) {</code> 分支；</li><li>第二次就会将 anyMethodByEventType 中的 value 从 Method 变为 FindState，那么就不会进入 <code>if (existing instanceof Method) {</code> 分支了；</li><li>无论一类多方法，还是继承一方法，都是上面的流程；</li></ul><p>（但是看作者的注释：貌似没有考虑一个订阅者有多个监听相同事件类型的方法。）</p><p>如果该 checkAdd 方法返回的是 false，那么 @Subscribe 修饰的方法就不会被收集！！！</p><h3 id="6-4-1-checkAddWithMethodSignature"><a href="#6-4-1-checkAddWithMethodSignature" class="headerlink" title="6.4.1 checkAddWithMethodSignature"></a>6.4.1 checkAddWithMethodSignature</h3><p>检查方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAddWithMethodSignature</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">    methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">    methodKeyBuilder.append(method.getName());</span><br><span class="line">    methodKeyBuilder.append(<span class="string">'&gt;'</span>).append(eventType.getName());</span><br><span class="line">    <span class="comment">//【1】生成 methodKey：methodName&gt;eventTypeName</span></span><br><span class="line">    String methodKey = methodKeyBuilder.toString();</span><br><span class="line">    <span class="comment">//【2】获取方法所在的类 class 实例；</span></span><br><span class="line">    Class&lt;?&gt; methodClass = method.getDeclaringClass();</span><br><span class="line">    <span class="comment">//【3】将 methodKey 和 methodClass 的映射关系放入 subscriberClassByMethodKey 中，同时返回旧的 value；</span></span><br><span class="line">    Class&lt;?&gt; methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);</span><br><span class="line">    <span class="comment">//【4】这里针对 old class 实例和 new class 做了比较；</span></span><br><span class="line">    <span class="comment">// 如果是第一次 add ，或者有 old class 实例，同时 old class 是 new class 的 super class</span></span><br><span class="line">    <span class="comment">// 那么就用 new class 替换旧的值；</span></span><br><span class="line">    <span class="keyword">if</span> (methodClassOld == <span class="keyword">null</span> || methodClassOld.isAssignableFrom(methodClass)) &#123;</span><br><span class="line">        <span class="comment">// Only add if not already found in a sub class</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Revert the put, old class is further down the class hierarchy</span></span><br><span class="line">        subscriberClassByMethodKey.put(methodKey, methodClassOld); <span class="comment">// 恢复旧的值；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实际上是方法的签名：方法名&gt;参数</p><p>对于同一个类，如果有多个函数处理同一个 eventType，显然方法签名是不一样的，那么这个 checkAddWithMethodSignature 返回的是 true；</p><p>对于继承关系，对于子类和父类有相同的方法签名的情况，以子类为准，也就是说父类的同名同参方法是不会被收集的 checkAddWithMethodSignature 返回的是 false；；</p><h2 id="6-5-recycle"><a href="#6-5-recycle" class="headerlink" title="6.5 recycle"></a>6.5 recycle</h2><p>回收内部的变量，就是 clear 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    subscriberMethods.clear();</span><br><span class="line">    anyMethodByEventType.clear();</span><br><span class="line">    subscriberClassByMethodKey.clear();</span><br><span class="line">    methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">    subscriberClass = <span class="keyword">null</span>;</span><br><span class="line">    clazz = <span class="keyword">null</span>;</span><br><span class="line">    skipSuperClasses = <span class="keyword">false</span>;</span><br><span class="line">    subscriberInfo = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不多说了，啊哈哈哈哈哈～～</p><h1 id="7-Subscription"><a href="#7-Subscription" class="headerlink" title="7 Subscription"></a>7 Subscription</h1><p>表示一种订阅关系；</p><h2 id="7-1-成员变量"><a href="#7-1-成员变量" class="headerlink" title="7.1 成员变量"></a>7.1 成员变量</h2><p>我们来看下成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object subscriber; <span class="comment">// 订阅者；</span></span><br><span class="line">    <span class="keyword">final</span> SubscriberMethod subscriberMethod; <span class="comment">// 订阅方法；</span></span><br></pre></td></tr></table></figure><h2 id="7-2-new-Subscription"><a href="#7-2-new-Subscription" class="headerlink" title="7.2 new Subscription"></a>7.2 new Subscription</h2><p>创建订阅关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Subscription(Object subscriber, SubscriberMethod subscriberMethod) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subscriber = subscriber; <span class="comment">// 订阅者；</span></span><br><span class="line">    <span class="keyword">this</span>.subscriberMethod = subscriberMethod; <span class="comment">// 订阅方法；</span></span><br><span class="line">    active = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>我们分析了 EventBus 的创建，注册和反注册，整个初始化和注册的过程主要分为下面的基本：</p><ul><li>通过 EventBusBuilder 创建 EventBus；</li><li>EventBus 收集当前类以及其父类所有的订阅方法；</li><li>根据事件类型和每一个订阅方法，创建订阅关系；</li></ul><p>遗留了如下的几个问题：</p><ul><li>post 操作的执行流程；</li><li>不同线程模式的消息是如何分发和处理的；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://lishuaiqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第二篇 - Subscribe 注解处理</title>
    <link href="https://lishuaiqi.top/2019/08/27/Eventbus-2-SubscribeProcessor/"/>
    <id>https://lishuaiqi.top/2019/08/27/Eventbus-2-SubscribeProcessor/</id>
    <published>2019-08-27T12:46:25.000Z</published>
    <updated>2019-09-16T14:13:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第二篇，主要分析 Subscribe 注解的处理；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以捆成是 Handler + Thread 的替代品。</p><h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1 回顾"></a>1 回顾</h1><p>我们在使用的过程中，需要设置接收消息的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">   ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解  Subscribe 可以说是 EventBus 的核心了，我们知道，3.x 版本之前，EventBus 使用的是运行时注解，其实就是 Java 的反射机制，但是这带来了性能的损耗！</p><p>因此，从 3.x 开始，Eventbus 引入了编译时注解处理的特性，核心类就是 EventBusAnnotationProcessor！ </p><p>我们来看看注解的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subscribe &#123;</span><br><span class="line">    <span class="function">ThreadMode <span class="title">threadMode</span><span class="params">()</span> <span class="keyword">default</span> ThreadMode.POSTING</span>; <span class="comment">// 线程模型：默认 POSTING</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sticky</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>; <span class="comment">// 默认非粘性；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> 0</span>; <span class="comment">// 优先级为 0；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Subscribe 用于修饰方法，并且可以保留到运行时，这是因为默认情况下，EventBus 是通过运行时注解，反射加载方法的，除非开启编译时注解处理机制；</p><h1 id="2-EventBusAnnotationProcessor-Subscribe-处理"><a href="#2-EventBusAnnotationProcessor-Subscribe-处理" class="headerlink" title="2 EventBusAnnotationProcessor - Subscribe 处理"></a>2 EventBusAnnotationProcessor - Subscribe 处理</h1><p>浏览 EventBus 的源码目录，我们能看到处理 Subscribe 注解的是 EventBusAnnotationProcessor 类，依然是编译时注解，动态生成代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(<span class="string">"org.greenrobot.eventbus.Subscribe"</span>)</span><br><span class="line"><span class="meta">@SupportedOptions</span>(value = &#123;<span class="string">"eventBusIndex"</span>, <span class="string">"verbose"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusAnnotationProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>可以看到，它支持的只有一个注解：Subscribe</p><p>同时他支持两个配置属性：</p><ul><li>eventBusIndex：是否开启编译时注解处理，这个特性是 3.x 版本新增的，也就是将运行时的处理放到了编译时注解处理，动态生成 java 代码，用于提升框架的性能；</li><li>verbose：用于控制 log，调试使用；</li></ul><p>这两个属性是在 gradle 中配置的；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="string">eventBusIndex:</span><span class="string">'com.monster.android.wild.MyEventBusIndex'</span>, <span class="string">verbose :</span> <span class="string">"true"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    api <span class="string">'org.greenrobot:eventbus:3.1.0'</span></span><br><span class="line">    annotationProcessor <span class="string">'org.greenrobot:eventbus-annotation-processor:3.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在下面的分析中就能看到，注解处理器对于这几个参数的处理：</p><h2 id="2-1-成员变量"><a href="#2-1-成员变量" class="headerlink" title="2.1 成员变量"></a>2.1 成员变量</h2><p>EventBusAnnotationProcessor 内部如下的变量和常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_EVENT_BUS_INDEX = <span class="string">"eventBusIndex"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPTION_VERBOSE = <span class="string">"verbose"</span>;</span><br></pre></td></tr></table></figure><p>上面的变量用于获取 gradle 的环境变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存订阅者（类）和其订阅方法（注解修饰的方法）的映射关系；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass = <span class="keyword">new</span> ListMap&lt;&gt;(); </span><br><span class="line"><span class="comment">// 保存需要跳过的订阅者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;TypeElement&gt; classesToSkip = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> writerRoundDone;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> round;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> verbose;</span><br></pre></td></tr></table></figure><h2 id="2-2-process"><a href="#2-2-process" class="headerlink" title="2.2 process"></a>2.2 process</h2><p>依然是核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">  Messager messager = processingEnv.getMessager();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//【1】获取 eventBusIndex 编译属性，并判断是否有设置这个，没有的话就不处理；</span></span><br><span class="line">    String index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="keyword">null</span>) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"No option "</span> + OPTION_EVENT_BUS_INDEX +</span><br><span class="line">                            <span class="string">" passed to annotation processor"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】判断是否要输出 log；</span></span><br><span class="line">    verbose = Boolean.parseBoolean(processingEnv.getOptions().get(OPTION_VERBOSE));</span><br><span class="line">    <span class="comment">//【3】获取动态创建的 java 类的类名；</span></span><br><span class="line">    <span class="keyword">int</span> lastPeriod = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">    String indexPackage = lastPeriod != -<span class="number">1</span> ? index.substring(<span class="number">0</span>, lastPeriod) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    round++;</span><br><span class="line">    <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"Processing round "</span> + round + <span class="string">", new annotations: "</span> +</span><br><span class="line">                            !annotations.isEmpty() + <span class="string">", processingOver: "</span> + env.processingOver());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env.processingOver()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!annotations.isEmpty()) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR,</span><br><span class="line">                              <span class="string">"Unexpected processing state: annotations still available after processing over"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (annotations.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writerRoundDone) &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.ERROR,</span><br><span class="line">                            <span class="string">"Unexpected processing state: annotations still available after writing."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.1】收集注解 Subscribe 修饰的元素；</span></span><br><span class="line">    collectSubscribers(annotations, env, messager);</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2】检查某些注解是否要忽略；</span></span><br><span class="line">    checkForSubscribersToSkip(messager, indexPackage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!methodsByClass.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">//【--&gt;2.2.3】如果收集到了被注解修饰的方法，那么就动态创建 java 类；</span></span><br><span class="line">      createInfoIndexFile(index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      messager.printMessage(Diagnostic.Kind.WARNING, <span class="string">"No @Subscribe annotations found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    writerRoundDone = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Unexpected error in EventBusAnnotationProcessor: "</span> + e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程很简单，不多 say；</p><h3 id="2-2-1-collectSubscribers-收集"><a href="#2-2-1-collectSubscribers-收集" class="headerlink" title="2.2.1 collectSubscribers - 收集"></a>2.2.1 collectSubscribers - 收集</h3><p>收集注解 Subscribe 修饰的元素；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectSubscribers</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeElement annotation : annotations) &#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = env.getElementsAnnotatedWith(annotation); <span class="comment">// 获得 Subscribe 修饰的所有元素；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element <span class="keyword">instanceof</span> ExecutableElement) &#123;</span><br><span class="line">                ExecutableElement method = (ExecutableElement) element;</span><br><span class="line">                <span class="comment">//【--&gt;2.2.1.1】检查注解修饰的方法是否满足条件；</span></span><br><span class="line">                <span class="keyword">if</span> (checkHasNoErrors(method, messager)) &#123;</span><br><span class="line">                    <span class="comment">//【1】获得方法所属的类元素，加入到 methodsByClass 哈希表中；</span></span><br><span class="line">                    TypeElement classElement = (TypeElement) method.getEnclosingElement();</span><br><span class="line">                    methodsByClass.putElement(classElement, method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"@Subscribe is only valid for methods"</span>, element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-1-1-checkHasNoErrors"><a href="#2-2-1-1-checkHasNoErrors" class="headerlink" title="2.2.1.1 checkHasNoErrors"></a>2.2.1.1 checkHasNoErrors</h4><p>检查是否有错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkHasNoErrors</span><span class="params">(ExecutableElement element, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】方法不能是 static 的；</span></span><br><span class="line">    <span class="keyword">if</span> (element.getModifiers().contains(Modifier.STATIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must not be static"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】方法必须是 public 的；</span></span><br><span class="line">    <span class="keyword">if</span> (!element.getModifiers().contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must be public"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】方法必须至少有一个 param；</span></span><br><span class="line">    List&lt;? extends VariableElement&gt; parameters = ((ExecutableElement) element).getParameters();</span><br><span class="line">    <span class="keyword">if</span> (parameters.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Subscriber method must have exactly 1 parameter"</span>, element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说；</p><h3 id="2-2-2-checkForSubscribersToSkip"><a href="#2-2-2-checkForSubscribersToSkip" class="headerlink" title="2.2.2 checkForSubscribersToSkip"></a>2.2.2 checkForSubscribersToSkip</h3><p>跳过一些订阅者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForSubscribersToSkip</span><span class="params">(Messager messager, String myPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历收集到所有的订阅者；</span></span><br><span class="line">    <span class="keyword">for</span> (TypeElement skipCandidate : methodsByClass.keySet()) &#123;</span><br><span class="line">        TypeElement subscriberClass = skipCandidate;</span><br><span class="line">        <span class="keyword">while</span> (subscriberClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2.1】判断下注解方法所属的类是否满足条件，如果不满足，加入到 classesToSkip 跳过；</span></span><br><span class="line">            <span class="keyword">if</span> (!isVisible(myPackage, subscriberClass)) &#123;</span><br><span class="line">                <span class="comment">//【2】将要跳过的 class 加入到 classesToSkip 集合中；</span></span><br><span class="line">                <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                    String msg;</span><br><span class="line">                    <span class="keyword">if</span> (subscriberClass.equals(skipCandidate)) &#123; <span class="comment">// 是当前类，还是父类呢？</span></span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because class is not public"</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        msg = <span class="string">"Falling back to reflection because "</span> + skipCandidate +</span><br><span class="line">                                <span class="string">" has a non-public super class"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【3】处理类（包括父类）所有的注解方法：</span></span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberClass);</span><br><span class="line">            <span class="keyword">if</span> (methods != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//【3.1】遍历该类的注解方法，处理方法的参数；</span></span><br><span class="line">                <span class="keyword">for</span> (ExecutableElement method : methods) &#123;</span><br><span class="line">                    String skipReason = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//【3.2】获取注解方法的第一个参数（意味着第一个参数必须是消息对象）</span></span><br><span class="line">                    VariableElement param = method.getParameters().get(<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">//【--&gt;2.2.2.2】获取被注解方法的参数类型；</span></span><br><span class="line">                    TypeMirror typeMirror = getParamTypeMirror(param, messager);</span><br><span class="line">                    <span class="comment">//【3.3】如果参数的类型不是类/接口，那么就跳过该类；</span></span><br><span class="line">                    <span class="keyword">if</span> (!(typeMirror <span class="keyword">instanceof</span> DeclaredType) ||</span><br><span class="line">                            !(((DeclaredType) typeMirror).asElement() <span class="keyword">instanceof</span> TypeElement)) &#123;</span><br><span class="line">                        skipReason = <span class="string">"event type cannot be processed"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3.4】如果上面满足条件，那就判断下参数是否可以访问；</span></span><br><span class="line">                    <span class="keyword">if</span> (skipReason == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();</span><br><span class="line">                        <span class="comment">//【--&gt;2.2.2.1】判断下注解方法所属的类是否满足条件，如果不满足，加入到 classesToSkip 跳过；</span></span><br><span class="line">                        <span class="keyword">if</span> (!isVisible(myPackage, eventTypeElement)) &#123;</span><br><span class="line">                            skipReason = <span class="string">"event type is not public"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (skipReason != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         <span class="comment">//【3.2】将要跳过的 class 加入到 classesToSkip 集合中；</span></span><br><span class="line">                        <span class="keyword">boolean</span> added = classesToSkip.add(skipCandidate);</span><br><span class="line">                        <span class="keyword">if</span> (added) &#123;</span><br><span class="line">                            String msg = <span class="string">"Falling back to reflection because "</span> + skipReason;</span><br><span class="line">                            <span class="keyword">if</span> (!subscriberClass.equals(skipCandidate)) &#123;</span><br><span class="line">                                msg += <span class="string">" (found in super class for "</span> + skipCandidate + <span class="string">")"</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.2.2.3】获取其父类对应的元素，然后 while 循环继续处理其 super class；</span></span><br><span class="line">            subscriberClass = getSuperclass(subscriberClass); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，默认我们获得的是注解方法所在的当前类，但是 while 循环还会继续处理其父类；</p><ul><li>先处理子类，再处理父类；</li><li>被注解的方法的第一个参数必须是要处理的消息；</li><li>消息类型必须是类/接口的实现；</li></ul><h4 id="2-2-2-1-isVisible"><a href="#2-2-2-1-isVisible" class="headerlink" title="2.2.2.1 isVisible"></a>2.2.2.1 isVisible</h4><p>用来判断注解方法所属的类是否满足条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVisible</span><span class="params">(String myPackage, TypeElement typeElement)</span> </span>&#123;</span><br><span class="line">    Set&lt;Modifier&gt; modifiers = typeElement.getModifiers();</span><br><span class="line">    <span class="keyword">boolean</span> visible;</span><br><span class="line">    <span class="comment">//【1】该类必须是 public 的；</span></span><br><span class="line">    <span class="keyword">if</span> (modifiers.contains(Modifier.PUBLIC)) &#123;</span><br><span class="line">        visible = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//【2】该类不能是 private/protected 的；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) &#123;</span><br><span class="line">        visible = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】默认访问权限；</span></span><br><span class="line">        <span class="comment">//【--&gt;2.2.2.1.1】获得注解方法所属类的包元素名（包名）；</span></span><br><span class="line">        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();</span><br><span class="line">        <span class="keyword">if</span> (myPackage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            visible = subscriberPackage.length() == <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 正常情况进入这里：</span></span><br><span class="line">            <span class="comment">//【3】就是说注解方法所说的类必须和 eventBusIndex 指定的要动态生成的 java 类属于同一个包下；</span></span><br><span class="line">            visible = myPackage.equals(subscriberPackage); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数 myPackage</strong> 是我们 eventBusIndex 指定的要动态生成的 java 类的 class Name；</p><p><strong>参数 TypeElement typeElement</strong> 则是注解方法所在的类元素；</p><p>可以看到，注解方法所属的类必须要满足一下的条件：</p><ul><li>如果是 <strong>public</strong>，那就是可见的 visible 为 true；</li><li>如果是 <strong>private/protected</strong>，那就是不可见的；</li><li>如果是 <strong>default</strong>，那么 必须和 <strong>eventBusIndex</strong> 指定的要动态生成的 <strong>java</strong> 类属于同一个包下；</li></ul><h5 id="2-2-2-1-1-getPackageElement"><a href="#2-2-2-1-1-getPackageElement" class="headerlink" title="2.2.2.1.1 getPackageElement"></a>2.2.2.1.1 getPackageElement</h5><p>获得注解方法所属类的包元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PackageElement <span class="title">getPackageElement</span><span class="params">(TypeElement subscriberClass)</span> </span>&#123;</span><br><span class="line">    Element candidate = subscriberClass.getEnclosingElement();</span><br><span class="line">    <span class="comment">//【1】这里的 while 不断循环处理，直到 candidate 是一个包元素；</span></span><br><span class="line">    <span class="keyword">while</span> (!(candidate <span class="keyword">instanceof</span> PackageElement)) &#123;</span><br><span class="line">        candidate = candidate.getEnclosingElement();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PackageElement) candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了 <strong>TypeElement. getenclosingelement()</strong> 的方法：</p><blockquote><p>返回封装此元素（非严格意义上）的最里层元素。</p><p>如果此元素的声明在词法上直接封装在另一个元素的声明中，则返回那个封装元素。<br>如果此元素是顶层类型，则返回它的包。<br>如果此元素是一个包，则返回 null。<br>如果此元素是一个类型参数，则返回 null。</p></blockquote><h4 id="2-2-2-2-getParamTypeMirror"><a href="#2-2-2-2-getParamTypeMirror" class="headerlink" title="2.2.2.2 getParamTypeMirror"></a>2.2.2.2 getParamTypeMirror</h4><p>获取注解方法的参数的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TypeMirror <span class="title">getParamTypeMirror</span><span class="params">(VariableElement param, Messager messager)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取参数的类型；</span></span><br><span class="line">    TypeMirror typeMirror = param.asType();</span><br><span class="line">    <span class="comment">// Check for generic type</span></span><br><span class="line">    <span class="keyword">if</span> (typeMirror <span class="keyword">instanceof</span> TypeVariable) &#123;</span><br><span class="line">        <span class="comment">//【1.1】判断参数类型是否有上边界，如果有的话，那就使用上边界为参数类型；</span></span><br><span class="line">        TypeMirror upperBound = ((TypeVariable) typeMirror).getUpperBound();</span><br><span class="line">        <span class="keyword">if</span> (upperBound <span class="keyword">instanceof</span> DeclaredType) &#123; <span class="comment">// 上边界是类或接口类型；</span></span><br><span class="line">            <span class="keyword">if</span> (messager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                messager.printMessage(Diagnostic.Kind.NOTE, <span class="string">"Using upper bound type "</span> + upperBound +</span><br><span class="line">                        <span class="string">" for generic parameter"</span>, param);</span><br><span class="line">            &#125;</span><br><span class="line">            typeMirror = upperBound; <span class="comment">// 就将上边界类型作为参数类型：</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> typeMirror;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们用到了这个方法 <strong>TypeVariable.getUpperBound()</strong></p><blockquote><p>返回：此类型变量的上边界</p><p>如果此类型变量被声明为没有明确上边界，则结果为 <code>java.lang.object</code>。<br>如果此类型变量被声明为有多个上边界，则结果是一个交集类型（建模为 <code>declaredtype</code>）。<br>通过检查结果的超类型，可以发现个别边界。</p></blockquote><p>这个是什么意思呢？举个简单的栗子，下面是我们的消息类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMessage</span> </span>&#123;&#125; <span class="comment">// 返回上边界 BaseMessage，为了使用多态；</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;      <span class="comment">// 返回 Message 对应的类型；</span></span><br></pre></td></tr></table></figure><p>这样解释就简单了吧！</p><h4 id="2-2-2-3-getSuperclass"><a href="#2-2-2-3-getSuperclass" class="headerlink" title="2.2.2.3 getSuperclass"></a>2.2.2.3 getSuperclass</h4><p>获取当前类的父类元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> TypeElement <span class="title">getSuperclass</span><span class="params">(TypeElement type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】如果当前元素类型是类或者接口，才会获取父类；</span></span><br><span class="line">    <span class="keyword">if</span> (type.getSuperclass().getKind() == TypeKind.DECLARED) &#123;</span><br><span class="line">        <span class="comment">//【1.1】获取其直接父类；</span></span><br><span class="line">        TypeElement superclass = (TypeElement) processingEnv.getTypeUtils().asElement(type.getSuperclass());</span><br><span class="line">        String name = superclass.getQualifiedName().toString();</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"java."</span>) || name.startsWith(<span class="string">"javax."</span>) || name.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            <span class="comment">//【1.1.1】过滤掉 java/javax/android 系统类；</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> superclass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeKind 是枚举，保存了 Java 定义的所有的类型数据！</p><h3 id="2-2-3-createInfoIndexFile"><a href="#2-2-3-createInfoIndexFile" class="headerlink" title="2.2.3 createInfoIndexFile"></a>2.2.3 createInfoIndexFile</h3><p>动态生成 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createInfoIndexFile</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】创建 JavaFileObject 对象，用于生成 java 类；</span></span><br><span class="line">        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(index);</span><br><span class="line">        <span class="comment">//【2】生成 java 包名（eventBusIndex 最后一个 . 前面的字符串）和 java 类名（eventBusIndex 最后一个 . 后面的字符串）；</span></span><br><span class="line">        <span class="keyword">int</span> period = index.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        String myPackage = period &gt; <span class="number">0</span> ? index.substring(<span class="number">0</span>, period) : <span class="keyword">null</span>;</span><br><span class="line">        String clazz = index.substring(period + <span class="number">1</span>);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(sourceFile.openWriter());</span><br><span class="line">        <span class="keyword">if</span> (myPackage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            writer.write(<span class="string">"package "</span> + myPackage + <span class="string">";\n\n"</span>); <span class="comment">// 动态 java 类的包名；</span></span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SimpleSubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberMethodInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfo;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.meta.SubscriberInfoIndex;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import org.greenrobot.eventbus.ThreadMode;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.HashMap;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"import java.util.Map;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"/** This class is generated by EventBus, do not edit. */\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"public class "</span> + clazz + <span class="string">" implements SubscriberInfoIndex &#123;\n"</span>); <span class="comment">// 动态 java 类的类名</span></span><br><span class="line">        writer.write(<span class="string">"    private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    static &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\n\n"</span>);</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1】写入注解生成的信息；</span></span><br><span class="line">        writeIndexLines(writer, myPackage);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    private static void putIndex(SubscriberInfo info) &#123;\n"</span>); <span class="comment">// 写入内部的 putIndex 方法；</span></span><br><span class="line">        writer.write(<span class="string">"        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    @Override\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    public SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) &#123;\n"</span>); <span class="comment">// 写入的 getSubscriberInfo 方法；</span></span><br><span class="line">        writer.write(<span class="string">"        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        if (info != null) &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return info;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125; else &#123;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"            return null;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"        &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"    &#125;\n"</span>);</span><br><span class="line">        writer.write(<span class="string">"&#125;\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not write source for "</span> + index, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">//Silent</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的代码有些 low，竟然是硬编码写进去的；</p><p>生成了的代码会涉及到如下的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SimpleSubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberMethodInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfoIndex;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.ThreadMode;</span><br></pre></td></tr></table></figure><p>可以看到，这几个类定义在 eventbus 模块里，简单的说下：</p><ul><li><strong>SimpleSubscriberInfo</strong>：表示一个订阅者，就是 Subscribe 注解所在的类；</li><li><strong>SubscriberMethodInfo</strong>：表示一个订阅方法，就是 Subscribe 注解的方法；</li><li><strong>SubscriberInfo</strong>：接口，SimpleSubscriberInfo 继承了 AbstractSubscriberInfo，而 AbstractSubscriberInfo 实现了  SubscriberInfo 接口，<strong>适配器模式</strong>；</li><li><strong>SubscriberInfoIndex</strong>：接口，我们动态生成的 Java 类，实现了该接口；</li><li><strong>ThreadMode</strong>：枚举类型，表示线程类型；</li></ul><p>这里我们不多关注；</p><h4 id="2-2-3-1-writeIndexLines"><a href="#2-2-3-1-writeIndexLines" class="headerlink" title="2.2.3.1 writeIndexLines"></a>2.2.3.1 writeIndexLines</h4><p>这里就是将 methodsByClass 中收集到的信息写入到动态 java 类中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeIndexLines</span><span class="params">(BufferedWriter writer, String myPackage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历 methodsByClass 哈希表，跳过 classesToSkip 中的元素；</span></span><br><span class="line">    <span class="keyword">for</span> (TypeElement subscriberTypeElement : methodsByClass.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (classesToSkip.contains(subscriberTypeElement)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1.1】获得注解方法所在的类名；</span></span><br><span class="line">        String subscriberClass = getClassString(subscriberTypeElement, myPackage);</span><br><span class="line">        <span class="comment">//【--&gt;2.2.2.1】判断下动态 java 类所在的包是否可以访问注解所在类，可以的话，才写入！ </span></span><br><span class="line">        <span class="keyword">if</span> (isVisible(myPackage, subscriberTypeElement)) &#123;</span><br><span class="line">            writeLine(writer, <span class="number">2</span>,</span><br><span class="line">                    <span class="string">"putIndex(new SimpleSubscriberInfo("</span> + subscriberClass + <span class="string">".class,"</span>,</span><br><span class="line">                    <span class="string">"true,"</span>, <span class="string">"new SubscriberMethodInfo[] &#123;"</span>); <span class="comment">// 这个我就不分析了，一行一行的写入呗；</span></span><br><span class="line">            <span class="comment">//【2】获取注解的方法；</span></span><br><span class="line">            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberTypeElement);</span><br><span class="line">            <span class="comment">//【--&gt;2.2.3.1.2】将方法信息写入到 java 类中；</span></span><br><span class="line">            writeCreateSubscriberMethods(writer, methods, <span class="string">"new SubscriberMethodInfo"</span>, myPackage);</span><br><span class="line">            writer.write(<span class="string">"        &#125;));\n\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writer.write(<span class="string">"        // Subscriber not visible to index: "</span> + subscriberClass + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个参数表示的是否检查父类：<strong>shouldCheckSuperclass</strong>，传入的是 true；</p><h5 id="2-2-3-1-1-getClassString"><a href="#2-2-3-1-1-getClassString" class="headerlink" title="2.2.3.1.1 getClassString"></a>2.2.3.1.1 getClassString</h5><p>获取类名；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getClassString</span><span class="params">(TypeElement typeElement, String myPackage)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.2.2.1.1】获取注解所在的类的包元素；</span></span><br><span class="line">    PackageElement packageElement = getPackageElement(typeElement);</span><br><span class="line">    <span class="comment">//【1】获取所在包名；</span></span><br><span class="line">    String packageString = packageElement.getQualifiedName().toString();</span><br><span class="line">    <span class="comment">//【2】获取类的全限定名；</span></span><br><span class="line">    String className = typeElement.getQualifiedName().toString();</span><br><span class="line">    <span class="keyword">if</span> (packageString != <span class="keyword">null</span> &amp;&amp; !packageString.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (packageString.equals(myPackage)) &#123;</span><br><span class="line">            <span class="comment">//【3】如果注解所在的类和动态生成的 java 类的包名一样；就截掉全限定名的包名部分（因为在同一个包嘛）</span></span><br><span class="line">            className = cutPackage(myPackage, className);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packageString.equals(<span class="string">"java.lang"</span>)) &#123;</span><br><span class="line">            className = typeElement.getSimpleName().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用内部的 cutPackage 去截取类名！</p><p>代码简单，就 String 的基本操作。。。</p><h5 id="2-2-3-1-2-writeCreateSubscriberMethods"><a href="#2-2-3-1-2-writeCreateSubscriberMethods" class="headerlink" title="2.2.3.1.2 writeCreateSubscriberMethods"></a>2.2.3.1.2 writeCreateSubscriberMethods</h5><p>将方法信息写入到 java 类中，参数 <strong>String callPrefix</strong> 的值：”new SubscriberMethodInfo”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeCreateSubscriberMethods</span><span class="params">(BufferedWriter writer, List&lt;ExecutableElement&gt; methods,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          String callPrefix, String myPackage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】遍历方法 list；</span></span><br><span class="line">    <span class="keyword">for</span> (ExecutableElement method : methods) &#123;</span><br><span class="line">        List&lt;? extends VariableElement&gt; parameters = method.getParameters();</span><br><span class="line">        TypeMirror paramType = getParamTypeMirror(parameters.get(<span class="number">0</span>), <span class="keyword">null</span>); <span class="comment">//【--&gt;2.2.2.2】注解方法的参数的类型;</span></span><br><span class="line">        TypeElement paramElement = (TypeElement) processingEnv.getTypeUtils().asElement(paramType);</span><br><span class="line">        <span class="comment">//【1.1】获取方法名；</span></span><br><span class="line">        String methodName = method.getSimpleName().toString();</span><br><span class="line">        <span class="comment">//【--&gt;2.2.3.1.2】获取方法参数（事件）的类名；</span></span><br><span class="line">        String eventClass = getClassString(paramElement, myPackage) + <span class="string">".class"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1.3】获取 Subscribe 注解对象；</span></span><br><span class="line">        Subscribe subscribe = method.getAnnotation(Subscribe.class);</span><br><span class="line">        List&lt;String&gt; parts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        parts.add(callPrefix + <span class="string">"(\""</span> + methodName + <span class="string">"\","</span>); <span class="comment">//【1.4】第一个参数：methodName；</span></span><br><span class="line">        String lineEnd = <span class="string">"),"</span>;</span><br><span class="line">        <span class="comment">//【1.5】处理注解的 priority、sticky、threadMode 属性；</span></span><br><span class="line">        <span class="keyword">if</span> (subscribe.priority() == <span class="number">0</span> &amp;&amp; !subscribe.sticky()) &#123; <span class="comment">// 如果优先级为 0（默认）并且不是 sticky 事件，那么会进入 if；</span></span><br><span class="line">            <span class="comment">// 如果是默认类型的线程池，只要写入事件的类名；</span></span><br><span class="line">            <span class="comment">// 不是默认线程，那么还要写入线程枚举类型；</span></span><br><span class="line">            <span class="keyword">if</span> (subscribe.threadMode() == ThreadMode.POSTING) &#123;</span><br><span class="line">                parts.add(eventClass + lineEnd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parts.add(eventClass + <span class="string">","</span>);</span><br><span class="line">                parts.add(<span class="string">"ThreadMode."</span> + subscribe.threadMode().name() + lineEnd); <span class="comment">// 处理线程类型；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果指定了优先级，或者是粘性事件，这里会写入事件的类名，线程枚举类型，优先级，粘性状态；</span></span><br><span class="line">            parts.add(eventClass + <span class="string">","</span>);</span><br><span class="line">            parts.add(<span class="string">"ThreadMode."</span> + subscribe.threadMode().name() + <span class="string">","</span>);</span><br><span class="line">            parts.add(subscribe.priority() + <span class="string">","</span>);</span><br><span class="line">            parts.add(subscribe.sticky() + lineEnd);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLine(writer, <span class="number">3</span>, parts.toArray(<span class="keyword">new</span> String[parts.size()]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">            processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, <span class="string">"Indexed @Subscribe at "</span> +</span><br><span class="line">                    method.getEnclosingElement().getSimpleName() + <span class="string">"."</span> + methodName +</span><br><span class="line">                    <span class="string">"("</span> + paramElement.getSimpleName() + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程是处理注解方法和注解参数的过程；</p><h1 id="3-动态-Java-类实例"><a href="#3-动态-Java-类实例" class="headerlink" title="3 动态 Java 类实例"></a>3 动态 Java 类实例</h1><p>我们可以看下动态生成的 Java 类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coolqi.top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SimpleSubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberMethodInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfo;</span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.meta.SubscriberInfoIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.greenrobot.eventbus.ThreadMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** This class is generated by EventBus, do not edit. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">moduleAppIndex</span> <span class="keyword">implements</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SUBSCRIBER_INDEX = <span class="keyword">new</span> HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();</span><br><span class="line">      </span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.EditPicActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread2"</span>, com.coolqi.common.beans.MessageEvent.class,</span><br><span class="line">                    ThreadMode.ASYNC, <span class="number">1</span>, <span class="keyword">true</span>),</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.ChangeDateActivity.class, <span class="keyword">true</span>, <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        putIndex(<span class="keyword">new</span> SimpleSubscriberInfo(com.coolqi.ui.normal.ExhibitionWebFragment.class, <span class="keyword">true</span>,</span><br><span class="line">                <span class="keyword">new</span> SubscriberMethodInfo[] &#123;</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onShowMessageChatNumberEvent"</span>, com.gensee.kzkt_res.bean.MessageChatNumber.class),</span><br><span class="line">            <span class="keyword">new</span> SubscriberMethodInfo(<span class="string">"onEventMainThread"</span>, com.coolqi.common.beans.MessageEvent.class),</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putIndex</span><span class="params">(SubscriberInfo info)</span> </span>&#123;</span><br><span class="line">        SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">        SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面我们简单的看下涉及到的类和接口，这些类都位于 eventbus 模块中！</p><p>后面再分析的时候，我们就不再过多关注这些类了！</p><h2 id="3-1-SubscriberInfoIndex"><a href="#3-1-SubscriberInfoIndex" class="headerlink" title="3.1 SubscriberInfoIndex"></a>3.1 SubscriberInfoIndex</h2><p>接口，动态生成的类实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SubscriberInfoIndex</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】用于获取订阅信息；</span></span><br><span class="line">    <span class="function">SubscriberInfo <span class="title">getSubscriberInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-SubscriberInfo"><a href="#3-2-SubscriberInfo" class="headerlink" title="3.2 SubscriberInfo"></a>3.2 SubscriberInfo</h2><p>接口，订阅者类实现该接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SubscriberInfo</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; getSubscriberClass(); <span class="comment">// 获取订阅者对应的类；</span></span><br><span class="line"></span><br><span class="line">    SubscriberMethod[] getSubscriberMethods(); <span class="comment">// 获取订阅方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="function">SubscriberInfo <span class="title">getSuperSubscriberInfo</span><span class="params">()</span></span>; <span class="comment">// 获取父类订阅者；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldCheckSuperclass</span><span class="params">()</span></span>; <span class="comment">// 是否检查父类，动态生成时，传入的是 true；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-AbstractSubscriberInfo"><a href="#3-3-AbstractSubscriberInfo" class="headerlink" title="3.3 AbstractSubscriberInfo"></a>3.3 AbstractSubscriberInfo</h2><p>抽象类，实现了 <strong>SubscriberInfo</strong> 接口，并实现了其部分接口，<strong>适配器模式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSubscriberInfo</span> <span class="keyword">implements</span> <span class="title">SubscriberInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class subscriberClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends SubscriberInfo&gt; superSubscriberInfoClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> shouldCheckSuperclass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractSubscriberInfo</span><span class="params">(Class subscriberClass, Class&lt;? extends SubscriberInfo&gt; superSubscriberInfoClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">boolean</span> shouldCheckSuperclass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subscriberClass = subscriberClass; <span class="comment">// 订阅者类；</span></span><br><span class="line">        <span class="keyword">this</span>.superSubscriberInfoClass = superSubscriberInfoClass; <span class="comment">// 订阅者的父类订阅者，processor 动态生成时传入的是 null；</span></span><br><span class="line">        <span class="keyword">this</span>.shouldCheckSuperclass = shouldCheckSuperclass; <span class="comment">//  是否检查父类，processor 动态生成时传入的是 true；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getSubscriberClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subscriberClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SubscriberInfo <span class="title">getSuperSubscriberInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(superSubscriberInfoClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> superSubscriberInfoClass.newInstance(); <span class="comment">// 返回父类订阅者的实例；</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldCheckSuperclass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shouldCheckSuperclass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是创建订阅方法；</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createSubscriberMethod(methodName, eventType, ThreadMode.POSTING, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType, ThreadMode threadMode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createSubscriberMethod(methodName, eventType, threadMode, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SubscriberMethod <span class="title">createSubscriberMethod</span><span class="params">(String methodName, Class&lt;?&gt; eventType, ThreadMode threadMode,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">int</span> priority, <span class="keyword">boolean</span> sticky)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 显然这里是通过反射的方式来创建！</span></span><br><span class="line">            Method method = subscriberClass.getDeclaredMethod(methodName, eventType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode, priority, sticky);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not find subscriber method in "</span> + subscriberClass +</span><br><span class="line">                    <span class="string">". Maybe a missing ProGuard rule?"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-SimpleSubscriberInfo"><a href="#3-4-SimpleSubscriberInfo" class="headerlink" title="3.4 SimpleSubscriberInfo"></a>3.4 SimpleSubscriberInfo</h2><p>订阅类，继承了 AbstractSubscriberInfo 类，<strong>适配器模式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSubscriberInfo</span> <span class="keyword">extends</span> <span class="title">AbstractSubscriberInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SubscriberMethodInfo[] methodInfos; <span class="comment">// 保存的是订阅方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSubscriberInfo</span><span class="params">(Class subscriberClass, <span class="keyword">boolean</span> shouldCheckSuperclass, SubscriberMethodInfo[] methodInfos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subscriberClass, <span class="keyword">null</span>, shouldCheckSuperclass); <span class="comment">//【--&gt;3.3】抽象类的方法；</span></span><br><span class="line">        <span class="keyword">this</span>.methodInfos = methodInfos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> SubscriberMethod[] getSubscriberMethods() &#123; <span class="comment">// 返回所有的订阅方法；</span></span><br><span class="line">        <span class="keyword">int</span> length = methodInfos.length;</span><br><span class="line">        SubscriberMethod[] methods = <span class="keyword">new</span> SubscriberMethod[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            SubscriberMethodInfo info = methodInfos[i];</span><br><span class="line">            <span class="comment">//【--&gt;3.3】注意并不是直接返回，而是返回了一份拷贝，防止修改；</span></span><br><span class="line">            methods[i] = createSubscriberMethod(info.methodName, info.eventType, info.threadMode,</span><br><span class="line">                    info.priority, info.sticky);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章，分析了 eventbus 的注解是如何处理的，生成了哪些类，类的关系如何（适配器模式）；</p><p>下篇文章，分析 register 的过程；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://lishuaiqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 第一篇 - 基本使用</title>
    <link href="https://lishuaiqi.top/2019/08/19/Eventbus-1-baseUsages/"/>
    <id>https://lishuaiqi.top/2019/08/19/Eventbus-1-baseUsages/</id>
    <published>2019-08-19T12:46:25.000Z</published>
    <updated>2019-08-27T14:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 EventBus 框架的架构和原理，基于最新的 <strong>3.1.0</strong> 版本。</p><blockquote><p>这是 EventBus 开源库的地址，大家可以直接访问<br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">https://github.com/greenrobot/EventBus</a></p></blockquote><p>本篇文章是 EventBus 的第一篇，主要总结下基本的使用；</p><p>Eventbus 翻译过来就是事件总线，用于简化组件和组件，线程和线程之间的消息通信，可以捆成是 Handler + Thread 的替代品。</p><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>Eventbus 的引入没有 ARouter 那么复杂，他的核心 api 和 AnnotationProcessor 是在同一个 jar 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure><p>以上就是引入的方式，很简单；</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h1><p>Eventbus 的使用还是很简单的。</p><ul><li>首先，<strong>我们要在组件生命周期的开始 register、生命周期的结束 unregister</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>我们之后将组件 register 到 EventBus 中，该组件才能监听到事件；</p><p>当然，当组件生命周期结束后，需要 unregister！</p><ul><li>接着，<strong>我们要定义接收 Event 的方法</strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(MessageEvent event)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 EventBus 中，处理 event 的方法需要被注解  @Subscribe 修饰，这是因为 EventBus 的机制，提供了一个 EventBusAnnotationProcessor，他负责自动处理   @Subscribe 修饰的方法，动态生成管理集合。</p><p>在事件分发的时候，会自动调用我们的方法；</p><p>对于注解 @Subscribe，我们可以设置其属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN, sticky = <span class="keyword">true</span>, priority = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>1、threadMode 用于指定线程模型（默认为 POSTING ），EventBus 提供了四种线程模型，下面会简单介绍；</p><p>2、sticky 表示方法是否开启粘性事件；</p><p>3、priority 表示多个订阅者收到事件的优先级顺序；</p><ul><li>最后，我们要<strong>发送消息</strong></li></ul><p>消息这里分为普通消息和粘性消息，和 broadcast 很类似哦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(..)</span><br><span class="line"></span><br><span class="line">EventBus.getDefault().post(...)</span><br></pre></td></tr></table></figure><p>对于普通消息和粘性消息的处理，后面再分析。</p><p>方法很简答，就不多说了～～</p><h1 id="3-线程模型"><a href="#3-线程模型" class="headerlink" title="3 线程模型"></a>3 线程模型</h1><p>EventBus 提供了四种线程模型，定义在 ThreadMode.java 中：</p><ul><li><strong>POSTING</strong></li></ul><p>这是默认的线程模型，发布事件和接收事件在同一个线程进行，不要做耗时操作，因为可能是在 UI 线程，导致 ANR；</p><ul><li><strong>MAIN</strong></li></ul><p>接收事件在 UI 线程中进行；不要做耗时操作，会导致 ANR；</p><ul><li><strong>BACKGROUND</strong></li></ul><p>如果发送事件是在 UI 线程，那么接收事件会在一个新的子线程；</p><p>如果发送事件是在子线程，那么接收事件和发送事件会在同一个子线程；</p><p>不能处理 UI 相关操作！</p><ul><li><strong>ASYNC</strong></li></ul><p>接收事件始终会在一个新的子线程中，不能处理 UI 相关操作！</p><blockquote><p>这里简单分析了下线程模型，我们后面在分析源码的时候，再来分析每种线程模型的处理方式；</p></blockquote><h1 id="4-整体架构初识"><a href="#4-整体架构初识" class="headerlink" title="4 整体架构初识"></a>4 整体架构初识</h1><p>可以看到这种订阅和接收的关系，很类似于 Rxjava 的模式，其实就是观察者模式，这里直接引用 EventBus 官方的一张图来说明下：</p><p><img src="https://upload-images.jianshu.io/upload_images/1445591-f2ea964c3de37488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本篇文章就到这里了，下一篇会从 @Subscribe 注解的处理入手，看下 EventBus 是如何处理该注解的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 EventBus 框架的架构和原理，基于最新的 &lt;strong&gt;3.1.0&lt;/strong&gt; 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是 EventBus 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="EventBus" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/EventBus/"/>
    
    
      <category term="EventBus" scheme="https://lishuaiqi.top/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>Permission第 6 篇 - permission info 的获取和更新</title>
    <link href="https://lishuaiqi.top/2019/06/29/Permission6-getAndUpdatePermissionInfo/"/>
    <id>https://lishuaiqi.top/2019/06/29/Permission6-getAndUpdatePermissionInfo/</id>
    <published>2019-06-29T07:16:07.000Z</published>
    <updated>2018-11-20T15:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="0-综述"><a href="#0-综述" class="headerlink" title="0 综述"></a>0 综述</h1><p>基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！</p><p>PackageManagerService 提供了很多个接口用于获取权限的信息！</p><h1 id="1-获取权限组相关的信息！"><a href="#1-获取权限组相关的信息！" class="headerlink" title="1 获取权限组相关的信息！"></a>1 获取权限组相关的信息！</h1><p>PackageManagerService.mPermissionGroups 保存了从所有 Application 中解析到的权限组信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="1-1-PackageManagerS-getAllPermissionGroups"><a href="#1-1-PackageManagerS-getAllPermissionGroups" class="headerlink" title="1.1 PackageManagerS.getAllPermissionGroups"></a>1.1 PackageManagerS.getAllPermissionGroups</h2><p>获得所有的权限组<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> <span class="function">ParceledListSlice&lt;PermissionGroupInfo&gt; <span class="title">getAllPermissionGroups</span><span class="params">(<span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mPermissionGroups.size();</span><br><span class="line">        ArrayList&lt;PermissionGroupInfo&gt; out</span><br><span class="line">                = <span class="keyword">new</span> ArrayList&lt;PermissionGroupInfo&gt;(N);</span><br><span class="line">        <span class="keyword">for</span> (PackageParser.PermissionGroup pg : mPermissionGroups.values()) &#123;</span><br><span class="line">            <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">            out.add(PackageParser.generatePermissionGroupInfo(pg, flags));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-PackageManagerS-getPermissionGroupInfo"><a href="#1-2-PackageManagerS-getPermissionGroupInfo" class="headerlink" title="1.2 PackageManagerS.getPermissionGroupInfo"></a>1.2 PackageManagerS.getPermissionGroupInfo</h2><p>获得指定的权限组信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionGroupInfo <span class="title">getPermissionGroupInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【*1.2.1】调用了 PackageParser.generatePermissionGroupInfo 方法</span></span><br><span class="line">        <span class="keyword">return</span> PackageParser.generatePermissionGroupInfo(</span><br><span class="line">                mPermissionGroups.get(name), flags);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-1-PackageParser-generatePermissionGroupInfo"><a href="#1-2-1-PackageParser-generatePermissionGroupInfo" class="headerlink" title="1.2.1 PackageParser.generatePermissionGroupInfo"></a>1.2.1 PackageParser.generatePermissionGroupInfo</h3><p>该方法会新创建的 PermissionGroupInfo 对象，作为解析数据 PermissionGroup.PermissionGroupInfo 的拷贝！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static final PermissionGroupInfo generatePermissionGroupInfo(</span><br><span class="line">        PermissionGroup pg, int flags) &#123;</span><br><span class="line">    if (pg == null) return null;</span><br><span class="line">    // 如果 flags 没有设置 PackageManager.GET_META_DATA，直接返回 PermissionGroup.PermissionGroupInfo</span><br><span class="line">    if ((flags &amp; PackageManager.GET_META_DATA) == 0) &#123;</span><br><span class="line">        return pg.info;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果 flags 设置了 PackageManager.GET_META_DATA，我们会新建一个 PermissionGroupInfo 对象，</span><br><span class="line">    // 将解析的数据拷贝进来！</span><br><span class="line">    PermissionGroupInfo pgi = new PermissionGroupInfo(pg.info);</span><br><span class="line">    pgi.metaData = pg.metaData;</span><br><span class="line">    return pgi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-获取权限相关的信息！"><a href="#2-获取权限相关的信息！" class="headerlink" title="2 获取权限相关的信息！"></a>2 获取权限相关的信息！</h1><p>mSettings.mPermissions 保存了系统和应用定义的所有的权限信息！</p><p>PackageManagerService 提供了如下的两个接口来获得权限组的信息！</p><h2 id="2-1-PackageParser-getPermissionInfo"><a href="#2-1-PackageParser-getPermissionInfo" class="headerlink" title="2.1 PackageParser.getPermissionInfo"></a>2.1 PackageParser.getPermissionInfo</h2><p>获得指定 name 的权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionInfo <span class="title">getPermissionInfo</span><span class="params">(String name, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">final</span> BasePermission p = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">            <span class="keyword">return</span> generatePermissionInfo(p, flags);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-PackageParser-queryPermissionsByGroup"><a href="#2-2-PackageParser-queryPermissionsByGroup" class="headerlink" title="2.2 PackageParser.queryPermissionsByGroup"></a>2.2 PackageParser.queryPermissionsByGroup</h2><p>获得同一个 group 中的所有权限信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">ParceledListSlice&lt;PermissionInfo&gt; <span class="title">queryPermissionsByGroup</span><span class="params">(String group,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】校验权限组是否存在！</span></span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; !mPermissionGroups.containsKey(group)) &#123;</span><br><span class="line">            <span class="comment">// This is thrown as NameNotFoundException</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2.2.1】调用了 PackageParser.generatePermissionInfo 方法</span></span><br><span class="line">        ArrayList&lt;PermissionInfo&gt; out = <span class="keyword">new</span> ArrayList&lt;PermissionInfo&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (BasePermission p : mSettings.mPermissions.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123; <span class="comment">// 如果参数 group 为 null，只收集无 group 的权限！</span></span><br><span class="line">                <span class="keyword">if</span> (p.perm == <span class="keyword">null</span> || p.perm.info.group == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    out.add(generatePermissionInfo(p, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.perm != <span class="keyword">null</span> &amp;&amp; group.equals(p.perm.info.group)) &#123;</span><br><span class="line">                    out.add(PackageParser.generatePermissionInfo(p.perm, flags));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParceledListSlice&lt;&gt;(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-1-PackageParser-generatePermissionInfo"><a href="#2-2-1-PackageParser-generatePermissionInfo" class="headerlink" title="2.2.1 PackageParser.generatePermissionInfo"></a>2.2.1 PackageParser.generatePermissionInfo</h3><p>该方法会新创建的 PermissionInfo 对象，拷贝 Permission 的数据！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PermissionInfo <span class="title">generatePermissionInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Permission p, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.GET_META_DATA) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p.info;</span><br><span class="line">    &#125;</span><br><span class="line">    PermissionInfo pi = <span class="keyword">new</span> PermissionInfo(p.info);</span><br><span class="line">    pi.metaData = p.metaData;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不需要 GET_META_DATA，那就直接返回解析得到的 PermissionInfo 对象！</p><h1 id="3-获取权限标志位的信息！"><a href="#3-获取权限标志位的信息！" class="headerlink" title="3 获取权限标志位的信息！"></a>3 获取权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来获得权限标志位组的信息！</p><p>PackageManagerService.mPackages 用于保存所有解析过的 Pacakge 信息！</p><p>mSettings.mPermissions 中保存了系统中所有的权限信息！</p><h2 id="3-1-PackageManagerService-getPermissionFlags"><a href="#3-1-PackageManagerService-getPermissionFlags" class="headerlink" title="3.1 PackageManagerService.getPermissionFlags"></a>3.1 PackageManagerService.getPermissionFlags</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">false</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"getPermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【1】如果 packageName 不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】如果权限不存在，返回 0；</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】获得该 package 对应的 PackageSettings 或者 SharedUserSetting 对象！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】获得权限的 flags</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">        <span class="keyword">return</span> permissionsState.getPermissionFlags(name, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h1 id="4-更新权限标志位的信息！"><a href="#4-更新权限标志位的信息！" class="headerlink" title="4 更新权限标志位的信息！"></a>4 更新权限标志位的信息！</h1><p>PackageManagerService 提供了如下接口来更新权限标志位的信息！</p><h2 id="4-1-PackageManagerService-updatePermissionFlags"><a href="#4-1-PackageManagerService-updatePermissionFlags" class="headerlink" title="4.1 PackageManagerService.updatePermissionFlags"></a>4.1 PackageManagerService.updatePermissionFlags</h2><p>该方法更新指定权限的 flags，flagMask 表示的是 flags 的位掩码，用来屏蔽某些位；flagValues 表示新的标志位值！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlags</span><span class="params">(String name, String packageName, <span class="keyword">int</span> flagMask,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlags"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果调用者不是 system uid，不能改变以下标志位，flagMask  和 flagValues 需去掉对应标志位：</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="comment">//【2】如果该 package 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> PackageParser.Package pkg = mPackages.get(packageName);</span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【3】如果权限 name 不存在，抛出异常！</span></span><br><span class="line">        <span class="keyword">final</span> BasePermission bp = mSettings.mPermissions.get(name);</span><br><span class="line">        <span class="keyword">if</span> (bp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown permission: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】如果该 package 没有安装记录，抛出异常！</span></span><br><span class="line">        SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown package: "</span> + packageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【5】获得该 package 的权限状态管理对象！</span></span><br><span class="line">        PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】获得该应用程序的运行时权限状态信息，返回不为 null，说明其有运行时权限！</span></span><br><span class="line">        <span class="keyword">boolean</span> hadState = permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【*4.1.1】更新该权限的标志位！</span></span><br><span class="line">        <span class="keyword">if</span> (permissionsState.updatePermissionFlags(bp, userId, flagMask, flagValues)) &#123;</span><br><span class="line">            <span class="comment">// 安装时权限和运行时权限保存在不同的目录下，所以要更新不同的文件</span></span><br><span class="line">            <span class="keyword">if</span> (permissionsState.getInstallPermissionState(name) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleWriteSettingsLocked(); <span class="comment">// 更新运行时权限！</span></span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionsState.getRuntimePermissionState(name, userId) != <span class="keyword">null</span></span><br><span class="line">                    || hadState) &#123; <span class="comment">// 更新安装时权限！</span></span><br><span class="line">                mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先会更新 flags，更新成功后，会根据权限的类型去，去更新对应的持久化文件！</p><h3 id="4-1-1-PermissionsState-updatePermissionFlags"><a href="#4-1-1-PermissionsState-updatePermissionFlags" class="headerlink" title="4.1.1 PermissionsState.updatePermissionFlags"></a>4.1.1 PermissionsState.updatePermissionFlags</h3><p>PermissionsState 用于管理 package 的权限状态!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlags</span><span class="params">(BasePermission permission, <span class="keyword">int</span> userId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line">    <span class="comment">//【1】如果 flagValues 和 flagMask 有一个不为 0，那就需要更新 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> mayChangeFlags = flagValues != <span class="number">0</span> || flagMask != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PermissionData permissionData = mPermissions.get(permission.name);</span><br><span class="line">    <span class="keyword">if</span> (permissionData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mayChangeFlags) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        permissionData = ensurePermissionData(permission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】获得旧的 flags！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = permissionData.getFlags(userId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*4.1.1.1】调用 PermissionData.updatePermissionFlags 更新权限的标志位：</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> updated = permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】如果 flags 发生了更新，比较下，更新后是否需要再次 review！</span></span><br><span class="line">    <span class="keyword">if</span> (updated) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> newFlags = permissionData.getFlags(userId); <span class="comment">// 获得新的 flags！</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired = <span class="keyword">new</span> SparseBooleanArray();</span><br><span class="line">            &#125;</span><br><span class="line">            mPermissionReviewRequired.put(userId, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((oldFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; (newFlags &amp; PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mPermissionReviewRequired != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPermissionReviewRequired.delete(userId);</span><br><span class="line">                <span class="keyword">if</span> (mPermissionReviewRequired.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    mPermissionReviewRequired = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> updated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个方法很简单，无需多说，前面分析过了，这里就不多说了！！</p><h4 id="4-1-1-1-PermissionData-updateFlags"><a href="#4-1-1-1-PermissionData-updateFlags" class="headerlink" title="4.1.1.1 PermissionData.updateFlags"></a>4.1.1.1 PermissionData.updateFlags</h4><p>PermissionData 用于封装指定权限的状态信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateFlags</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInstallPermission()) &#123;</span><br><span class="line">        userId = UserHandle.USER_ALL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isCompatibleUserId(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】新的 newFlags 取 flagValues 和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="comment">// 就是说，新的 flags 要么是 0，要么只能取和 flagMask 相同的位值！</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> newFlags = flagValues &amp; flagMask;</span><br><span class="line"></span><br><span class="line">    PermissionState userState = mUserStates.get(userId);</span><br><span class="line">    <span class="keyword">if</span> (userState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldFlags = userState.mFlags;</span><br><span class="line">        <span class="comment">//【2】最新的权限 flags 设置如下：</span></span><br><span class="line">        <span class="comment">// 先取 oldFlags 和 ~flagMask 相同的位值，然后加上 newFlags！</span></span><br><span class="line">        userState.mFlags = (userState.mFlags &amp; ~flagMask) | newFlags;</span><br><span class="line">        <span class="keyword">if</span> (userState.isDefault()) &#123;</span><br><span class="line">            mUserStates.remove(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userState.mFlags != oldFlags; <span class="comment">// 判断标志位是否变化！</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newFlags != <span class="number">0</span>) &#123;</span><br><span class="line">        userState = <span class="keyword">new</span> PermissionState(mPerm.name);</span><br><span class="line">        userState.mFlags = newFlags;</span><br><span class="line">        mUserStates.put(userId, userState);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，通过 flagValues &amp; flagMask 取其相同的位值为 newFlags！</p><p>设置最新的 flags 的时候，先是 oldFlags &amp; ~flagMask 取 oldFlags 和 ～flagMask 相同的位值，然后加上 newFlags！</p><h2 id="4-2-PackageManagerService-updatePermissionFlagsForAllApps"><a href="#4-2-PackageManagerService-updatePermissionFlagsForAllApps" class="headerlink" title="4.2 PackageManagerService.updatePermissionFlagsForAllApps"></a>4.2 PackageManagerService.updatePermissionFlagsForAllApps</h2><p>该方法更新指定所有权限的 flags！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePermissionFlagsForAllApps</span><span class="params">(<span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues, <span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enforceGrantRevokeRuntimePermissionPermissions(<span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    enforceCrossUserPermission(Binder.getCallingUid(), userId,</span><br><span class="line">            <span class="keyword">true</span> <span class="comment">/* requireFullPermission */</span>, <span class="keyword">true</span> <span class="comment">/* checkShell */</span>,</span><br><span class="line">            <span class="string">"updatePermissionFlagsForAllApps"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】如果不是 system uid，不能修改 system fixed flags，从 flagMask 和 flagValues 中去掉该标志位！</span></span><br><span class="line">    <span class="comment">// 那么下面的调整中就不会涉及到 system fix 标志位！</span></span><br><span class="line">    <span class="keyword">if</span> (getCallingUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">        flagMask &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">        flagValues &amp;= ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mPackages) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> packageCount = mPackages.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pkgIndex = <span class="number">0</span>; pkgIndex &lt; packageCount; pkgIndex++) &#123;</span><br><span class="line">            <span class="keyword">final</span> PackageParser.Package pkg = mPackages.valueAt(pkgIndex);</span><br><span class="line">            SettingBase sb = (SettingBase) pkg.mExtras;</span><br><span class="line">            <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PermissionsState permissionsState = sb.getPermissionsState();</span><br><span class="line">            <span class="comment">//【*4.2.1】调用了 updatePermissionFlagsForAllPermissions 方法，更新 flags！</span></span><br><span class="line">            changed |= permissionsState.updatePermissionFlagsForAllPermissions(</span><br><span class="line">                    userId, flagMask, flagValues);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123; </span><br><span class="line">            <span class="comment">//【2】如果发生了改变，更新 rumtime-permissions.xml 文件！</span></span><br><span class="line">            mSettings.writeRuntimePermissionsForUserLPr(userId, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions"><a href="#4-2-1-PermissionsState-updatePermissionFlagsForAllPermissions" class="headerlink" title="4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions"></a>4.2.1 PermissionsState.updatePermissionFlagsForAllPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePermissionFlagsForAllPermissions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> userId, <span class="keyword">int</span> flagMask, <span class="keyword">int</span> flagValues)</span> </span>&#123;</span><br><span class="line">    enforceValidUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPermissions == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> permissionCount = mPermissions.size();</span><br><span class="line">    <span class="comment">//【*4.1.1.1】更新 PermissionsState 管理的所有权限的 flags！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissionCount; i++) &#123;</span><br><span class="line">        PermissionData permissionData = mPermissions.valueAt(i);</span><br><span class="line">        changed |= permissionData.updateFlags(userId, flagMask, flagValues);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程很简单，不多说了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;0-综述&quot;&gt;&lt;a href=&quot;#0-综述&quot; class=&quot;headerlink&quot; title=&quot;0 综述&quot;&gt;&lt;/a&gt;0 综述&lt;/h1&gt;&lt;p&gt;基于 Android 7.1.1，分析权限管理相关知识，本文权限信息的获取！&lt;/p&gt;
&lt;p&gt;Pac
      
    
    </summary>
    
      <category term="AndroidFramework源码分析" scheme="https://lishuaiqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Permission权限管理" scheme="https://lishuaiqi.top/categories/AndroidFramework%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Permission权限管理" scheme="https://lishuaiqi.top/tags/Permission%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第三篇 - Native 调用 H5 代码</title>
    <link href="https://lishuaiqi.top/2019/05/23/JsBridge3-Native--%3EH5Codes/"/>
    <id>https://lishuaiqi.top/2019/05/23/JsBridge3-Native--&gt;H5Codes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-05T21:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 android 中，我们通过如下方式，使用 jsBridge 框架来和 H5 通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>这里涉及到 2 个交互接口：</p><ul><li>webView.callHandler：有回调；</li><li>webView.send：没有回调；</li></ul><p>下面我会来分析下这两个方法的调用链，这会涉及到 jsBridge 中其他的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|____Message.java</span><br><span class="line">|____WebViewJavascriptBridge.java</span><br><span class="line">|____DefaultHandler.java</span><br><span class="line">|____BridgeWebView.java</span><br><span class="line">|____BridgeWebViewClient.java</span><br><span class="line">|____CallBackFunction.java</span><br><span class="line">|____BridgeHandler.java</span><br><span class="line">|____BridgeUtil.java</span><br></pre></td></tr></table></figure><p>在分析交互流程的时候，我们会详细分析每个类的内部逻辑！</p><h1 id="2-BridgeWebView"><a href="#2-BridgeWebView" class="headerlink" title="2 BridgeWebView"></a>2 BridgeWebView</h1><p>我们从 BridgeWebView 开始，先看看内部的一些重要成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】native 的回调函数 map，key 是 id，value 是具体的回调对象；</span></span><br><span class="line">Map&lt;String, CallBackFunction&gt; responseCallbacks = <span class="keyword">new</span> HashMap&lt;String, CallBackFunction&gt;();</span><br><span class="line"><span class="comment">//【2】native 处理 js 消息的 handler map，key 是 handler name，value 是具体的 handler</span></span><br><span class="line">Map&lt;String, BridgeHandler&gt; messageHandlers = <span class="keyword">new</span> HashMap&lt;String, BridgeHandler&gt;();</span><br><span class="line"><span class="comment">//【3】默认的 handler，默认是它处理 js 的消息；</span></span><br><span class="line">BridgeHandler defaultHandler = <span class="keyword">new</span> DefaultHandler();</span><br><span class="line"><span class="comment">//【4】native 发送给 js 的 message 列表；</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Message&gt; startupMessage = <span class="keyword">new</span> ArrayList&lt;Message&gt;();</span><br></pre></td></tr></table></figure></p><p>不多说了。</p><h2 id="2-1-callHandler"><a href="#2-1-callHandler" class="headerlink" title="2.1 callHandler"></a>2.1 callHandler</h2><p>我们先分析有回调的接口的交互流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callHandler 方法指定了 js 使用哪个 Handler 处理 native 的消息！</p><p>这里指定了 js 用于处理的 handler name 是 “functionInJs”！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callHandler</span><span class="params">(String handlerName, String data, CallBackFunction callBack)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2】调用另外一个方法：</span></span><br><span class="line">    doSend(handlerName, data, callBack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们去看看 doSend 方法：</p><h2 id="2-2-doSend"><a href="#2-2-doSend" class="headerlink" title="2.2 doSend"></a>2.2 doSend</h2><p>继续分析 doSend 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String handlerName, String data, CallBackFunction responseCallback)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//【1】创建一个消息；</span></span><br><span class="line">Message m = <span class="keyword">new</span> Message();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(data)) &#123;</span><br><span class="line">    <span class="comment">//【2】设置 data 数据；</span></span><br><span class="line">m.setData(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【3】如果需要回调，那么会创建回调 id（String）</span></span><br><span class="line"><span class="keyword">if</span> (responseCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT, ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));</span><br><span class="line">responseCallbacks.put(callbackStr, responseCallback);</span><br><span class="line">m.setCallbackId(callbackStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4】如果指定了 handler，那么设置 handlerName；</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(handlerName)) &#123;</span><br><span class="line">m.setHandlerName(handlerName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【*2.3】将消息送入队列；</span></span><br><span class="line">queueMessage(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，会创建一个 Message 对象，封装要发给 js 的消息；</p><p>同时注意到，native 的回调并没有传递给 js，而是保存在了内部的一个 responseCallbacks 哈希表中；</p><p>实际传递给 js 的是 callbackId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.data  <span class="comment">// native 发送的数据</span></span><br><span class="line">Message.callbackId  <span class="comment">// native 回调函数的 id</span></span><br><span class="line">Message.handlerName <span class="comment">// js 处理数据的 handlerName；</span></span><br></pre></td></tr></table></figure><p>最后就是把 message 放入到 message list；</p><h2 id="2-3-queueMessage"><a href="#2-3-queueMessage" class="headerlink" title="2.3 queueMessage"></a>2.3 queueMessage</h2><p>将 message 放入到 message list；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【1】将消息加入到 message list 中；</span></span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【*2.4】特殊情况，直接发送 message！</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里默认是会将 message 添加到 startupMessage 消息列表中，然后 webview 会处理 message list！</p><p>那么在哪里会处理呢？</p><p>前面我们分析过，在网页加载好后，会出发 BridgeWebViewClient.onPageFinished 方法，就会启动 native 的消息处理循环！</p><p><strong>见 【3.1】 节</strong>；</p><h2 id="2-4-dispatchMessage"><a href="#2-4-dispatchMessage" class="headerlink" title="2.4 dispatchMessage"></a>2.4 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*4.2】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【1】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【2】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【3】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【*<span class="number">5.1</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_HANDLE_MESSAGE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._handleMessageFromNative('%s');"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，执行的 js 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</span><br></pre></td></tr></table></figure><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p><h2 id="2-5-handlerReturnData"><a href="#2-5-handlerReturnData" class="headerlink" title="2.5 handlerReturnData"></a>2.5 handlerReturnData</h2><p>拦截 url 并处理信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">f.onCallBack(data);</span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebViewClient"><a href="#3-BridgeWebViewClient" class="headerlink" title="3 BridgeWebViewClient"></a>3 BridgeWebViewClient</h1><p>WebViewClient 是用于处理各种事件的回调。</p><h2 id="3-1-onPageFinished"><a href="#3-1-onPageFinished" class="headerlink" title="3.1 onPageFinished"></a>3.1 onPageFinished</h2><p>当 H5 页面加载完成后，会 WebViewClient 方法会处罚；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">    <span class="comment">//【1】动态注入 js 协议脚本，这个我们之前有讲过；</span></span><br><span class="line">    <span class="keyword">if</span> (BridgeWebView.toLoadJs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【*2.5】这里会遍历 BridgeWebView.startupMessage 分发 native 消息；</span></span><br><span class="line">    <span class="keyword">if</span> (webView.getStartupMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Message m : webView.getStartupMessage()) &#123;</span><br><span class="line">            <span class="comment">//【*2.5】分发 native 消息；</span></span><br><span class="line">            webView.dispatchMessage(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【*2.3】注意：这里将 BridgeWebView.startupMessage 设置为 null 了</span></span><br><span class="line">        <span class="comment">// 那么下次就不用将消息加入 list 了，而是直接 dispatch 了！</span></span><br><span class="line">        webView.setStartupMessage(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】调用其他函数处理 url！</span></span><br><span class="line">    onCustomPageFinishd(view,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来最终调用了 webView.dispatchMessage 方法！</p><h2 id="3-2-shouldOverrideUrlLoading"><a href="#3-2-shouldOverrideUrlLoading" class="headerlink" title="3.2 shouldOverrideUrlLoading"></a>3.2 shouldOverrideUrlLoading</h2><p>我们来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【1】获得动态创建的 url</span></span><br><span class="line">        url = URLDecoder.decode(url, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.2】此时是返回数据，url 携带数据；</span></span><br><span class="line">    <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_RETURN_DATA)) &#123;</span><br><span class="line">        <span class="comment">//【*3.5】native 解析 js 返回的数据；</span></span><br><span class="line">        webView.handlerReturnData(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【*3.2.1】此时是提醒 native，js 有数据返回；</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(BridgeUtil.YY_OVERRIDE_SCHEMA)) &#123; </span><br><span class="line">        <span class="comment">//【*3.3】native 再次和 js 通信，获取数据；</span></span><br><span class="line">        webView.flushMessageQueue();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 定义了如下的 url 前缀规则：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_OVERRIDE_SCHEMA = <span class="string">"yy://"</span>;</span><br><span class="line"><span class="comment">//【1】表示 js 有数据返回，提醒 native 去读取数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_RETURN_DATA = YY_OVERRIDE_SCHEMA + <span class="string">"return/"</span>;</span><br><span class="line"><span class="comment">//【2】该 url 会携带 js 返回的数据；</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String YY_FETCH_QUEUE = YY_RETURN_DATA + <span class="string">"_fetchQueue/"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-flushMessageQueue"><a href="#3-3-flushMessageQueue" class="headerlink" title="3.3 flushMessageQueue"></a>3.3 flushMessageQueue</h2><p>核心方法，从 js 的队列里获取要发送给 native 的 message：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.4】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//【*3.3.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    <span class="comment">//【3.1】获得 native 在 callHandler 是设定的回调函数！</span></span><br><span class="line">CallBackFunction function = responseCallbacks.get(responseId);</span><br><span class="line"><span class="comment">//【3.2】获得回调数据；</span></span><br><span class="line">String responseData = m.getResponseData();</span><br><span class="line"><span class="comment">//【--&gt;*2.1】native 处理数据，这里又回到了 callHandler 哪里！</span></span><br><span class="line">function.onCallBack(responseData);</span><br><span class="line"><span class="comment">//【3.3】移除 native 注册的回调函数！</span></span><br><span class="line">responseCallbacks.remove(responseId);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这种情况是属于，js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"><span class="comment">//【--&gt;*2.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面部分的代码（【4】)），是和 H5 调用 Native 代码相关的，我们不过多关注！</p><p>BridgeUtil 定义了指定 js 协议的 _fetchQueue 方法的命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> String JS_FETCH_QUEUE_FROM_JAVA = <span class="string">"javascript:WebViewJavascriptBridge._fetchQueue();"</span>;</span><br></pre></td></tr></table></figure></p><p>下面去看一下 loadUrl：</p><h2 id="3-4-loadUrl"><a href="#3-4-loadUrl" class="headerlink" title="3.4 loadUrl"></a>3.4 loadUrl</h2><p>参数 jsUrl 是 <strong>javascript:WebViewJavascriptBridge._fetchQueue();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*5.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.1】BridgeUtil.parseFunctionName 对 jsUrl 做了处理，以结果作为 key！</p><p>处理入下：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>这样是有好处了，因为 returnCallback 根据协议是可以复用的，所以这里也保存在了 responseCallbacks 中！！</p><p><br></p><p>responseCallbacks 之前我们有分析过！<strong>此时 responseCallbacks 放入了 2 个 native 的回调！</strong></p><h2 id="3-5-handlerReturnData"><a href="#3-5-handlerReturnData" class="headerlink" title="3.5 handlerReturnData"></a>3.5 handlerReturnData</h2><p>改方法用于处理 js 返回给 native 的回调数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【*7.3」获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【*3.3.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了【*7.2】BridgeUtil.getFunctionFromReturnUrl 对 url 再次做了处理，前面在 【3.3】 flushMessageQueue，我们将另一个解析回调以 _fetchQueue 为 key，保存到了 responseCallbacks 中，这里是触发他的时候了！</p><h1 id="4-Message"><a href="#4-Message" class="headerlink" title="4 Message"></a>4 Message</h1><p>该对象用于封装 native 和 js 交互的信息：</p><h2 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1 属性"></a>4.1 属性</h2><p>我们来看看他的基本属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// native --&gt; js: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line">   <span class="comment">// js --&gt; native: js 回调的 id，用于处理 native 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String callbackId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// js --&gt; native: native 回调的 id，用于处理 js 的返回信息；</span></span><br><span class="line"><span class="keyword">private</span> String responseId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js --&gt; native: js 发送给 native 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String responseData; <span class="comment">// js 的回调信息，json string；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: native 发送给 js 的信息：json，string；</span></span><br><span class="line"><span class="keyword">private</span> String data; </span><br><span class="line"></span><br><span class="line"><span class="comment">// native --&gt; js: 处理 native 信息的 js handler name；</span></span><br><span class="line"><span class="keyword">private</span> String handlerName;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h2 id="4-2-toJson"><a href="#4-2-toJson" class="headerlink" title="4.2 toJson"></a>4.2 toJson</h2><p>将 Message 转为 json string！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JSONObject jsonObject= <span class="keyword">new</span> JSONObject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jsonObject.put(CALLBACK_ID_STR, getCallbackId()); <span class="comment">// callbackId</span></span><br><span class="line">        jsonObject.put(DATA_STR, getData()); <span class="comment">// data</span></span><br><span class="line">        jsonObject.put(HANDLER_NAME_STR, getHandlerName()); <span class="comment">// handlerName</span></span><br><span class="line">        String data = getResponseData();</span><br><span class="line">        <span class="comment">//【3】这个地方我有些疑问，不知道作者为啥这样写</span></span><br><span class="line">        <span class="comment">// 值永远会被第三个覆盖掉；</span></span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(data)) &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          jsonObject.put(RESPONSE_DATA_STR, <span class="keyword">new</span> JSONTokener(data).nextValue());</span><br><span class="line">        &#125;</span><br><span class="line">        jsonObject.put(RESPONSE_DATA_STR, getResponseData()); <span class="comment">// responseData</span></span><br><span class="line">        jsonObject.put(RESPONSE_ID_STR, getResponseId()); <span class="comment">// responseId</span></span><br><span class="line">        <span class="keyword">return</span> jsonObject.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的参数我就不说了，很简单！</p><h1 id="5-WebViewJavascriptBridge"><a href="#5-WebViewJavascriptBridge" class="headerlink" title="5 WebViewJavascriptBridge"></a>5 WebViewJavascriptBridge</h1><p>最后进入了通信协议 js 脚本：</p><h2 id="5-1-handleMessageFromNative"><a href="#5-1-handleMessageFromNative" class="headerlink" title="5.1 _handleMessageFromNative"></a>5.1 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*5.2】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="5-2-dispatchMessageFromNative"><a href="#5-2-dispatchMessageFromNative" class="headerlink" title="5.2 _dispatchMessageFromNative"></a>5.2 _dispatchMessageFromNative</h2><p>js 处理 native 层的消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【1】获得 message json 对象；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这个地方是 js 回调的地方，我们先不看；</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】很显然，此时会进入这里，因为我们设置了 callbackId！</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【3】获得 callbackId！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                <span class="comment">//【*5.2.1】创建 js 回调函数，当回调触发后，会执行 doSend 方法！</span></span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*5.3】将结果以回调形式发送给 native！</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        <span class="comment">//【4】注意这里，Message.callbackId 的值赋给了 Message.responseId</span></span><br><span class="line">                        <span class="comment">// Message.responseData 用于保存回调数据；</span></span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【5】选择合适的 handler 去处理 native message。</span></span><br><span class="line">            <span class="comment">// 没有指定 handler，就用默认的！</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【*6.1】handler 其实就是一个函数，这个在通信协议 js 有分析过！</span></span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后会选择合适的 handler，将 native message 和 js 回调函数交给 handler 处理！</p><h2 id="5-3-doSend"><a href="#5-3-doSend" class="headerlink" title="5.3 _doSend"></a>5.3 _doSend</h2><p>将结果以回调形式发送给 native！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】responseCallback 不为 null，说明 native 需要回调通知，这里将 responseCallback</span></span><br><span class="line">    <span class="comment">// 保存到 responseCallbacks 的意义是：可以建立双向通信！</span></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【2】为该 responseCallback 创建 id，并将 id：responseCallback 的映射关系</span></span><br><span class="line">        <span class="comment">// 保存到 responseCallbacks 数组中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】将 id 保存到 message.callbackId 中；！</span></span><br><span class="line">        <span class="comment">// 因为此时 message 用于保存 js 发给 native 的数据，所以 message.callbackId 保存了 js 的回调函数，</span></span><br><span class="line">        <span class="comment">// 这样 native 就可以和 js 双向通信了！</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【4】将消息保存到 sendMessageQueue 中，然后创建 url，</span></span><br><span class="line">    <span class="comment">//【*3.2】这样 BridgeWebViewClient.shouldOverrideUrlLoading 就能拦截这个 url 了；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>responseCallback 实际上是 js 处理 native 消息的回调函数，这里给 responseCallback 也分配了一个 id，并保存到 responseCallbacks 中！</p><p>目的很明显，是为了建立双向通信！</p><p><br></p><p>到这里 Message 中的数据发生了变化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message.responseId  <span class="comment">// native 的回调函数 id</span></span><br><span class="line">Message.callbackId  <span class="comment">// js 的回调函数 id</span></span><br><span class="line">Message.responseData <span class="comment">// js 发送的回调数据；</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>这里创建了一个 url：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//__QUEUE_MESSAGE__/</span></span><br></pre></td></tr></table></figure><p>这个方法会导致 BridgeWebViewClient.shouldOverrideUrlLoading 触发！</p><h2 id="5-4-fetchQueue"><a href="#5-4-fetchQueue" class="headerlink" title="5.4 _fetchQueue"></a>5.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【*3.2.2】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里生成了一个新的 url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy:<span class="comment">//://return/_fetchQueue/[&#123;"responseId":"xxxxxxx","responseData":"xxxxxxxxxx"&#125;]</span></span><br></pre></td></tr></table></figure><p>再次回到了 shouldOverrideUrlLoading：</p><h1 id="6-H5-页面初始化-js-脚本"><a href="#6-H5-页面初始化-js-脚本" class="headerlink" title="6 H5 页面初始化 js 脚本"></a>6 H5 页面初始化 js 脚本</h1><p>在 jsBridge 框架中，当 js 协议脚本被动态注入到 H5 中时，会触发 H5 页面中的初始化 js 脚本，该脚本会初始化 js 的 handler：</p><h2 id="6-1-connectWebViewJavascriptBridge"><a href="#6-1-connectWebViewJavascriptBridge" class="headerlink" title="6.1 connectWebViewJavascriptBridge"></a>6.1 connectWebViewJavascriptBridge</h2><p>可以看到，H5 页面注册的 js handler 的名字就是 “functionInJs” 这个和前面 callHandler 相符合了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">    <span class="comment">//【1】后面的 function 就是我们的 handler。</span></span><br><span class="line">    bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">        <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">            <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">            <span class="comment">//【*5.2.1】js 处理完 message 后，回调 responseCallback 接口！</span></span><br><span class="line">            <span class="comment">// 其实就是【*5.2】创建的回调，会触发 _doSend 方法！</span></span><br><span class="line">            responseCallback(responseData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个在前面的 js 通信协议中有分析过，不多说了！</p><h1 id="7-BridgeUtil"><a href="#7-BridgeUtil" class="headerlink" title="7 BridgeUtil"></a>7 BridgeUtil</h1><p>工具类，包含一些解析方法和协议头常量：</p><h2 id="7-1-parseFunctionName"><a href="#7-1-parseFunctionName" class="headerlink" title="7.1 parseFunctionName"></a>7.1 parseFunctionName</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url 的一个例子：javascript:WebViewJavascriptBridge._fetchQueue();</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseFunctionName</span><span class="params">(String jsUrl)</span></span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回_fetchQueue</span></span><br><span class="line"><span class="keyword">return</span> jsUrl.replace(<span class="string">"javascript:WebViewJavascriptBridge."</span>, <span class="string">""</span>).replaceAll(<span class="string">"\\(.*\\);"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 js 创建 url，通知 native 有回调消息后调用的！</p><h2 id="7-2-getFunctionFromReturnUrl"><a href="#7-2-getFunctionFromReturnUrl" class="headerlink" title="7.2 getFunctionFromReturnUrl"></a>7.2 getFunctionFromReturnUrl</h2><p>从 url 中解析 funtion name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFunctionFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】去掉 "yy://return/";</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line"><span class="comment">//【2】去掉 "/[&#123;"responseId":"xxxxx","responseData":"xxxxx"&#125;]"</span></span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//【3】我们得到了 key，也就是 functionName；</span></span><br><span class="line"><span class="keyword">return</span> functionAndData[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的！</p><h2 id="7-3-getDataFromReturnUrl"><a href="#7-3-getDataFromReturnUrl" class="headerlink" title="7.3 getDataFromReturnUrl"></a>7.3 getDataFromReturnUrl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 url 的一个例子；</span></span><br><span class="line"><span class="comment">// url = yy://return/_fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataFromReturnUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(url.startsWith(YY_FETCH_QUEUE)) &#123;</span><br><span class="line"><span class="comment">//【1】返回了 [&#123;"responseId":"JAVA_CB_2_3957","responseData":"xxxxx"&#125;]</span></span><br><span class="line"><span class="keyword">return</span> url.replace(YY_FETCH_QUEUE, EMPTY_STR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// temp = _fetchQueue/[&#123;"responseId":"JAVA_CB_2_3957","responseData":"Javascript Says Right back aka!"&#125;]</span></span><br><span class="line"><span class="comment">//【2】对另外一种情况的处理</span></span><br><span class="line">String temp = url.replace(YY_RETURN_DATA, EMPTY_STR);</span><br><span class="line">String[] functionAndData = temp.split(SPLIT_MARK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(functionAndData.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; functionAndData.length; i++) &#123;</span><br><span class="line">sb.append(functionAndData[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//【3】返回结果是一样的！</span></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是在 native 获取到 js 消息后调用的，并且在【7.2】调用以后才调用！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第四篇 - H5 调用 Native 代码</title>
    <link href="https://lishuaiqi.top/2019/05/23/JsBridge4-H5--%3ENativeCodes/"/>
    <id>https://lishuaiqi.top/2019/05/23/JsBridge4-H5--&gt;NativeCodes/</id>
    <published>2019-05-23T12:46:25.000Z</published>
    <updated>2019-07-07T00:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1 调用接口"></a>1 调用接口</h1><p>在 js 中，我们通过如下方式，使用 jsBridge 框架来和 Native 通信：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line"><span class="comment">//【1】通过 js 通信协议 send 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">    data</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】通过 js 通信协议 callHandler 方法；</span></span><br><span class="line"><span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">    <span class="string">'submitFromWeb'</span></span><br><span class="line">    , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>send 方法</strong>；用客户端默认的 handler 处理；</li><li><strong>callHandler 方法</strong>：用指定的 handler 处理；</li></ul><p>下面我们来分析下 callHandler 和 send 方法！</p><h1 id="2-WebViewJavascriptBridge"><a href="#2-WebViewJavascriptBridge" class="headerlink" title="2 WebViewJavascriptBridge"></a>2 WebViewJavascriptBridge</h1><p>接下来进入了 js 通信协议文件中：</p><h2 id="2-1-send"><a href="#2-1-send" class="headerlink" title="2.1 send"></a>2.1 send</h2><p>用客户端默认的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-callHandler"><a href="#2-2-callHandler" class="headerlink" title="2.2 callHandler"></a>2.2 callHandler</h2><p>用指定的 handler 处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.3】调用 _doSend 方法；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-doSend"><a href="#2-3-doSend" class="headerlink" title="2.3 _doSend"></a>2.3 _doSend</h2><p>最后都调用了 _doSend 的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sendMessage add message, 触发native处理 sendMessage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;  </span><br><span class="line">        <span class="comment">//【1】创建了一个 calbackId，并将 id 和 callback 的映射关系保存到 responseCallbacks 中；</span></span><br><span class="line">        <span class="comment">// 将 callbackId 保存到 message 中！</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】将消息保存到 sendMessageQueue 中，创建动态 url，通知 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【3】yy://__QUEUE_MESSAGE__，最终会触发如下方法</span></span><br><span class="line">    <span class="comment">//【--&gt;*3.1】BridgeWebView.flushMessageQueue</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在前面分析过了，和前面的类似。</p><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.flushMessageQueue</span><br></pre></td></tr></table></figure><h2 id="2-4-fetchQueue"><a href="#2-4-fetchQueue" class="headerlink" title="2.4 _fetchQueue"></a>2.4 _fetchQueue</h2><p>从 sendMessageQueue 队列中获取 message，发送给 native：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后再次通过 shouldOverrideUrlLoading 方法拦截，</span></span><br><span class="line">    <span class="comment">// 捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;*3.3】这一次，生成的 url 将真正带有回调数据；</span></span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里生成了一个新的 url：</p><blockquote><p>yy://://return/_fetchQueue/[{“responseId”:”xxxxxxx”,”responseData”:”xxxxxxxxxx”}]</p></blockquote><p>messagingIframe.src 最终会触发如下方法调用链：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeWebViewClient.shouldOverrideUrlLoading ---&gt; BridgeWebView.handlerReturnData</span><br></pre></td></tr></table></figure><h2 id="2-5-handleMessageFromNative"><a href="#2-5-handleMessageFromNative" class="headerlink" title="2.5 _handleMessageFromNative"></a>2.5 _handleMessageFromNative</h2><p>js 代码中会处理 native 发送的 message json：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那么会讲她加入到</span></span><br><span class="line">    <span class="comment">// receiveMessageQueue 队列中，它是用来保存 native 发送的消息的；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;*2.6】分发来自 native 的消息；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二篇 js 协议中有讲过：</p><p>当在动态注入 js 脚本时，会执行 init 方法，那里会将 receiveMessageQueue 置为 null，同时处理已经包含的 native 消息；</p><p>所以这里就直接 _dispatchMessageFromNative 了；</p><h2 id="2-6-dispatchMessageFromNative"><a href="#2-6-dispatchMessageFromNative" class="headerlink" title="2.6 _dispatchMessageFromNative"></a>2.6 _dispatchMessageFromNative</h2><p>js 处理 native 层的回调消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【1】这里 js 处理消息回调，不多说了！</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ... ... ...<span class="comment">// 这里是处理 java 回调的，之前分析过；</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-BridgeWebView"><a href="#3-BridgeWebView" class="headerlink" title="3 BridgeWebView"></a>3 BridgeWebView</h1><h2 id="3-1-flushMessageQueue"><a href="#3-1-flushMessageQueue" class="headerlink" title="3.1 flushMessageQueue"></a>3.1 flushMessageQueue</h2><p>native 读取 js 的命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flushMessageQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】必须在主线程（loadUrl）</span></span><br><span class="line"><span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">    <span class="comment">//【---&gt;*3.2】执行 js 脚本</span></span><br><span class="line">loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【*3.1.1】这个回调是用来分发 url 对应的数据给相应的回调！</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//【1】用于存储所有的消息；</span></span><br><span class="line">List&lt;Message&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = Message.toArrayList(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="keyword">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//【2】遍历处理下每一个 Message。</span></span><br><span class="line">Message m = list.get(i);</span><br><span class="line">String responseId = m.getResponseId();</span><br><span class="line"><span class="comment">//【3】如果 Message.responseId 不为 null，说明这是 js 反馈给 native 的回调数据。</span></span><br><span class="line"><span class="comment">// 此时 responseId 表示 native 回调函数的 id！</span></span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(responseId)) &#123;</span><br><span class="line">    ... ... ... ...<span class="comment">// 这里前面有分析过；</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4】这里是我们要关注的地方：</span></span><br><span class="line">    <span class="comment">// 这种情况是属于 js 主动向 Handler 发送消息的时候，callbackId 显然是 js 的回调函数 id；</span></span><br><span class="line">CallBackFunction responseFunction = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> String callbackId = m.getCallbackId();</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(callbackId)) &#123;</span><br><span class="line">    <span class="comment">//【4.1】有 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【4.1.1】可以看到，这里创建了一个 Message，作为给 js 的回调信息；</span></span><br><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【--&gt;*3.4】将消息加入 list，等待处理；</span></span><br><span class="line">queueMessage(responseMsg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【4.2】无 js 回调的情况，进入这里；</span></span><br><span class="line">responseFunction = <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.3】js 指定了 native 处理数据的 handler！</span></span><br><span class="line">BridgeHandler handler;</span><br><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(m.getHandlerName())) &#123;</span><br><span class="line">handler = messageHandlers.get(m.getHandlerName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handler = defaultHandler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【4.4】处理 js 的 message，并发送回调信息给 js。</span></span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>)&#123;</span><br><span class="line">handler.handler(m.getData(), responseFunction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看大了，给 js 反馈回调的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message responseMsg = <span class="keyword">new</span> Message();</span><br><span class="line">responseMsg.setResponseId(callbackId);</span><br><span class="line">responseMsg.setResponseData(data);</span><br></pre></td></tr></table></figure><p>js 传入的 callbackId 被设置到了 responseId 上了；</p><h2 id="3-2-loadUrl"><a href="#3-2-loadUrl" class="headerlink" title="3.2 loadUrl"></a>3.2 loadUrl</h2><p>参数 jsUrl 是 javascript:WebViewJavascriptBridge._fetchQueue();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUrl</span><span class="params">(String jsUrl, CallBackFunction returnCallback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;*2.4】执行 jsUrl 命令；</span></span><br><span class="line"><span class="keyword">this</span>.loadUrl(jsUrl);</span><br><span class="line">    <span class="comment">//【2】同时将 CallBackFunction 放入到 responseCallbacks 中；</span></span><br><span class="line">responseCallbacks.put(BridgeUtil.parseFunctionName(jsUrl), returnCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有分析过，对 js 命令做了处理，生成了 key：</p><blockquote><p>javascript:WebViewJavascriptBridge._fetchQueue(); –&gt; _fetchQueue</p></blockquote><p>用于保存回调；</p><h2 id="3-3-handlerReturnData"><a href="#3-3-handlerReturnData" class="headerlink" title="3.3 handlerReturnData"></a>3.3 handlerReturnData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlerReturnData</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3*7.2】再次解析 url，获得回调的 key：functionName</span></span><br><span class="line">String functionName = BridgeUtil.getFunctionFromReturnUrl(url);</span><br><span class="line"><span class="comment">//【1】functionName 就是 _fetchQueue，这里我们获得了【*3.3】注册的 callback</span></span><br><span class="line">CallBackFunction f = responseCallbacks.get(functionName);</span><br><span class="line"><span class="comment">//【--&gt;3*7.2】获得 js 的回调返回数据；</span></span><br><span class="line">String data = BridgeUtil.getDataFromReturnUrl(url);</span><br><span class="line"><span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.1.1】执行回调，处理数据！</span></span><br><span class="line">f.onCallBack(data);</span><br><span class="line"><span class="comment">//【2】删除该 _fetchQueue 对应的回调（我觉得可以不删除的）</span></span><br><span class="line">responseCallbacks.remove(functionName);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发前面的 _fetchQueue 对应的回调；</p><h2 id="3-4-queueMessage"><a href="#3-4-queueMessage" class="headerlink" title="3.4 queueMessage"></a>3.4 queueMessage</h2><p>加入 message list：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startupMessage != <span class="keyword">null</span>) &#123;</span><br><span class="line">startupMessage.add(m);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//【--&gt;*3.5】分发 message 给 js；</span></span><br><span class="line">dispatchMessage(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-dispatchMessage"><a href="#3-5-dispatchMessage" class="headerlink" title="3.5 dispatchMessage"></a>3.5 dispatchMessage</h2><p>native 给 js 发送消息的关键点，参数 message 是一个消息对象！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】将 message 转为 json</span></span><br><span class="line">    String messageJson = m.toJson();</span><br><span class="line">    <span class="comment">//【2】为 message json 字符串转义特殊字符；</span></span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(\\\\)([^utrn])"</span>, <span class="string">"\\\\\\\\$1$2"</span>);</span><br><span class="line">    messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\")"</span>, <span class="string">"\\\\\""</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"(?&lt;=[^\\\\])(\')"</span>, <span class="string">"\\\\\'"</span>);</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7B"</span>, URLEncoder.encode(<span class="string">"%7B"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%7D"</span>, URLEncoder.encode(<span class="string">"%7D"</span>));</span><br><span class="line">messageJson = messageJson.replaceAll(<span class="string">"%22"</span>, URLEncoder.encode(<span class="string">"%22"</span>));</span><br><span class="line"><span class="comment">//【3】创建要执行的 js 代码，用于和 H5 通信；</span></span><br><span class="line">    String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);</span><br><span class="line">    <span class="comment">//【4】必须要找主线程才会将数据传递出去 --- 划重点</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() == Looper.getMainLooper().getThread()) &#123;</span><br><span class="line">        【--&gt;*<span class="number">2.5</span>】执行 js 代码；</span><br><span class="line">        <span class="keyword">this</span>.loadUrl(javascriptCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BridgeUtil 是一个工具类，里面主要是一些通信协议码，以及一些工具方法，native 和 H5 通信的时候，本质上是执行 js 代码：</p><blockquote><p>final static String JS_HANDLE_MESSAGE_FROM_JAVA =<br>“javascript:WebViewJavascriptBridge._handleMessageFromNative(‘%s’);”;</p></blockquote><p>可以看到，执行的 js 代码如下：</p><blockquote><p>javascript:WebViewJavascriptBridge._handleMessageFromNative(JsonString of Message);</p></blockquote><p>我相信大家知道，这个方法将进入通信协议 js 文件了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-调用接口&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第二篇 - js 通信协议分析</title>
    <link href="https://lishuaiqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/"/>
    <id>https://lishuaiqi.top/2019/05/21/JsBridge2-jsCommunicationProtocol/</id>
    <published>2019-05-21T12:46:25.000Z</published>
    <updated>2019-07-03T22:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-初步分析"><a href="#1-初步分析" class="headerlink" title="1 初步分析"></a>1 初步分析</h1><p>下面分析下 jsBridge 框架的通信协议，他是实际上是一个 js 文件，位于 assets 目录下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>这个 js 文件作为协议，决定了 H5 和 Native 代码通信方式和通信数据！</p><p><br> </p><p>这里就有一个问题了，他是如何被加载并生效的呢，有两种方式：</p><ul><li>第一种方式：通过 H5 直接加载；</li><li>第二种方式：通过动态注入的方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);</span><br></pre></td></tr></table></figure><p>我们的 jsBridge 框架也是用的第二种方式，具体的逻辑我们后面再分析；</p><h1 id="2-协议代码分析"><a href="#2-协议代码分析" class="headerlink" title="2 协议代码分析"></a>2 协议代码分析</h1><p>下面我们分析下 js 协议代码的逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断变量 WebViewJavascriptBridge 是否初始化过了；</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这里来看的话，其实他是一个 js function，当我们将 js 动态注入到 H5 中时，这么这个 function 就会执行；</p><h2 id="2-1-内部关键变量"><a href="#2-1-内部关键变量" class="headerlink" title="2.1 内部关键变量"></a>2.1 内部关键变量</h2><p>js 文件中定义了一些关键的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> messagingIframe; <span class="comment">// 这两个变量用与 android 获取 js 的数据；</span></span><br><span class="line"><span class="keyword">var</span> bizMessagingIframe;</span><br><span class="line"><span class="keyword">var</span> sendMessageQueue = [];  <span class="comment">// 发送的消息队列，H5 传递给 Native</span></span><br><span class="line"><span class="keyword">var</span> receiveMessageQueue = []; <span class="comment">// 接受的消息队列，Native 传递给 H5</span></span><br><span class="line"><span class="keyword">var</span> messageHandlers = &#123;&#125;; <span class="comment">// js 处理 native 消息的 handler 数组！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CUSTOM_PROTOCOL_SCHEME = <span class="string">'yy'</span>; <span class="comment">// 消息的 scheme，类似与 file，content；</span></span><br><span class="line"><span class="keyword">var</span> QUEUE_HAS_MESSAGE = <span class="string">'__QUEUE_MESSAGE__/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> responseCallbacks = &#123;&#125;; <span class="comment">// js 端的回调数组；</span></span><br><span class="line"><span class="keyword">var</span> uniqueId = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个很重要，window.WebViewJavascriptBridge 是 H5 和 Native 通信的</span></span><br><span class="line"><span class="comment">// 关键点！</span></span><br><span class="line"><span class="keyword">var</span> WebViewJavascriptBridge = <span class="built_in">window</span>.WebViewJavascriptBridge = &#123;</span><br><span class="line">    init: init,</span><br><span class="line">    send: send,</span><br><span class="line">    registerHandler: registerHandler,</span><br><span class="line">    callHandler: callHandler,</span><br><span class="line">    _fetchQueue: _fetchQueue,</span><br><span class="line">    _handleMessageFromNative: _handleMessageFromNative</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面最关键的一个对象就是 WebViewJavascriptBridge，H5 和 Native 都会通过它。</p><p>这个 window.WebViewJavascriptBridge 内部包含了一些函数对象，这些 function 都定义在 js 内部！</p><h2 id="2-2-动态注入初始化"><a href="#2-2-动态注入初始化" class="headerlink" title="2.2 动态注入初始化"></a>2.2 动态注入初始化</h2><p>这里是很关键的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line"><span class="comment">//【1】创建消息队列，一个是 index，一个是消息体；</span></span><br><span class="line">_createQueueReadyIframe(doc);</span><br><span class="line">_createQueueReadyIframe4biz(doc);</span><br><span class="line"><span class="comment">//【2】创建一个 event，类型为 'WebViewJavascriptBridgeReady'</span></span><br><span class="line"><span class="comment">// 然后分发 event；</span></span><br><span class="line"><span class="keyword">var</span> readyEvent = doc.createEvent(<span class="string">'Events'</span>);</span><br><span class="line">readyEvent.initEvent(<span class="string">'WebViewJavascriptBridgeReady'</span>);</span><br><span class="line">readyEvent.bridge = WebViewJavascriptBridge;</span><br><span class="line">doc.dispatchEvent(readyEvent); <span class="comment">//【*2.2.1】关键点！！</span></span><br></pre></td></tr></table></figure><p>在动态注入的时候，会执行初始化的操作：</p><ul><li>创建了一个 event；</li><li>初始化 event，事件类型为 ‘WebViewJavascriptBridgeReady’；</li><li>readyEvent.bridge 设置为我们上面创建的 ‘WebViewJavascriptBridgeReady’ 对象；</li><li>doc.dispatchEvent 分发 event；</li></ul><p><br></p><p><strong>这个 event 是在哪里做响应</strong>的呢？</p><p>是在 H5 里面，这个 H5 在加载时候，会执行内部 js 脚本，并通过 document.addEventListener 方法设置该 event 的监听器；</p><h3 id="2-2-1-H5-加载启动-event-监听"><a href="#2-2-1-H5-加载启动-event-监听" class="headerlink" title="2.2.1 H5 加载启动 event 监听"></a>2.2.1 H5 加载启动 event 监听</h3><p>H5 的页面里面，是有下面的一段 js 脚本，在 webview.loadUrl 后会直接加载该 js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">... ... ...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectWebViewJavascriptBridge</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="comment">//【2】如果 window.WebViewJavascriptBridge 已经存在</span></span><br><span class="line">        <span class="comment">// 直接执行函数闭包；</span></span><br><span class="line">        callback(WebViewJavascriptBridge)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】否则我们就注册一个 EventListener，监听 WebViewJavascriptBridgeReady 事件；</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(</span><br><span class="line">            <span class="string">'WebViewJavascriptBridgeReady'</span></span><br><span class="line">            , <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 事件出发后，执行函数闭包；</span></span><br><span class="line">                callback(WebViewJavascriptBridge)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】执行 connectWebViewJavascriptBridge 方法，传入了一个 js 闭包;</span></span><br><span class="line">connectWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//【*2.2.2】下一步初始化！</span></span><br><span class="line">     ... ... ... ...</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，window.WebViewJavascriptBridge 不存在，那么会注册一个 EventListener！</p><p>等待 event 触发后，执行 callback！</p><h3 id="2-2-2-event-出发点后下一步初始化"><a href="#2-2-2-event-出发点后下一步初始化" class="headerlink" title="2.2.2 event 出发点后下一步初始化"></a>2.2.2 event 出发点后下一步初始化</h3><p>callback 实际上就是闭包，参数 bridge 就是 js 协议中创建的 var WebViewJavascriptBridge：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 init 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.init(<span class="function"><span class="keyword">function</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'JS got a message'</span>, message);</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        <span class="string">'Javascript Responds'</span>: <span class="string">'测试中文!'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'JS responding with'</span>, data);</span><br><span class="line">        <span class="comment">//【1】函数闭包出发后，会回调 responseCallback</span></span><br><span class="line">        responseCallback(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【*2.3.1】执行 WebViewJavascriptBridge 对象的 registerHandler 方法，</span></span><br><span class="line"><span class="comment">// 传入一个函数闭包！</span></span><br><span class="line">bridge.registerHandler(<span class="string">"functionInJs"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = (<span class="string">"data from Java: = "</span> + data);</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="keyword">var</span> responseData = <span class="string">"Javascript Says Right back aka!"</span>;</span><br><span class="line">        <span class="comment">//【2】函数闭包出发后，会回调 responseCallback，通知 native；</span></span><br><span class="line">        responseCallback(responseData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关于 init 和 registerHandler 我们会在下面分析：</p><h2 id="2-3-核心函数"><a href="#2-3-核心函数" class="headerlink" title="2.3 核心函数"></a>2.3 核心函数</h2><p>下面来分析下关键的协议函数：</p><h3 id="2-3-1-init"><a href="#2-3-1-init" class="headerlink" title="2.3.1 init"></a>2.3.1 init</h3><p>init 方法用于设置 <strong>js 处理 native 消息的默认 handler</strong>：</p><p>同时也会<strong>分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">messageHandler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (WebViewJavascriptBridge._messageHandler) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'WebViewJavascriptBridge.init called twice'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】设置 js 用于处理 native 消息的 handler</span></span><br><span class="line">    <span class="comment">// 实际上就是【*2.2.2】中的函数闭包；</span></span><br><span class="line">    WebViewJavascriptBridge._messageHandler = messageHandler;</span><br><span class="line">    <span class="comment">//【2】分发已经被添加到 receiveMessageQueue 接受队列中的 native 的消息</span></span><br><span class="line">    <span class="keyword">var</span> receivedMessages = receiveMessageQueue;</span><br><span class="line">    receiveMessageQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; receivedMessages.length; i++) &#123;</span><br><span class="line">        <span class="comment">//【*2.3.3】分发来自 native 的消息；</span></span><br><span class="line">        _dispatchMessageFromNative(receivedMessages[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 messageHandler 就是【*2.2.2】中的函数闭包；</p><h3 id="2-3-2-registerHandler"><a href="#2-3-2-registerHandler" class="headerlink" title="2.3.2 registerHandler"></a>2.3.2 registerHandler</h3><p><strong>注册特定的消息处理 handler</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerHandler</span>(<span class="params">handlerName, handler</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】实际上就是向数组中放值；</span></span><br><span class="line">    messageHandlers[handlerName] = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>messageHandlers 之前有说过，是 js 处理 native 消息的 handler 数组！</p><ul><li>index 是 handler 的名称，根据前面代码，名称是 “functionInJs”；</li><li>value 是一个函数闭包；</li></ul><h3 id="2-3-3-dispatchMessageFromNative"><a href="#2-3-3-dispatchMessageFromNative" class="headerlink" title="2.3.3 _dispatchMessageFromNative"></a>2.3.3 _dispatchMessageFromNative</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>分发来自 native 的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _dispatchMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//【2】JSON 字符串转化 JSON 对象 message；</span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//【2】这里我们知道 native 发送消息完成，接下来 js 会处理消息，并将结果</span></span><br><span class="line">        <span class="comment">// 通过 callback 传递给 native 层；</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            <span class="comment">//【2.1】如果 native 指定了消息的 responseId，这种情况对应的情况是：</span></span><br><span class="line">            <span class="comment">// js 发送消息给 native，此时 native 发送回调消息给 js；</span></span><br><span class="line">            <span class="comment">// 那么我们就要在 responseCallback 数组中找到对应的 responseCallback</span></span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.2】然后执行 js 的 callback；</span></span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="comment">//【2.3】删掉该 callback</span></span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2.4】没有指定 responseId，但是指定了 callbackId，这种情况对应的是：</span></span><br><span class="line">            <span class="comment">// native 发送消息给 js，此时 js 发送回调消息给 native；</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="comment">//【2.4.1】获得 callbackId，并创建一个 responseCallback</span></span><br><span class="line">                <span class="comment">// 实际上就是一个函数闭包，该闭包会执行 _doSend 方法！</span></span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//【*2.3.4】发送回调给 native，但是此时是不触发的，出发的点在下面；</span></span><br><span class="line">                    _doSend(&#123;</span><br><span class="line">                        responseId: callbackResponseId,</span><br><span class="line">                        responseData: responseData</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.5】找到处理 native 消息的 handler，如果没有指定 handlerName</span></span><br><span class="line">            <span class="comment">// 那么就是 init 方法注册的默认 handler；否则就是特定的 handler</span></span><br><span class="line">            <span class="comment">// 其实就是前面 "functionInJs" 对应的 handler；</span></span><br><span class="line">            <span class="keyword">var</span> handler = WebViewJavascriptBridge._messageHandler;</span><br><span class="line">            <span class="keyword">if</span> (message.handlerName) &#123;</span><br><span class="line">                handler = messageHandlers[message.handlerName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.6】这个 handler 其实就是一个函数闭包，见【*2.2.2】，最后会回调</span></span><br><span class="line">            <span class="comment">// responseCallback 接口，就是上面的 function；</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exception) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span> != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: javascript handler threw."</span>, message, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里看起来，似乎很清晰呢；</p><h3 id="2-3-4-doSend"><a href="#2-3-4-doSend" class="headerlink" title="2.3.4 _doSend"></a>2.3.4 _doSend</h3><p>这个方法是 <strong>js 层</strong>调用，用于<strong>发送消息给 native 端</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _doSend(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">//【1】计算回调 id；</span></span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="comment">//【2】以 index 为回调 id，value 为具体的回调接口的形式，保存到 responseCallbacks 数组重；</span></span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//【3】message.callbackId 为计算出的回调 id；</span></span><br><span class="line">        message.callbackId = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】将该 message 加入到 sendMessageQueue 队列中，要发送给 native；</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//【6】这个地方会通过 messagingIframe.src 生成一个 Url，这会被 Webview.shouldOverrideUrlLoading 拦截到；</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意第二个参数 responseCallback：</p><ul><li>如果 responseCallback 不为 null，说明本次消息需要回调通知；</li><li>如果 responseCallback 为 null，说明不需要回调通知；</li></ul><p>该方法创建了一个动态的 url，这会被 Webview.shouldOverrideUrlLoading 拦截到，这是该库 android 获得 js 数据的方式；</p><p>但是这里并不是真正获取数据的地方，该 url 会触发一次 Webview.shouldOverrideUrlLoading；</p><p>然后 android 又会调用 js 的 _fetchQueue 方法，这时，又会生成一个 url，这个 url 才会保存了要传递给 android 的消息；</p><p>具体可以看 2.3.8 的 _fetchQueue 方法；</p><h3 id="2-3-5-callHandler"><a href="#2-3-5-callHandler" class="headerlink" title="2.3.5 callHandler"></a>2.3.5 callHandler</h3><p>这个方法是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><ul><li><strong>handlerName</strong>：js 处理消息的 handler 名称，这个 handler 是 <strong>native 层注册到 js 的</strong>；</li><li><strong>data</strong>：native 层传递的数据；</li><li><strong>responseCallback</strong>：接受回调的接口，native 层处理完数据会回调；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.3.4】调用 _doSend 方法发送消息给 js，注意这里第二个参数</span></span><br><span class="line">    <span class="comment">// 不为 null，因为 js 短需要收到回调；</span></span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        handlerName: handlerName,</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里第二个参数不为 null，因为 js 短需要收到回调；</p><p>该方法设置 handlerName，所以 native 会使用指定 handlerName 的 handler 去处理；</p><h3 id="2-3-6-send"><a href="#2-3-6-send" class="headerlink" title="2.3.6 send"></a>2.3.6 send</h3><p>这个方法也是 <strong>js 层</strong>调用的，<strong>通过这个接口来调用 native 方法</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">    _doSend(&#123;</span><br><span class="line">        data: data</span><br><span class="line">    &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到，他并没有设置 handlerName，所以 native 会使用默认的 handler 去处理；</p><h3 id="2-3-7-handleMessageFromNative"><a href="#2-3-7-handleMessageFromNative" class="headerlink" title="2.3.7 _handleMessageFromNative"></a>2.3.7 _handleMessageFromNative</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>以 json string 的形式发送数据给 js</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _handleMessageFromNative(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(messageJSON);</span><br><span class="line">    <span class="comment">//【1】如果 receiveMessageQueue 不为 null，那就直接添加到 receiveMessageQueue 队列中去；</span></span><br><span class="line">    <span class="keyword">if</span> (receiveMessageQueue) &#123;</span><br><span class="line">        receiveMessageQueue.push(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【*2.3.3】处理 native 传递的数据；</span></span><br><span class="line">    _dispatchMessageFromNative(messageJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很简单，就不多说了；</p><h3 id="2-3-8-fetchQueue"><a href="#2-3-8-fetchQueue" class="headerlink" title="2.3.8 _fetchQueue"></a>2.3.8 _fetchQueue</h3><p>这个方法是 <strong>native 层</strong>调用的，<strong>用于获取 sendMessageQueue 队列中的消息</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> _fetchQueue(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是统一处理要发给 native 的所有消息，将队列转为 string</span></span><br><span class="line">    <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">    sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//【2】这里又再在页面生成 url，和之前的区别是包含数据，然后通过 shouldOverrideUrlLoading 方法拦截，捕获 url 中的数据；</span></span><br><span class="line">    <span class="keyword">if</span> (messageQueueString !== <span class="string">'[]'</span>) &#123;</span><br><span class="line">        bizMessagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://return/_fetchQueue/'</span> + <span class="built_in">encodeURIComponent</span>(messageQueueString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，不多说了，关于 H5 和 Native 通信的流程，后续再分析！</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>关于 js 通信协议的相关分析到这里就结束了。</p><p>这里我自己也有点疑惑，对于 android 获取 js 数据的方式，该库并没有使用 @JavascriptInterface 注解，通过如下方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebView.addJavascriptInterface(<span class="keyword">new</span> WebData(), <span class="string">"webdata"</span>);</span><br></pre></td></tr></table></figure><p>通过查阅相关资料，可能有如下的原因：</p><ul><li><strong>安全隐患</strong>：这是因为同源规则 (SOP) 不适用与该方法，加上第三方 JavaScript 库或来自一个陌生域名的 iframe 可能在 Java 层访问这些被暴露的方法。因此，攻击者可通过一个 XSS 漏洞执行原生代码或者注入病毒代码到应用程序中。</li><li><strong>兼容性</strong>：JavaScript 层中暴露的 Java 对象的所有公有方法在 Android 版本低于 JerryBean MRI(API Level 17) 以下时可访问。而在 Google API 17 （4.２）以上，暴露的函数必须通过 @JavaScriptInterface 注释来防止方法的暴露</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-初步分析&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>JsBridge 第一篇 - 框架整体结构和基本使用</title>
    <link href="https://lishuaiqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/"/>
    <id>https://lishuaiqi.top/2019/05/20/JsBridge1-frameworkStructureAndBaseUsages/</id>
    <published>2019-05-20T12:46:25.000Z</published>
    <updated>2019-07-03T22:41:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；</p><h1 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1 工程结构"></a>1 工程结构</h1><p>我们先来看看 lib 的主要文件结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|____src</span><br><span class="line">| |____main</span><br><span class="line">| | |____java</span><br><span class="line">| | | |____com</span><br><span class="line">| | | | |____github</span><br><span class="line">| | | | | |____lzyzsd</span><br><span class="line">| | | | | | |____jsbridge</span><br><span class="line">| | | | | | | |____Message.java</span><br><span class="line">| | | | | | | |____WebViewJavascriptBridge.java</span><br><span class="line">| | | | | | | |____DefaultHandler.java</span><br><span class="line">| | | | | | | |____BridgeWebView.java</span><br><span class="line">| | | | | | | |____BridgeWebViewClient.java</span><br><span class="line">| | | | | | | |____CallBackFunction.java</span><br><span class="line">| | | | | | | |____BridgeHandler.java</span><br><span class="line">| | | | | | | |____BridgeUtil.java</span><br><span class="line">| | |____assets</span><br><span class="line">| | | |____WebViewJavascriptBridge.js</span><br></pre></td></tr></table></figure><p>可以看到，核心的代码在 asserts 和 jsbridge 目录下。</p><ul><li>js 文件是是通信的协议，H5 会出发 js 脚本中的语句，然后把通信的数据传递给 WebView；</li><li>jsbridge 目录下的 .java 文件则是和 Native 层的逻辑相关；</li></ul><p>这里先不详细分析每个文件的具体逻辑，我们后面分析交互流程的时候会讲；</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h1><p>具体的使用主要分为如下几个部分，我会将 Demo 中的一些重点代码块，用注视标注出来：</p><h2 id="2-1-初始化-BridgeWebView："><a href="#2-1-初始化-BridgeWebView：" class="headerlink" title="2.1 初始化 BridgeWebView："></a>2.1 初始化 BridgeWebView：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webView = (BridgeWebView) findViewById(R.id.webView);</span><br><span class="line">button = (Button) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】设置默认的消息处理回调；</span></span><br><span class="line">webView.setDefaultHandler(<span class="keyword">new</span> DefaultHandler());</span><br><span class="line"><span class="comment">//【2】设置 WebChromeClient 对象，无关不分析；</span></span><br><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，这里的 WebChromeClient 其实没有太大的用处，而真正有用的是其内部的：WebViewClient 对象，这个我们后面单独去分析 BridgeWebView 的时候，就知道 WebViewClient 的具体逻辑了；</p><h2 id="2-2-注册回调-Handler-到-webview-中："><a href="#2-2-注册回调-Handler-到-webview-中：" class="headerlink" title="2.2 注册回调 Handler 到 webview 中："></a>2.2 注册回调 Handler 到 webview 中：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】加载 H5 页面；</span></span><br><span class="line">webView.loadUrl(<span class="string">"file:///android_asset/demo.html"</span>);</span><br><span class="line"><span class="comment">//【2】注册了一个 BridgeHandler 回调对象，用于处理 js 的消息并回调通知；</span></span><br><span class="line">webView.registerHandler(<span class="string">"submitFromWeb"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</span><br><span class="line">Log.i(TAG, <span class="string">"handler = submitFromWeb, data from web = "</span> + data);</span><br><span class="line">        function.onCallBack(<span class="string">"submitFromWeb exe, response data 中文 from Java"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>BridgeHandler 是一个接口，面向接口编程，前面的 DefaultHandler 实现了这个接口！</p><p>可以看到 BridgeHandler 是用于处理 H5 发送给 Native 的消息的；</p><p>而 CallBackFunction 则是用于回调结果给 H5；</p><h2 id="2-3-Native-向-H5-发送消息，并接受回调"><a href="#2-3-Native-向-H5-发送消息，并接受回调" class="headerlink" title="2.3 Native 向 H5 发送消息，并接受回调"></a>2.3 Native 向 H5 发送消息，并接受回调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】封装 Java 层的 bean 数据；</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.address = <span class="string">"SDU"</span>;</span><br><span class="line">user.location = location;</span><br><span class="line">user.name = <span class="string">"大头鬼"</span>;</span><br><span class="line"><span class="comment">//【2】发送数据，并注册回调函数 CallBackFunction：</span></span><br><span class="line">webView.callHandler(<span class="string">"functionInJs"</span>, <span class="keyword">new</span> Gson().toJson(user), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//【3】这个是不需要回调的，直接发送数据给 H5；</span></span><br><span class="line">webView.send(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>可以看到，上面给出了有回调和没有回调的两种通信方式；</p><p>具体的调用逻辑，我们后面再分析！</p><h2 id="2-4-H5-向-Native-发送消息，并接受回调"><a href="#2-4-H5-向-Native-发送消息，并接受回调" class="headerlink" title="2.4 H5 向 Native 发送消息，并接受回调"></a>2.4 H5 向 Native 发送消息，并接受回调</h2><p>这个地方就比较复杂了，我们要从 H5 中看起；</p><ul><li>H5 触发 js 的函数，指定具体的 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，特定 handler 处理！</span></span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.callHandler(</span><br><span class="line">        <span class="string">'submitFromWeb'</span></span><br><span class="line">        , &#123;<span class="string">'param'</span>: <span class="string">'中文测试'</span>&#125;</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"send get responseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看到了 ‘submitFromWeb’，这和前面的 registerHandler 相呼应了！</p><ul><li>H5 触发 js 的函数，默认 handler 处理：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="built_in">document</span>.getElementById(<span class="string">"text1"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="built_in">document</span>.getElementById(<span class="string">"text2"</span>).value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】调用本地方法，默认 handler 处理！</span></span><br><span class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">"这是一个图片 &lt;img src=\"a.png\"/&gt; test\r\nhahaha"</span>&#125;;</span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge.send(</span><br><span class="line">        data</span><br><span class="line">        , <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).innerHTML = <span class="string">"repsonseData from java, data = "</span> + responseData</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这和前面的 DefaultHandler 相呼应了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 JsBridge 框架的原理，学习 H5 和原生 WebView 的交互方式，框架选自 GitHub 上的很火的 H5 + WebView 三方库：lzyzsd/JsBridge，作者是大鬼头；&lt;/p&gt;
&lt;h1 id=&quot;1-工程结构&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/JsBridge/"/>
    
    
      <category term="JsBridge" scheme="https://lishuaiqi.top/tags/JsBridge/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第七篇 - 路由跳转/数据传递 (arouter-api)</title>
    <link href="https://lishuaiqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/"/>
    <id>https://lishuaiqi.top/2019/05/09/ARouter7-navigationWithData-arouter-api/</id>
    <published>2019-05-09T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的路由跳转的过程，以及变量/数据的传递，这篇文章将是本系列的最后一篇（后续会抽时间写其他的）！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-路由跳转"><a href="#1-路由跳转" class="headerlink" title="1 路由跳转"></a>1 路由跳转</h1><p>我们来看看</p><h2 id="1-1-跳转方式"><a href="#1-1-跳转方式" class="headerlink" title="1.1 跳转方式"></a>1.1 跳转方式</h2><p>ARouter 支持两种方式来跳转：</p><ul><li>path 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>)  <span class="comment">// 指定 path</span></span><br><span class="line">            .navigation();</span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(); <span class="comment">// 显示指定分组</span></span><br></pre></td></tr></table></figure><ul><li>uri 跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uri uri;</span><br><span class="line">ARouter.getInstance().build(uri).navigation(); <span class="comment">// 指定 uri</span></span><br></pre></td></tr></table></figure><ul><li>我们可以设置跳转请求码和跳转回调</li></ul><p>这种调用方式相当于原生的 startActivityForResult：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>, <span class="string">"ap"</span>).navigation(<span class="keyword">this</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>同时我们也可以指定跳转回调：<strong>NavigationCallback</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>处理跳转的结果；</p><ul><li>我们也可以设置跳过所有的拦截器</li></ul><p>我们知道 actiivty 的跳转是收到拦截器的限制的，但是 PostCard 提供了接口，能够跳过所有的拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用绿色通道(跳过所有的拦截器)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/home/main"</span>).greenChannel().navigation();</span><br></pre></td></tr></table></figure><p>这里的 greenChannel 方法我们前面有分析过，不多说了！</p><h3 id="1-1-1-Uri-跳转的特殊性"><a href="#1-1-1-Uri-跳转的特殊性" class="headerlink" title="1.1.1 Uri 跳转的特殊性"></a>1.1.1 Uri 跳转的特殊性</h3><p>这里要单独讲下 uri 跳转的特殊性，ARouter 通过新建一个没有 UI 的界面作为跳板来统一处理，scheme 是 arouter 的跳转请求！</p><ul><li>需要新建一个 activity 来接收 uri，没有 ui 界面，这是关键点！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AndroidManifest.xml 中要指定该 activity 监听的 schame 事件是：<strong>arouter://m.aliyun.com</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- App Links --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:autoVerify</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span>   <span class="comment">&lt;!-- 让浏览器可以打这个 Actvity，当然要符合 host 和 scheme --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"http"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"https"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于这个 activity 作为外界的统一入口，H5 或者 native 通过 intent 匹配，将数据传递给这个 activity，然后这个 activity 解析数据，将 uri 叫给 ARouter 最终实现跳转！</p><p>详细分析：Uri 的组成为：<strong>scheme://host:port/path?query</strong>，我们通过中转 activity 匹配 <strong>scheme://host:port</strong> 部分，截获 Uri，然后通过 getPath 就可以回去到 Path，这个 Path 需要和 @Route 的 path 匹配，这样就可以实现跳转了！</p><p>可以看出这个过程就是 <strong>intent 的匹配！</strong></p><h2 id="1-2-数据传递"><a href="#1-2-数据传递" class="headerlink" title="1.2 数据传递"></a>1.2 数据传递</h2><p>以上的两种跳转方式，都可以传递数据，我们来看下数据传递的方式：</p><ul><li>直接传递 Bundle</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bundle params = <span class="keyword">new</span> Bundle();</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .with(params)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>注意：这个方法会覆盖掉 PostCast 内部默认创建的 Bundle；</p><ul><li>指定启动 Flag</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>)</span><br><span class="line">    .withFlags();</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><ul><li>支持传递各种基本类型数据、对象、数组、List、可序列化数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/home/main"</span>).withAction(..)</span><br><span class="line">    .withBoolean(String key, <span class="keyword">boolean</span> value)</span><br><span class="line">    .withBundle(String key, Bundle value)</span><br><span class="line">    .withByte(String key, <span class="keyword">byte</span> value)</span><br><span class="line">    .withCharSequenceArrayList(String key, ArrayList&lt;CharSequence&gt; value)</span><br><span class="line">    .withParcelable(String key, Parcelable value)</span><br><span class="line">    .withSerializable(String key, Serializable value)</span><br><span class="line">    .withStringArrayList(String key, ArrayList&lt;String&gt; value)</span><br><span class="line">    .withObject(<span class="meta">@Nullable</span> String key, <span class="meta">@Nullable</span> Object value)</span><br><span class="line">    ... ... ... <span class="comment">// 接口太多了，省略下，其实这些接口对应的是 Bundle 中的方法！</span></span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><p>这些数据都会被加入到 PostCard 内部的默认创建的 Bundle 中，其实这些方法对应的就是 Bundle 中的方法！</p><ul><li>支持设置转场动画</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转场动画(常规方式)</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)</span><br><span class="line">    .navigation(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转场动画(API16+)</span></span><br><span class="line">ActivityOptionsCompat compat = ActivityOptionsCompat.</span><br><span class="line">    makeScaleUpAnimation(v, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">"/test/activity2"</span>)</span><br><span class="line">    .withOptionsCompat(compat)</span><br><span class="line">    .navigation();</span><br></pre></td></tr></table></figure><h3 id="1-2-1-对象传递的特殊"><a href="#1-2-1-对象传递的特殊" class="headerlink" title="1.2.1 对象传递的特殊"></a>1.2.1 对象传递的特殊</h3><p>对于自定义的对象，不能确保它可序列化，所以这里通过 SerializationService 将其转为了 jsonstring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">withObject</span><span class="params">(@Nullable String key, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    mBundle.putString(key, serializationService.object2Json(value));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-跳转流程"><a href="#2-跳转流程" class="headerlink" title="2 跳转流程"></a>2 跳转流程</h1><p>下面，我们重点分析路由跳转的流程，和数据传递的流程，忽略掉一些之前已经见过的流程！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(...); --&gt; _ARouter.getInstance().build(...);</span><br></pre></td></tr></table></figure><p>无论是 path 跳转，还是 uri 跳转，ARouter 都会调用 _ARouter 的方法！</p><h2 id="2-1-ARouter-build"><a href="#2-1-ARouter-build" class="headerlink" title="2.1 _ARouter.build"></a>2.1 _ARouter.build</h2><p>无论是 build(path)，还是  build(uri)，最终创建的 PostCard 都是一样的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));  <span class="comment">// 通过 path 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == uri || TextUtils.isEmpty(uri.toString())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            uri = pService.forUri(uri);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(uri.getPath(), extractGroup(uri.getPath()), uri, <span class="keyword">null</span>); <span class="comment">// 通过 uri 创建！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Postcard"><a href="#2-2-Postcard" class="headerlink" title="2.2 Postcard"></a>2.2 Postcard</h2><h3 id="2-2-1-new-Postcard"><a href="#2-2-1-new-Postcard" class="headerlink" title="2.2.1 new Postcard"></a>2.2.1 new Postcard</h3><p>创建一个新的 Postcard：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path);</span><br><span class="line">    setGroup(group);</span><br><span class="line">    setUri(uri);</span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过 Uri 创建的话，会多设置一个 Uri 的属性；</p><h3 id="2-2-2-navigation"><a href="#2-2-2-navigation" class="headerlink" title="2.2.2 navigation"></a>2.2.2 navigation</h3><p>最核心的就后面的两个方法，支持传入 requestCode 和 NavigationCallback 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    navigation(mContext, requestCode, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">navigation</span><span class="params">(Activity mContext, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ARouter.getInstance().navigation(mContext, <span class="keyword">this</span>, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ARouter.getInstance().navigation，我们知道最后会调用 _ARouter.getInstance().navigation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(...) --&gt; _ARouter.getInstance().navigation(...);</span><br></pre></td></tr></table></figure><h2 id="2-3-ARouter-navigation"><a href="#2-3-ARouter-navigation" class="headerlink" title="2.3 _ARouter.navigation"></a>2.3 _ARouter.navigation</h2><p>这里我们可以看到回调的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1】完善跳转信息；</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service/Fragment 是会跳过拦截器的，对于 activity 默认是不会跳过的，当然了可动态设置；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用，通过 NavigationCallback 通知；</span></span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-LogisticsCenter-completion"><a href="#2-3-1-LogisticsCenter-completion" class="headerlink" title="2.3.1 LogisticsCenter.completion"></a>2.3.1 LogisticsCenter.completion</h3><p>完善登陆信息，这里前面有说过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">//【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>,</span><br><span class="line">                                                    postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;2.3.1】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.1.1】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的，主要是 IProvider 类型；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是</p><h4 id="2-3-1-1-数据传递-important"><a href="#2-3-1-1-数据传递-important" class="headerlink" title="2.3.1.1  数据传递 - important"></a>2.3.1.1  数据传递 - important</h4><p>这里我们要重点看下 PostCard 中的数据是如何处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">postcard.setType(routeMeta.getType()); </span><br><span class="line">postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">postcard.setExtra(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line"><span class="comment">//【1】注意这里是处理 uri 的数据</span></span><br><span class="line">Uri rawUri = postcard.getUri();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">  <span class="comment">//【--&gt;2.3.1.2】获得 uri 的数据；</span></span><br><span class="line">  Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">  <span class="comment">//【2】RouteMeta 的 paramsType 保存了被 @AutoWired 注解的参数和类型的枚举序号的映射关系；</span></span><br><span class="line">  Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line">  <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">      <span class="comment">//【--&gt;2.3.1.3】将传递的数据设置到 Postcard 中，调用 Postcard.withXXX 方法；</span></span><br><span class="line">      setValue(postcard,</span><br><span class="line">               params.getValue(), <span class="comment">// 变量类型的枚举序号；</span></span><br><span class="line">               params.getKey(), <span class="comment">// 变量名/注解name值</span></span><br><span class="line">               resultMap.get(params.getKey())); <span class="comment">// uri 写到的变量的值；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】将被 @AutoWired 注解的变量的变量名/注解name值以 String[] 形式保存到 PostCard.Bundle 中；</span></span><br><span class="line">    postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//【4】将 uri 保存到 PostCard.Bundle 中，</span></span><br><span class="line">  postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的两个常量的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-TextUtils-splitQueryParameters"><a href="#2-3-1-2-TextUtils-splitQueryParameters" class="headerlink" title="2.3.1.2 TextUtils.splitQueryParameters"></a>2.3.1.2 TextUtils.splitQueryParameters</h4><p>将 uri 后缀保存的 key-value 的键值对转为 Map&lt;String, String&gt;：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">splitQueryParameters</span><span class="params">(Uri rawUri)</span> </span>&#123;</span><br><span class="line">    String query = rawUri.getEncodedQuery();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (query == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; paramMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> next = query.indexOf(<span class="string">'&amp;'</span>, start);</span><br><span class="line">        <span class="keyword">int</span> end = (next == -<span class="number">1</span>) ? query.length() : next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> separator = query.indexOf(<span class="string">'='</span>, start);</span><br><span class="line">        <span class="keyword">if</span> (separator &gt; end || separator == -<span class="number">1</span>) &#123;</span><br><span class="line">            separator = end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = query.substring(start, separator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(name)) &#123;</span><br><span class="line">            String value = (separator == end ? <span class="string">""</span> : query.substring(separator + <span class="number">1</span>, end));</span><br><span class="line">            paramMap.put(Uri.decode(name), Uri.decode(value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move start to end of name.</span></span><br><span class="line">        start = end + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (start &lt; query.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(paramMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-3-LogisticsCenter-setValue"><a href="#2-3-1-3-LogisticsCenter-setValue" class="headerlink" title="2.3.1.3 LogisticsCenter.setValue"></a>2.3.1.3 LogisticsCenter.setValue</h4><p>将传递的数据设置进入 Postcard 中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Postcard postcard, Integer typeDef, String key, String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != typeDef) &#123;</span><br><span class="line">            <span class="comment">//【1】根据类型的枚举序号，匹配对应的 withXXX 方法，将值设置到内部的 Bundle 中！</span></span><br><span class="line">            <span class="keyword">if</span> (typeDef == TypeKind.BOOLEAN.ordinal()) &#123;</span><br><span class="line">                postcard.withBoolean(key, Boolean.parseBoolean(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.BYTE.ordinal()) &#123;</span><br><span class="line">                postcard.withByte(key, Byte.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.SHORT.ordinal()) &#123;</span><br><span class="line">                postcard.withShort(key, Short.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.INT.ordinal()) &#123;</span><br><span class="line">                postcard.withInt(key, Integer.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.LONG.ordinal()) &#123;</span><br><span class="line">                postcard.withLong(key, Long.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.FLOAT.ordinal()) &#123;</span><br><span class="line">                postcard.withFloat(key, Float.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.DOUBLE.ordinal()) &#123;</span><br><span class="line">                postcard.withDouble(key, Double.valueOf(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.STRING.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.PARCELABLE.ordinal()) &#123;</span><br><span class="line">                <span class="comment">// TODO : How to description parcelable value with string?</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeDef == TypeKind.OBJECT.ordinal()) &#123;</span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">// Compatible compiler sdk 1.0.3, in that version, the string type = 18</span></span><br><span class="line">                postcard.withString(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postcard.withString(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"LogisticsCenter setValue failed! "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法很简单，不多说了！</p><h3 id="2-3-2-ARouter-navigation"><a href="#2-3-2-ARouter-navigation" class="headerlink" title="2.3.2 _ARouter._navigation"></a>2.3.2 _ARouter._navigation</h3><p>可以看到，启动过的过程就是将 Postcard 中的数据设置到 intent 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line">    <span class="comment">//【1】根据跳转类型处理不同的目标；</span></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">//【1.1】创建 activity；</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.2】设置目标启动的 flags</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【1.3】设置 action！</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【--&gt;2.3.2.1】执行启动；</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider(); <span class="comment">// 这个是针对 Provider 的；</span></span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            <span class="comment">//【1.4】针对于 brocastreceiver，contenprovider，fragment，会拿到其实例！</span></span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【1.4.1】针对于 fragment，还会设置 Arguments；</span></span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD: <span class="comment">// 其他情况没有；</span></span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对于 brocastreceiver，contenprovider，fragment，会拿到其实例，针对于 fragment，还会设置 Arguments！</p><h4 id="2-3-2-1-ARouter-startActivity"><a href="#2-3-2-1-ARouter-startActivity" class="headerlink" title="2.3.2.1 _ARouter.startActivity"></a>2.3.2.1 _ARouter.startActivity</h4><p>这就是最后启动过程了，其实很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">int</span> requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里根据 requestCode 有不同的调用方式；</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;  <span class="comment">// Need start for result</span></span><br><span class="line">        <span class="keyword">if</span> (currentContext <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            ActivityCompat.startActivityForResult((Activity) currentContext, intent, requestCode, postcard.getOptionsBundle());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warning(Consts.TAG, <span class="string">"Must use [navigation(activity, ...)] to support [startActivityForResult]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ActivityCompat.startActivity(currentContext, intent, postcard.getOptionsBundle());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((-<span class="number">1</span> != postcard.getEnterAnim() &amp;&amp; -<span class="number">1</span> != postcard.getExitAnim()) &amp;&amp; currentContext <span class="keyword">instanceof</span> Activity) &#123;    <span class="comment">// Old version.</span></span><br><span class="line">        ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.4.3】启动完成，回调 NavigationCallback</span></span><br><span class="line">        callback.onArrival(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>这里的 postcard.getOptionsBundle() 会返回一个 Bundle 是用来保存额外的启动参数，比如动画等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> Bundle optionsCompat;     </span><br><span class="line"><span class="function"><span class="keyword">public</span> Bundle <span class="title">getOptionsBundle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> optionsCompat;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-跳转回调"><a href="#2-4-跳转回调" class="headerlink" title="2.4 跳转回调"></a>2.4 跳转回调</h2><p>我们看看 NavigationCallback 的相关接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NavigationCallback</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;2.4.1】完善跳转信息成功后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.2】完善跳转信息失败后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.3】跳转成功后会回调；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onArrival</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;2.4.4】拦截器对跳转进行了拦截后会调用；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>到这里 ARouter 分析就暂告一段落了；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第六篇 - 自动注入 (arouter-api)</title>
    <link href="https://lishuaiqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/"/>
    <id>https://lishuaiqi.top/2019/04/30/ARouter6-autoInjectWithAutoWired-arouter-api/</id>
    <published>2019-04-30T12:46:25.000Z</published>
    <updated>2019-08-13T15:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块的自动注入原理！</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-自动注入"><a href="#1-自动注入" class="headerlink" title="1 自动注入"></a>1 自动注入</h1><p>我们在跳转的过程中，可能会传递一些数据，在原生的机制里面，我们是通过 Intent 来传递数据的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">intent.getXXXX();</span><br></pre></td></tr></table></figure><p>但是这需要我们手动的获取传递的值，ARouter 提供了一种更方便的方法：<strong>自动注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">String key1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_test1);</span><br><span class="line"></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要实现自动注入，对于变量要通过 @Autowired 注解，同时要使用  ARouter.getInstance().inject(this) 方法关联变量；</p><p>其实自动注入依然是通过 intent 来传递值的</p><h1 id="2-注解处理-Autowired"><a href="#2-注解处理-Autowired" class="headerlink" title="2 注解处理 - Autowired"></a>2 注解处理 - Autowired</h1><p>我们来回顾下对于 @Autowired 的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired 注解是由 AutowiredProcessor 解析并处理，这里我们<strong>不再关注注解的处理</strong>了，ok？</p><p>直接来看生成的类！</p><h2 id="2-1-动态生成类"><a href="#2-1-动态生成类" class="headerlink" title="2.1 动态生成类"></a>2.1 动态生成类</h2><p>这里我们以 activity 为例子，下面我们一次性把<strong>所有可以自动注入的变量类</strong>型都加进来；</p><h3 id="2-1-1-被注解的类"><a href="#2-1-1-被注解的类" class="headerlink" title="2.1.1 被注解的类"></a>2.1.1 被注解的类</h3><ul><li><strong>TestInjectActivity</strong>，用于接受 intent 传递的值；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestInjectActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"str1"</span>)</span><br><span class="line">    String str;  <span class="comment">// string</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"bool1"</span>)</span><br><span class="line">    <span class="keyword">boolean</span> bool; <span class="comment">// boolean</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"shortNum1"</span>)</span><br><span class="line">    <span class="keyword">short</span> shortNum; <span class="comment">// short</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> intNum;  <span class="comment">// int</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span>[] intNumArray; <span class="comment">//int[]</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">long</span> longNum;  <span class="comment">// long</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"charStr1"</span>)</span><br><span class="line">    <span class="keyword">char</span> charStr; <span class="comment">// char</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"floatNum1"</span>)</span><br><span class="line">    <span class="keyword">float</span> floatNum; <span class="comment">// float</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">float</span>[] floatNumArray; <span class="comment">// float[]</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"doubleNum"</span>)</span><br><span class="line">    <span class="keyword">double</span> doubleNum;  <span class="comment">// double</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"mapStr"</span>)</span><br><span class="line">    Map&lt;String, String&gt; mapStr; <span class="comment">// map</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestOne&gt; objList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestOne testOne;</span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestOneParcelable testOneParcelable; <span class="comment">// Parcelable</span></span><br><span class="line">    <span class="meta">@Autowired</span>()</span><br><span class="line">    TestTwoParcelable TestTwoParcelable; <span class="comment">// Serializable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/test/TestHelloInterface"</span>)</span><br><span class="line">    HelloInterface helloInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneParcelable</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;  <span class="comment">// 实现了 Parcelable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;TestOneParcelable&gt; CREATOR</span><br><span class="line">             = <span class="keyword">new</span> Parcelable.Creator&lt;TestOneParcelable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> TestOneParcelable <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> TestOneParcelable[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TestOneParcelable[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            dest.writeString(one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestTwoParcelable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">// 实现了 Serializable</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestOne</span> </span>&#123; <span class="comment">// 自定义的类</span></span><br><span class="line">        <span class="keyword">public</span> String one;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123; <span class="comment">// 用于暴漏服务的接口</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个 TestInjectActivity 定义了一些需要自动赋值的成员！</p><ul><li><strong>TestSerializationService</strong>：用于序列化自定义的类对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/TestSerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123; <span class="comment">// 用于序列化自定义对象；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>TestHelloInterface</strong>：暴漏的服务，具体的实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/Test/TestHelloInterface"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloInterface</span> <span class="keyword">implements</span> <span class="title">TestInjectActivity</span>.<span class="title">HelloInterface</span> </span>&#123; <span class="comment">// 用于实现具体的服务；</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  上面是简单的例子！</p><h3 id="2-1-2-动态生成类"><a href="#2-1-2-动态生成类" class="headerlink" title="2.1.2  动态生成类"></a>2.1.2  动态生成类</h3><p>我们去看看动态生成的类，动态生成的类所在的包名和自动注入的类的包名是一样的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInjectActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取序列化服务；</span></span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    <span class="comment">//【2】获取目标 activity</span></span><br><span class="line">    TestInjectActivity substitute = (TestInjectActivity)target;</span><br><span class="line">    <span class="comment">//【3】通过 getIntent 来处理传递的数据；</span></span><br><span class="line">    substitute.str = substitute.getIntent().getStringExtra(<span class="string">"str1"</span>);</span><br><span class="line">    substitute.bool = substitute.getIntent().getBooleanExtra(<span class="string">"bool1"</span>, substitute.bool);</span><br><span class="line">    substitute.shortNum = substitute.getIntent().getShortExtra(<span class="string">"shortNum1"</span>, substitute.shortNum);</span><br><span class="line">    substitute.intNum = substitute.getIntent().getIntExtra(<span class="string">"intNum"</span>, substitute.intNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.intNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"intNumArray"</span>), </span><br><span class="line">                                                                <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">int</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'intNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.longNum = substitute.getIntent().getLongExtra(<span class="string">"longNum"</span>, substitute.longNum);</span><br><span class="line">    substitute.charStr = substitute.getIntent().getCharExtra(<span class="string">"charStr1"</span>, substitute.charStr);</span><br><span class="line">    substitute.floatNum = substitute.getIntent().getFloatExtra(<span class="string">"floatNum1"</span>, substitute.floatNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.floatNumArray = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"floatNumArray"</span>), </span><br><span class="line">                                                                  <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;<span class="keyword">float</span>[]&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'floatNumArray' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.doubleNum = substitute.getIntent().getDoubleExtra(<span class="string">"doubleNum"</span>, substitute.doubleNum);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.mapStr = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"mapStr"</span>), </span><br><span class="line">                                                           <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;Map&lt;String, String&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'mapStr' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.objList = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"objList"</span>), </span><br><span class="line">                                                         <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;List&lt;TestInjectActivity.TestOne&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'objList' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.testOne = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"testOne"</span>), </span><br><span class="line">                                                          <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestOne&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'testOne' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.testOneParcelable = substitute.getIntent().getParcelableExtra(<span class="string">"testOneParcelable"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != serializationService) &#123;</span><br><span class="line">      substitute.TestTwoParcelable = serializationService.parseObject(substitute.getIntent().getStringExtra(<span class="string">"TestTwoParcelable"</span>), </span><br><span class="line">                                                    <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;TestInjectActivity.TestTwoParcelable&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Log.e(<span class="string">"ARouter::"</span>, <span class="string">"You want automatic inject the field 'TestTwoParcelable' in class 'TestInjectActivity' "</span> </span><br><span class="line">            + <span class="string">", then you should implement 'SerializationService' to support object auto inject!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    substitute.helloInterface = (TestInjectActivity.HelloInterface)ARouter.getInstance().build(<span class="string">"/test/TestHelloInterface"</span>).navigation();;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实这个和之前分析注解解析的时候的模版类是一一对应的。</p><p><strong>可以看到</strong>：</p><ul><li>基本类型，直接通过 intent 的相关方法来处理；</li><li>数组，list，map，自定义类对象，都是通过序列化服务 serializationService 来处理的，也就是说要先将其转为 jsonString，然后保存到 intent 中；</li></ul><p>这里我们就不看 AutoWired 的注解解析了，大家可以直接看前面的文章；</p><h1 id="3-inject-自动注入"><a href="#3-inject-自动注入" class="headerlink" title="3 inject - 自动注入"></a>3 inject - 自动注入</h1><p>下面我们来分析下自动注入的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().inject(<span class="keyword">this</span>); <span class="comment">// 自动注入；</span></span><br></pre></td></tr></table></figure><p>这个是核心的方法！</p><h2 id="3-1-ARouter-inject"><a href="#3-1-ARouter-inject" class="headerlink" title="3.1 ARouter.inject"></a>3.1 ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2】进入 _ARouter</span></span><br><span class="line">    _ARouter.inject(thiz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-ARouter-inject"><a href="#3-2-ARouter-inject" class="headerlink" title="3.2 _ARouter.inject"></a>3.2 _ARouter.inject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】返回 AutowiredServiceImpl 服务</span></span><br><span class="line">    AutowiredService autowiredService = ((AutowiredService) ARouter.getInstance().build(<span class="string">"/arouter/service/autowired"</span>).navigation());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != autowiredService) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.3.1】通过 AutowiredServiceImpl 自动注入</span></span><br><span class="line">        autowiredService.autowire(thiz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“/arouter/service/autowired” 对应的 service 是 AutowiredServiceImpl，他是 ARouter 系统 Service，实现了 AutowiredService 接口！</p><p>它和 InterceptorServiceImpl 的作用很类似，获取方式这里就不再分析了！</p><h2 id="3-3-AutowiredServiceImpl"><a href="#3-3-AutowiredServiceImpl" class="headerlink" title="3.3 AutowiredServiceImpl"></a>3.3 AutowiredServiceImpl</h2><p>我们来看看 AutowiredServiceImpl 的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/autowired"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredServiceImpl</span> <span class="keyword">implements</span> <span class="title">AutowiredService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LruCache&lt;String, ISyringe&gt; classCache; </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; blackList;</span><br></pre></td></tr></table></figure><p>内部有一个 LruCache 缓存对象：key 是自动注入的类的全限定名（activity/fragment），value 是 <code>activityName$$ARouter$$Autowired</code> 的实例；</p><p>黑名单 blackList  用于保存哪些无法自动注入的类，value 是 自动注入的类的全限定名（activity/fragment；</p><h3 id="3-3-1-autowire"><a href="#3-3-1-autowire" class="headerlink" title="3.3.1 autowire"></a>3.3.1 autowire</h3><p>我们来看看他是如何处理的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autowire</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获取自动注入的类的全限定名；</span></span><br><span class="line">    String className = instance.getClass().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!blackList.contains(className)) &#123;</span><br><span class="line">            <span class="comment">//【2】判断是否已经添加到了 classCache 缓存中了；</span></span><br><span class="line">            ISyringe autowiredHelper = classCache.get(className);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == autowiredHelper) &#123; </span><br><span class="line">                <span class="comment">//【3】没有的话就通过反射创建 ISyringe 的实例，其实就是我们解析 AutoWired 的时候生成的：TestInjectActivity$$ARouter$$Autowired</span></span><br><span class="line">                <span class="comment">// 这里会创建其实例；</span></span><br><span class="line">                autowiredHelper = (ISyringe) Class.forName(instance.getClass().getName() + SUFFIX_AUTOWIRED).getConstructor().newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】调用其 inject 方法！</span></span><br><span class="line">            autowiredHelper.inject(instance);</span><br><span class="line">            <span class="comment">//【5】将其加入到缓存中；</span></span><br><span class="line">            classCache.put(className, autowiredHelper);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        blackList.add(className);    <span class="comment">// This instance need not autowired.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SUFFIX_AUTOWIRED 定义在 Consts 中，值为：<code>$$ARouter$$Autowired</code>!!</p><p>这里只是用 <code>TestInjectActivity$$ARouter$$Autowire</code>举个例子，实际上这个类的类名、包名和具体的业务相关；</p><p>后面的逻辑就不多说了，大家去看 inject 方法，一幕了然！</p><h1 id="4-SerializationService"><a href="#4-SerializationService" class="headerlink" title="4 SerializationService"></a>4 SerializationService</h1><p>我们来看看如何序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123; <span class="comment">// TestInjectActivity$$ARouter$$Autowired 使用的是这个方法；</span></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(input, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要自己实现一个 SerializationService，前面的动态生成类，使用了 parseObject 方法，将 jsonString 转为了 Object！</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本篇文章我们分析了 inject 的方法流程，但是我们遗留的下面的问题：</p><ul><li>ARouter 自动注入的值是如何传递的；</li></ul><p>我们会在路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第五篇 - 服务和拦截器 (arouter-api)</title>
    <link href="https://lishuaiqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/"/>
    <id>https://lishuaiqi.top/2019/04/25/ARouter5-ServiceAndIntecerptor-arouter-api/</id>
    <published>2019-04-25T12:46:25.000Z</published>
    <updated>2019-08-09T13:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法！</p><h1 id="1-开篇"><a href="#1-开篇" class="headerlink" title="1 开篇"></a>1 开篇</h1><p>这篇文章分析下 ARouter 的 Service 和 Interceptor，二者有如下的区别：</p><h2 id="1-1-实现接口不同"><a href="#1-1-实现接口不同" class="headerlink" title="1.1 实现接口不同"></a>1.1 实现接口不同</h2><ul><li>Service 直接或者间接的实现了 IProvider 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 直接或者间接的实现了 IInterceptor 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IInterceptor</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-注解不同"><a href="#1-2-注解不同" class="headerlink" title="1.2 注解不同"></a>1.2 注解不同</h2><ul><li>Service 使用 @Route  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/single"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleService</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Interceptor 使用 @Interceptor  注解处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">7</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Interceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-逻辑处理不同"><a href="#1-3-逻辑处理不同" class="headerlink" title="1.3 逻辑处理不同"></a>1.3 逻辑处理不同</h2><ul><li>拦截器会在 ARouter 初始化 init 的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。<pre><code>- 这个下面可以看到，内部有一个同步锁来控制；</code></pre></li><li>服务没有该限制，某一服务可能在 App 整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作；</li></ul><h1 id="1-服务-Service"><a href="#1-服务-Service" class="headerlink" title="1 服务 Service"></a>1 服务 Service</h1><h2 id="1-1-服务统一接口"><a href="#1-1-服务统一接口" class="headerlink" title="1.1 服务统一接口"></a>1.1 服务统一接口</h2><p>ARouter 已经帮我们提供了一些 Service 统一接口，对于对内对外提供特定的功能模版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  468 May  8 20:46 AutowiredService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  424 May  8 20:46 ClassLoaderService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  590 May  8 20:46 DegradeService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  575 May  8 20:46 InterceptorService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  555 May  8 20:46 PathReplaceService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  656 May  8 20:46 PretreatmentService.java</span><br><span class="line">-rwxr-xr-x  1 lishuaiqi820  235765416  974 May  8 20:46 SerializationService.java</span><br></pre></td></tr></table></figure><ul><li><strong>AutowiredService</strong>：用于处理 Autowired 注解的变量的 Service，ARouter 内置了一个 AutowiredServiceImpl 实现了 AutowiredService，我们在分析 inject 的时候，再讲；</li><li><strong>ClassLoaderService</strong>：针对于 installrun 的 Service；</li><li><strong>DegradeService</strong>：用于在跳转不成功的情况下，做降级处理；</li><li><strong>InterceptorService</strong>：用于处理 Interceptor 的 Service，ARouter 内置了一个 InterceptorServiceImpl 实现了 InterceptorService，用于初始化所有的  Interceptor 和处理拦截，我们下面分析；</li><li><strong>PathReplaceService</strong>：用于对路由的 path 做预处理；</li><li><strong>PretreatmentService</strong>；用于在跳转之前做预处理操作；</li><li><strong>SerializationService</strong>：用于序列化 Object 对象，和 Autowired 注解配合使用，我们在分析 inject 的时候，再讲；</li></ul><h2 id="1-2-获取服务"><a href="#1-2-获取服务" class="headerlink" title="1.2 获取服务"></a>1.2 获取服务</h2><p>ARouter 是通过路由跳转的方式获取服务的，我们来回顾 init 的流程：</p><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br></pre></td></tr></table></figure><ul><li>获取拦截器处理服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br></pre></td></tr></table></figure><p>之前在分析 init 的过程中，我们又遇到好几个获取 Service 的地方，上面是举了其中几个栗子！</p><ul><li>获取序列化服务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br></pre></td></tr></table></figure><p>  上面的代码是在处理 @Autowired 注解的时候，也就是 arouter complier 编译的时候处理的，用于传递自定义的对象；</p><h2 id="1-3-获取流程分析"><a href="#1-3-获取流程分析" class="headerlink" title="1.3 获取流程分析"></a>1.3 获取流程分析</h2><p>通过上面可以知道，获取一个 Service 的方法有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(xxxx.class);</span><br><span class="line"></span><br><span class="line">ARouter.getInstance().build(path).navigation();</span><br></pre></td></tr></table></figure><p>下面我们会分析下这两种方式的流程！</p><p><strong>有些代码在前面的路由处理过程中分析了，这里不会再重复分析。</strong></p><h3 id="1-3-1-navigation-className-class"><a href="#1-3-1-navigation-className-class" class="headerlink" title="1.3.1 navigation(className.class)"></a>1.3.1 navigation(className.class)</h3><p>第一种方式是传入 Service 的父类，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().navigation(service.class);</span><br><span class="line">_ARouter.getInstance().navigation(service);</span><br><span class="line">    Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">               Postcard postcard = Warehouse.providersIndex.get(serviceName);</span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些奇葩的</p><h4 id="1-3-1-1-ARouter-navigation"><a href="#1-3-1-1-ARouter-navigation" class="headerlink" title="1.3.1.1 _ARouter.navigation"></a>1.3.1.1 _ARouter.navigation</h4><p>我回顾下 _ARouter.navigation 方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.2】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//【2】获取 Serivce；</span></span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心处理：</p><ul><li>LogisticsCenter.buildProvider</li><li>LogisticsCenter.completion</li></ul><h4 id="1-3-1-2-LogisticsCenter-buildProvider"><a href="#1-3-1-2-LogisticsCenter-buildProvider" class="headerlink" title="1.3.1.2 LogisticsCenter.buildProvider"></a>1.3.1.2 LogisticsCenter.buildProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Warehouse.providersIndex 保存的是如下的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br></pre></td></tr></table></figure><h4 id="1-3-1-3-LogisticsCenter-completion"><a href="#1-3-1-3-LogisticsCenter-completion" class="headerlink" title="1.3.1.3 LogisticsCenter.completion"></a>1.3.1.3 LogisticsCenter.completion</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【2】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【2.1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【2.1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【2.1.3】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【2.1.4】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;1.3.1.3】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【3】这里是通过 RouteMeta 来设置 Postcard 对象，我们先不看；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 Serivce，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：service.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【4.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【4.3】创建 providerMeta 对应的实例，就是 Service 实例；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【4.3.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【6】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有所谓的 “按组加载”</p><p>可以看到，最后获取了 Service，并调用了其 init 方法；</p><p>最后将获得的 Service 保存到了 Postcard 中；</p><h3 id="1-3-2-build-path-navigation"><a href="#1-3-2-build-path-navigation" class="headerlink" title="1.3.2 build(path).navigation()"></a>1.3.2 build(path).navigation()</h3><p>第二种方式是通过 path 来查找 Service，我们回顾下<strong>调用链</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(path).navigation() </span><br><span class="line">      Postcard postcard = _ARouter.getInstance().build(path)</span><br><span class="line">      Object object = Postcard.navigation();</span><br><span class="line">           Object object = ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback)</span><br><span class="line">           Object object = _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback)      </span><br><span class="line"> LogisticsCenter.completion(postcard);       </span><br><span class="line">                     Object object = _ARouter.getInstance()._navigation(...);</span><br></pre></td></tr></table></figure><p>上面这部分的调用过程实际上，我们在路由初始化的时候见到过！</p><p>这里我们只看核心的逻辑，省略掉一些非核心的代码；</p><h4 id="1-3-2-1-ARouter-navigation"><a href="#1-3-2-1-ARouter-navigation" class="headerlink" title="1.3.2.1 _ARouter.navigation"></a>1.3.2.1 _ARouter.navigation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里的获取方式是一样的；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.1.3】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【2】这里的获取方式是一样的；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【3】对于 Service 是会跳过拦截器的；</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;1.3.2.2】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-4-ARouter-navigation"><a href="#1-3-2-4-ARouter-navigation" class="headerlink" title="1.3.2.4 _ARouter._navigation"></a>1.3.2.4 _ARouter._navigation</h4><p>最终处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            ... ... ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【1】返回了 iprovider 实例，就是我们的 Service 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            ... ... ...</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这样，我们获得了 Service 对象！</p><h2 id="1-4-内置服务"><a href="#1-4-内置服务" class="headerlink" title="1.4 内置服务"></a>1.4 内置服务</h2><p>我们来看看内置服务接口！</p><p>对与 AutowiredService，InterceptorService，SerializationService 我们后面会分析，这里就不重点分析了，累！</p><h3 id="1-4-1-DegradeService"><a href="#1-4-1-DegradeService" class="headerlink" title="1.4.1 DegradeService"></a>1.4.1 DegradeService</h3><p>降级服务，当跳转失败后，可以在这里做处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DegradeService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-PathReplaceService"><a href="#1-4-2-PathReplaceService" class="headerlink" title="1.4.2 PathReplaceService"></a>1.4.2 PathReplaceService</h3><p>路径 path 替换服务，我们可以在启动跳转之前，对 path 进行拦截，替换新的 path： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h3 id="1-4-3-PretreatmentService"><a href="#1-4-3-PretreatmentService" class="headerlink" title="1.4.3 PretreatmentService"></a>1.4.3 PretreatmentService</h3><p>跳转预处理服务，我们可以在启动跳转之前，针对跳转路由数据做预处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PathReplaceService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">forString</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function">Uri <span class="title">forUri</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以针对 path 和 uri 两种方式！</p><h1 id="2-拦截器-Interceptor"><a href="#2-拦截器-Interceptor" class="headerlink" title="2 拦截器 Interceptor"></a>2 拦截器 Interceptor</h1><h2 id="2-1-InterceptorServiceImpl-统一管理拦截器"><a href="#2-1-InterceptorServiceImpl-统一管理拦截器" class="headerlink" title="2.1 InterceptorServiceImpl - 统一管理拦截器"></a>2.1 InterceptorServiceImpl - 统一管理拦截器</h2><p>在 ARouter 框架里面，有一个 InterceptorServiceImpl 服务，用于统一管理 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不多说了，这个是获取拦截器管理服务的方式，流程上面分析了；</p><h2 id="2-2-初始化-Interceptor"><a href="#2-2-初始化-Interceptor" class="headerlink" title="2.2 初始化 Interceptor"></a>2.2 初始化 Interceptor</h2><p>Interceptor 的初始化由 InterceptorServiceImpl 完成，</p><p>核心的逻辑在 <strong>LogisticsCenter.completion</strong> 中！</p><h3 id="2-2-1-LogisticsCenter-completion"><a href="#2-2-1-LogisticsCenter-completion" class="headerlink" title="2.2.1 LogisticsCenter.completion"></a>2.2.1 LogisticsCenter.completion</h3><p>这里我们省略掉无关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">    ... ... ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ... ... ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【2.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER，routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【1.2】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1.2.1】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【---&gt;2.2.2】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【1.2.2】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2.3】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【1.2.4】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回顾</strong>：</p><p>我们知道在路由初始化的过程中，afterInit 会获得 InterceptorServiceImpl 方法并执行其 init 的初始化操作！</p><h3 id="2-2-2-InterceptorServiceImpl-init"><a href="#2-2-2-InterceptorServiceImpl-init" class="headerlink" title="2.2.2 InterceptorServiceImpl.init"></a>2.2.2 InterceptorServiceImpl.init</h3><p>在 InterceptorServiceImpl 的 init 方法中，会获取所有的 Interceptor，并对其做初始化操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【2】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【3】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>; <span class="comment">//【4】init 状态设置为 true；</span></span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123; <span class="comment">//【5】当 init 操作完成后 notifyAll 通知等待 init 的线程；</span></span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是在由线程池管理的字现场中执行 init 操作！</p><p>注意，这里有一个同步锁，如果在路由的时候，发现 interceptorHasInit 为 false，那么会调用 interceptorInitLock.wait 进入阻塞状态，等待初始化完成，被 notifyAll 唤醒！</p><h2 id="2-3-拦截操作"><a href="#2-3-拦截操作" class="headerlink" title="2.3 拦截操作"></a>2.3 拦截操作</h2><p>我们来看看拦截操作是如何做的，核心代码在 _ARouter.navigation 中：</p><h3 id="2-3-1-ARouter-navigation"><a href="#2-3-1-ARouter-navigation" class="headerlink" title="2.3.1 _ARouter.navigation"></a>2.3.1 _ARouter.navigation</h3><p>我们只关注核心的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;  <span class="comment">//【--&gt;2.3.1.1】处理拦截结果；</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里传入了一个拦截结果回调：</p><h4 id="2-3-1-1-InterceptorCallback"><a href="#2-3-1-1-InterceptorCallback" class="headerlink" title="2.3.1.1 InterceptorCallback"></a>2.3.1.1 InterceptorCallback</h4><p>位于 callback 包下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterceptorCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-InterceptorServiceImpl-doInterceptions"><a href="#2-3-2-InterceptorServiceImpl-doInterceptions" class="headerlink" title="2.3.2 InterceptorServiceImpl.doInterceptions"></a>2.3.2 InterceptorServiceImpl.doInterceptions</h3><p>当我们路由跳转时，如果指定了 Interceptor，那么就要执行拦截操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doInterceptions</span><span class="params">(<span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != Warehouse.interceptors &amp;&amp; Warehouse.interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//【--&gt;2.3.2.1】判断下 init 操作是否完成；</span></span><br><span class="line">        checkInterceptorsInitStatus();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!interceptorHasInit) &#123;</span><br><span class="line">            callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"Interceptors initialization takes too much time."</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【1】这里是在由线程池管理的子线程中执行 init 操作；</span></span><br><span class="line">        LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//【2】创建了一个 CountDownLatch 对象，这个对象以 Warehouse.interceptors 的 size 为计数基准；</span></span><br><span class="line">                <span class="comment">// 没处理一个 inteceptor，计数减一，知道计数为 0，才会释放持有的锁！；</span></span><br><span class="line">                CancelableCountDownLatch interceptorCounter = <span class="keyword">new</span> CancelableCountDownLatch(Warehouse.interceptors.size());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】执行拦截操作！</span></span><br><span class="line">                    _excute(<span class="number">0</span>, interceptorCounter, postcard);</span><br><span class="line">                    <span class="comment">//【3】调用 await，子线程进入等待中；</span></span><br><span class="line">                    interceptorCounter.await(postcard.getTimeout(), TimeUnit.SECONDS);</span><br><span class="line">                  </span><br><span class="line">                    <span class="comment">//【4】拦截器处理完成（CountDownLatch 计数归 0），或者 await 超时退出；</span></span><br><span class="line">                    <span class="keyword">if</span> (interceptorCounter.getCount() &gt; <span class="number">0</span>) &#123; <span class="comment">// Cancel the navigation this time, if it hasn't return anythings.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(<span class="string">"The interceptor processing timed out."</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != postcard.getTag()) &#123; <span class="comment">// Maybe some exception in the tag.</span></span><br><span class="line">                        callback.onInterrupt(<span class="keyword">new</span> HandlerException(postcard.getTag().toString()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        callback.onContinue(postcard);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    callback.onInterrupt(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback.onContinue(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实可以看出，拦截器使用了责任链模式！</p><p>这里有一个新的类型：CancelableCountDownLatch，其实就是一个 CountDownLatch，代码很简单，不多说了！</p><h4 id="2-3-2-1-checkInterceptorsInitStatus"><a href="#2-3-2-1-checkInterceptorsInitStatus" class="headerlink" title="2.3.2.1 checkInterceptorsInitStatus"></a>2.3.2.1 checkInterceptorsInitStatus</h4><p>判断是否初始化完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInterceptorsInitStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">        <span class="comment">//【1】主要是判断 interceptorHasInit 是否为 true！</span></span><br><span class="line">        <span class="keyword">while</span> (!interceptorHasInit) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//【1】进入等待状态，超时时间是 10s！</span></span><br><span class="line">                interceptorInitLock.wait(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Interceptor init cost too much time error! reason = ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptorInitLock 是 InterceptorServiceImpl 内部的一个锁对象；</p><h4 id="2-3-2-2-excute"><a href="#2-3-2-2-excute" class="headerlink" title="2.3.2.2 _excute"></a>2.3.2.2 _excute</h4><p>index 的值为 0，开始执行拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">_excute</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index, <span class="keyword">final</span> CancelableCountDownLatch counter, <span class="keyword">final</span> Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; Warehouse.interceptors.size()) &#123;</span><br><span class="line">            <span class="comment">//【1】获得 index 对应的拦截器；</span></span><br><span class="line">            IInterceptor iInterceptor = Warehouse.interceptors.get(index);</span><br><span class="line">            <span class="comment">//【2】执行拦截器的 process 方法，同时传入一个回调：【--&gt;2.3.1.1】InterceptorCallback</span></span><br><span class="line">            iInterceptor.process(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.1】不拦截，CountDownLatch 计数减去 1；</span></span><br><span class="line">                    counter.countDown();</span><br><span class="line">                    <span class="comment">//【--&gt;2.3.2.2】继续调用 _excute 方法，index 加一，下一个拦截器；</span></span><br><span class="line">                    _excute(index + <span class="number">1</span>, counter, postcard);  <span class="comment">// When counter is down, it will be execute continue ,but index bigger than interceptors size, then U know.</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">//【2.2】拦截，CountDownLatch 计数归 0；</span></span><br><span class="line">                    postcard.setTag(<span class="keyword">null</span> == exception ? <span class="keyword">new</span> HandlerException(<span class="string">"No message."</span>) : exception.getMessage());    <span class="comment">// save the exception message for backup.</span></span><br><span class="line">                    counter.cancel();</span><br><span class="line">                    <span class="comment">// Be attention, maybe the thread in callback has been changed,</span></span><br><span class="line">                    <span class="comment">// then the catch block(L207) will be invalid.</span></span><br><span class="line">                    <span class="comment">// The worst is the thread changed to main thread, then the app will be crash, if you throw this exception!</span></span><br><span class="line"><span class="comment">//                    if (!Looper.getMainLooper().equals(Looper.myLooper())) &#123;    // You shouldn't throw the exception if the thread is main thread.</span></span><br><span class="line"><span class="comment">//                        throw new HandlerException(exception.getMessage());</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个过程很简单，不多说了。</p><h1 id="3-线程池"><a href="#3-线程池" class="headerlink" title="3 线程池"></a>3 线程池</h1><p>刚刚我们有看到，拦截器的初始化和拦截都是在子线程中做的，ARouter 通过内部的一个线程池来管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DefaultPoolExecutor.java  <span class="comment">// 线程池</span></span><br><span class="line">DefaultThreadFactory.java  <span class="comment">// 线程工厂</span></span><br></pre></td></tr></table></figure><h2 id="3-1-线程池初始化"><a href="#3-1-线程池初始化" class="headerlink" title="3.1 线程池初始化"></a>3.1 线程池初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">_ARouter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//【1】DefaultPoolExecutor 是 _ARouter 的静态变量；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance();</span><br></pre></td></tr></table></figure><p>然后再初始化 LogisticsCenter 的时候传递给了 LogisticsCenter；</p><h2 id="3-2-DefaultPoolExecutor"><a href="#3-2-DefaultPoolExecutor" class="headerlink" title="3.2 DefaultPoolExecutor"></a>3.2 DefaultPoolExecutor</h2><p>我们来看下线程池的构造，这里要重点看看线程池的核心参数：</p><h3 id="3-2-1-getInstance"><a href="#3-2-1-getInstance" class="headerlink" title="3.2.1 getInstance"></a>3.2.1 getInstance</h3><p>单例模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultPoolExecutor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DefaultPoolExecutor.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;3.2.2】创建线程池；</span></span><br><span class="line">                instance = <span class="keyword">new</span> DefaultPoolExecutor(</span><br><span class="line">                        INIT_THREAD_COUNT,</span><br><span class="line">                        MAX_THREAD_COUNT,</span><br><span class="line">                        SURPLUS_THREAD_LIFE,</span><br><span class="line">                        TimeUnit.SECONDS,</span><br><span class="line">                        <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">64</span>),</span><br><span class="line">                        <span class="keyword">new</span> DefaultThreadFactory());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-new-DefaultPoolExecutor"><a href="#3-2-2-new-DefaultPoolExecutor" class="headerlink" title="3.2.2 new DefaultPoolExecutor"></a>3.2.2 new DefaultPoolExecutor</h3><p>我们来研究下 DefaultPoolExecutor 的一些核心参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DefaultPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, </span></span></span><br><span class="line"><span class="function"><span class="params">                            ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, <span class="keyword">new</span> RejectedExecutionHandler() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">             ARouter.logger.error(Consts.TAG, <span class="string">"Task rejected, too many task!"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 DefaultPoolExecutor 内部的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors(); <span class="comment">// Java 虚拟机的可用的处理器数量；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_THREAD_COUNT = CPU_COUNT + <span class="number">1</span>;  <span class="comment">// 核心线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_THREAD_COUNT = INIT_THREAD_COUNT;  <span class="comment">// 最大线程数；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SURPLUS_THREAD_LIFE = <span class="number">30L</span>; <span class="comment">// 空闲线程在</span></span><br></pre></td></tr></table></figure><p>可以看到，线程池的参数如下：</p><ul><li>corePoolSize：核心线程数是可用的处理器数量 + 1；</li><li>maximumPoolSize：最大线程数是可用的处理器数量；</li><li>keepAliveTime：空闲线程存活时间：30s；</li><li>workQueue：阻塞队列是 ArrayBlockingQueue，数组实现的阻塞队列，有界 64；</li><li>threadFactory：线程工厂类，自定义的 DefaultThreadFactory 类；</li><li>RejectedExecutionHandler：线程池在无法处理添加的 runnnable 时的处理机制，这里是自定义了一个 RejectedExecutionHandler，只是打印了一个 Log；</li></ul><h2 id="3-3-DefaultThreadFactory"><a href="#3-3-DefaultThreadFactory" class="headerlink" title="3.3 DefaultThreadFactory"></a>3.3 DefaultThreadFactory</h2><p>ARouter 内部自定义的线程工厂类，DefaultThreadFactory 需要实现 ThreadFactory 接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultThreadFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】这里通过 SecurityManager 来设置 thread 的 group；</span></span><br><span class="line">    SecurityManager s = System.getSecurityManager();</span><br><span class="line">    group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">    namePrefix = <span class="string">"ARouter task pool No."</span> + poolNumber.getAndIncrement() + <span class="string">", thread No."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看 newThread 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(@NonNull Runnable runnable)</span> </span>&#123;</span><br><span class="line">    String threadName = namePrefix + threadNumber.getAndIncrement();</span><br><span class="line">    ARouter.logger.info(Consts.TAG, <span class="string">"Thread production, name is ["</span> + threadName + <span class="string">"]"</span>);</span><br><span class="line">    <span class="comment">//【1】创建线程，一个线程对应一个 runnable；</span></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(group, runnable, threadName, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (thread.isDaemon()) &#123;   <span class="comment">//【2】设为非后台线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thread.getPriority() != Thread.NORM_PRIORITY) &#123; <span class="comment">// 【2】优先级为 normal</span></span><br><span class="line">        thread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】捕获多线程处理中的异常</span></span><br><span class="line">    thread.setUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable ex)</span> </span>&#123;</span><br><span class="line">            ARouter.logger.info(Consts.TAG, <span class="string">"Running task appeared exception! Thread ["</span> + thread.getName() + <span class="string">"], because ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 的服务和拦截器的相关机制</p><ul><li>拦截器的初始化和拦截操作都是在子线程中处理的，拦截器使用了责任链模式；</li><li>子线程通过线程池管理，采用了单例模式；</li><li>拦截器是使用了责任链模式，通过它使用 CountDownLatch 来实现了路由等待的操作；</li></ul><p>但是遗留了几个问题：</p><ul><li>AutowiredService 和 AutowiredServiceImpl 是如何工作的；</li><li>ClassLoaderService 是如何工作的；</li></ul><p>我们下次再说～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第四篇 - 路由初始化 (arouter-api)</title>
    <link href="https://lishuaiqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/"/>
    <id>https://lishuaiqi.top/2019/04/23/ARouter4-arouterInitCreate-arouter-api/</id>
    <published>2019-04-23T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问</p><p><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-api 模块，该模块涉及到 ARouter 一些核心逻辑：初始化，跳转，拦截，服务等，下面的几篇文章就要从这几个方向来分析；</p><p>绘图工具：PlantXML</p><p>在阅读过程中，涉及到方法跳转的时候，注释上有 <code>--&gt;</code>的标志，这样的好处是，以类为单位，一次性分析其所有的方法：</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>我们先来看看模块结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">└── com</span><br><span class="line">    └── alibaba</span><br><span class="line">        └── android</span><br><span class="line">            └── arouter</span><br><span class="line">                ├── base</span><br><span class="line">                │   └── UniqueKeyTreeMap.java</span><br><span class="line">                ├── core</span><br><span class="line">                │   ├── AutowiredLifecycleCallback.java</span><br><span class="line">                │   ├── AutowiredServiceImpl.java</span><br><span class="line">                │   ├── InstrumentationHook.java</span><br><span class="line">                │   ├── InterceptorServiceImpl.java</span><br><span class="line">                │   ├── LogisticsCenter.java</span><br><span class="line">                │   └── Warehouse.java</span><br><span class="line">                ├── exception</span><br><span class="line">                │   ├── HandlerException.java</span><br><span class="line">                │   ├── InitException.java</span><br><span class="line">                │   └── NoRouteFoundException.java</span><br><span class="line">                ├── facade</span><br><span class="line">                │   ├── Postcard.java</span><br><span class="line">                │   ├── callback</span><br><span class="line">                │   │   ├── InterceptorCallback.java</span><br><span class="line">                │   │   ├── NavCallback.java</span><br><span class="line">                │   │   └── NavigationCallback.java</span><br><span class="line">                │   ├── service</span><br><span class="line">                │   │   ├── AutowiredService.java</span><br><span class="line">                │   │   ├── ClassLoaderService.java</span><br><span class="line">                │   │   ├── DegradeService.java</span><br><span class="line">                │   │   ├── InterceptorService.java</span><br><span class="line">                │   │   ├── PathReplaceService.java</span><br><span class="line">                │   │   ├── PretreatmentService.java</span><br><span class="line">                │   │   └── SerializationService.java</span><br><span class="line">                │   └── template</span><br><span class="line">                │       ├── IInterceptor.java</span><br><span class="line">                │       ├── IInterceptorGroup.java</span><br><span class="line">                │       ├── ILogger.java</span><br><span class="line">                │       ├── IPolicy.java</span><br><span class="line">                │       ├── IProvider.java</span><br><span class="line">                │       ├── IProviderGroup.java</span><br><span class="line">                │       ├── IRouteGroup.java</span><br><span class="line">                │       ├── IRouteRoot.java</span><br><span class="line">                │       └── ISyringe.java</span><br><span class="line">                ├── launcher</span><br><span class="line">                │   ├── ARouter.java</span><br><span class="line">                │   └── _ARouter.java</span><br><span class="line">                ├── thread</span><br><span class="line">                │   ├── CancelableCountDownLatch.java</span><br><span class="line">                │   ├── DefaultPoolExecutor.java</span><br><span class="line">                │   └── DefaultThreadFactory.java</span><br><span class="line">                └── utils</span><br><span class="line">                    ├── ClassUtils.java</span><br><span class="line">                    ├── Consts.java</span><br><span class="line">                    ├── DefaultLogger.java</span><br><span class="line">                    ├── MapUtils.java</span><br><span class="line">                    ├── PackageUtils.java</span><br><span class="line">                    └── TextUtils.java</span><br></pre></td></tr></table></figure><p> 可以看到，有如下的 package：</p><ul><li><strong>base</strong>：数据缓存类，内部提供了一个 treeMap 实现，用于存储 intercepter；</li><li><strong>core</strong>：核心类，ARouter的核心功能都在这里实现；</li><li><strong>exception</strong>：异常相关，主要是定义了内部的一些异常；</li><li><strong>facade</strong>：通过外观模式对外提供统一的接口，下面有三个子包：<ul><li><strong>callback</strong>：提供回调接口，以及默认的回调处理；</li><li><strong>service</strong>：ARouter 内部已经实现的一些 Service，对外提供拦截等功能；</li><li><strong>template</strong>：包含模版，提供了大量的模版接口，可以通过实现接口，配合注解，实现自定义的功能；</li></ul></li><li><strong>launcher</strong>：ARouter 的入口；</li><li><strong>thread</strong>：线程操作类；</li><li><strong>utils</strong>：提供多个工具类</li></ul><h1 id="2-初始化方法"><a href="#2-初始化方法" class="headerlink" title="2  初始化方法"></a>2  初始化方法</h1><p>我们在使用时，必须要做初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两行必须写在 init 之前，否则这些配置在 init 过程中将无效；     </span></span><br><span class="line"><span class="comment">//【1】打印日志；</span></span><br><span class="line">ARouter.openLog();</span><br><span class="line"><span class="comment">//【2】开启调试模式（如果在 InstantRun 模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险）；</span></span><br><span class="line">ARouter.openDebug();</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在 Application 中初始化；</span></span><br></pre></td></tr></table></figure><p>接下来，我们来看看 init 的过程：</p><h1 id="3-Launcher-包"><a href="#3-Launcher-包" class="headerlink" title="3 Launcher 包"></a>3 Launcher 包</h1><h2 id="3-1-ARouter"><a href="#3-1-ARouter" class="headerlink" title="3.1 ARouter"></a>3.1 ARouter</h2><p>ARouter 是整个库的入口！</p><h3 id="3-1-1-成员变量"><a href="#3-1-1-成员变量" class="headerlink" title="3.1.1 成员变量"></a>3.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Key of raw uri</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RAW_URI = <span class="string">"NTeRQWvye18AkPd6G"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_INJECT = <span class="string">"wmHzgD4lOj5o4241"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ILogger logger;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-init"><a href="#3-1-2-init" class="headerlink" title="3.1.2 init"></a>3.1.2 init</h3><p>我们来看看 init 初始化的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        logger = _ARouter.logger;</span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init start."</span>);</span><br><span class="line">        <span class="comment">//【--&gt;3.2.2】执行初始化；</span></span><br><span class="line">        hasInit = _ARouter.init(application);</span><br><span class="line">        <span class="keyword">if</span> (hasInit) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;3.2.3】执行初始化后面的操作；</span></span><br><span class="line">            _ARouter.afterInit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _ARouter.logger.info(Consts.TAG, <span class="string">"ARouter init over."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-getInstance"><a href="#3-1-3-getInstance" class="headerlink" title="3.1.3 getInstance"></a>3.1.3 getInstance</h3><p>获得 ARouter 的实例（单例模式）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouter::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】ARouter 的构造器方法体是空的；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> ARouter(); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了单例模式创建：ARouter ！</p><h3 id="3-1-4-build"><a href="#3-1-4-build" class="headerlink" title="3.1.4 build"></a>3.1.4 build</h3><p>afterInit 方法中传入了 “/arouter/service/interceptor” 参数，创建跳转信息！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.4】返回 _ARouter 的实例</span></span><br><span class="line">    <span class="comment">//【--&gt;3.2.5】创建跳转信息；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().build(path);</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不关注其他的方法；</span></span><br></pre></td></tr></table></figure><p>ARouter 提供了下面的多个方法用于创建跳转信息：</p><ul><li><p><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法；</p></li><li><p><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</p></li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>可以看到，最后调用的是 _ARouter 的方法，注意这个方法返回的是：</p><ul><li><strong>Postcard</strong>：继承了 RouteMeta，用于封装跳转信息；</li></ul><h3 id="3-1-5-navigation"><a href="#3-1-5-navigation" class="headerlink" title="3.1.5 navigation"></a>3.1.5 navigation</h3><p>执行跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】通过跳转，返回服务对象；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(service);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context mContext, Postcard postcard, <span class="keyword">int</span> requestCode, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.2.6】执行跳转，这也是真正的跳转接口；</span></span><br><span class="line">    <span class="keyword">return</span> _ARouter.getInstance().navigation(mContext, postcard, requestCode, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARouter 提供了 2 个跳转接口：</p><ul><li><code>navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>，实际上并不是跳转接口；</li><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>这篇博文先不讲 <strong>navigation</strong>，我们分析初始化 init 的过程：</p><ul><li><code>interceptorService = (InterceptorService) ARouter.getInstance().build(&quot;/arouter/service/interceptor&quot;).navigation();</code>    <ul><li>在执行 <strong>afterInit</strong> 的时候，<strong>会通过 navigation 方法返回 InterceptorServiceIpml 实例</strong>，这个方法我们跟踪了代码，调的是第二个 <strong>navigation</strong> 方法；</li></ul></li><li><code>PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</code><ul><li>而在获得  InterceptorService 实例的时候，会<strong>先调用 build 方法</strong>，获得 <strong>PathReplaceService</strong> 实例，这里就是<strong>第一个 navigation 方法</strong>，但是这里我们不分析它；</li><li>实际上 <strong>PathReplaceService 和 InterceptorServiceImpl 的获取方式是一样的</strong>！</li></ul></li></ul><h2 id="3-2-ARouter"><a href="#3-2-ARouter" class="headerlink" title="3.2 _ARouter"></a>3.2 _ARouter</h2><h3 id="3-2-1-成员变量"><a href="#3-2-1-成员变量" class="headerlink" title="3.2.1 成员变量"></a>3.2.1 成员变量</h3><p>下面是 _ARouter 的成员属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> DefaultLogger(Consts.TAG); <span class="comment">// Log 系统，位于 utils 包；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> monitorMode = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> debuggable = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> autoInject = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> _ARouter instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasInit = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> ThreadPoolExecutor executor = DefaultPoolExecutor.getInstance(); <span class="comment">// 线程池对象，由 DefaultPoolExecutor 创建；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InterceptorService interceptorService; <span class="comment">// 用于执行所有的 Interceptor；</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-init"><a href="#3-2-2-init" class="headerlink" title="3.2.2 init"></a>3.2.2 init</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">    mContext = application;</span><br><span class="line">    <span class="comment">//【--&gt;4.1.2】初始化 LogisticsCenter</span></span><br><span class="line">    LogisticsCenter.init(mContext, executor);</span><br><span class="line">    logger.info(Consts.TAG, <span class="string">"ARouter init success!"</span>);</span><br><span class="line">    hasInit = <span class="keyword">true</span>; <span class="comment">// 判断是否 init；</span></span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()); <span class="comment">// 主线程的 handler</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化 LogisticsCenter 的时候，传入了一个线程池！</p><h3 id="3-2-3-afterInit"><a href="#3-2-3-afterInit" class="headerlink" title="3.2.3 afterInit"></a>3.2.3 afterInit</h3><p> 在 ARouter 执行完成初始化之后，会触发 interceptor 的 init 操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.3】获取 ARouter 的实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;3.1.4】build 跳转信息，返回一个 PostCard 实例；</span></span><br><span class="line">    <span class="comment">//【--&gt;6.1.3】执行 PostCard 的 nativagation 方法，获得系统服务 InterceptorServiceImpl 实例；</span></span><br><span class="line">    interceptorService = (InterceptorService) ARouter.getInstance().build(<span class="string">"/arouter/service/interceptor"</span>).navigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，获取 InterceptorServiceImpl 实例，是通过 PostCard.navigation 方法的！</p><p><strong>build 的参数传入的是 “/arouter/service/interceptor”</strong>，这里我们要获取一个 InterceptorServiceImpl 实例 ！</p><h3 id="3-2-4-getInstance"><a href="#3-2-4-getInstance" class="headerlink" title="3.2.4 getInstance"></a>3.2.4 getInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> _ARouter <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasInit) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InitException(<span class="string">"ARouterCore::Init::Invoke init(context) first!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (_ARouter.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//【1】_ARouter 的构造器是空的，就不再分析了；</span></span><br><span class="line">                    instance = <span class="keyword">new</span> _ARouter();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单例模式创建 _ARouter 对象；</p><h3 id="3-2-5-build"><a href="#3-2-5-build" class="headerlink" title="3.2.5 build"></a>3.2.5 build</h3><p>ARouter.build 的方法，最后会掉到 _ARouter 中来；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path)</span> </span>&#123; <span class="comment">// Route.path；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 path，并对 path 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】调用第三个方法：</span></span><br><span class="line">        <span class="keyword">return</span> build(path, extractGroup(path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">... ... ...<span class="comment">// 先不看其他的 build 方法！</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Postcard <span class="title">build</span><span class="params">(String path, String group)</span> </span>&#123; <span class="comment">// Route,path, Route.group；</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || TextUtils.isEmpty(group)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Parameter is invalid!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.1.5】创建 PathReplaceService，用于在跳转前，拦截 uri，并对 uri 做处理！</span></span><br><span class="line">        PathReplaceService pService = ARouter.getInstance().navigation(PathReplaceService.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != pService) &#123;</span><br><span class="line">            <span class="comment">//【---&gt;6.3.1】通过 PathReplaceService 对 path 做预处理！</span></span><br><span class="line">            path = pService.forString(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;5.1】返回跳转信息；</span></span><br><span class="line">        <span class="comment">//【--&gt;6.1.1】创建跳转实例 Postcard；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(path, group);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，也是有三个重载函数：</p><ul><li><code>Postcard build(String path)</code>: 指定 Route.path，<strong>跳转/初始化</strong>都会使用到该方法，这个方法会调用第二个；</li><li><code>Postcard build(String path, String group)</code>：指定 Route.path, Route.group，跳转时使用；</li><li><code>Postcard build(Uri url)</code>：指定 uri，uri 需要在说明书中设置；</li></ul><p>这里我们<strong>先关注 init 过程中调用的</strong>！</p><p>（注意：这里有一个 <strong>PathReplaceService</strong>，用于在跳转前，拦截 path，并对 path 做处理，这个 Service 和路由跳转有关系，初始化这里我们先不过多分析！）</p><h4 id="3-2-5-1-extractGroup"><a href="#3-2-5-1-extractGroup" class="headerlink" title="3.2.5.1 extractGroup"></a>3.2.5.1 extractGroup</h4><p>这个方法的作用是对 path 做修正，看 path 是否正确，同时根据 path 生成 group：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">extractGroup</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】校验 path 是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed, the path must be start with"</span> </span><br><span class="line">                                   + <span class="string">"'/' and contain more than 2 '/'!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【3】根据 path 生成 group；</span></span><br><span class="line">        String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(Consts.TAG + <span class="string">"Extract the default group failed! There's nothing between 2 '/'!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultGroup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, <span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-navigation"><a href="#3-2-6-navigation" class="headerlink" title="3.2.6 navigation"></a>3.2.6 navigation</h3><p>最后会进入 _ARouter 的 navigation 方法中，我们看到，该方法的逻辑还是很多的，注意，这里我们传入的 callback 是 null 的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*important】这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 PretreatmentService 服务，对 Postcard 做预处理；</span></span><br><span class="line">    <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">    PretreatmentService pretreatmentService = ARouter.getInstance().navigation(PretreatmentService.class);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != pretreatmentService &amp;&amp; !pretreatmentService.onPretreatment(context, postcard)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.2】完善跳转信息！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debuggable()) &#123;</span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Toast.makeText(mContext, <span class="string">"There's no route matched!\n"</span> +</span><br><span class="line">                            <span class="string">" Path = ["</span> + postcard.getPath() + <span class="string">"]\n"</span> +</span><br><span class="line">                            <span class="string">" Group = ["</span> + postcard.getGroup() + <span class="string">"]"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">            <span class="comment">///【1】当完善失败，则通过 callback.onLost 提示用户！</span></span><br><span class="line">            callback.onLost(postcard);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【*important】如果没有指定 callback，显然通过降级服务处理！</span></span><br><span class="line">            <span class="comment">// 这里又和 PathReplaceService 一样的，又是通过跳转的方式获取 DegradeService 服务，对 Postcard 做预处理；</span></span><br><span class="line">            <span class="comment">// 这个同样的，我们先不看；</span></span><br><span class="line">            DegradeService degradeService = ARouter.getInstance().navigation(DegradeService.class);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != degradeService) &#123;</span><br><span class="line">                degradeService.onLost(context, postcard);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">        <span class="comment">//【2】回调 onFound 方法，表示跳转信息有效；</span></span><br><span class="line">        callback.onFound(postcard);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;6.1】如果跳转不能避开所有的拦截器，那么就要在这里处理，我们知道 Fragment 和 IProvider 的子类是会避开拦截器的！</span></span><br><span class="line">    <span class="keyword">if</span> (!postcard.isGreenChannel()) &#123;</span><br><span class="line">        <span class="comment">//【*important】这一部分设计拦截器功能，我们在跳转那一篇再分析；</span></span><br><span class="line">        interceptorService.doInterceptions(postcard, <span class="keyword">new</span> InterceptorCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContinue</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">                _navigation(context, postcard, requestCode, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInterrupt</span><span class="params">(Throwable exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</span><br><span class="line">                    callback.onInterrupt(postcard);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(Consts.TAG, <span class="string">"Navigation failed, termination by interceptor : "</span> + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;3.2.7】最终的处理；</span></span><br><span class="line">        <span class="keyword">return</span> _navigation(context, postcard, requestCode, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>_ARouter 也提供了 2 个跳转接口</strong>：</p><ul><li><code>navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)</code>：这个才是真正的跳转接口！</li></ul><p>同样的，我们也只看 <code>init</code>的过程，也就是获取 <strong>InterceptorServiceImpl</strong> 实例的过程，这个过程调用的是上面的四参方法；</p><ul><li><p><code>&lt;T&gt; T navigation(Class&lt;? extends T&gt; service)</code>: 用于<strong>获取泛型指定的 Service</strong>！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">navigation</span><span class="params">(Class&lt;? extends T&gt; service)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">        <span class="comment">// service.getName() 返回的是全限定名；</span></span><br><span class="line">        Postcard postcard = LogisticsCenter.buildProvider(service.getName());</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//【1】如果是 null，说明使用的是旧版本的 compiler sdk，早期的 compiler 不使用全限定名区获取服务；</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="comment">//【--&gt;4.1.3】通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例</span></span><br><span class="line">            postcard = LogisticsCenter.buildProvider(service.getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【--&gt;4.1.4】完成跳转！</span></span><br><span class="line">        LogisticsCenter.completion(postcard);</span><br><span class="line">        <span class="keyword">return</span> (T) postcard.getProvider();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoRouteFoundException ex) &#123;</span><br><span class="line">        logger.warning(Consts.TAG, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>实际上并不是跳转接口，<strong>PathReplaceService</strong>，<strong>PretreatmentService</strong>，<strong>DegradeService</strong> 都是通过这个方法获取！</p><p>我们后面统一进行分析！</p><h3 id="3-2-7-navigation"><a href="#3-2-7-navigation" class="headerlink" title="3.2.7 _navigation"></a>3.2.7 _navigation</h3><p>最后会调用 _navigation 返回我们的 InterceptorServiceImpl 实例，我们知道 <strong>InterceptorServiceImpl 是 PROVIDER 类型的</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">            <span class="comment">// Build intent</span></span><br><span class="line">            <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">            intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set flags.</span></span><br><span class="line">            <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                intent.setFlags(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set Actions</span></span><br><span class="line">            String action = postcard.getAction();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                intent.setAction(action);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Navigation in main looper.</span></span><br><span class="line">            runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PROVIDER:</span><br><span class="line">            <span class="comment">//【over】返回了 iprovider 实例，就是我们的 InterceptorServiceImpl 对象；</span></span><br><span class="line">            <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">        <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">        <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">        <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">            Class fragmentMeta = postcard.getDestination();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                    ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                    ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                logger.error(Consts.TAG, <span class="string">"Fetch fragment instance error, "</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> METHOD:</span><br><span class="line">        <span class="keyword">case</span> SERVICE:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到其他类型的处理，我们在路由跳转的时候再分析；</p><h1 id="4-core-包"><a href="#4-core-包" class="headerlink" title="4 core 包"></a>4 core 包</h1><h2 id="4-1-LogisticsCenter-核心一号种子"><a href="#4-1-LogisticsCenter-核心一号种子" class="headerlink" title="4.1 LogisticsCenter - 核心一号种子"></a>4.1 LogisticsCenter - 核心一号种子</h2><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context mContext;</span><br><span class="line"><span class="keyword">static</span> ThreadPoolExecutor executor; <span class="comment">// 线程池；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> registerByPlugin; <span class="comment">// 是否通过插件自动注册；</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-init"><a href="#4-1-2-init" class="headerlink" title="4.1.2 init"></a>4.1.2 init</h3><p>执行 init 操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, ThreadPoolExecutor tpe)</span> <span class="keyword">throws</span> HandlerException </span>&#123;</span><br><span class="line">  mContext = context;</span><br><span class="line">  executor = tpe;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> startInit = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//【--&gt;5.1.1】是否使用 arouter-auto-register 插件来加载路由表；</span></span><br><span class="line">    loadRouterMap();</span><br><span class="line">    <span class="keyword">if</span> (registerByPlugin) &#123;</span><br><span class="line">      logger.info(TAG, <span class="string">"Load router map by arouter-auto-register plugin."</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 默认情况下是进入这里：</span></span><br><span class="line">      Set&lt;String&gt; routerMap;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【1】如果开启了 debug 模式或者说 Apk 发生了更新，那么 ARouter 会重建路由表；</span></span><br><span class="line">      <span class="comment">//【--&gt;9.2.2】isNewVersion 判断 apk 是否是新的安装；</span></span><br><span class="line">      <span class="keyword">if</span> (ARouter.debuggable() || PackageUtils.isNewVersion(context)) &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Run with debug mode or new install, rebuild router map."</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//【--&gt;9.1.2】这里更新路由表，通过包名 com.alibaba.android.arouter.routes，扫描包下面包含的所有的类的 ClassName</span></span><br><span class="line">        <span class="comment">// 这个包是在 arouter complier 阶段生成的，里面包含解析注解生成的 java 类；</span></span><br><span class="line">        routerMap = ClassUtils.getFileNameByPackageName(mContext, ROUTE_ROOT_PAKCAGE);</span><br><span class="line">        <span class="keyword">if</span> (!routerMap.isEmpty()) &#123;</span><br><span class="line">          <span class="comment">//【1.1】当我们能够扫描到路由信息后，会将这个信息保存到本地 sp 中；</span></span><br><span class="line">          context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(AROUTER_SP_KEY_MAP, routerMap).apply();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PackageUtils.updateVersion(context); <span class="comment">//【--&gt;9.2.3】保存版本号；</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(TAG, <span class="string">"Load router map from cache."</span>);</span><br><span class="line">        <span class="comment">//【2】其他情况，是默认从本地缓存中读取路由表的！</span></span><br><span class="line">        routerMap = <span class="keyword">new</span> HashSet&lt;&gt;(context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(AROUTER_SP_KEY_MAP, <span class="keyword">new</span> HashSet&lt;String&gt;()));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      logger.info(TAG, <span class="string">"Find router map finished, map size = "</span> + routerMap.size() + <span class="string">", cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line">      startInit = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//【2】处理路由表的信息，在前面，我们将 aouter-compiler 在编译时期生成的 class 都加载到了 routerMap 中了；</span></span><br><span class="line">      <span class="keyword">for</span> (String className : routerMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_ROOT)) &#123;</span><br><span class="line">          <span class="comment">//【2.1】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Root，符合前缀的都是 IRouteRoot 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.groupsIndex；</span></span><br><span class="line">          ((IRouteRoot) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.groupsIndex);</span><br><span class="line">         </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_INTERCEPTORS)) &#123;</span><br><span class="line">          <span class="comment">//【2.2】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Interceptors，符合前缀的都是 IInterceptorGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.interceptorsIndex；</span></span><br><span class="line">          ((IInterceptorGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.interceptorsIndex);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_PROVIDERS)) &#123;</span><br><span class="line">          <span class="comment">//【2.3】判断前缀：com.alibaba.android.arouter.routes.ARouter&amp;&amp;Providers，符合前缀的都是 IProviderGroup 的子类</span></span><br><span class="line">          <span class="comment">// 调用其 loadInto --&gt; Warehouse.providersIndex；</span></span><br><span class="line">          ((IProviderGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.providersIndex);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(TAG, <span class="string">"Load root element finished, cost "</span> + (System.currentTimeMillis() - startInit) + <span class="string">" ms."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Warehouse.groupsIndex.size() == <span class="number">0</span>) &#123;</span><br><span class="line">      logger.error(TAG, <span class="string">"No mapping files were found, check your configuration please!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">      logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"LogisticsCenter has already been loaded, GroupIndex[%d], “ </span></span><br><span class="line"><span class="string">                                      + ”InterceptorIndex[%d], ProviderIndex[%d]"</span>, Warehouse.groupsIndex.size(),“ </span><br><span class="line">                                      + Warehouse.interceptorsIndex.size(), Warehouse.providersIndex.size()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init logistics center exception! ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，ARouter 会将路由表存储在本地缓存 sp 中，在版本号发生变化的时候会处理，上面的这些常量定义在 Consts 中。</p><p>我们还记得 arouter compiler 在动态生成代码的时候，会创建 IRouteRoot，IInterceptorGroup，IProviderGroup 的子类，我们通过 Route，intercepor  注解的元素都会被封装成 RouteMeta 实例，通过 loadInto 方法，加入到 Warehouse 对应的集合中！</p><p>下面我们通过之前动态代码来分析：</p><ul><li>如果前缀是 <code>ARouter$$Root</code>, 那么会触发 <code>ARouter$$Root$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.groupsIndex</strong>，这样，我们就可以通过它按组加载了；</p><ul><li>如果前缀是 <code>ARouter$$Interceptors</code>, 那么会触发 <code>ARouter$$Interceptors$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.interceptorsIndex</strong></p><ul><li>如果前缀是 <code>ARouter$$Providers</code>, 那么会触发 <code>ARouter$$Providers$$moduleName.loadInto</code>方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">app</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分数据会加载到：<strong>Warehouse.providersIndex</strong></p><h4 id="4-2-1-1-loadRouterMap"><a href="#4-2-1-1-loadRouterMap" class="headerlink" title="4.2.1.1 loadRouterMap"></a>4.2.1.1 loadRouterMap</h4><p>这个方法用于判断是否通过 arouter-auto-register 插件自动注册路由；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadRouterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    registerByPlugin = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//auto generate register code by gradle plugin: arouter-auto-register</span></span><br><span class="line">    <span class="comment">// looks like below:</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulejava());</span></span><br><span class="line">    <span class="comment">// registerRouteRoot(new ARouter..Root..modulekotlin());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果使用了 arouter-auto-register 插件，那么会自动执行 registerRouteRoot 相关代码；</p><p>这里我们先不看和 arouter-auto-register 相关的代码：</p><p>这个方法默认是将 registerByPlugin 设置为 false；</p><h3 id="4-1-3-buildProvider"><a href="#4-1-3-buildProvider" class="headerlink" title="4.1.3 buildProvider"></a>4.1.3 buildProvider</h3><p>通过 serviceName 找到，对应的 Service 的 RouteMeta 实例，然后创建 Postcard 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Postcard <span class="title">buildProvider</span><span class="params">(String serviceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】我们知道 service 实现了 IProvider 实例，所以保存在了 Warehouse.providersIndex 中！</span></span><br><span class="line">    RouteMeta meta = Warehouse.providersIndex.get(serviceName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == meta) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【--&gt;6.1.2】创建路由跳转信息；</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Postcard(meta.getPath(), meta.getGroup());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-completion"><a href="#4-1-4-completion" class="headerlink" title="4.1.4 completion"></a>4.1.4 completion</h3><p>完善跳转信息，completion 会通过 Warehouse 的数据，填充 Postcard！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"No postcard!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 path 对应的 RouteMeta 缓存数据；</span></span><br><span class="line">    RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">    <span class="comment">//【1】如果找不到，那么就从 compiler 生成的数据中查找！</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123; </span><br><span class="line">        <span class="comment">//【--&gt;4.2.1】从 Warehouse.routes 中获取 group 对应的 group 类文件；</span></span><br><span class="line">        Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123; <span class="comment">// 【1.1】找不到抛出异常；</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">"There is no route match the path ["</span> + postcard.getPath() + <span class="string">"], in group ["</span> + postcard.getGroup() + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] starts loading, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】创建 groupMeta 对应的实例；</span></span><br><span class="line">                IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】调用其 loadInto 将 group 对应的信息加入到缓存 Warehouse.routes 中！</span></span><br><span class="line">                iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后从 Warehouse.groupsIndex 删除这个组对应的信息；</span></span><br><span class="line">                Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable()) &#123;</span><br><span class="line">                    logger.debug(TAG, String.format(Locale.getDefault(), <span class="string">"The group [%s] has already been loaded, trigger by [%s]"</span>, postcard.getGroup(), postcard.getPath()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"Fatal exception when loading group meta. ["</span> + e.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【--&gt;4.2.2】重新加载；</span></span><br><span class="line">            completion(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//【2】这里是通过 RouteMeta 来设置 Postcard 对象；</span></span><br><span class="line">        postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">        postcard.setType(routeMeta.getType()); </span><br><span class="line">        postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">        postcard.setExtra(routeMeta.getExtra());</span><br><span class="line">        <span class="comment">//【3】如果指定了 uri 就要从 uri 中设置传递的数据了，显然，这里我们并没有设置 Uri；</span></span><br><span class="line">        <span class="comment">// 我们也没有传递数据，只是为了获取 InterceptorServiceImpl 实例，我们先不看！</span></span><br><span class="line">        Uri rawUri = postcard.getUri();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123; </span><br><span class="line">            Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">            Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                    setValue(postcard,</span><br><span class="line">                            params.getValue(),</span><br><span class="line">                            params.getKey(),</span><br><span class="line">                            resultMap.get(params.getKey()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里和 AutoInject 有关系，我们先不看！</span></span><br><span class="line">                postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】这里是关键点，判断类型，可以看到 activity 这里是不处理的！；</span></span><br><span class="line">        <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER: </span><br><span class="line">                <span class="comment">//【4.1】我们要获取的 InterceptorServiceImpl，类型就是 PROVIDER；</span></span><br><span class="line">                <span class="comment">// routeMeta.getDestination 返回的是要访问的目标类：InterceptorServiceImpl.class;</span></span><br><span class="line">                Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】然后优先从 Warehouse.providers 缓存中获取；</span></span><br><span class="line">                IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    IProvider provider;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【--&gt;4.3】创建 providerMeta 对应的实例，就是 InterceptorServiceImpl；</span></span><br><span class="line">                        provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                        <span class="comment">//【--&gt;4.3.1】执行 init 方法；</span></span><br><span class="line">                        provider.init(mContext);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】然后将加入到 Warehouse.providers 中去；</span></span><br><span class="line">                        Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                        instance = provider;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">"Init provider failed! "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【--&gt;6.1.1】将 instance 保存到 postcard.provider 中去，因为跳转目标是 IProvider 的子类；</span></span><br><span class="line">                postcard.setProvider(instance);</span><br><span class="line">                postcard.greenChannel();  <span class="comment">//【--&gt;6.1.1】跳过所有的拦截器！</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                postcard.greenChannel(); <span class="comment">// 跳过所有的拦截器！</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存处理</strong>：</p><ul><li><strong>Warehouse.groupsIndex —&gt; Warehouse.routes</strong></li></ul><p>这里优先从 Warehouse.groupsIndex 中读取，Warehouse.groupsIndex 中保存的是类似下面的数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br></pre></td></tr></table></figure><p>这里会从 Warehouse.groupsIndex 中，获取 group 对应的类，并创建实例，比如 <code>ARouter$$Group$$coolqiService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                                                                       <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, </span><br><span class="line">                                                                       <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，调用其 loadInto 方法，就会将数据加入到 <code>Warehouse.routes</code> 中；</p><ul><li><strong>Warehouse.providers</strong></li></ul><p><strong>上面涉及到了数据处理，我们先不看，后面再分析</strong>；</p><h2 id="4-2-WareHouse-核心二号种子"><a href="#4-2-WareHouse-核心二号种子" class="headerlink" title="4.2 WareHouse - 核心二号种子"></a>4.2 WareHouse - 核心二号种子</h2><p>WareHouse 是 ARouter 的数据仓库，存储跳转的信息！</p><h3 id="4-2-1-成员变量"><a href="#4-2-1-成员变量" class="headerlink" title="4.2.1 成员变量"></a>4.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】保存动态生成的 ARouter$$Root$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; groupsIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; routes = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】保存动态生成的 ARouter$$Providers$$moduleName.loadInto 方法加载的数据；</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, RouteMeta&gt; providersIndex = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Map&lt;Class, IProvider&gt; providers = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 上面数据的缓存，key：类名，value：实例；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】保存动态生成的 ARouter$$Interceptors$$moduleName.loadInto 方法加载的数据；【--&gt;5.1】对于 interceptor，是通过 UniqueKeyTreeMap 来存放的！</span></span><br><span class="line"><span class="comment">// 相当于，我们把 compiler 编译生成的数据保存到了这里；</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptorsIndex = <span class="keyword">new</span> UniqueKeyTreeMap&lt;&gt;(<span class="string">"More than one interceptors use same priority [%s]"</span>);</span><br><span class="line"><span class="keyword">static</span> List&lt;IInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 上面数据的缓存</span></span><br></pre></td></tr></table></figure><p>每次都会从 compiler 数据中获取数据保存到缓存数据中，然后删除  compiler 数据；</p><h3 id="4-2-2-clear"><a href="#4-2-2-clear" class="headerlink" title="4.2.2 clear"></a>4.2.2 clear</h3><p>清除内部数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routes.clear();</span><br><span class="line">    groupsIndex.clear();</span><br><span class="line">    providers.clear();</span><br><span class="line">    providersIndex.clear();</span><br><span class="line">    interceptors.clear();</span><br><span class="line">    interceptorsIndex.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WareHouse 只有一个 clear 方法，用来清除数据；</p><h2 id="4-3-InterceptorServiceImpl"><a href="#4-3-InterceptorServiceImpl" class="headerlink" title="4.3 InterceptorServiceImpl"></a>4.3 InterceptorServiceImpl</h2><p>InterceptorServiceImpl 他是 ARouter 内部实现的系统服务，是通过：<code>@Route(path = &quot;/arouter/service/interceptor&quot;)</code> 注解处理的，它的作用是<strong>用于处理拦截器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/arouter/service/interceptor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorServiceImpl</span> <span class="keyword">implements</span> <span class="title">InterceptorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> interceptorHasInit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object interceptorInitLock = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-1-init"><a href="#4-3-1-init" class="headerlink" title="4.3.1 init"></a>4.3.1 init</h3><p>初始化所有的 Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    LogisticsCenter.executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isNotEmpty(Warehouse.interceptorsIndex)) &#123;</span><br><span class="line">                <span class="comment">//【--&gt;4.2.1】从 Warehouse.interceptorsIndex 获取所有注解生成的拦截器；</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; entry : Warehouse.interceptorsIndex.entrySet()) &#123;</span><br><span class="line">                    Class&lt;? extends IInterceptor&gt; interceptorClass = entry.getValue();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//【1】创建 interceptors 实例，并执行 init 初始化；</span></span><br><span class="line">                        IInterceptor iInterceptor = interceptorClass.getConstructor().newInstance();</span><br><span class="line">                        iInterceptor.init(context);</span><br><span class="line">                        <span class="comment">//【--&gt;4.2.1】将其加入到缓存 Warehouse.interceptors</span></span><br><span class="line">                        Warehouse.interceptors.add(iInterceptor);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">"ARouter init interceptor error! name = ["</span> </span><br><span class="line">                                                   + interceptorClass.getName() + <span class="string">"], reason = ["</span> + ex.getMessage() + <span class="string">"]"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                interceptorHasInit = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                logger.info(TAG, <span class="string">"ARouter interceptors init over."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (interceptorInitLock) &#123;</span><br><span class="line">                    interceptorInitLock.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里又涉及到缓存：<strong>Warehouse.interceptorsIndex —&gt;Warehouse.interceptors</strong>;</p><h1 id="5-base-包"><a href="#5-base-包" class="headerlink" title="5 base 包"></a>5 base 包</h1><h2 id="5-1-UniqueKeyTreeMap"><a href="#5-1-UniqueKeyTreeMap" class="headerlink" title="5.1 UniqueKeyTreeMap"></a>5.1 UniqueKeyTreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueKeyTreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String tipText;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UniqueKeyTreeMap</span><span class="params">(String exceptionText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">        tipText = exceptionText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(tipText, key));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><h1 id="6-facade-包"><a href="#6-facade-包" class="headerlink" title="6 facade 包"></a>6 facade 包</h1><h2 id="6-1-PostCard"><a href="#6-1-PostCard" class="headerlink" title="6.1 PostCard"></a>6.1 PostCard</h2><p>PostCard 继承了 RouteMeta，用于保存跳转的信息；</p><h3 id="6-1-1-成员变量"><a href="#6-1-1-成员变量" class="headerlink" title="6.1.1 成员变量"></a>6.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Uri uri;                <span class="comment">// uri</span></span><br><span class="line"><span class="keyword">private</span> Object tag;             <span class="comment">// A tag prepare for some thing wrong.</span></span><br><span class="line"><span class="keyword">private</span> Bundle mBundle;         <span class="comment">// 数据 bundle；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flags = -<span class="number">1</span>;         <span class="comment">// 跳转的 flags，用于 activity；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">300</span>;      <span class="comment">// Navigation timeout, TimeUnit.Second</span></span><br><span class="line"><span class="keyword">private</span> IProvider provider;     <span class="comment">// 如果跳转的目标实例是 IProvider 的子类，那么该值不为 null；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> greenChannel;   <span class="comment">// 是否跳过所有的拦截器；</span></span><br><span class="line"><span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Bundle optionsCompat;    <span class="comment">// 和动画相关的属性；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> enterAnim = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> exitAnim = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-new-Postcard"><a href="#6-1-2-new-Postcard" class="headerlink" title="6.1.2 new Postcard"></a>6.1.2 new Postcard</h3><p>创建了一个 Postcard 实例！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, group, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//【1】最终会调用这个方法；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Postcard</span><span class="params">(String path, String group, Uri uri, Bundle bundle)</span> </span>&#123;</span><br><span class="line">    setPath(path); <span class="comment">// 设置 path</span></span><br><span class="line">    setGroup(group); <span class="comment">// 设置 group</span></span><br><span class="line">    setUri(uri); <span class="comment">// 设置 uri</span></span><br><span class="line">    <span class="keyword">this</span>.mBundle = (<span class="keyword">null</span> == bundle ? <span class="keyword">new</span> Bundle() : bundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了！</p><p>在初始化过程中，我们传入的 path：”/arouter/service/interceptor”</p><h3 id="6-1-3-navigation"><a href="#6-1-3-navigation" class="headerlink" title="6.1.3 navigation"></a>6.1.3 navigation</h3><p>在初始化过程中，执行 navigation 方法，获取系统拦截器：<strong>InterceptorServiceImpl</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigation(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">navigation</span><span class="params">(Context context, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【--&gt;3.1.5】调用了 ARouter 的 navigation 方法！</span></span><br><span class="line">    <span class="keyword">return</span> ARouter.getInstance().navigation(context, <span class="keyword">this</span>, -<span class="number">1</span>, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了 <strong>NavigationCallback callback</strong> 的概念：<strong>跳转回调</strong>！ </p><h1 id="9-Utils-包"><a href="#9-Utils-包" class="headerlink" title="9 Utils 包"></a>9 Utils 包</h1><h2 id="9-1-ClassUtils"><a href="#9-1-ClassUtils" class="headerlink" title="9.1 ClassUtils"></a>9.1 ClassUtils</h2><h3 id="9-1-1-成员变量"><a href="#9-1-1-成员变量" class="headerlink" title="9.1.1 成员变量"></a>9.1.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_NAME_EXT = <span class="string">".classes"</span>; <span class="comment">// 文件后缀</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRACTED_SUFFIX = <span class="string">".zip"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECONDARY_FOLDER_NAME = <span class="string">"code_cache"</span> + File.separator + <span class="string">"secondary-dexes"</span>; <span class="comment">// 文件路径 /code_cache/secondary-dexes；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFS_FILE = <span class="string">"multidex.version"</span>; <span class="comment">// 记录 mutilDex 信息的 sp name；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_DEX_NUMBER = <span class="string">"dex.number"</span>; <span class="comment">// sp key 值，记录 dex 的数量；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MAJOR = <span class="number">2</span>; <span class="comment">// VM 相关，用于判断 vm 是否支持 multiDex；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VM_WITH_MULTIDEX_VERSION_MINOR = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="9-1-2-getFileNameByPackageName"><a href="#9-1-2-getFileNameByPackageName" class="headerlink" title="9.1.2 getFileNameByPackageName"></a>9.1.2 getFileNameByPackageName</h3><p>通过指定包名，扫描 Apk 下面包含的所有类的 ClassName:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getFileNameByPackageName</span><span class="params">(Context context, <span class="keyword">final</span> String packageName)</span> </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; classNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//【--&gt;9.1.3】获取 apk 源代码（dex）的路径；</span></span><br><span class="line">    List&lt;String&gt; paths = getSourcePaths(context);</span><br><span class="line">    <span class="keyword">final</span> CountDownLatch parserCtl = <span class="keyword">new</span> CountDownLatch(paths.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> String path : paths) &#123;</span><br><span class="line">        DefaultPoolExecutor.getInstance().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DexFile dexfile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//【2】根据文件后缀的不同，会执行不通的操作，如果后缀是 .zip，那么回调用 DexFile.loadDex 方法；</span></span><br><span class="line">                    <span class="keyword">if</span> (path.endsWith(EXTRACTED_SUFFIX)) &#123; </span><br><span class="line">                        dexfile = DexFile.loadDex(path, path + <span class="string">".tmp"</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dexfile = <span class="keyword">new</span> DexFile(path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【3】遍历 dex 文件，找到该 apk 的所有 class，并返回其 class name；</span></span><br><span class="line">                    Enumeration&lt;String&gt; dexEntries = dexfile.entries();</span><br><span class="line">                    <span class="keyword">while</span> (dexEntries.hasMoreElements()) &#123;</span><br><span class="line">                        String className = dexEntries.nextElement();</span><br><span class="line">                        <span class="keyword">if</span> (className.startsWith(packageName)) &#123;</span><br><span class="line">                            classNames.add(className);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                    Log.e(<span class="string">"ARouter"</span>, <span class="string">"Scan map file in dex files made error."</span>, ignore);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != dexfile) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            dexfile.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    parserCtl.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parserCtl.await();</span><br><span class="line"></span><br><span class="line">    Log.d(Consts.TAG, <span class="string">"Filter "</span> + classNames.size() + <span class="string">" classes by packageName &lt;"</span> + packageName + <span class="string">"&gt;"</span>);</span><br><span class="line">    <span class="keyword">return</span> classNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-1-3-getSourcePaths"><a href="#9-1-3-getSourcePaths" class="headerlink" title="9.1.3 getSourcePaths"></a>9.1.3 getSourcePaths</h3><p>获取源代码路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getSourcePaths</span><span class="params">(Context context)</span> <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException </span>&#123;</span><br><span class="line">    ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), <span class="number">0</span>);</span><br><span class="line">    File sourceApk = <span class="keyword">new</span> File(applicationInfo.sourceDir);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; sourcePaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    sourcePaths.add(applicationInfo.sourceDir);<span class="comment">//【1】添加默认的 apk 源路径；</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】文件前缀：name.classes</span></span><br><span class="line">    String extractedFilePrefix = sourceApk.getName() + EXTRACTED_NAME_EXT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【--&gt;9.1.3.1】判断 vm 是否支持 multiDex，如何已经支持了 muitiDex，那就不去 Secondary Folder 加载 Classesx.zip</span></span><br><span class="line">    <span class="keyword">if</span> (!isVMMultidexCapable()) &#123;</span><br><span class="line">        <span class="comment">//【2】不支持 multiDex，那就要去加载 Classesx.zip；</span></span><br><span class="line">        <span class="keyword">int</span> totalDexNumber = getMultiDexPreferences(context).getInt(KEY_DEX_NUMBER, <span class="number">1</span>); <span class="comment">//【--&gt;9.1.3.2】获取 dex 的数量；</span></span><br><span class="line">        File dexDir = <span class="keyword">new</span> File(applicationInfo.dataDir, SECONDARY_FOLDER_NAME); <span class="comment">// 获取存放其他 dex 的目录；</span></span><br><span class="line">        <span class="comment">//【3】收集 Secondary Folder 目录下的 dex 的路径；</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> secondaryNumber = <span class="number">2</span>; secondaryNumber &lt;= totalDexNumber; secondaryNumber++) &#123;</span><br><span class="line">            <span class="comment">//【3.1】每个 dex file 的文件名都是：name.classes.zip，添加到 sourcePaths 列表中；</span></span><br><span class="line">            String fileName = extractedFilePrefix + secondaryNumber + EXTRACTED_SUFFIX;</span><br><span class="line">            File extractedFile = <span class="keyword">new</span> File(dexDir, fileName);</span><br><span class="line">            <span class="keyword">if</span> (extractedFile.isFile()) &#123;</span><br><span class="line">                sourcePaths.add(extractedFile.getAbsolutePath());</span><br><span class="line">                <span class="comment">//we ignore the verify zip part</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Missing extracted secondary dex file '"</span> + extractedFile.getPath() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ARouter.debuggable()) &#123; <span class="comment">// Search instant run support only debuggable</span></span><br><span class="line">        sourcePaths.addAll(tryLoadInstantRunDexFile(applicationInfo));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【4】返回收集的列表</span></span><br><span class="line">    <span class="keyword">return</span> sourcePaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程还是比较简单的；</p><h4 id="9-1-3-1-isVMMultidexCapable"><a href="#9-1-3-1-isVMMultidexCapable" class="headerlink" title="9.1.3.1 isVMMultidexCapable"></a>9.1.3.1 isVMMultidexCapable</h4><p>判断 vm 是否支持 multiDex：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVMMultidexCapable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> isMultidexCapable = <span class="keyword">false</span>;</span><br><span class="line">     String vmName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (isYunOS()) &#123; <span class="comment">//【1】YunOS 需要特殊判断</span></span><br><span class="line">             vmName = <span class="string">"'YunOS'"</span>;</span><br><span class="line">             isMultidexCapable = Integer.valueOf(System.getProperty(<span class="string">"ro.build.version.sdk"</span>)) &gt;= <span class="number">21</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">//【2】非 YunOS 原生 Android</span></span><br><span class="line">             vmName = <span class="string">"'Android'"</span>;</span><br><span class="line">             String versionString = System.getProperty(<span class="string">"java.vm.version"</span>);</span><br><span class="line">             <span class="keyword">if</span> (versionString != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">//【3】判断 java.vm.version 属性的 major 和 minor 的范围；</span></span><br><span class="line">                 Matcher matcher = Pattern.compile(<span class="string">"(\\d+)\\.(\\d+)(\\.\\d+)?"</span>).matcher(versionString);</span><br><span class="line">                 <span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                         <span class="keyword">int</span> major = Integer.parseInt(matcher.group(<span class="number">1</span>));</span><br><span class="line">                         <span class="keyword">int</span> minor = Integer.parseInt(matcher.group(<span class="number">2</span>));</span><br><span class="line">                         isMultidexCapable = (major &gt; VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 || ((major == VM_WITH_MULTIDEX_VERSION_MAJOR)</span><br><span class="line">                                 &amp;&amp; (minor &gt;= VM_WITH_MULTIDEX_VERSION_MINOR));</span><br><span class="line">                     &#125; <span class="keyword">catch</span> (NumberFormatException ignore) &#123;</span><br><span class="line">                         <span class="comment">// let isMultidexCapable be false</span></span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Log.i(Consts.TAG, <span class="string">"VM with name "</span> + vmName + (isMultidexCapable ? <span class="string">" has multidex support"</span> : <span class="string">" does not have multidex support"</span>));</span><br><span class="line">     <span class="keyword">return</span> isMultidexCapable;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>不多说了 ；</p><h4 id="9-1-3-2-getMultiDexPreferences"><a href="#9-1-3-2-getMultiDexPreferences" class="headerlink" title="9.1.3.2 getMultiDexPreferences"></a>9.1.3.2 getMultiDexPreferences</h4><p>获取记录 multi dex 信息 sp，ARouter 将 dex 的数量保存到内部 sp 中，name： “multidex.version”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SharedPreferences <span class="title">getMultiDexPreferences</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> context.getSharedPreferences(PREFS_FILE, Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB </span><br><span class="line">                                         ? Context.MODE_PRIVATE : Context.MODE_PRIVATE | Context.MODE_MULTI_PROCESS);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-PackageUtils"><a href="#9-2-PackageUtils" class="headerlink" title="9.2 PackageUtils"></a>9.2 PackageUtils</h2><h3 id="9-2-1-成员变量"><a href="#9-2-1-成员变量" class="headerlink" title="9.2.1 成员变量"></a>9.2.1 成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String NEW_VERSION_NAME;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> NEW_VERSION_CODE;</span><br></pre></td></tr></table></figure><p>用来缓存 apk 的版本号和版本名；</p><h3 id="9-2-2-isNewVersion"><a href="#9-2-2-isNewVersion" class="headerlink" title="9.2.2 isNewVersion"></a>9.2.2 isNewVersion</h3><p>判断 apk 是否是新的版本，包括第一次安装/更新安装；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNewVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 apk 的信息；</span></span><br><span class="line">    PackageInfo packageInfo = getPackageInfo(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != packageInfo) &#123;</span><br><span class="line">        <span class="comment">//【2】获取 apk 的版本名和版本号；</span></span><br><span class="line">        String versionName = packageInfo.versionName;</span><br><span class="line">        <span class="keyword">int</span> versionCode = packageInfo.versionCode;</span><br><span class="line"></span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【3】如何和本地缓存的不一样，那就说明是新版本；</span></span><br><span class="line">        <span class="keyword">if</span> (!versionName.equals(sp.getString(LAST_VERSION_NAME, <span class="keyword">null</span>)) || versionCode != sp.getInt(LAST_VERSION_CODE, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">//【3.1】将新的 versionCode 和 VersionName 缓存下来；</span></span><br><span class="line">            NEW_VERSION_NAME = versionName;</span><br><span class="line">            NEW_VERSION_CODE = versionCode;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-3-updateVersion"><a href="#9-2-3-updateVersion" class="headerlink" title="9.2.3 updateVersion"></a>9.2.3 updateVersion</h3><p>更新本地缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateVersion</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!android.text.TextUtils.isEmpty(NEW_VERSION_NAME) &amp;&amp; NEW_VERSION_CODE != <span class="number">0</span>) &#123;</span><br><span class="line">        SharedPreferences sp = context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//【1】写入到本地 sp 中；</span></span><br><span class="line">        sp.edit().putString(LAST_VERSION_NAME, NEW_VERSION_NAME).putInt(LAST_VERSION_CODE, NEW_VERSION_CODE).apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>LAST_VERSION_NAME</strong>，<strong>LAST_VERSION_CODE</strong> 均定义在 Consts 中；</p><h2 id="9-x-Consts"><a href="#9-x-Consts" class="headerlink" title="9.x Consts"></a>9.x Consts</h2><p>常量类，保存了 arouter-api 中的常量关键字；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Consts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SDK_NAME = <span class="string">"ARouter"</span>; <span class="comment">// 这几个常量在 complier 中有见过，用于生成注解处理后的类的类名和包名；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SDK_NAME + <span class="string">"::"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_ROOT = <span class="string">"Root"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_INTERCEPTORS = <span class="string">"Interceptors"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_PROVIDERS = <span class="string">"Providers"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUFFIX_AUTOWIRED = SEPARATOR + SDK_NAME + SEPARATOR + <span class="string">"Autowired"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOT = <span class="string">"."</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTE_ROOT_PAKCAGE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_CACHE_KEY = <span class="string">"SP_AROUTER_CACHE"</span>; <span class="comment">// 本地缓存 sp 的 name</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AROUTER_SP_KEY_MAP = <span class="string">"ROUTER_MAP"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_NAME = <span class="string">"LAST_VERSION_NAME"</span>; <span class="comment">// 用于保存 apk 的版本号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAST_VERSION_CODE = <span class="string">"LAST_VERSION_CODE"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-总结"><a href="#10-总结" class="headerlink" title="10 总结"></a>10 总结</h1><p>我们分析路由初始化的整个过程，设计的 pkg 也很多，但是细心的观察，我们其实已经分析了一些路由跳转的逻辑，哈哈哈。</p><p>当然，还有下面的问题遗漏了：</p><ul><li><code>PathReplaceService，PretreatmentService，DegradeService</code>：是如何获取的，作用又是什么呢？</li><li><code>facade.service</code> 下的这些 <code>Service</code> 都是如何工作的呢？</li><li><code>core</code>目录下的 <code>AutowiredServiceImpl</code> 和 <code>InterceptorServiceImpl</code>，又是如何工作的呢？</li><li>ARouter 如何处理跳转回调的呢？</li></ul><p>这些问题，我会在下篇：路由跳转中分析；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第三篇 - 注解解析 (arouter-compiler)</title>
    <link href="https://lishuaiqi.top/2019/04/19/ARouter3-arouter-compiler/"/>
    <id>https://lishuaiqi.top/2019/04/19/ARouter3-arouter-compiler/</id>
    <published>2019-04-19T12:46:25.000Z</published>
    <updated>2019-08-09T13:24:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-compiler 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看  arouter-compiler  的模块结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____compiler</span><br><span class="line">| | | | | |____entity</span><br><span class="line">| | | | | | |____RouteDoc.java</span><br><span class="line">| | | | | |____processor</span><br><span class="line">| | | | | | |____BaseProcessor.java</span><br><span class="line">| | | | | | |____InterceptorProcessor.java</span><br><span class="line">| | | | | | |____AutowiredProcessor.java</span><br><span class="line">| | | | | | |____RouteProcessor.java</span><br><span class="line">| | | | | |____utils</span><br><span class="line">| | | | | | |____TypeUtils.java</span><br><span class="line">| | | | | | |____Consts.java</span><br><span class="line">| | | | | | |____Logger.java</span><br></pre></td></tr></table></figure><p>可以看到，一共有三个 pacakge：</p><ul><li>entity：包含了实体数据类；</li><li>processor：包含了所有的注解解释器类；</li><li>utils：包含了一些工具类；</li></ul><p>我们知道，在 Gradle 对 App 执行编译的时候，arouter-compiler 会对相关的注解进行解析，并动态生成所需的类；</p><p>arouter-compiler 模块还依赖了两个三方库：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc3'</span></span><br><span class="line">implementation <span class="string">'com.squareup:javapoet:1.8.0'</span></span><br></pre></td></tr></table></figure><p><em>JavaPoet</em> 是 square 推出的开源 java 代码生成框架，提供 Java Api 生成 .java 源文件；</p><p>auto-service 是 google 提供的用于自动注册自定义注解处理器的三方库；</p><p>关于这两个库的源码，本系列文章不分析，后面单独分析；</p><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><p>我们分别分析下三个 package 目录下的 class 的作用！</p><h2 id="2-1-entity"><a href="#2-1-entity" class="headerlink" title="2.1 entity"></a>2.1 entity</h2><p>该 package 下面只包含一个实体数据类：RouteDoc。</p><h3 id="2-1-1-RouteDoc"><a href="#2-1-1-RouteDoc" class="headerlink" title="2.1.1 RouteDoc"></a>2.1.1 RouteDoc</h3><p>RouteDoc 用于描述路由跳转的信息，用于生成路由表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDoc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> String prototype;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mark;</span><br><span class="line">    <span class="meta">@JSONField</span>(ordinal = <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Param&gt; params;</span><br><span class="line"></span><br><span class="line">    ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">private</span> String key;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">private</span> String description;</span><br><span class="line">        <span class="meta">@JSONField</span>(ordinal = <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> required;</span><br><span class="line"></span><br><span class="line">        ... ... ...<span class="comment">// 省略掉 get/set 方法；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 processor 对注解进行解析的时候，它会把路由跳转相关的信息记录到 RouteDoc 中！</p><p>后面我们分析 processor 的时候就可以看到了！ </p><h2 id="2-2-processor-注解解析"><a href="#2-2-processor-注解解析" class="headerlink" title="2.2 processor - 注解解析"></a>2.2 processor - 注解解析</h2><p>该 package 下面包含 ARouter 的核心类：processors，根据前面的注解，一共有三个 processor，我们分别来分析！</p><p>重点要关注他们是如何“<strong>解析注解，并动态生成代码</strong>的！</p><h3 id="2-2-1-BaseProcessor"><a href="#2-2-1-BaseProcessor" class="headerlink" title="2.2.1 BaseProcessor"></a>2.2.1 BaseProcessor</h3><p>BaseProcessor 是其他三个 processor 的基类，定义了一些共有的属性和操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    Filer mFiler;</span><br><span class="line">    Logger logger;</span><br><span class="line">    Types types;</span><br><span class="line">    Elements elementUtils; <span class="comment">// 元素工具类对象；</span></span><br><span class="line">    TypeUtils typeUtils;</span><br><span class="line">    <span class="comment">//【1】模块的名称 name；</span></span><br><span class="line">    String moduleName = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//【2】是否要生成 route doc；</span></span><br><span class="line">    <span class="keyword">boolean</span> generateDoc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">        mFiler = processingEnv.getFiler();</span><br><span class="line">        types = processingEnv.getTypeUtils();</span><br><span class="line">        elementUtils = processingEnv.getElementUtils();</span><br><span class="line">        <span class="comment">//【*2.3.2】创建 TypeUtils 对象，用于对类型做处理；</span></span><br><span class="line">        typeUtils = <span class="keyword">new</span> TypeUtils(types, elementUtils);</span><br><span class="line">        <span class="comment">//【*2.3.1】创建 Logger 对象，用于打印过程信息；</span></span><br><span class="line">        logger = <span class="keyword">new</span> Logger(processingEnv.getMessager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】获取 Processor 当前所在 moudle 的 name，判断是否生成路由文档；</span></span><br><span class="line">        <span class="comment">// 常量第一在 Consts 中；</span></span><br><span class="line">        Map&lt;String, String&gt; options = processingEnv.getOptions();</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(options)) &#123;</span><br><span class="line">            moduleName = options.get(KEY_MODULE_NAME);</span><br><span class="line">            generateDoc = VALUE_ENABLE.equals(options.get(KEY_GENERATE_DOC_NAME));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(moduleName)) &#123; <span class="comment">// 这部分是对 moduleName 进行检查；</span></span><br><span class="line">            moduleName = moduleName.replaceAll(<span class="string">"[^0-9a-zA-Z_]+"</span>, <span class="string">""</span>);</span><br><span class="line">            logger.info(<span class="string">"The user has configuration the module name, it was ["</span> + moduleName + <span class="string">"]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(NO_MODULE_NAME_TIPS);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... ... ... <span class="comment">// getSupportedSourceVersion /getSupportedOptions</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面省略掉了一些非核心方法，我们不关注它们；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            <span class="comment">// 这里是核心配置点；</span></span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="string">AROUTER_MODULE_NAME:</span> project.getName(), <span class="string">AROUTER_GENERATE_DOC:</span> <span class="string">"enable"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 KEY_MODULE_NAME，KEY_GENERATE_DOC_NAME，对应的我们在 .gradle 中的配置，这些配置最终都会解析并保存到 ProcessingEnvironment 中；</p><p><strong>BaseProcessor</strong> 主要作用就是创建 TypeUtils 对象和 Logger 对象，然后获得当前所在 module 的 gradle 配置！</p><h3 id="2-2-2-RouteProcessor"><a href="#2-2-2-RouteProcessor" class="headerlink" title="2.2.2  RouteProcessor"></a>2.2.2  RouteProcessor</h3><p>核心解释器，用于处理 @Route 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_ROUTE, ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-2-1-Field"><a href="#2-2-2-1-Field" class="headerlink" title="2.2.2.1 Field"></a>2.2.2.1 Field</h4><p>内部变量；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key 是所属的组 group，value 是该组下的所有跳转信息 RouteMeta 对象；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Set&lt;RouteMeta&gt;&gt; groupMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; rootMap = <span class="keyword">new</span> TreeMap&lt;&gt;();  <span class="comment">// Map of root metas, used for generate class file in order.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TypeMirror iProvider = <span class="keyword">null</span>; <span class="comment">// .IProvider 的类型；</span></span><br><span class="line"><span class="keyword">private</span> Writer docWriter;       <span class="comment">// 用于生成路由文档；</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-Init"><a href="#2-2-2-2-Init" class="headerlink" title="2.2.2.2 Init"></a>2.2.2.2 Init</h4><p>初始化 processor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            docWriter = mFiler.createResource(</span><br><span class="line">                    StandardLocation.SOURCE_OUTPUT,</span><br><span class="line">                    PACKAGE_OF_GENERATE_DOCS,</span><br><span class="line">                    <span class="string">"arouter-map-of-"</span> + moduleName + <span class="string">".json"</span></span><br><span class="line">            ).openWriter();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Create doc writer failed, because "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; RouteProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-Process-处理-Route-注解"><a href="#2-2-2-3-Process-处理-Route-注解" class="headerlink" title="2.2.2.3 Process - 处理 Route 注解"></a>2.2.2.3 Process - 处理 Route 注解</h4><p>核心逻辑：注意，这里的参数 Set&lt;? extends TypeElement&gt; annotations ，表示的是要处理的注解，根据前面的内容：Route 和 AutoWired ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】这里返回了 @Route 处理的元素；</span></span><br><span class="line">        Set&lt;? extends Element&gt; routeElements = roundEnv.getElementsAnnotatedWith(Route.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found routes, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.2.3.1】开始处理注解修饰的元素；</span></span><br><span class="line">            <span class="keyword">this</span>.parseRoutes(routeElements);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这里调用了 parseRoutes 方法：</p><h5 id="2-2-2-3-1-parseRoutes"><a href="#2-2-2-3-1-parseRoutes" class="headerlink" title="2.2.2.3.1 parseRoutes"></a>2.2.2.3.1 parseRoutes</h5><p>核心的核心：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRoutes</span><span class="params">(Set&lt;? extends Element&gt; routeElements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(routeElements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found routes, size is "</span> + routeElements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        rootMap.clear();</span><br><span class="line">        <span class="comment">//【1】保存 activity，service，fragment 的元素类型；</span></span><br><span class="line">        TypeMirror type_Activity = elementUtils.getTypeElement(ACTIVITY).asType();</span><br><span class="line">        TypeMirror type_Service = elementUtils.getTypeElement(SERVICE).asType();</span><br><span class="line">        TypeMirror fragmentTm = elementUtils.getTypeElement(FRAGMENT).asType();</span><br><span class="line">        TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】获得 .IProvider/.IProviderGroup 对应的 TypeElement 对象；</span></span><br><span class="line">        TypeElement type_IRouteGroup = elementUtils.getTypeElement(IROUTE_GROUP);</span><br><span class="line">        TypeElement type_IProviderGroup = elementUtils.getTypeElement(IPROVIDER_GROUP);</span><br><span class="line">      <span class="comment">//【3】获得 RouteMeta 和 RouteType 的类全限定名；</span></span><br><span class="line">        ClassName routeMetaCn = ClassName.get(RouteMeta.class);</span><br><span class="line">        ClassName routeTypeCn = ClassName.get(RouteType.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】准备动态生成 java 代码：</span></span><br><span class="line">        <span class="comment">//【4.1】生成方法参数类型：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfRoot = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_IRouteGroup))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.2】生成方法参数类型：Map&lt;String, RouteMeta&gt;</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfGroup = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(String.class),</span><br><span class="line">                ClassName.get(RouteMeta.class)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.4】生成方法参数：</span></span><br><span class="line">        <span class="comment">// Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; atlas</span></span><br><span class="line">        <span class="comment">// Map&lt;String, RouteMeta&gt; providers</span></span><br><span class="line">        ParameterSpec rootParamSpec = ParameterSpec.builder(inputMapTypeOfRoot, <span class="string">"routes"</span>).build();</span><br><span class="line">        ParameterSpec groupParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"atlas"</span>).build();</span><br><span class="line">        ParameterSpec providerParamSpec = ParameterSpec.builder(inputMapTypeOfGroup, <span class="string">"providers"</span>).build(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.5】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfRootBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(rootParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】处理 @Route 注解修饰的元素</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : routeElements) &#123;</span><br><span class="line">            TypeMirror tm = element.asType(); <span class="comment">// 获得 Route 注解的元素的类型信息；</span></span><br><span class="line">            Route route = element.getAnnotation(Route.class); <span class="comment">// 获得 Route 注解对象；</span></span><br><span class="line">            RouteMeta routeMeta; <span class="comment">// 用于封装跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (types.isSubtype(tm, type_Activity)) &#123;</span><br><span class="line">                <span class="comment">//【5.1】注解的元素是 activity 的子类；</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found activity route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; 类型枚举序号；</span></span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfig = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 保存 fieldName/Autowired.name --&gt; Autowired 实例</span></span><br><span class="line">              </span><br><span class="line">                <span class="keyword">for</span> (Element field : element.getEnclosedElements()) &#123;</span><br><span class="line">                    <span class="comment">//【5.1.1】返回该元素直接包含的子元素（成员属性），处理内部哪些被 @Autowired 注解的成员属性（避开 IProvider 子类）；</span></span><br><span class="line">                    <span class="keyword">if</span> (field.getKind().isField() &amp;&amp; field.getAnnotation(Autowired.class) != <span class="keyword">null</span> &amp;&amp; !types.isSubtype(field.asType(), iProvider)) &#123;</span><br><span class="line">                        <span class="comment">// 必须是被 @Autowired 注解的属性，但是不能是 IProvider</span></span><br><span class="line">                        Autowired paramConfig = field.getAnnotation(Autowired.class);</span><br><span class="line">                        <span class="comment">//【5.1.1.1】根据是否设置 Autowired.name 对属性进行 byName 或者 byType 处理；</span></span><br><span class="line">                        String injectName = StringUtils.isEmpty(paramConfig.name()) ? field.getSimpleName().toString() : paramConfig.name();</span><br><span class="line">                        <span class="comment">//【5.1.1.2】加入到集合；</span></span><br><span class="line">                        paramsType.put(injectName, typeUtils.typeExchange(field));</span><br><span class="line">                        injectConfig.put(injectName, paramConfig);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【5.1.2】创建跳转对象；</span></span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.ACTIVITY, paramsType);</span><br><span class="line">                routeMeta.setInjectConfig(injectConfig);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123;</span><br><span class="line">                <span class="comment">//【5.2】注解的元素实现了 IProvider 接口，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found provider route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.PROVIDER, <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, type_Service)) &#123;</span><br><span class="line">                <span class="comment">//【5.3】注解的元素是 service 的子类，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found service route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(SERVICE), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, fragmentTm) || types.isSubtype(tm, fragmentTmV4)) </span><br><span class="line">                <span class="comment">//【5.4】注解的元素是 fragment 的子类，，创建跳转对象</span></span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt; Found fragment route: "</span> + tm.toString() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">                routeMeta = <span class="keyword">new</span> RouteMeta(route, element, RouteType.parse(FRAGMENT), <span class="keyword">null</span>);</span><br><span class="line">              </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ARouter::Compiler &gt;&gt;&gt; Found unsupported class type, type = ["</span> + types.toString() + <span class="string">"]."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【*2.2.2.3.1.1】对跳转对象进行分类；</span></span><br><span class="line">            categories(routeMeta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4.6】生成方法签名：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; providers) </span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfProviderBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(providerParamSpec);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;RouteDoc&gt;&gt; docSource = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// key：组名；value：每个组内的路由跳转文档；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】按照分组的方式，遍历 RouteMeta；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;RouteMeta&gt;&gt; entry : groupMap.entrySet()) &#123;</span><br><span class="line">            String groupName = entry.getKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.1】生成方法签名：</span></span><br><span class="line">            <span class="comment">// @Override</span></span><br><span class="line">            <span class="comment">// public void loadInto(Map&lt;String, RouteMeta&gt; atlas) </span></span><br><span class="line">            MethodSpec.Builder loadIntoMethodOfGroupBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(groupParamSpec);</span><br><span class="line"></span><br><span class="line">            List&lt;RouteDoc&gt; routeDocList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 用于保存路由跳转信息；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.2】获得属于该 group 下的所有 RouteMeta，并依次处理；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; groupData = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (RouteMeta routeMeta : groupData) &#123;</span><br><span class="line">                <span class="comment">//【*2.2.2.3.1.2】根据跳转信息，生成文档对象；</span></span><br><span class="line">                RouteDoc routeDoc = extractDocInfo(routeMeta);</span><br><span class="line"></span><br><span class="line">                ClassName className = ClassName.get((TypeElement) routeMeta.getRawType()); <span class="comment">// 目标类的全限定名</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (routeMeta.getType()) &#123; <span class="comment">//【5.2.1】针对跳转类型为 PROVIDER 的情况，这里会将其父类的信息缓存下来；</span></span><br><span class="line">                    <span class="keyword">case</span> PROVIDER:</span><br><span class="line">                        <span class="comment">// 返回直接由此类实现或直接由此接口扩展的接口类型（目标类的负类）</span></span><br><span class="line">                        List&lt;? extends TypeMirror&gt; interfaces = ((TypeElement) routeMeta.getRawType()).getInterfaces();</span><br><span class="line">                        <span class="keyword">for</span> (TypeMirror tm : interfaces) &#123;</span><br><span class="line">                            routeDoc.addPrototype(tm.toString());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (types.isSameType(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 类型，说明目标类是直接实现的 .IProvider 接口； </span></span><br><span class="line">                                <span class="comment">//【5.2.2】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("目标类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//           $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                                                         + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        (routeMeta.getRawType()).toString(), <span class="comment">// routeMeta.getRawType() 返回的是 element;</span></span><br><span class="line">                                        routeMetaCn,  <span class="comment">// RouteMeta</span></span><br><span class="line">                                        routeTypeCn,  <span class="comment">// RouteType</span></span><br><span class="line">                                        className,    <span class="comment">// 类名；</span></span><br><span class="line">                                        routeMeta.getPath(),  <span class="comment">// Route 的 path 属性；</span></span><br><span class="line">                                        routeMeta.getGroup()); <span class="comment">// group 属性；</span></span><br><span class="line">                              </span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(tm, iProvider)) &#123; <span class="comment">// 如果是 .IProvider 的字类型，说明目标类是继承了一个实现 .IProvider 的类；</span></span><br><span class="line">                                <span class="comment">//【5.2.3】生成方法体：</span></span><br><span class="line">                                <span class="comment">// providers.put("直接父类的全限定名", RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span></span><br><span class="line">                                <span class="comment">//            $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, null, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span></span><br><span class="line">                                loadIntoMethodOfProviderBuilder.addStatement(</span><br><span class="line">                                        <span class="string">"providers.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, null, "</span> + routeMeta.getPriority() </span><br><span class="line">                                   + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                                        tm.toString(),</span><br><span class="line">                                        routeMetaCn,</span><br><span class="line">                                        routeTypeCn,</span><br><span class="line">                                        className,</span><br><span class="line">                                        routeMeta.getPath(),</span><br><span class="line">                                        routeMeta.getGroup());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.3】用于继续生成 route doc, 和 Autowired 注解的参数 hashmap</span></span><br><span class="line">                StringBuilder mapBodyBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType();</span><br><span class="line">                Map&lt;String, Autowired&gt; injectConfigs = routeMeta.getInjectConfig();</span><br><span class="line">                <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                    List&lt;RouteDoc.Param&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; types : paramsType.entrySet()) &#123;</span><br><span class="line">                        <span class="comment">// 创建 Autowired 注解的参数 hashmap；</span></span><br><span class="line">                        mapBodyBuilder.append(<span class="string">"put(\""</span>).append(types.getKey()).append(<span class="string">"\", "</span>).append(types.getValue()).append(<span class="string">"); "</span>);</span><br><span class="line"></span><br><span class="line">                        RouteDoc.Param param = <span class="keyword">new</span> RouteDoc.Param();</span><br><span class="line">                        Autowired injectConfig = injectConfigs.get(types.getKey());</span><br><span class="line">                        param.setKey(types.getKey());</span><br><span class="line">                        param.setType(TypeKind.values()[types.getValue()].name().toLowerCase());</span><br><span class="line">                        param.setDescription(injectConfig.desc());</span><br><span class="line">                        param.setRequired(injectConfig.required());</span><br><span class="line"></span><br><span class="line">                        paramList.add(param);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将 @AutoWeird 修饰的变量信息保存到 routeDoc 中；</span></span><br><span class="line">                    routeDoc.setParams(paramList);</span><br><span class="line">                &#125;</span><br><span class="line">                String mapBody = mapBodyBuilder.toString();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//【5.4】生成方法体：：</span></span><br><span class="line">                <span class="comment">// atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, </span></span><br><span class="line">                <span class="comment">//           $&#123;path&#125;, $&#123;group&#125;, new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span></span><br><span class="line">                loadIntoMethodOfGroupBuilder.addStatement(</span><br><span class="line">                        <span class="string">"atlas.put($S, $T.build($T."</span> + routeMeta.getType() + <span class="string">", $T.class, $S, $S, "</span> </span><br><span class="line">                  + (StringUtils.isEmpty(mapBody) ? <span class="keyword">null</span> : (<span class="string">"new java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;"</span> + mapBodyBuilder.toString()</span><br><span class="line">                              + <span class="string">"&#125;&#125;"</span>)) + <span class="string">", "</span> + routeMeta.getPriority() + <span class="string">", "</span> + routeMeta.getExtra() + <span class="string">"))"</span>,</span><br><span class="line">                        routeMeta.getPath(),</span><br><span class="line">                        routeMetaCn,</span><br><span class="line">                        routeTypeCn,</span><br><span class="line">                        className,</span><br><span class="line">                        routeMeta.getPath().toLowerCase(),</span><br><span class="line">                        routeMeta.getGroup().toLowerCase());</span><br><span class="line"></span><br><span class="line">                routeDoc.setClassName(className.toString()); <span class="comment">// 将 className 保存到 routeDoc 中；</span></span><br><span class="line">                routeDocList.add(routeDoc); <span class="comment">// 将这个路由表加入到 routeDocList 中；</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【5.5】动态生成 java 文件：</span></span><br><span class="line">            String groupFileName = NAME_OF_GROUP + groupName;</span><br><span class="line">            JavaFile.builder(PACKAGE_OF_GENERATE_FILE,   <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                    TypeSpec.classBuilder(groupFileName) <span class="comment">// 类名 ARouter$$Group$$ + $&#123;groupName&#125;</span></span><br><span class="line">                            .addJavadoc(WARNING_TIPS)</span><br><span class="line">                            .addSuperinterface(ClassName.get(type_IRouteGroup)) <span class="comment">// 实现 .IRouteGroup 接口；</span></span><br><span class="line">                            .addModifiers(PUBLIC)</span><br><span class="line">                            .addMethod(loadIntoMethodOfGroupBuilder.build())</span><br><span class="line">                            .build()</span><br><span class="line">            ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Generated group: "</span> + groupName + <span class="string">"&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【5.6】将 key：groupName ---&gt; value：ARouter$$Group$$ + $&#123;groupName&#125; 保存到 rootMap 表中；</span></span><br><span class="line">            rootMap.put(groupName, groupFileName);</span><br><span class="line">            docSource.put(groupName, routeDocList); <span class="comment">// 将当前组的所有路由表保存到 docSource 中；</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(rootMap)) &#123;</span><br><span class="line">            <span class="comment">//【6】生成方法体：：</span></span><br><span class="line">           <span class="comment">// routes.put("app", ARouter$$Group$$$&#123;$groupName&#125;.class);</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : rootMap.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfRootBuilder.addStatement(<span class="string">"routes.put($S, $T.class)"</span>, </span><br><span class="line">                                                         entry.getKey(), ClassName.get(PACKAGE_OF_GENERATE_FILE, entry.getValue())); <span class="comment">// 当然，这里是全限定名；</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】如果 gradle 设置了生成路由表，那就将 docSource 以 json 的形式输出；</span></span><br><span class="line">        <span class="keyword">if</span> (generateDoc) &#123;</span><br><span class="line">            docWriter.append(JSON.toJSONString(docSource, SerializerFeature.PrettyFormat));</span><br><span class="line">            docWriter.flush();</span><br><span class="line">            docWriter.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【8】动态生成 java 文件：</span></span><br><span class="line">        String providerMapFileName = NAME_OF_PROVIDER + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE, <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(providerMapFileName) <span class="comment">// 类名：ARouter$$Providers$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_IProviderGroup)) <span class="comment">// 实现 .IProviderGroup 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfProviderBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated provider map, name is "</span> + providerMapFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【9】动态生成 java 文件：</span></span><br><span class="line">        String rootFileName = NAME_OF_ROOT + SEPARATOR + moduleName;</span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,  <span class="comment">// 包名；com.alibaba.android.arouter.routes</span></span><br><span class="line">                TypeSpec.classBuilder(rootFileName) <span class="comment">// 包名；ARouter$$Root$$ + $&#123;moduleName&#125;</span></span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addSuperinterface(ClassName.get(elementUtils.getTypeElement(ITROUTE_ROOT))) <span class="comment">// 实现 .IRouteRoot 接口；</span></span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addMethod(loadIntoMethodOfRootBuilder.build())</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Generated root, name is "</span> + rootFileName + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程还是很简单清晰的，主要是代码生成过程用很多的占位符，为我们看源码产生了很多的阻碍；</p><ul><li>RouteProcessor 不仅会解析 @Route，还会解析 @AutoWired；</li><li>最终会生成三个 java 文件，具体的模版信息：</li></ul><h6 id="2-2-2-3-1-1-categories"><a href="#2-2-2-3-1-1-categories" class="headerlink" title="2.2.2.3.1.1 categories"></a>2.2.2.3.1.1 categories</h6><p>对跳转信息进行分类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(RouteMeta routeMete)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【*2.2.2.3.1.2】校验路由跳转信息！</span></span><br><span class="line">    <span class="keyword">if</span> (routeVerify(routeMete)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Start categories, group = "</span> + routeMete.getGroup() + <span class="string">", path = "</span> + routeMete.getPath() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">//【1】将校验通过的跳转 RouteMeta 加入到 groupMap 中；</span></span><br><span class="line">        Set&lt;RouteMeta&gt; routeMetas = groupMap.get(routeMete.getGroup());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(routeMetas)) &#123;</span><br><span class="line">            <span class="comment">//【2】如果是第一次添加，需要创建一个 Set&lt;RouteMeta&gt;，内部元素以 path 排序；</span></span><br><span class="line">            Set&lt;RouteMeta&gt; routeMetaSet = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;RouteMeta&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(RouteMeta r1, RouteMeta r2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> r1.getPath().compareTo(r2.getPath());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                        logger.error(npe.getMessage());</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//【3】加入到集合中；</span></span><br><span class="line">            routeMetaSet.add(routeMete);</span><br><span class="line">            groupMap.put(routeMete.getGroup(), routeMetaSet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//【4】已经创建了 set，直接加入；</span></span><br><span class="line">            routeMetas.add(routeMete);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.warning(<span class="string">"&gt;&gt;&gt; Route meta verify error, group is "</span> + routeMete.getGroup() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h6 id="2-2-2-3-1-2-routeVerify"><a href="#2-2-2-3-1-2-routeVerify" class="headerlink" title="2.2.2.3.1.2 routeVerify"></a>2.2.2.3.1.2 routeVerify</h6><p>校验路由跳转信息；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">routeVerify</span><span class="params">(RouteMeta meta)</span> </span>&#123;</span><br><span class="line">    String path = meta.getPath();</span><br><span class="line">    <span class="comment">//【1】path 必须要指定，并且以 "/" 开头；</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(path) || !path.startsWith(<span class="string">"/"</span>)) &#123;   <span class="comment">// The path must be start with '/' and not empty!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【2】如果 Route 没有指定 group 属性，那么就以 path 的一级目录为</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(meta.getGroup())) &#123; <span class="comment">// Use default group(the first word in path)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String defaultGroup = path.substring(<span class="number">1</span>, path.indexOf(<span class="string">"/"</span>, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(defaultGroup)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【2.1】设置组 group</span></span><br><span class="line">            meta.setGroup(defaultGroup);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Failed to extract default group! "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><h6 id="2-2-2-3-1-2-extractDocInfo"><a href="#2-2-2-3-1-2-extractDocInfo" class="headerlink" title="2.2.2.3.1.2 extractDocInfo"></a>2.2.2.3.1.2 extractDocInfo</h6><p>创建路由信息对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RouteDoc <span class="title">extractDocInfo</span><span class="params">(RouteMeta routeMeta)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】根据 RouteMeta 创建 RouteDoc 实例；</span></span><br><span class="line">    RouteDoc routeDoc = <span class="keyword">new</span> RouteDoc();</span><br><span class="line">    routeDoc.setGroup(routeMeta.getGroup());</span><br><span class="line">    routeDoc.setPath(routeMeta.getPath());</span><br><span class="line">    routeDoc.setDescription(routeMeta.getName());</span><br><span class="line">    routeDoc.setType(routeMeta.getType().name().toLowerCase());</span><br><span class="line">    routeDoc.setMark(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> routeDoc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-4-动态生成类"><a href="#2-2-5-4-动态生成类" class="headerlink" title="2.2.5.4 动态生成类"></a>2.2.5.4 动态生成类</h4><h5 id="2-2-5-4-1-模版信息"><a href="#2-2-5-4-1-模版信息" class="headerlink" title="2.2.5.4.1 模版信息"></a>2.2.5.4.1 模版信息</h5><p>我们来看看生成了哪几种模板类：</p><ul><li><code>ARouter$$Providers$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IProviderGroup，其实都可以猜到，用于添加属于同一组的 iprovider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$$</span>&#123;moduleName&#125; implements IProviderGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">      providers.put(<span class="string">"目标类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                     $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">    </span><br><span class="line">      providers.put(<span class="string">"父类的全限定名"</span>, RouteMeta.build(RouteType.PROVIDER, 目标类的类名.class, </span><br><span class="line">                                                $&#123;routeMeta.getPath()&#125;, $&#123;routeMeta.getGroup()&#125;, <span class="keyword">null</span>, $&#123;routeMeta.getPriority()&#125;, $&#123;routeMeta.getExtra()&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Group$$${groupName}.java</code></li></ul><p>这个模版类继承了 IRouteGroup，其实都可以猜到，用于添加属于同一组的所有被 @Route 注解的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$$</span>&#123;groupName&#125; implements IRouteGroup &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> java.util.HashMap&lt;String, Integer&gt;()&#123;&#123;put($&#123;fieldName&#125;/$&#123;AutoWired.Name&#125;, $&#123;TypeKind&#125;);&#125;&#125;, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">    atlas.put($&#123;path&#125;, RouteMeta.build(RouteType.XXXX, $&#123;className&#125;.class, $&#123;path&#125;, $&#123;group&#125;, <span class="keyword">null</span>, $&#123;priority&#125;, $&#123;extra&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了～</p><ul><li><code>ARouter$$Root$$${moduleName}.java</code></li></ul><p>这个模版类继承了 IRouteRoot，最为 root，用于添加和管理 group 和对应的 <code>ARouter$$Group$$${moduleName}.java</code> 的映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$$</span>&#123;moduleName&#125; implements IRouteRoot &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put($&#123;groupName&#125;, ARouter$$Group$$$&#123;groupName&#125;.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过  <code>ARouter$$Root$$${groupName}.java</code> 知道该 module 一共包含多少个 group。每个组中的的元素，可以通过    <code>ARouter$$Group$$${moduleName}.java</code>  这个文档添加；</p><h5 id="2-2-5-4-2-举个栗子"><a href="#2-2-5-4-2-举个栗子" class="headerlink" title="2.2.5.4.2 举个栗子"></a>2.2.5.4.2 举个栗子</h5><p>我写了个 Demo 可以让大家更直观的看到模版对应的实际代码：</p><h6 id="2-2-5-4-2-1-实例代码"><a href="#2-2-5-4-2-1-实例代码" class="headerlink" title="2.2.5.4.2.1 实例代码"></a>2.2.5.4.2.1 实例代码</h6><p>下面是一个简单的 Demo：</p><ul><li><strong>MyActivity.java</strong></li></ul><p>MyActivity 的组是：<strong>coolqiActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiActivity/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MyIProvider.java</strong></li></ul><p>MyIProvider 的组是：<strong>coolqiProvider</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProvider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiProvider/MyIProvider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">implements</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>MySerializationService.java</strong></li></ul><p>MySerializationService 的组是：<strong>coolqiService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/coolqiService/MySerializationService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySerializationService</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String input, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我是新建了一个 Module，名字叫：<strong>Coolqi</strong></p><h6 id="2-2-5-4-2-2-动态代码"><a href="#2-2-5-4-2-2-动态代码" class="headerlink" title="2.2.5.4.2.2 动态代码"></a>2.2.5.4.2.2 动态代码</h6><p>动态的代码如下所示：</p><ul><li><code>ARouter$$Group$$coolqiActivity.java</code>， <code>ARouter$$Group$$coolqiProvider.java</code>， <code>ARouter$$Group$$coolqiService.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyActivity;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyPathReplaceService;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.MyProvider;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.MainActivity;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiActivity</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiActivity/MyActivity"</span>, RouteMeta.build(RouteType.ACTIVITY, MyActivity.class, <span class="string">"/coolqiactivity/myactivity"</span>, <span class="string">"coolqiactivity"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiProvider</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiProvider/MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, <span class="string">"/coolqiprovider/myiprovider"</span>, <span class="string">"coolqiprovider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">coolqiService</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">"/coolqiService/MySerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, <span class="string">"/coolqiservice/myserializationservice"</span>, <span class="string">"coolqiservice"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Providers$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MyIProvider;</span><br><span class="line"><span class="keyword">import</span> com.pa.sales2.test.MySerializationService;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">    providers.put(<span class="string">"com.alibaba.android.arouter.facade.service.SerializationService"</span>, RouteMeta.build(RouteType.PROVIDER, MySerializationService.class, </span><br><span class="line">                            <span class="string">"/coolqiService/MySerializationService"</span>, <span class="string">"coolqiService"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">    providers.put(<span class="string">"com.pa.sales2.test.MyIProvider"</span>, RouteMeta.build(RouteType.PROVIDER, MyIProvider.class, </span><br><span class="line">                            <span class="string">"/coolqiProvider/MyIProvider"</span>, <span class="string">"coolqiProvider"</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><ul><li><code>ARouter$$Root$$app.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">"coolqiActivity"</span>, ARouter$$Group$$coolqiActivity.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiProvider"</span>, ARouter$$Group$$coolqiProvider.class);</span><br><span class="line">    routes.put(<span class="string">"coolqiService"</span>, ARouter$$Group$$coolqiService.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的就不说了，反正就是看代码！</p><h3 id="2-2-3-AutowiredProcessor"><a href="#2-2-3-AutowiredProcessor" class="headerlink" title="2.2.3 AutowiredProcessor"></a>2.2.3 AutowiredProcessor</h3><p>核心解释器，用于处理 @Autowired 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(&#123;ANNOTATION_TYPE_AUTOWIRED&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-3-1-Field"><a href="#2-2-3-1-Field" class="headerlink" title="2.2.3.1 Field"></a>2.2.3.1 Field</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】key 表示属性所属的类，value 是一个 list 列表，保存这个类被 Autowired 修饰的所有元素；</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;TypeElement, List&lt;Element&gt;&gt; parentAndChild = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName ARouterClass = ClassName.get(<span class="string">"com.alibaba.android.arouter.launcher"</span>, <span class="string">"ARouter"</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ClassName AndroidLog = ClassName.get(<span class="string">"android.util"</span>, <span class="string">"Log"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2-Init"><a href="#2-2-3-2-Init" class="headerlink" title="2.2.3.2 Init"></a>2.2.3.2 Init</h4><p>init 方法很简单，没有太多代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; AutowiredProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-3-Process-处理-Autowired-注解"><a href="#2-2-3-3-Process-处理-Autowired-注解" class="headerlink" title="2.2.3.3 Process  - 处理 Autowired 注解"></a>2.2.3.3 Process  - 处理 Autowired 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnvironment)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(set)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Found autowired field, start... &lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">//【*2.2.3.3.1】对变量进行归类，并找到其所属的类；</span></span><br><span class="line">            categories(roundEnvironment.getElementsAnnotatedWith(Autowired.class));</span><br><span class="line">            <span class="comment">//【*2.2.3.3.2】动态生成 java 类！</span></span><br><span class="line">            generateHelper();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-3-1-categories"><a href="#2-2-3-3-1-categories" class="headerlink" title="2.2.3.3.1 categories"></a>2.2.3.3.1 categories</h5><p>对变量进行归类，并找到其所属的类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">categories</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        <span class="comment">//【1】遍历所有被 @AutoWired 注解的元素；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【2】返回封装此元素（非严格意义上）的最里层元素，实际上就是其所属的类；</span></span><br><span class="line">            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line">            <span class="comment">//【3】如果此成员属性是 private 的，那就抛出异常！</span></span><br><span class="line">            <span class="keyword">if</span> (element.getModifiers().contains(Modifier.PRIVATE)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The inject fields CAN NOT BE 'private'!!! please check field ["</span></span><br><span class="line">                        + element.getSimpleName() + <span class="string">"] in class ["</span> + enclosingElement.getQualifiedName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//【4】将成员属性 element 和所属类元素 enclosingElement 保存到 parentAndChild 中，分类完毕；</span></span><br><span class="line">            <span class="keyword">if</span> (parentAndChild.containsKey(enclosingElement 保存到 )) &#123;</span><br><span class="line">                parentAndChild.get(enclosingElement).add(element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;Element&gt; childs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                childs.add(element);</span><br><span class="line">                parentAndChild.put(enclosingElement, childs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"categories finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，private 的元素不能用 Autowired 修饰；</p><h5 id="2-2-3-3-2-generateHelper"><a href="#2-2-3-3-2-generateHelper" class="headerlink" title="2.2.3.3.2 generateHelper"></a>2.2.3.3.2 generateHelper</h5><p>动态生成 java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException, IllegalAccessException </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得 .ISyringe/.SerializationService 接口在编译时期的状态信息；</span></span><br><span class="line">    TypeElement type_ISyringe = elementUtils.getTypeElement(ISYRINGE);</span><br><span class="line">    TypeElement type_JsonService = elementUtils.getTypeElement(JSON_SERVICE);</span><br><span class="line">    <span class="comment">//【2】返回类型信息：类/接口</span></span><br><span class="line">    TypeMirror iProvider = elementUtils.getTypeElement(Consts.IPROVIDER).asType();</span><br><span class="line">    TypeMirror activityTm = elementUtils.getTypeElement(Consts.ACTIVITY).asType();</span><br><span class="line">    TypeMirror fragmentTm = elementUtils.getTypeElement(Consts.FRAGMENT).asType();</span><br><span class="line">    TypeMirror fragmentTmV4 = elementUtils.getTypeElement(Consts.FRAGMENT_V4).asType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【3】开始动态生成类：</span></span><br><span class="line">    <span class="comment">//【3.1】生成 inject 方法的参数：Object target</span></span><br><span class="line">    ParameterSpec objectParamSpec = ParameterSpec.builder(TypeName.OBJECT, <span class="string">"target"</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (MapUtils.isNotEmpty(parentAndChild)) &#123;</span><br><span class="line">        <span class="comment">// 遍历 parentAndChild 集合；</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TypeElement, List&lt;Element&gt;&gt; entry : parentAndChild.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//【3.2】生成 inject 方法签名；</span></span><br><span class="line">            <span class="comment">//  @Override </span></span><br><span class="line">            <span class="comment">//  public void inject(Object target)</span></span><br><span class="line">            MethodSpec.Builder injectMethodBuilder = MethodSpec.methodBuilder(METHOD_INJECT)</span><br><span class="line">                    .addAnnotation(Override.class)</span><br><span class="line">                    .addModifiers(PUBLIC)</span><br><span class="line">                    .addParameter(objectParamSpec);</span><br><span class="line"></span><br><span class="line">            TypeElement parent = entry.getKey();</span><br><span class="line">            List&lt;Element&gt; childs = entry.getValue();</span><br><span class="line">            <span class="comment">//【3.3】获得所属类的全限定名，包名；</span></span><br><span class="line">            String qualifiedName = parent.getQualifiedName().toString();</span><br><span class="line">            String packageName = qualifiedName.substring(<span class="number">0</span>, qualifiedName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="comment">//【3.4】获得所属类的类名，拼接 "$$ARouter$$Root$$Autowired" 作为动态生成类的类名；</span></span><br><span class="line">            String fileName = parent.getSimpleName() + NAME_OF_AUTOWIRED;</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; Start process "</span> + childs.size() + <span class="string">" field in "</span> + parent.getSimpleName() + <span class="string">" ... &lt;&lt;&lt;"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】创建生成 java 类 helper 对象：指定类名(fileName)，实现的接口(.ISyringe), 修饰符(public)</span></span><br><span class="line">            TypeSpec.Builder helper = TypeSpec.classBuilder(fileName)</span><br><span class="line">                    .addJavadoc(WARNING_TIPS)</span><br><span class="line">                    .addSuperinterface(ClassName.get(type_ISyringe))</span><br><span class="line">                    .addModifiers(PUBLIC);</span><br><span class="line">            <span class="comment">//【3.6】创建动态类的成员变量：</span></span><br><span class="line">            <span class="comment">//     private com.alibaba.android.arouter.facade.service.SerializationService serializationService;</span></span><br><span class="line">            FieldSpec jsonServiceField = FieldSpec.builder(TypeName.get(type_JsonService.asType()), </span><br><span class="line">                                                           <span class="string">"serializationService"</span>, Modifier.PRIVATE).build();</span><br><span class="line">            helper.addField(jsonServiceField);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//【3.5】给 inject 增加方法体：</span></span><br><span class="line">            <span class="comment">//      serializationService = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">            <span class="comment">//                .navigation(com.alibaba.android.arouter.facade.service.SerializationService.class);</span></span><br><span class="line">            <span class="comment">//      parentClass substitute = (parentClass) target</span></span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"serializationService = $T.getInstance().navigation($T.class)"</span>, </span><br><span class="line">                                             ARouterClass, ClassName.get(type_JsonService));</span><br><span class="line">            injectMethodBuilder.addStatement(<span class="string">"$T substitute = ($T)target"</span>, ClassName.get(parent), ClassName.get(parent));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//【3.6】继续给 inject 增加方法体：（处理成员变量）</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : childs) &#123;</span><br><span class="line">                Autowired fieldConfig = element.getAnnotation(Autowired.class);</span><br><span class="line">                <span class="comment">//【3.6.1】获取变量的名称；</span></span><br><span class="line">                String fieldName = element.getSimpleName().toString();</span><br><span class="line">                <span class="comment">//【3.6.2】如果实现了 .IProvider 接口，针对于是否设置了 name 属性，进行 byType/ byName 分类处理；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(element.asType(), iProvider)) &#123;  <span class="comment">// It's provider</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">""</span>.equals(fieldConfig.name())) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.1】如果 Autowired.name 为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .navigation(变量类型的全限定名.class);</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = $T.getInstance().navigation($T.class)"</span>,</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                        <span class="comment">//【3.6.2.2】如果 Autowired.name 不为空，生成如下代码：</span></span><br><span class="line">                        <span class="comment">// substitute.变量名 = (变量类型的全限定名) com.alibaba.android.arouter.launcher.ARouter.getInstance()</span></span><br><span class="line">                        <span class="comment">//                          .build(Autowired().name).navigation();</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = ($T)$T.getInstance().build($S).navigation()"</span>,</span><br><span class="line">                                ClassName.get(element.asType()),</span><br><span class="line">                                ARouterClass,</span><br><span class="line">                                fieldConfig.name()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//【3.6.2.3】判断 Autowired 的 required 是否为 true，如果为 true，那就要禁止 null 的情况！</span></span><br><span class="line">                    <span class="comment">// 其实就是判断 substitute.变量 如果 null，抛出异常；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required()) &#123;</span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (substitute."</span> + fieldName + <span class="string">" == null)"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"throw new RuntimeException(\"The field '"</span> + fieldName + <span class="string">"' is null, in class '\" </span></span><br><span class="line"><span class="string">                                                 + $T.class.getName() + \"!\")"</span>, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//【3.6.3】对于一般的可通过 intent 传递的变量，进入这里；</span></span><br><span class="line">                    String originalValue = <span class="string">"substitute."</span> + fieldName;</span><br><span class="line">                    <span class="comment">// 用于拼接成员变量的生成方式："substitute.变量名 = substitute."；</span></span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.1】对于实现了 serializable 接口的变量, 则是："substitute.变量名 = (变量类型的全限定名) substitute."</span></span><br><span class="line">                    String statement = <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + buildCastCode(element) + <span class="string">"substitute."</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> isActivity = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (types.isSubtype(parent.asType(), activityTm)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.1】如果是 activity，那么拼接代码：getIntent().</span></span><br><span class="line">                        isActivity = <span class="keyword">true</span>;</span><br><span class="line">                        statement += <span class="string">"getIntent()."</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(parent.asType(), fragmentTm) || types.isSubtype(parent.asType(), fragmentTmV4)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.4.2】如果是 fragment，那么拼接代码：getArguments().</span></span><br><span class="line">                        statement += <span class="string">"getArguments()."</span>; </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The field ["</span> + fieldName + <span class="string">"] need autowired from intent, "</span> </span><br><span class="line">                                                         + <span class="string">"its parent must be activity or fragment!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//【*2.2.3.3.2.2】处理 getIntent()/getArguments() 的数据；</span></span><br><span class="line">                    <span class="comment">// typeUtils.typeExchange(element) 返回的是成员属性的枚举序号！</span></span><br><span class="line">                    statement = buildStatement(originalValue, statement, typeUtils.typeExchange(element), isActivity);</span><br><span class="line">                    <span class="keyword">if</span> (statement.startsWith(<span class="string">"serializationService."</span>)) &#123; </span><br><span class="line">                        <span class="comment">//【3.6.5.1】处理 serializationService（自定义对象）的情况：</span></span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null != serializationService)"</span>);</span><br><span class="line">                        <span class="comment">//【3.6.5.2】生成方法体："substitute.fieldName = " + statement;</span></span><br><span class="line">                        <span class="comment">// $S 被替换为变量名/Autowired.name，$T 被替换为变量类型的全限定名；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"substitute."</span> + fieldName + <span class="string">" = "</span> + statement,</span><br><span class="line">                                (StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name()),</span><br><span class="line">                                ClassName.get(element.asType())</span><br><span class="line">                        );</span><br><span class="line">                        injectMethodBuilder.nextControlFlow(<span class="string">"else"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"You want automatic inject the field '"</span> + fieldName </span><br><span class="line">                                          + <span class="string">"' in class '$T' , then you should implement 'SerializationService'"</span></span><br><span class="line">                                          + <span class="string">" to support object auto inject!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//【3.6.5.3】处理其他的情况，如果 Autowired.name 不为 null，那么 $S 替换为变量名，否则为 Autowired.name</span></span><br><span class="line">                        <span class="comment">// 将方法体写入 inject；</span></span><br><span class="line">                        injectMethodBuilder.addStatement(statement,</span><br><span class="line">                                       StringUtils.isEmpty(fieldConfig.name()) ? fieldName : fieldConfig.name());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Autowired 的 required 为 true，且不是 private 的，非空判断；</span></span><br><span class="line">                    <span class="keyword">if</span> (fieldConfig.required() &amp;&amp; !element.asType().getKind().isPrimitive()) &#123; </span><br><span class="line">                        injectMethodBuilder.beginControlFlow(<span class="string">"if (null == substitute."</span> + fieldName + <span class="string">")"</span>);</span><br><span class="line">                        injectMethodBuilder.addStatement(</span><br><span class="line">                                <span class="string">"$T.e(\""</span> + Consts.TAG + <span class="string">"\", \"The field '"</span> + fieldName </span><br><span class="line">                                + <span class="string">"' is null, in class '\" + $T.class.getName() + \"!\")"</span>, AndroidLog, ClassName.get(parent));</span><br><span class="line">                        injectMethodBuilder.endControlFlow(); <span class="comment">// 闭合方法体；</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            helper.addMethod(injectMethodBuilder.build()); <span class="comment">// 将方法 builder 加入到类 builder 中；</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//【4】动态创建 java 文件；</span></span><br><span class="line">            JavaFile.builder(packageName, helper.build()).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt; "</span> + parent.getSimpleName() + <span class="string">" has been processed, "</span> + fileName + <span class="string">" has been generated. &lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Autowired processor stop. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程我们分析完成了，我们先不关注动态生成的类的作用，在后面分析 arouter-api 模块的时候，就会知道这些类的作用是什么了。</p><h6 id="2-2-3-3-2-1-buildCastCode"><a href="#2-2-3-3-2-1-buildCastCode" class="headerlink" title="2.2.3.3.2.1 buildCastCode"></a>2.2.3.3.2.1 buildCastCode</h6><p>判断 element 的类型是否是 SERIALIZABLE 的，这里利用到了前面的枚举类 TypeKind 和工具类 typeUtils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildCastCode</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】判断 element 的类型是否是 SERIALIZABLE 的！</span></span><br><span class="line">    <span class="keyword">if</span> (typeUtils.typeExchange(element) == TypeKind.SERIALIZABLE.ordinal()) &#123;</span><br><span class="line">        <span class="comment">//【2】创建代码块：(变量类型的全限定名)</span></span><br><span class="line">        <span class="keyword">return</span> CodeBlock.builder().add(<span class="string">"($T) "</span>, ClassName.get(element.asType())).build().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个主要是针对于实现了 serializable 接口的变量，比如一些集合等等；</p><h6 id="2-2-3-3-2-2-buildStatement"><a href="#2-2-3-3-2-2-buildStatement" class="headerlink" title="2.2.3.3.2.2 buildStatement"></a>2.2.3.3.2.2 buildStatement</h6><p>处理 getIntent()/getArguments() 的数据：</p><ul><li>参数 originalValue 表示变量: “substitute.fieldName“，用于返回默认值；</li><li>参数 type 是成员属性对应的枚举序号：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">buildStatement</span><span class="params">(String originalValue, String statement, <span class="keyword">int</span> type, <span class="keyword">boolean</span> isActivity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (TypeKind.values()[type]) &#123;</span><br><span class="line">        <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">            <span class="comment">//【1】如果是 boolean，那么 activty 拼接：getBooleanExtra($S, 变量)，fragment 拼接：getBoolean($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getBooleanExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getBoolean($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BYTE:</span><br><span class="line">            <span class="comment">//【2】如果是 byte，那么 activty 拼接：getByteExtra($S, 变量)，fragment 拼接：getByte($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getByteExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getByte($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SHORT:</span><br><span class="line">            <span class="comment">//【3】如果是 short，那么 activty 拼接：getShortExtra($S, 变量)，fragment 拼接：getShort($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getShortExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getShort($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> INT:</span><br><span class="line">            <span class="comment">//【4】如果是 int，那么 activty 拼接：getIntExtra($S, 变量)，fragment 拼接：getInt($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getIntExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getInt($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LONG:</span><br><span class="line">            <span class="comment">//【5】如果是 long，那么 activty 拼接：getLongExtra($S, 变量)，fragment 拼接：getLong($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getLongExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getLong($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CHAR:</span><br><span class="line">            <span class="comment">//【6】如果是 char，那么 activty 拼接：getCharExtra($S, 变量)，fragment 拼接：getChar($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getCharExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getChar($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FLOAT:</span><br><span class="line">            <span class="comment">//【7】如果是 float，那么 activty 拼接：getFloatExtra($S, 变量)，fragment 拼接：getFloat($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getFloatExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getFloat($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> DOUBLE:</span><br><span class="line">            <span class="comment">//【8】如果是 double，那么 activty 拼接：getDoubleExtra($S, 变量)，fragment 拼接：getDouble($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getDoubleExtra($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getDouble($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STRING:</span><br><span class="line">            <span class="comment">//【9】如果是 string，那么 activty 拼接：getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getString($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getExtras() == null ? "</span> + originalValue + <span class="string">" : substitute.getIntent().getExtras().getString($S, "</span> + originalValue + <span class="string">")"</span>) : (<span class="string">"getString($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SERIALIZABLE:</span><br><span class="line">            <span class="comment">//【10】如果是 serializable，那么 activty 拼接：getSerializableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getSerializable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getSerializableExtra($S)"</span>) : (<span class="string">"getSerializable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PARCELABLE:</span><br><span class="line">            <span class="comment">//【11】如果是 parcelable，那么 activty 拼接：getParcelableExtra($S)</span></span><br><span class="line">            <span class="comment">// fragment 拼接：getParcelable($S)</span></span><br><span class="line">            statement += (isActivity ? (<span class="string">"getParcelableExtra($S)"</span>) : (<span class="string">"getParcelable($S)"</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OBJECT:</span><br><span class="line">            <span class="comment">//【12】如果是 object，那么 activity 返回：serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            <span class="comment">// fragment 返回：serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;()&#123;&#125;.getType())</span></span><br><span class="line">            statement = <span class="string">"serializationService.parseObject(substitute."</span> + (isActivity ? <span class="string">"getIntent()."</span> : <span class="string">"getArguments()."</span>) + (isActivity ? <span class="string">"getStringExtra($S)"</span> : <span class="string">"getString($S)"</span>) + <span class="string">", new "</span> + TYPE_WRAPPER + <span class="string">"&lt;$T&gt;()&#123;&#125;.getType())"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，buildStatement 会处理 getIntent()/getArguments() 的数据，在 statement 基础上拼接/修改：</p><ul><li><strong>Activity</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getIntent().getBooleanExtra($S, 变量)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getIntent().getByteExtra($S, 变量)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getIntent().getShortExtra($S, 变量)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getIntent().getIntExtra($S, 变量)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getIntent().getLongExtra($S, 变量)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getIntent().getCharExtra($S, 变量)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getIntent().getFloatExtra($S, 变量)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getIntent().getDoubleExtra($S, 变量)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getIntent().getExtras() == null ? 变量 : substitute.getIntent().getExtras().getString($S, 变量)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getIntent().getSerializableExtra($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getIntent().getParcelableExtra($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getIntent().getStringExtra($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><ul><li><strong>Fragment</strong> - 生成的 statement</li></ul><table><thead><tr><th><strong>变量类型</strong></th><th><strong>动态生成的代码块</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><code>substitute.变量 = substitute.getArguments().getBoolean($S)</code></td></tr><tr><td><strong>byte</strong></td><td><code>substitute.变量 = substitute.getArguments().getByte($S)</code></td></tr><tr><td><strong>short</strong></td><td><code>substitute.变量 = substitute.getArguments().getShort($S)</code></td></tr><tr><td><strong>int</strong></td><td><code>substitute.变量 = substitute.getArguments().getInt($S)</code></td></tr><tr><td><strong>long</strong></td><td><code>substitute.变量 = substitute.getArguments().getLong($S)</code></td></tr><tr><td><strong>char</strong></td><td><code>substitute.变量 = substitute.getArguments().getChar($S)</code></td></tr><tr><td><strong>float</strong></td><td><code>substitute.变量 = substitute.getArguments().getFloat($S)</code></td></tr><tr><td><strong>double</strong></td><td><code>substitute.变量 = substitute.getArguments().getDouble($S)</code></td></tr><tr><td><strong>string</strong></td><td><code>substitute.变量 = substitute.getArguments().getString($S)</code></td></tr><tr><td><strong>serializable</strong></td><td><code>substitute.变量 = (变量类型的全限定名) substitute.getArguments().getSerializable($S)</code></td></tr><tr><td><strong>parcelable</strong></td><td><code>substitute.变量 = substitute.getArguments().getParcelable($S)</code></td></tr><tr><td><strong>object</strong></td><td><code>serializationService.parseObject(substitute.getArguments().getString($S), new com.alibaba.android.arouter.facade.model.TypeWrapper&lt;$T&gt;(){}.getType())</code></td></tr></tbody></table><p>这里的 <code>$S, $T</code>，依然是作为占位符，并没有被替换成实体的类型；</p><p>返回的 statement 会继续被处理！</p><h4 id="2-2-3-4-动态生成类"><a href="#2-2-3-4-动态生成类" class="headerlink" title="2.2.3.4 动态生成类"></a>2.2.3.4 动态生成类</h4><h5 id="2-2-3-4-1-模版信息"><a href="#2-2-3-4-1-模版信息" class="headerlink" title="2.2.3.4.1 模版信息"></a>2.2.3.4.1 模版信息</h5><p>我们来看一下，解析 AutoWired 后动态生成的 java 类的模版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 所属类所在的包;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> ... ... ...<span class="comment">// 省略掉其他的导入信息（变量类型等等）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 所属类的类名$$<span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">           serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">           所属类的全限定名 substitute = (所属类的全限定名) target;</span><br><span class="line">           <span class="comment">// 实现了 .IProvider 的成员变量；</span></span><br><span class="line">           substitute.变量 = ARouter.getInstance().navigation(变量类型的全限定名.class);</span><br><span class="line">           substitute.变量 = (变量类型) ARouter.getInstance().build(Autowired.name).navigation();</span><br><span class="line">           <span class="comment">// Autowired 的 required 为 true 才有； </span></span><br><span class="line">           <span class="keyword">if</span> (substitute.变量 == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(...);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// activity 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getIntent().getBooleanExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getByteExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getShortExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getIntExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getCharExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getFloatExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getDoubleExtra(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getExtras() == <span class="keyword">null</span> ? substitute.变量 : substitute.getIntent().getExtras().getString(变量名/Autowired.name, substitute.变量);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getIntent().getSerializableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getIntent().getParcelableExtra(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = serializationService.parseObject(substitute.getIntent().getStringExtra(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());   </span><br><span class="line">      </span><br><span class="line">           <span class="comment">// fragment 的成员；</span></span><br><span class="line">           substitute.变量 = substitute.getArguments().getBoolean(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getByte(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getShort(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getInt(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getLong(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getChar(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getFloat(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getDouble(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getString(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = (变量类型) substitute.getArguments().getSerializable(变量名/Autowired.name);</span><br><span class="line">           substitute.变量 = substitute.getArguments().getParcelable(变量名/Autowired.name);</span><br><span class="line">           serializationService.parseObject(substitute.getArguments().getString(变量名/Autowired.name), <span class="keyword">new</span> com.alibaba.android.arouter.facade.model.TypeWrapper&lt;变量类型&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实大家可以看的出来，inject 方法就是用来自动给成员变量赋值的；</p><h5 id="2-2-3-4-2-举个栗子"><a href="#2-2-3-4-2-举个栗子" class="headerlink" title="2.2.3.4.2 举个栗子"></a>2.2.3.4.2 举个栗子</h5><h6 id="2-2-3-4-2-1-实例代码"><a href="#2-2-3-4-2-1-实例代码" class="headerlink" title="2.2.3.4.2.1 实例代码"></a>2.2.3.4.2.1 实例代码</h6><p>以 activity 为例子；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Route;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/app/MyActivity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isOneAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"isTwoAuto"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-3-4-2-2-动态代码"><a href="#2-2-3-4-2-2-动态代码" class="headerlink" title="2.2.3.4.2.2 动态代码"></a>2.2.3.4.2.2 动态代码</h6><p>如下是动态代码了，不多说了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.service.SerializationService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.ISyringe;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.launcher.ARouter;</span><br><span class="line"><span class="keyword">import</span> java.lang.Object;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span>$$<span class="title">ARouter</span>$$<span class="title">Autowired</span> <span class="keyword">implements</span> <span class="title">ISyringe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SerializationService serializationService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    serializationService = ARouter.getInstance().navigation(SerializationService.class);</span><br><span class="line">    MyActivity substitute = (MyActivity)target;</span><br><span class="line">    substitute.isOne = substitute.getIntent().getBooleanExtra(<span class="string">"isOneAuto"</span>, substitute.isOne);</span><br><span class="line">    substitute.isTwo = substitute.getIntent().getIntExtra(<span class="string">"isTwoAuto"</span>, substitute.isTwo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-InterceptorProcessor"><a href="#2-2-4-InterceptorProcessor" class="headerlink" title="2.2.4 InterceptorProcessor"></a>2.2.4 InterceptorProcessor</h3><p>核心解释器，用于处理 @Interceptor 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="meta">@SupportedAnnotationTypes</span>(ANNOTATION_TYPE_INTECEPTOR)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorProcessor</span> <span class="keyword">extends</span> <span class="title">BaseProcessor</span> </span>&#123;</span><br><span class="line">  ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从成员变量，初始化，注解处理三个方面来分析：</p><h4 id="2-2-4-1-Field"><a href="#2-2-4-1-Field" class="headerlink" title="2.2.4.1 Field"></a>2.2.4.1 Field</h4><p>成员变量有两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于保存 key: [priority 优先级] 和 value：[@Interceptor 修饰的元素 Element] 的映射关系，作为 cache； </span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, Element&gt; interceptors = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"><span class="comment">//【2】用于保存 [com.alibaba.android.arouter.facade.template.IInterceptor] 的类型信息</span></span><br><span class="line"><span class="keyword">private</span> TypeMirror iInterceptor = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-2-Init"><a href="#2-2-4-2-Init" class="headerlink" title="2.2.4.2 Init"></a>2.2.4.2 Init</h4><p>初始化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">    <span class="comment">//【1】Elements.getTypeElement 会返回 .IInterceptor 接口对应的 TypeElement</span></span><br><span class="line">    <span class="comment">// TypeElement.sType() 会返回 .IInterceptor 的类型信息：接口</span></span><br><span class="line">    iInterceptor = elementUtils.getTypeElement(Consts.IINTERCEPTOR).asType();</span><br><span class="line">    logger.info(<span class="string">"&gt;&gt;&gt; InterceptorProcessor init. &lt;&lt;&lt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Consts.IINTERCEPTOR 是 IInterceptor 接口的全限定名：</p><blockquote><p><strong>com.alibaba.android.arouter.facade.template.IInterceptor</strong></p></blockquote><h4 id="2-2-4-3-Process-处理-Interceptor-注解"><a href="#2-2-4-3-Process-处理-Interceptor-注解" class="headerlink" title="2.2.4.3 Process - 处理 Interceptor 注解"></a>2.2.4.3 Process - 处理 Interceptor 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(annotations)) &#123;</span><br><span class="line">        <span class="comment">//【1】获得 @Interceptor 修饰的元素，这里会返回多个 Element 组成的 set！！</span></span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(Interceptor.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1】解析元素：</span></span><br><span class="line">            parseInterceptors(elements);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 parseInterceptors 中；</p><h5 id="2-2-4-3-1-parseInterceptors"><a href="#2-2-4-3-1-parseInterceptors" class="headerlink" title="2.2.4.3.1 parseInterceptors"></a>2.2.4.3.1 parseInterceptors</h5><p>我们来看下如何解析元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseInterceptors</span><span class="params">(Set&lt;? extends Element&gt; elements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(elements)) &#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Found interceptors, size is "</span> + elements.size() + <span class="string">" &lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】执行校验，并将元素缓存下来；</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="comment">//【*2.2.4.3.1.1】执行校验；</span></span><br><span class="line">            <span class="keyword">if</span> (verify(element)) &#123;</span><br><span class="line">                logger.info(<span class="string">"A interceptor verify over, its "</span> + element.asType());</span><br><span class="line">                <span class="comment">//【1.1】获得 Interceptor 对象的优先级，判断是否已经添加到 interceptors 哈希表中，已经添加，抛出异常；</span></span><br><span class="line">                Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">                Element lastInterceptor = interceptors.get(interceptor.priority());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != lastInterceptor) &#123; <span class="comment">// Added, throw exceptions</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            String.format(Locale.getDefault(), <span class="string">"More than one interceptors use same"</span> +  </span><br><span class="line">                                          <span class="string">"priority [%d], They are [%s] and [%s]."</span>,</span><br><span class="line">                                    interceptor.priority(),</span><br><span class="line">                                    lastInterceptor.getSimpleName(),</span><br><span class="line">                                    element.getSimpleName())</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//【1.2】将 priority --&gt; element 关系缓存到 interceptors 中；</span></span><br><span class="line">                interceptors.put(interceptor.priority(), element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"A interceptor verify failed, its "</span> + element.asType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【2】返回 ".IInterceptor/.IInterceptorGroup" 接口对应的 TypeElement，保存了接口在编译时期的状态信息；</span></span><br><span class="line">        TypeElement type_ITollgate = elementUtils.getTypeElement(IINTERCEPTOR);</span><br><span class="line">        TypeElement type_ITollgateGroup = elementUtils.getTypeElement(IINTERCEPTOR_GROUP);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【3】生成 loadInto 方法的参数类型："Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt;""</span></span><br><span class="line">        ParameterizedTypeName inputMapTypeOfTollgate = ParameterizedTypeName.get(</span><br><span class="line">                ClassName.get(Map.class),</span><br><span class="line">                ClassName.get(Integer.class),</span><br><span class="line">                ParameterizedTypeName.get(</span><br><span class="line">                        ClassName.get(Class.class),</span><br><span class="line">                        WildcardTypeName.subtypeOf(ClassName.get(type_ITollgate))</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【4】生成 loadInto 方法的方法参数：“Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors”</span></span><br><span class="line">        ParameterSpec tollgateParamSpec = ParameterSpec.builder(inputMapTypeOfTollgate, <span class="string">"interceptors"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【5】生成 loadInto 方法声明：</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;...&#125;</span></span><br><span class="line">        MethodSpec.Builder loadIntoMethodOfTollgateBuilder = MethodSpec.methodBuilder(METHOD_LOAD_INTO)</span><br><span class="line">                .addAnnotation(Override.class)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(tollgateParamSpec);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【6】生成 loadInto 方法体:</span></span><br><span class="line">        <span class="comment">// @Override</span></span><br><span class="line">        <span class="comment">// public void loadInto(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)&#123;</span></span><br><span class="line">        <span class="comment">//      interceptors.put(priority, $T.class);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != interceptors &amp;&amp; interceptors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// for 循环中 interceptors 是 InterceptorProcessor 的成员变量哦！用来保存所有的 interceptor；</span></span><br><span class="line">            <span class="comment">// $T 最终会被替换为自定义的 interceptor 的类全限定名；</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Element&gt; entry : interceptors.entrySet()) &#123;</span><br><span class="line">                loadIntoMethodOfTollgateBuilder.addStatement(<span class="string">"interceptors.put("</span> + entry.getKey() + <span class="string">", $T.class)"</span>,</span><br><span class="line">                                                             ClassName.get((TypeElement) entry.getValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【7】生成最终的类文件，指定了包名，类名，修饰符，实现的接口等等；</span></span><br><span class="line">        <span class="comment">// 常量均定义在 Consts 中，具体的生成的类见下面……</span></span><br><span class="line">        JavaFile.builder(PACKAGE_OF_GENERATE_FILE,</span><br><span class="line">                TypeSpec.classBuilder(NAME_OF_INTERCEPTOR + SEPARATOR + moduleName)</span><br><span class="line">                        .addModifiers(PUBLIC)</span><br><span class="line">                        .addJavadoc(WARNING_TIPS)</span><br><span class="line">                        .addMethod(loadIntoMethodOfTollgateBuilder.build())</span><br><span class="line">                        .addSuperinterface(ClassName.get(type_ITollgateGroup))</span><br><span class="line">                        .build()</span><br><span class="line">        ).build().writeTo(mFiler);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt; Interceptor group write over. &lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其是使用 javapoet 三方库来懂爱生成 .java 文件；</p><h6 id="2-2-4-3-1-1-verify"><a href="#2-2-4-3-1-1-verify" class="headerlink" title="2.2.4.3.1.1 verify"></a>2.2.4.3.1.1 verify</h6><p>校验元素和注解的正确性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】获得注解对象；</span></span><br><span class="line">    Interceptor interceptor = element.getAnnotation(Interceptor.class);</span><br><span class="line">    <span class="comment">//【2】元素 Element 必须被 Interceptor 注解修饰，</span></span><br><span class="line">    <span class="comment">// 并且其实现了 com.alibaba.android.arouter.facade.template.IInterceptor 接口；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != interceptor &amp;&amp; ((TypeElement) element).getInterfaces().contains(iInterceptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end～</p><h4 id="2-2-4-4-动态生成类"><a href="#2-2-4-4-动态生成类" class="headerlink" title="2.2.4.4 动态生成类"></a>2.2.4.4 <strong>动态生成类</strong></h4><h5 id="2-2-4-4-1-模版信息"><a href="#2-2-4-4-1-模版信息" class="headerlink" title="2.2.4.4.1 模版信息"></a>2.2.4.4.1 模版信息</h5><p>最终生成的 java 文件名为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARouter$$Interceptors$$&#123;moduleName&#125;.java</span><br></pre></td></tr></table></figure><p>最终生成的模版类信息为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">... ... ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$$</span>&#123;moduleName&#125; implements IInterceptorGroup &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends ITollgate&gt;&gt; interceptors)</span></span>&#123;</span><br><span class="line">     interceptors.put($&#123;priority&#125;, $&#123;InterceptorName&#125;.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 Interceptor，ARouter 也是采取分组管理的方式：</p><ul><li>以 module 为组，组名为 <code>ARouter$$Interceptors$${moduleName}</code>；</li></ul><h5 id="2-2-4-4-2-举个栗子"><a href="#2-2-4-4-2-举个栗子" class="headerlink" title="2.2.4.4.2 举个栗子"></a>2.2.4.4.2 举个栗子</h5><h6 id="2-2-4-4-2-1-实例代码"><a href="#2-2-4-4-2-1-实例代码" class="headerlink" title="2.2.4.4.2.1 实例代码"></a>2.2.4.4.2.1 实例代码</h6><p>我们自定义了一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lishuaiqi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.Postcard;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.annotation.Interceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.callback.InterceptorCallback;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lishuaiqi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-4-4-2-2-动态代码"><a href="#2-2-4-4-2-2-动态代码" class="headerlink" title="2.2.4.4.2.2 动态代码"></a>2.2.4.4.2.2 动态代码</h6><p>看看最终的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IInterceptorGroup;</span><br><span class="line"><span class="keyword">import</span> com.lishuaiqi.test.TestInterceptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Integer;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Interceptors</span>$$<span class="title">Coolqi</span> <span class="keyword">implements</span> <span class="title">IInterceptorGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt; interceptors)</span> </span>&#123;</span><br><span class="line">    interceptors.put(<span class="number">8</span>, TestInterceptor.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-utils"><a href="#2-3-utils" class="headerlink" title="2.3 utils"></a>2.3 utils</h2><p>该 package 下包含了一些工具类：</p><h3 id="2-3-1-Logger"><a href="#2-3-1-Logger" class="headerlink" title="2.3.1 Logger"></a>2.3.1 Logger</h3><p>用于打印 log 信息，调试使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Messager msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">(Messager messager)</span> </span>&#123;</span><br><span class="line">        msg = messager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(CharSequence info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(info)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.NOTE, Consts.PREFIX_OF_LOGGER + info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(CharSequence error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(error)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != error) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.ERROR, Consts.PREFIX_OF_LOGGER + </span><br><span class="line">                             <span class="string">"An exception is encountered, ["</span> + error.getMessage() + <span class="string">"]"</span> + </span><br><span class="line">                             <span class="string">"\n"</span> + formatStackTrace(error.getStackTrace()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warning</span><span class="params">(CharSequence warning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(warning)) &#123;</span><br><span class="line">            msg.printMessage(Diagnostic.Kind.WARNING, Consts.PREFIX_OF_LOGGER + warning);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatStackTrace</span><span class="params">(StackTraceElement[] stackTrace)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement element : stackTrace) &#123;</span><br><span class="line">            sb.append(<span class="string">"    at "</span>).append(element.toString());</span><br><span class="line">            sb.append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法都比较简单，就不多说了。</p><h3 id="2-3-2-TypeUtils"><a href="#2-3-2-TypeUtils" class="headerlink" title="2.3.2 TypeUtils"></a>2.3.2 TypeUtils</h3><p>该类是一个类型工具类，主要用于获取元素的类型，并对类型做一个转换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Types types;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror parcelableType;</span><br><span class="line">    <span class="keyword">private</span> TypeMirror serializableType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeUtils</span><span class="params">(Types types, Elements elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.types = types;</span><br><span class="line">        parcelableType = elements.getTypeElement(PARCELABLE).asType();</span><br><span class="line">        serializableType = elements.getTypeElement(SERIALIZABLE).asType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】可以看到，这个方法用于返回枚举常量的序数。这里的枚举常量是前面分析的 TypeKind.XXX</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">typeExchange</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        TypeMirror typeMirror = element.asType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【1】对于 private，类型这里直接处理；</span></span><br><span class="line">        <span class="keyword">if</span> (typeMirror.getKind().isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> element.asType().getKind().ordinal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//【2】对于 no private 的类型，返回变量的类型，通过 TypeKind 找到类型对应的序数（0，1，2...）</span></span><br><span class="line">        <span class="keyword">switch</span> (typeMirror.toString()) &#123;</span><br><span class="line">            <span class="keyword">case</span> BYTE:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BYTE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> SHORT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.SHORT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> INTEGER:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.INT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> LONG:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.LONG.ordinal();</span><br><span class="line">            <span class="keyword">case</span> FLOAT:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.FLOAT.ordinal();</span><br><span class="line">            <span class="keyword">case</span> DOUBEL:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.DOUBLE.ordinal();</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.BOOLEAN.ordinal();</span><br><span class="line">            <span class="keyword">case</span> CHAR:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.CHAR.ordinal();</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                <span class="keyword">return</span> TypeKind.STRING.ordinal();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//【3】处理 PARCELABLE，SERIALIZABLE 和 OBJECT 的情况；</span></span><br><span class="line">                <span class="keyword">if</span> (types.isSubtype(typeMirror, parcelableType)) &#123;</span><br><span class="line">                    <span class="comment">// PARCELABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.PARCELABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.isSubtype(typeMirror, serializableType)) &#123;</span><br><span class="line">                    <span class="comment">// SERIALIZABLE</span></span><br><span class="line">                    <span class="keyword">return</span> TypeKind.SERIALIZABLE.ordinal();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> TypeKind.OBJECT.ordinal();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TypeKind 前面有分析过，其是一个枚举类！</p><h3 id="2-3-3-Consts"><a href="#2-3-3-Consts" class="headerlink" title="2.3.3 Consts"></a>2.3.3 Consts</h3><p>用于保存一些核心的常量，下面来看看核心的常量。</p><h4 id="2-3-3-1-Log-打印相关"><a href="#2-3-3-1-Log-打印相关" class="headerlink" title="2.3.3.1 Log 打印相关"></a>2.3.3.1 Log 打印相关</h4><p>这些是和 log 打印相关的，比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>; <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = PROJECT + <span class="string">"::"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREFIX_OF_LOGGER = PROJECT + <span class="string">"::Compiler "</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NO_MODULE_NAME_TIPS = <span class="string">"These no module name, at 'build.gradle', like :\n"</span> +</span><br><span class="line">  <span class="string">"android &#123;\n"</span> +</span><br><span class="line">  <span class="string">"    defaultConfig &#123;\n"</span> +</span><br><span class="line">  <span class="string">"        ...\n"</span> +</span><br><span class="line">  <span class="string">"        javaCompileOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"            annotationProcessorOptions &#123;\n"</span> +</span><br><span class="line">  <span class="string">"                arguments = [AROUTER_MODULE_NAME: project.getName()]\n"</span> +</span><br><span class="line">  <span class="string">"            &#125;\n"</span> +</span><br><span class="line">  <span class="string">"        &#125;\n"</span> +</span><br><span class="line">  <span class="string">"    &#125;\n"</span> +</span><br><span class="line">  <span class="string">"&#125;\n"</span>;</span><br></pre></td></tr></table></figure><p>不多说！</p><h4 id="2-3-3-2-Gradle-配置相关"><a href="#2-3-3-2-Gradle-配置相关" class="headerlink" title="2.3.3.2 Gradle 配置相关"></a>2.3.3.2 Gradle 配置相关</h4><p>这些是和 gradle 配置相关的机制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MODULE_NAME = <span class="string">"AROUTER_MODULE_NAME"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_GENERATE_DOC_NAME = <span class="string">"AROUTER_GENERATE_DOC"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALUE_ENABLE = <span class="string">"enable"</span>;</span><br></pre></td></tr></table></figure><p>这个前面有说过，通过 gradle 配置；</p><h4 id="2-3-3-3-系统核心类"><a href="#2-3-3-3-系统核心类" class="headerlink" title="2.3.3.3 系统核心类"></a>2.3.3.3 系统核心类</h4><p>这些是和 Android 系统的一些核心类有关，也是 ARouter 能够注解处理的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVITY = <span class="string">"android.app.Activity"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT = <span class="string">"android.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT_V4 = <span class="string">"android.support.v4.app.Fragment"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE = <span class="string">"android.app.Service"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARCELABLE = <span class="string">"android.os.Parcelable"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是系统类的全限定名；</p><h4 id="2-3-3-4-注解类型"><a href="#2-3-3-4-注解类型" class="headerlink" title="2.3.3.4 注解类型"></a>2.3.3.4 注解类型</h4><p>这些是和 ARouter 的注解相关的常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;  <span class="comment">// 这个常量其他常量也会用到；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_INTECEPTOR = FACADE_PACKAGE + <span class="string">".annotation.Interceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_ROUTE = FACADE_PACKAGE + <span class="string">".annotation.Route"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION_TYPE_AUTOWIRED = FACADE_PACKAGE + <span class="string">".annotation.Autowired"</span>;</span><br></pre></td></tr></table></figure><p>可以看到，都是注解的全限定名；</p><h4 id="2-3-3-5-核心接口和类"><a href="#2-3-3-5-核心接口和类" class="headerlink" title="2.3.3.5 核心接口和类"></a>2.3.3.5 核心接口和类</h4><p>这些是和 ARouter 提供的一些核心接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】用于指定不同的 package 目录，属于 arouter-api 模块；</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACADE_PACKAGE = <span class="string">"com.alibaba.android.arouter.facade"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_PACKAGE = <span class="string">".template"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_PACKAGE = <span class="string">".service"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODEL_PACKAGE = <span class="string">".model"</span>;</span><br><span class="line"><span class="comment">//【2】下面是 arouter-api 模块的 template 包下的接口的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProvider"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IPROVIDER_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IProviderGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptor"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IINTERCEPTOR_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IInterceptorGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITROUTE_ROOT = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteRoot"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IROUTE_GROUP = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".IRouteGroup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISYRINGE = FACADE_PACKAGE + TEMPLATE_PACKAGE + <span class="string">".ISyringe"</span>;</span><br><span class="line"><span class="comment">//【3】下面是 arouter-api 模块的 service 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JSON_SERVICE = FACADE_PACKAGE + SERVICE_PACKAGE + <span class="string">".SerializationService"</span>;</span><br><span class="line"><span class="comment">//【4】下面是 arouter-annotation 模块的 model 包下的服务的全限定名；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_WRAPPER = FACADE_PACKAGE + MODEL_PACKAGE + <span class="string">".TypeWrapper"</span>;</span><br></pre></td></tr></table></figure><p>同样的，也是一些全限定名；</p><p>ARouter 的拦截器需要实现 IInterceptor 接口，服务需要实现 IProvider 接口；</p><p>同时，由于 ARouter 是分组管理的，所以拦截器和服务又会属于不同的组：拦截器组需要实现 IInterceptorGroup 接口，服务组需要实现 IProviderGroup 组；</p><p>对于跳转来说，也会有分组，跳转组需要实现 IRouteGroup，而所有的跳转组属于一个 root：IRouteRoot</p><h4 id="2-3-3-6-动态生成类"><a href="#2-3-3-6-动态生成类" class="headerlink" title="2.3.3.6 动态生成类"></a>2.3.3.6 动态生成类</h4><p>下面 这些是和动态生成的类相关的：</p><ul><li>动态生成类的类名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">"$$"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROJECT = <span class="string">"ARouter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_LOAD_INTO = <span class="string">"loadInto"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_INJECT = <span class="string">"inject"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_ROOT = PROJECT + SEPARATOR + <span class="string">"Root"</span>; <span class="comment">// ARouter$$Root</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_PROVIDER = PROJECT + SEPARATOR + <span class="string">"Providers"</span>; <span class="comment">// ARouter$$Providers</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_GROUP = PROJECT + SEPARATOR + <span class="string">"Group"</span> + SEPARATOR; <span class="comment">// ARouter$$Group$$</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_INTERCEPTOR = PROJECT + SEPARATOR + <span class="string">"Interceptors"</span>; <span class="comment">// ARouter$$Interceptors</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_OF_AUTOWIRED = SEPARATOR + PROJECT + SEPARATOR + <span class="string">"Autowired"</span>; <span class="comment">//$$ARouter$$Root$$Autowired</span></span><br></pre></td></tr></table></figure><p>动态生成类的类名是通过 “$$” 将关键字拼接起来！</p><ul><li>动态生成类的所属包名；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_FILE = <span class="string">"com.alibaba.android.arouter.routes"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_OF_GENERATE_DOCS = <span class="string">"com.alibaba.android.arouter.docs"</span>;</span><br></pre></td></tr></table></figure><p>ARouter 会通过 javapoet 来动态生成对应的类，我们在分析 processor 的过程中就会看到。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h1><p>本篇文章分析了 arouter-compiler 模块的架构，arouter 内置的三种注解处理器，以及 arouter 注解的处理，动态类的生成。</p><p>好累～</p><p>后续上流程图吧～～对于个人收获也是很大的～～至少会自定义注解～～至少会动态生成代码了～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第二篇 - 注解定义 (arouter-annotation)</title>
    <link href="https://lishuaiqi.top/2019/04/17/ARouter2-arouter-annotations/"/>
    <id>https://lishuaiqi.top/2019/04/17/ARouter2-arouter-annotations/</id>
    <published>2019-04-17T12:46:25.000Z</published>
    <updated>2019-08-09T13:25:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的架构和原理。</p><blockquote><p>这是阿里 ARouter 开源库的地址，大家可以直接访问<br><a href="https://github.com/alibaba/ARouter" target="_blank" rel="noopener">https://github.com/alibaba/ARouter</a></p></blockquote><p>本篇博文主要分析 arouter-annotation 模块；</p><h1 id="1-模块结构"><a href="#1-模块结构" class="headerlink" title="1 模块结构"></a>1 模块结构</h1><p>下面我们来看看 arouter-annotation 的结构；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">src -&gt; main -&gt; java:</span><br><span class="line">|____com</span><br><span class="line">| |____alibaba</span><br><span class="line">| | |____android</span><br><span class="line">| | | |____arouter</span><br><span class="line">| | | | |____facade</span><br><span class="line">| | | | | |____enums</span><br><span class="line">| | | | | | |____RouteType.java</span><br><span class="line">| | | | | | |____TypeKind.java</span><br><span class="line">| | | | | |____annotation</span><br><span class="line">| | | | | | |____Interceptor.java</span><br><span class="line">| | | | | | |____Route.java</span><br><span class="line">| | | | | | |____Param.java</span><br><span class="line">| | | | | | |____Autowired.java</span><br><span class="line">| | | | | |____model</span><br><span class="line">| | | | | | |____TypeWrapper.java</span><br><span class="line">| | | | | | |____RouteMeta.java</span><br></pre></td></tr></table></figure><p>一共有三个 package：</p><ul><li>enums：包含了一些枚举类：</li><li>annotation：包含了一些注解；</li><li>model：包含了一些跳转所需的数据；</li></ul><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h1><h2 id="2-1-enums"><a href="#2-1-enums" class="headerlink" title="2.1 enums"></a>2.1 enums</h2><p>这个 package 包含了一些枚举类：</p><h3 id="2-1-1-RouteType"><a href="#2-1-1-RouteType" class="headerlink" title="2.1.1 RouteType"></a>2.1.1 RouteType</h3><p>枚举类，每一个成员都用于保存 id 和 className 的映射！</p><p>className 包括 android 的 Activity，Service，ContentProvider，Fragment，以及 ARouter 自己的 IProvider 类型！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RouteType &#123;</span><br><span class="line">    ACTIVITY(<span class="number">0</span>, <span class="string">"android.app.Activity"</span> ),</span><br><span class="line">    SERVICE(<span class="number">1</span>, <span class="string">"android.app.Service"</span>),</span><br><span class="line">    PROVIDER(<span class="number">2</span>, <span class="string">"com.alibaba.android.arouter.facade.template.IProvider"</span>),</span><br><span class="line">    CONTENT_PROVIDER(-<span class="number">1</span>, <span class="string">"android.app.ContentProvider"</span>),</span><br><span class="line">    BOARDCAST(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    METHOD(-<span class="number">1</span>, <span class="string">""</span>),</span><br><span class="line">    FRAGMENT(-<span class="number">1</span>, <span class="string">"android.app.Fragment"</span>),</span><br><span class="line">    UNKNOWN(-<span class="number">1</span>, <span class="string">"Unknown route type"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String className;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteType <span class="title">setClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RouteType(<span class="keyword">int</span> id, String className) &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RouteType <span class="title">parse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (RouteType routeType : RouteType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (routeType.getClassName().equals(name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> routeType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，不多说。</p><p>它的作用是，我们可以通过 RouteType 判断判断 @Route 修饰的是类是那种类型；</p><h3 id="2-1-2-TypeKind"><a href="#2-1-2-TypeKind" class="headerlink" title="2.1.2 TypeKind"></a>2.1.2 TypeKind</h3><p>枚举类，每一个枚举成员都用于表示一个类型，包括基本类型，可序列化类型，字符串，对象等等；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeKind &#123;</span><br><span class="line">    <span class="comment">// Base type</span></span><br><span class="line">    BOOLEAN,</span><br><span class="line">    BYTE,</span><br><span class="line">    SHORT,</span><br><span class="line">    INT,</span><br><span class="line">    LONG,</span><br><span class="line">    CHAR,</span><br><span class="line">    FLOAT,</span><br><span class="line">    DOUBLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other type</span></span><br><span class="line">    STRING,</span><br><span class="line">    SERIALIZABLE,</span><br><span class="line">    PARCELABLE,</span><br><span class="line">    OBJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的作用是在设置跳转数据的时候，通过 TypeKind 来判断数据的类型，然后调用 Postcard.withXXX 方法，设置不同的类型；</p><h2 id="2-2-annotation"><a href="#2-2-annotation" class="headerlink" title="2.2 annotation"></a>2.2 annotation</h2><p>这个 package 包含了一些注解类：</p><h3 id="2-2-1-Route"><a href="#2-2-1-Route" class="headerlink" title="2.2.1 Route"></a>2.2.1 Route</h3><p>用于注解 RouteType 指定的那些 type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Route &#123;</span><br><span class="line">    <span class="comment">//【1】用于指定路由跳转的路径，至少包含两级目录；</span></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//【2】用于指定路由跳转的分组，组名必须要使用相同的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">group</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【3】路由跳转的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">//【4】用于指定额外的数据，一共 32 位，每一位都是一个开关；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extras</span><span class="params">()</span> <span class="keyword">default</span> Integer.MIN_VALUE</span>;</span><br><span class="line">    <span class="comment">//【5】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不多说了。</p><h4 id="2-2-1-1-简单使用"><a href="#2-2-1-1-简单使用" class="headerlink" title="2.2.1.1 简单使用"></a>2.2.1.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Autowired"><a href="#2-2-2-Autowired" class="headerlink" title="2.2.2 Autowired"></a>2.2.2 Autowired</h3><p>用于修饰成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【1】变量（属性或服务）的名称</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】是否必须不为 null，如果为 true，应用会 crash 当其为 null 的情况；</span></span><br><span class="line">    <span class="comment">// private 类型的变量不会检查是否为 null；</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-简单使用"><a href="#2-2-2-1-简单使用" class="headerlink" title="2.2.2.1 简单使用"></a>2.2.2.1 简单使用</h4><ul><li><strong>注解服务</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注解 android 组件</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Route(path = &quot;/test/activity&quot;)</span><br><span class="line">public class Test1Activity extends Activity &#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Interceptor"><a href="#2-2-3-Interceptor" class="headerlink" title="2.2.3 Interceptor"></a>2.2.3 Interceptor</h3><p>用于注解拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Interceptor &#123;</span><br><span class="line">    <span class="comment">//【1】拦截器的优先级，ARouter 会根据优先级执行拦截器；</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】拦截器的名称，用于 javadoc；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "Default"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-1-简单使用"><a href="#2-2-3-1-简单使用" class="headerlink" title="2.2.3.1 简单使用"></a>2.2.3.1 简单使用</h4><ul><li><strong>注解拦截器</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Param（DEPRECATED）"><a href="#2-2-4-Param（DEPRECATED）" class="headerlink" title="2.2.4 Param（DEPRECATED）"></a>2.2.4 Param（DEPRECATED）</h3><p>这个注解也是用来修饰成员变量的，但是不推荐使用了，请使用 Autowired！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">    <span class="comment">//【1】属性的名称；</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//【2】属性的描述</span></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> "No desc."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为已经不在推荐使用，不多说了！</p><h2 id="2-3-model"><a href="#2-3-model" class="headerlink" title="2.3 model"></a>2.3 model</h2><p>这个 package 下主要保存了一些数据类，这些类保存了跳转需要的数据，已经目前对象的类型：</p><h3 id="2-3-1-RouteMeta"><a href="#2-3-1-RouteMeta" class="headerlink" title="2.3.1 RouteMeta"></a>2.3.1 RouteMeta</h3><p>用于保存路由跳转的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteMeta</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RouteType type;         <span class="comment">//【1】路由的类型，枚举类实例；</span></span><br><span class="line">    <span class="keyword">private</span> Element rawType;        <span class="comment">//【2】@Route 注解修饰的元素；</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; destination;   <span class="comment">//【3】路由跳转的目标类</span></span><br><span class="line">    <span class="keyword">private</span> String path;            <span class="comment">//【4】路由跳转的路径 path</span></span><br><span class="line">    <span class="keyword">private</span> String group;           <span class="comment">//【5】路由跳转的组 group</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority = -<span class="number">1</span>;      <span class="comment">//【6】路由跳转的优先级，值越小，优先级越高；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> extra;              <span class="comment">//【7】路由跳转携带的额外数据，23 位开关；</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; paramsType;  <span class="comment">//【8】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 属性类型对应的枚举序号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//【9】路由跳转的名称；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Autowired&gt; injectConfig;  <span class="comment">//【10】(Autowired 注解的属性) 保存 fieldName/Autowired.name --&gt; 对应的 Autowired 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RouteMeta</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ... ... ... ...<span class="comment">// 这里我们先省略内部方法，后续分析！ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以看到，RouteMeta 内部的数据很多事 compiler 解析 Route、Autowired 注解获得的！</p><h3 id="2-3-2-TypeWrapper"><a href="#2-3-2-TypeWrapper" class="headerlink" title="2.3.2 TypeWrapper"></a>2.3.2 TypeWrapper<t></t></h3><p>用于保存路由跳转的目标对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//【1】用于保存泛型 T；</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Type type;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TypeWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【2】调用 getClass() 获得当前类的 class 对象；</span></span><br><span class="line">        <span class="comment">//【3】然后再调用 getGenericSuperclass() 获得带有泛型的父类；</span></span><br><span class="line">        Type superClass = getClass().getGenericSuperclass();</span><br><span class="line">        <span class="comment">//【4】将 superClass 强转为 ParameterizedType 类型；</span></span><br><span class="line">        <span class="comment">//【5】getActualTypeArguments() 返回表示此类型实际类型参数的 Type 对象的数组；</span></span><br><span class="line">        <span class="comment">//【6】[0] 就是这个数组中第一个了，简而言之就是获得超类的泛型参数的实际类型</span></span><br><span class="line">        type = ((ParameterizedType) superClass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeWrapper<t> 是一个泛型类，泛型 T 表示目标对象类型！</t></p><p>后面我们再具体分析。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇文章分析了 ARouter 中的 arouter-annotation 模块，其内部定义了 ARouter 必须的注解类，数据类，已经枚举类。</p><p>下篇文章将分析 arouter-compiler 模块，探寻在 App 编译期间，Gradle 事如何使用 arouter-compiler  对注解进行解析，和动态生成中间类的！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的架构和原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是阿里 ARouter 开源库的地址，大家可以直接访问&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
  <entry>
    <title>ARouter 第一篇 - 基本使用</title>
    <link href="https://lishuaiqi.top/2019/04/13/ARouter1-baseUsages/"/>
    <id>https://lishuaiqi.top/2019/04/13/ARouter1-baseUsages/</id>
    <published>2019-04-13T12:46:25.000Z</published>
    <updated>2019-08-01T13:32:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章主要分析 ARouter 框架的原理。</p><p><strong>这篇文章</strong> 里面的一些内容来自：</p><blockquote><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/blob/master/README_CN.md</a></p></blockquote><p>官网对其使用已经总结的很好了，本篇博文在其基础上整理了下～～</p><h1 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1 简单介绍"></a>1 简单介绍</h1><p>对于 ARouter 大家只要做过模块化开发，那么就一定有所了解，ARouter 是阿里巴巴开源的一款路由框架，用于解决模块化开发中的模块依赖。</p><p><br></p><h2 id="2-1-主要模块"><a href="#2-1-主要模块" class="headerlink" title="2.1 主要模块"></a>2.1 主要模块</h2><p>官方提供了下面的四个插件模块：</p><ul><li>arouter-api：对外提供功能相关的 Api；</li><li>arouter-compiler：用于解析注解，生成代码；</li><li>arouter-register：用于 App 加固时的自动注册；</li><li>arouter-idea-plugin：Idea 插件，用于关联路径和目标类；</li></ul><p><br></p><h2 id="2-2-功能介绍"><a href="#2-2-功能介绍" class="headerlink" title="2.2 功能介绍"></a>2.2 功能介绍</h2><p>官方文档中讲到 ARouter 支持如下的功能：</p><ol><li><strong>支持直接解析标准 URL 进行跳转，并自动注入参数到目标页面中；</strong></li><li><strong>支持多模块工程使用；</strong></li><li><strong>支持添加多个拦截器，自定义拦截顺序；</strong></li><li><strong>支持依赖注入，可单独作为依赖注入框架使用；</strong></li><li><strong>支持 InstantRun；</strong></li><li><strong>支持 MultiDex；</strong> (Google 方案)</li><li>映射关系按组分类、多级管理，按需初始化；</li><li><strong>支持用户指定全局降级与局部降级策略</strong>；</li><li>页面、拦截器、服务等组件均自动注册到框架；</li><li><strong>支持多种方式配置转场动画</strong>；</li><li><strong>支持获取 Fragment</strong>；</li><li><strong>完全支持 Kotlin 以及混编</strong>；</li><li><strong>支持第三方 App 加固；</strong>(使用 arouter-register 实现自动注册)</li><li><strong>支持生成路由文档；</strong></li><li><strong>提供 IDE 插件便捷的关联路径和目标类；</strong></li></ol><p><br></p><ul><li>当然，我们后面通过源码分析；</li></ul><h1 id="2-ARouter-使用（官网整理）"><a href="#2-ARouter-使用（官网整理）" class="headerlink" title="2 ARouter 使用（官网整理）"></a>2 ARouter 使用（官网整理）</h1><p>以下内容来自对 <a href="https://github.com/alibaba/ARouter/edit/master/README_CN.md" target="_blank" rel="noopener">https://github.com/alibaba/ARouter/edit/master/README_CN.md</a> 的整理：</p><h2 id="2-1-Gradle-配置"><a href="#2-1-Gradle-配置" class="headerlink" title="2.1 Gradle 配置"></a>2.1 Gradle 配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [AROUTER_MODULE_NAME: project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.alibaba:arouter-api:x.x.x'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.alibaba:arouter-compiler:x.x.x'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个库均要使用最新版本，防止兼容问题发生；</p><h2 id="2-2-基本使用"><a href="#2-2-基本使用" class="headerlink" title="2.2 基本使用"></a>2.2 基本使用</h2><h3 id="2-2-1-添加注解"><a href="#2-2-1-添加注解" class="headerlink" title="2.2.1 添加注解"></a>2.2.1 添加注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourActivity</span> <span class="title">extend</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-初始化操作"><a href="#2-2-2-初始化操作" class="headerlink" title="2.2.2 初始化操作"></a>2.2.2 初始化操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class="line"><span class="keyword">if</span> (isDebug()) &#123;      </span><br><span class="line">    <span class="comment">//【2】打印日志</span></span><br><span class="line">    ARouter.openLog();</span><br><span class="line">    <span class="comment">//【3】开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！</span></span><br><span class="line">    <span class="comment">// 线上版本需要关闭,否则有安全风险)</span></span><br><span class="line">    ARouter.openDebug();</span><br><span class="line">&#125;</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在Application中初始化</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-路由跳转"><a href="#2-2-3-路由跳转" class="headerlink" title="2.2.3 路由跳转"></a>2.2.3 路由跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【1】应用内简单的跳转(通过URL跳转在'进阶用法'中)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/activity"</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">//【3】跳转并携带参数</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>)</span><br><span class="line">            .withLong(<span class="string">"key1"</span>, <span class="number">666L</span>)</span><br><span class="line">            .withString(<span class="string">"key3"</span>, <span class="string">"888"</span>)</span><br><span class="line">            .withObject(<span class="string">"key4"</span>, <span class="keyword">new</span> Test(<span class="string">"Jack"</span>, <span class="string">"Rose"</span>))</span><br><span class="line">            .navigation();</span><br></pre></td></tr></table></figure><h2 id="2-3-进阶使用"><a href="#2-3-进阶使用" class="headerlink" title="2.3 进阶使用"></a>2.3 进阶使用</h2><h3 id="2-3-1-通过-URL-跳转"><a href="#2-3-1-通过-URL-跳转" class="headerlink" title="2.3.1 通过 URL 跳转"></a>2.3.1 通过 URL 跳转</h3><p>我们除了可以使用 @Route 方式指定 path 来跳转，我们还可以通过 url 跳转：</p><p>当通过 URL 跳转时，URL 中不能传递 Parcelable 类型数据，通过 ARouter api 才能传递 Parcelable 对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 Activity 用于监听 Schame 事件, </span></span><br><span class="line"><span class="comment">// 之后直接把 url 传递给 ARouter 即可；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchameFilterActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent().getData();</span><br><span class="line">    ARouter.getInstance().build(uri).navigation();</span><br><span class="line">    finish();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明书 AndroidManifest.xml 中的配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".activity.SchameFilterActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Schame --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:host</span>=<span class="string">"m.aliyun.com"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scheme</span>=<span class="string">"arouter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-自动解析参数"><a href="#2-3-2-自动解析参数" class="headerlink" title="2.3.2 自动解析参数"></a>2.3.2 自动解析参数</h3><p>自动解析参数。</p><p>为每一个参数声明一个字段，并使用 @Autowired 标注，我们传递的值将会自动赋值给所属变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【1】通过 name 来映射 URL 中的不同参数</span></span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"girl"</span>) </span><br><span class="line">    <span class="keyword">boolean</span> boy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【2】支持解析自定义对象，URL中使用 json 传递</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestObj obj;      </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//【3】使用 withObject 传递 List 和 Map 的实现了</span></span><br><span class="line">    <span class="comment">// Serializable 接口的实现类(ArrayList/HashMap)</span></span><br><span class="line">    <span class="comment">// 的时候，接收该对象的地方不能标注具体的实现类类型</span></span><br><span class="line">    <span class="comment">// 应仅标注为 List 或 Map，否则会影响序列化中类型</span></span><br><span class="line">    <span class="comment">// 的判断, 其他类似情况需要同样处理        </span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestObj&gt; list;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Map&lt;String, List&lt;TestObj&gt;&gt; map;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//【4】这里很关键，执行 ativity 的注入；</span></span><br><span class="line">    ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要传递自定义对象（比如上面的 TestObj），新建一个类，实现 SerializationService, 并使用 @Route 注解标注！</p><p>这个类的作用是自定义对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title">SerializationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">object2Json</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是 JSON 序列化。</p><h3 id="2-3-3-跳转拦截器"><a href="#2-3-3-跳转拦截器" class="headerlink" title="2.3.3 跳转拦截器"></a>2.3.3 跳转拦截器</h3><p>拦截器用于拦截跳转过程，面向切面编程，比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查！</p><p>拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Interceptor</span>(priority = <span class="number">8</span>, name = <span class="string">"测试用拦截器"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">IInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 处理完成，交还控制权</span></span><br><span class="line">        callback.onContinue(postcard); </span><br><span class="line">        <span class="comment">// 觉得有问题，中断路由流程，以上两种至少需要调用其中一种，否则不会继续路由</span></span><br><span class="line">        <span class="comment">// callback.onInterrupt(new RuntimeException("我觉得有点异常")); </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【1】拦截器的初始化，会在 sdk 初始化的时候调用该方法，仅会调用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说的初始化，就是 ARouter.init 方法；</p><h3 id="2-3-4-处理跳转结果"><a href="#2-3-4-处理跳转结果" class="headerlink" title="2.3.4 处理跳转结果"></a>2.3.4 处理跳转结果</h3><p>navigation 方法支持传入一个 <strong>NavigationCallback 回调</strong>，处理跳转结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ARouter.getInstance().build(<span class="string">"/test/1"</span>).navigation(<span class="keyword">this</span>, <span class="keyword">new</span> NavigationCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFound</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-5-自定义全局降级策略"><a href="#2-3-5-自定义全局降级策略" class="headerlink" title="2.3.5 自定义全局降级策略"></a>2.3.5 自定义全局降级策略</h3><p>自定义类，实现 DegradeService 接口，并加上一个 Path 内容任意的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegradeServiceImpl</span> <span class="keyword">implements</span> <span class="title">DegradeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLost</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-6-为目标页面声明更多信息"><a href="#2-3-6-为目标页面声明更多信息" class="headerlink" title="2.3.6 为目标页面声明更多信息"></a>2.3.6 为目标页面声明更多信息</h3><p>@Route 还有一个 extras 属性，用于设置一些额外的属性，他是一个 int 值，有 32 位，可以配置 32 个开关；</p><p>我们可以通过设置指定的开关位，然后在拦截器中可以拿到这个标记进行业务逻辑判断！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/test/activity"</span>, extras = Consts.XXXX)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    ... ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-7-依赖注入解耦"><a href="#2-3-7-依赖注入解耦" class="headerlink" title="2.3.7 依赖注入解耦"></a>2.3.7 依赖注入解耦</h3><p>ARouter 通过定义统一的访问接口来实现解耦 module 依赖；</p><p>核心接口：IProvider！</p><h4 id="2-3-7-1-暴露服务"><a href="#2-3-7-1-暴露服务" class="headerlink" title="2.3.7.1 暴露服务"></a>2.3.7.1 暴露服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明接口,其他组件通过接口来调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">IProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】module 间通信接口； </span></span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【2】实现接口，也是我们实际要暴漏的服务；</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/yourservicegroupname/hello"</span>, name = <span class="string">"测试服务"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello, "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴漏的服务，需要通过 @Route 注解去修饰！</p><h4 id="2-3-7-2-访问服务"><a href="#2-3-7-2-访问服务" class="headerlink" title="2.3.7.2 访问服务"></a>2.3.7.2 访问服务</h4><p>当我们暴漏了服务后，需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//【1】依赖注入的方式</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    <span class="meta">@Autowired</span>(name = <span class="string">"/yourservicegroupname/hello"</span>)</span><br><span class="line">    HelloService helloService2;</span><br><span class="line">    <span class="comment">//【2】依赖查找的方式</span></span><br><span class="line">    HelloService helloService3;</span><br><span class="line">    HelloService helloService4;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//【3】依赖注入的方式；</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问服务的方式有下面两种方式：</p><ul><li><strong>使用依赖注入的方式发现服务</strong></li></ul><p>这也是推荐的方式，通过注解标注字段, 即可使用，无需主动获取</p><p>Autowired 注解标注 name 之后，将会使用 <strong>byName</strong> 的方式注入对应的字段；不设置 name 属性，会默认使用<strong>byType</strong> 的方式发现服务(当同一接口有多个实现的时候，必须使用 byName 的方式发现服务)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helloService.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService2.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>使用依赖查找的方式发现服务</strong></li></ul><p>使用依赖查找的方式发现服务，主动去发现服务并使用，也有 byName 和 byType 两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helloService3 = ARouter.getInstance().navigation(HelloService.class);</span><br><span class="line">helloService4 = (HelloService) ARouter.getInstance().build(<span class="string">"/yourservicegroupname/hello"</span>).navigation();</span><br><span class="line">helloService3.sayHello(<span class="string">"Vergil"</span>);</span><br><span class="line">helloService4.sayHello(<span class="string">"Vergil"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3-8-预处理服务"><a href="#2-3-8-预处理服务" class="headerlink" title="2.3.8 预处理服务"></a>2.3.8 预处理服务</h3><p>预处理服务和拦截器的概念很类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route</span>(path = <span class="string">"/xxx/xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PretreatmentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPretreatment</span><span class="params">(Context context, Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-源码结构"><a href="#3-源码结构" class="headerlink" title="3 源码结构"></a>3 源码结构</h1><p>我们来看下 ARouter 的源码结构，下面列出关键的目录：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-ARouter-master.iml      </span><br><span class="line">|-README_CN.md            </span><br><span class="line">|-arouter-api             </span><br><span class="line">|-arouter-idea-plugin</span><br><span class="line">|-arouter-compiler</span><br><span class="line">|-arouter-annotation</span><br><span class="line">|-arouter-gradle-plugin</span><br><span class="line">|- ... ... ...</span><br></pre></td></tr></table></figure><p>这里分别解释下每个 module 的作用：</p><ul><li><strong>arouter-annotation</strong>：<ul><li>定义了 ARouter 使用到的所有的注解；</li></ul></li><li><strong>arouter-api</strong>：<ul><li><strong>对应 “arouter-api” 插件</strong>，对外提供功能相关的 Api；</li></ul></li><li><strong>arouter-compiler</strong>：<ul><li><strong>对应 “arouter-compiler” 插件</strong>，用于解析注解，生成代码；</li></ul></li><li><strong>arouter-gradle-plugin</strong>：<ul><li><strong>对应 “arouter-register” 插件</strong>，用于 App 加固时的自动注册；</li></ul></li><li><strong>arouter-idea-plugin</strong>：<ul><li><strong>对应 “arouter-idea-plugin” 插件</strong>，用于关联路径和目标类；</li></ul></li></ul><h2 id="3-1-Module-依赖关系"><a href="#3-1-Module-依赖关系" class="headerlink" title="3.1 Module 依赖关系"></a>3.1 Module 依赖关系</h2><p>下图我们来看看这几个 module 的依赖关系：</p><p><img src="leanote://file/getImage?fileId=5d3ec537ab6441734a002e54" alt=""></p><p>依赖关系还是很简单的，毕竟只有几个 module。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>本篇博文整理了下 ARouter 官网的一些内容，总结了 ARouter 的基本使用和进阶使用，接下来，会通过分析每个 module 的源码，来进一步分析 ARouter 的原理！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列文章主要分析 ARouter 框架的原理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章&lt;/strong&gt; 里面的一些内容来自：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/ARouter/blob/mas
      
    
    </summary>
    
      <category term="开源库源码分析" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="ARouter" scheme="https://lishuaiqi.top/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ARouter/"/>
    
    
      <category term="ARouter" scheme="https://lishuaiqi.top/tags/ARouter/"/>
    
  </entry>
  
</feed>
